{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { deferRender } from \"../../core/utils/common\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { EDIT_MODE_BATCH, EDIT_MODE_CELL, TARGET_COMPONENT_NAME } from \"./ui.grid_core.editing_constants\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar ROW_REMOVED = \"dx-row-removed\";\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\nexport default {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function init() {\n          var _this = this;\n\n          var needCreateHandlers = !this._saveEditorHandler;\n          this.callBase.apply(this, arguments);\n\n          if (needCreateHandlers) {\n            var $pointerDownTarget;\n            var isResizing;\n\n            this._pointerUpEditorHandler = function () {\n              var _this$getController;\n\n              isResizing = null === (_this$getController = _this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing();\n            };\n\n            this._pointerDownEditorHandler = function (e) {\n              return $pointerDownTarget = $(e.target);\n            };\n\n            this._saveEditorHandler = this.createAction(function (e) {\n              var event = e.event;\n              var $target = $(event.target);\n              var targetComponent = event[TARGET_COMPONENT_NAME];\n\n              if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\n                return;\n              }\n\n              function checkEditorPopup($element) {\n                return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n              }\n\n              if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\n                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n                var isDomElement = !!$target.closest(getWindow().document).length;\n                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\n                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\n                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n                var isCellEditMode = this.isCellEditMode();\n\n                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isDomElement || isAnotherComponent)) {\n                  this._closeEditItem.bind(this)($target);\n                }\n              }\n            });\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n          }\n        },\n        isCellEditMode: function isCellEditMode() {\n          return this.option(\"editing.mode\") === EDIT_MODE_CELL;\n        },\n        isBatchEditMode: function isBatchEditMode() {\n          return this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n        },\n        isCellOrBatchEditMode: function isCellOrBatchEditMode() {\n          return this.isCellEditMode() || this.isBatchEditMode();\n        },\n        _needToCloseEditableCell: function _needToCloseEditableCell($targetElement) {\n          var $element = this.component.$element();\n          var result = this.isEditing();\n          var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n\n          if (isCurrentComponentElement) {\n            var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n\n            if (isDataRow) {\n              var rowsView = this.getView(\"rowsView\");\n              var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\n              var rowIndex = rowsView.getRowIndex($targetCell.parent());\n              var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\n\n              var visibleColumns = this._columnsController.getVisibleColumns();\n\n              var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n              result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n            }\n          }\n\n          return result || this.callBase.apply(this, arguments);\n        },\n        _closeEditItem: function _closeEditItem($targetElement) {\n          if (this._needToCloseEditableCell($targetElement)) {\n            this.closeEditCell();\n          }\n        },\n        _focusEditorIfNeed: function _focusEditorIfNeed() {\n          var _this2 = this;\n\n          if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\n            var _this$_rowsView;\n\n            var editColumnIndex = this._getVisibleEditColumnIndex();\n\n            var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n            if ($cell && !$cell.find(\":focus\").length) {\n              this._focusEditingCell(function () {\n                _this2._editCellInProgress = false;\n              }, $cell, true);\n            } else {\n              this._editCellInProgress = false;\n            }\n\n            this._needFocusEditor = false;\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        isEditing: function isEditing() {\n          if (this.isCellOrBatchEditMode()) {\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n            var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\n            return isEditRowKeyDefined && isEditColumnNameDefined;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _handleEditColumnNameChange: function _handleEditColumnNameChange(args) {\n          var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\n\n          if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\n            var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\n\n            var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\n\n            this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);\n          }\n        },\n        _addRow: function _addRow(parentKey, deferred) {\n          var _this3 = this;\n\n          if (this.isCellEditMode() && this.hasChanges()) {\n            var _deferred = new Deferred();\n\n            this.saveEditData().done(function () {\n              if (!_this3.hasChanges()) {\n                _this3.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject);\n              } else {\n                _deferred.reject(\"cancel\");\n              }\n            });\n            return _deferred.promise();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        editCell: function editCell(rowIndex, columnIndex) {\n          return this._editCell({\n            rowIndex: rowIndex,\n            columnIndex: columnIndex\n          });\n        },\n        _editCell: function _editCell(options) {\n          var _this4 = this;\n\n          var d = new Deferred();\n          var coreResult;\n          this.executeOperation(d, function () {\n            coreResult = _this4._editCellCore(options);\n            when(coreResult).done(d.resolve).fail(d.reject);\n          });\n          return void 0 !== coreResult ? coreResult : d.promise();\n        },\n        _editCellCore: function _editCellCore(options) {\n          var _this5 = this;\n\n          var dataController = this._dataController;\n          var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\n\n          var _this$_getNormalizedE = this._getNormalizedEditCellOptions(options),\n              columnIndex = _this$_getNormalizedE.columnIndex,\n              rowIndex = _this$_getNormalizedE.rowIndex,\n              column = _this$_getNormalizedE.column,\n              item = _this$_getNormalizedE.item;\n\n          var params = {\n            data: null === item || void 0 === item ? void 0 : item.data,\n            cancel: false,\n            column: column\n          };\n\n          if (void 0 === item.key) {\n            this._dataController.fireError(\"E1043\");\n\n            return;\n          }\n\n          if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\n            if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\n              return true;\n            }\n\n            var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n            return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(function (cancel) {\n              if (cancel) {\n                return;\n              }\n\n              if (!_this5._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n                _this5._processCanceledEditingCell();\n              }\n            });\n          }\n\n          return false;\n        },\n        _beforeEditCell: function _beforeEditCell(rowIndex, columnIndex, item) {\n          var _this6 = this;\n\n          if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\n            var d = new Deferred();\n            this.saveEditData().always(function () {\n              d.resolve(_this6.hasChanges());\n            });\n            return d;\n          }\n        },\n        publicMethods: function publicMethods() {\n          var publicMethods = this.callBase.apply(this, arguments);\n          return publicMethods.concat([\"editCell\", \"closeEditCell\"]);\n        },\n        _getNormalizedEditCellOptions: function _getNormalizedEditCellOptions(_ref) {\n          var oldColumnIndex = _ref.oldColumnIndex,\n              oldRowIndex = _ref.oldRowIndex,\n              columnIndex = _ref.columnIndex,\n              rowIndex = _ref.rowIndex;\n          var columnsController = this._columnsController;\n          var visibleColumns = columnsController.getVisibleColumns();\n\n          var items = this._dataController.items();\n\n          var item = items[rowIndex];\n          var oldColumn;\n\n          if (isDefined(oldColumnIndex)) {\n            oldColumn = visibleColumns[oldColumnIndex];\n          } else {\n            oldColumn = this._getEditColumn();\n          }\n\n          if (!isDefined(oldRowIndex)) {\n            oldRowIndex = this._getVisibleEditRowIndex();\n          }\n\n          if (isString(columnIndex)) {\n            columnIndex = columnsController.columnOption(columnIndex, \"index\");\n            columnIndex = columnsController.getVisibleIndex(columnIndex);\n          }\n\n          var column = visibleColumns[columnIndex];\n          return {\n            oldColumn: oldColumn,\n            columnIndex: columnIndex,\n            oldRowIndex: oldRowIndex,\n            rowIndex: rowIndex,\n            column: column,\n            item: item\n          };\n        },\n        _prepareEditCell: function _prepareEditCell(params, item, editColumnIndex, editRowIndex) {\n          if (!item.isNewRow) {\n            params.key = item.key;\n          }\n\n          if (this._isEditingStart(params)) {\n            return false;\n          }\n\n          this._pageIndex = this._dataController.pageIndex();\n\n          this._setEditRowKey(item.key);\n\n          this._setEditColumnNameByIndex(editColumnIndex);\n\n          if (!params.column.showEditorAlways) {\n            this._addInternalData({\n              key: item.key,\n              oldData: item.data\n            });\n          }\n\n          return true;\n        },\n        closeEditCell: function closeEditCell(isError, withoutSaveEditData) {\n          var _this7 = this;\n\n          var result = when();\n\n          var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n          if (this.isCellOrBatchEditMode()) {\n            var deferred = new Deferred();\n            result = new Deferred();\n            this.executeOperation(deferred, function () {\n              _this7._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve);\n            });\n          }\n\n          return result.promise();\n        },\n        _closeEditCellCore: function _closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData) {\n          var _this8 = this;\n\n          var dataController = this._dataController;\n          var deferred = new Deferred();\n          var promise = deferred.promise();\n\n          if (this.isCellEditMode() && this.hasChanges()) {\n            if (!withoutSaveEditData) {\n              this.saveEditData().done(function (error) {\n                if (!_this8.hasChanges()) {\n                  _this8.closeEditCell(!!error).always(deferred.resolve);\n\n                  return;\n                }\n\n                deferred.resolve();\n              });\n              return promise;\n            }\n          } else if (oldEditRowIndex >= 0) {\n            var rowIndices = [oldEditRowIndex];\n\n            this._resetEditRowKey();\n\n            this._resetEditColumnName();\n\n            this._beforeCloseEditCellInBatchMode(rowIndices);\n\n            if (!isError) {\n              dataController.updateItems({\n                changeType: \"update\",\n                rowIndices: rowIndices\n              });\n            }\n          }\n\n          deferred.resolve();\n          return promise;\n        },\n        _resetModifiedClassCells: function _resetModifiedClassCells(changes) {\n          var _this9 = this;\n\n          if (this.isBatchEditMode()) {\n            var columnsCount = this._columnsController.getVisibleColumns().length;\n\n            changes.forEach(function (_ref2) {\n              var key = _ref2.key;\n\n              var rowIndex = _this9._dataController.getRowIndexByKey(key);\n\n              if (-1 !== rowIndex) {\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                  _this9._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS);\n                }\n              }\n            });\n          }\n        },\n        _prepareChange: function _prepareChange(options, value, text) {\n          var $cellElement = $(options.cellElement);\n\n          if (this.isBatchEditMode() && void 0 !== options.key) {\n            this._applyModified($cellElement, options);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _cancelSaving: function _cancelSaving() {\n          var dataController = this._dataController;\n\n          if (this.isCellOrBatchEditMode()) {\n            if (this.isBatchEditMode()) {\n              this._resetEditIndices();\n            }\n\n            dataController.updateItems();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        optionChanged: function optionChanged(args) {\n          var fullName = args.fullName;\n\n          if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\n            this._handleEditColumnNameChange(args);\n\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        },\n        _editCellFromOptionChanged: function _editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex) {\n          var _this10 = this;\n\n          var columns = this._columnsController.getVisibleColumns();\n\n          if (columnIndex > -1) {\n            deferRender(function () {\n              _this10._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex);\n            });\n          }\n        },\n        _handleEditRowKeyChange: function _handleEditRowKeyChange(args) {\n          if (this.isCellOrBatchEditMode()) {\n            var columnIndex = this._getVisibleEditColumnIndex();\n\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n            if (isDefined(args.value) && args.value !== args.previousValue) {\n              var _this$_editCellFromOp;\n\n              null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex);\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        deleteRow: function deleteRow(rowIndex) {\n          var _this11 = this;\n\n          if (this.isCellEditMode() && this.isEditing()) {\n            var isNewRow = this._dataController.items()[rowIndex].isNewRow;\n\n            var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n            this.closeEditCell(null, isNewRow).always(function () {\n              rowIndex = _this11._dataController.getRowIndexByKey(rowKey);\n\n              _this11._checkAndDeleteRow(rowIndex);\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _checkAndDeleteRow: function _checkAndDeleteRow(rowIndex) {\n          if (this.isBatchEditMode()) {\n            this._deleteRowCore(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _refreshCore: function _refreshCore(isPageChanged) {\n          var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n\n          if (this.isCellOrBatchEditMode()) {\n            if (needResetIndexes) {\n              this._resetEditColumnName();\n\n              this._resetEditRowKey();\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _allowRowAdding: function _allowRowAdding(params) {\n          if (this.isBatchEditMode()) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _afterDeleteRow: function _afterDeleteRow(rowIndex, oldEditRowIndex) {\n          var dataController = this._dataController;\n\n          if (this.isBatchEditMode()) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [oldEditRowIndex, rowIndex]\n            });\n            return new Deferred().resolve();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\n          if (this.isCellOrBatchEditMode()) {\n            this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n          if (this.isCellOrBatchEditMode()) {\n            var isBatchMode = this.isBatchEditMode();\n\n            switch (button.name) {\n              case \"save\":\n              case \"cancel\":\n              case \"edit\":\n                return false;\n\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\n\n              case \"undelete\":\n                return isBatchMode && this.allowDeleting(options) && options.row.removed;\n\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isRowDeleteAllowed: function _isRowDeleteAllowed() {\n          var callBase = this.callBase.apply(this, arguments);\n          return callBase || this.isBatchEditMode();\n        },\n        _beforeEndSaving: function _beforeEndSaving(changes) {\n          if (this.isCellEditMode()) {\n            var _changes$;\n\n            if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\n              this.callBase.apply(this, arguments);\n            }\n          } else {\n            if (this.isBatchEditMode()) {\n              this._resetModifiedClassCells(changes);\n            }\n\n            this.callBase.apply(this, arguments);\n          }\n        },\n        prepareEditButtons: function prepareEditButtons(headerPanel) {\n          var editingOptions = this.option(\"editing\") || {};\n          var buttonItems = this.callBase.apply(this, arguments);\n\n          if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22));\n          }\n\n          return buttonItems;\n        },\n        _applyChange: function _applyChange(options, params, forceUpdateRow) {\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n          var showEditorAlways = options.column.showEditorAlways;\n          var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n          var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\n\n          if (focusPreviousEditingCell) {\n            this._focusEditingCell();\n\n            this._updateEditRow(options.row, true, isCustomSetCellValue);\n\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _applyChangeCore: function _applyChangeCore(options, forceUpdateRow) {\n          var showEditorAlways = options.column.showEditorAlways;\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n\n          if (showEditorAlways && !forceUpdateRow) {\n            if (isUpdateInCellMode) {\n              this._setEditRowKey(options.row.key, true);\n\n              this._setEditColumnNameByIndex(options.columnIndex, true);\n\n              return this.saveEditData();\n            } else if (this.isBatchEditMode()) {\n              forceUpdateRow = this._needUpdateRow(options.column);\n              return this.callBase(options, forceUpdateRow);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _processDataItemCore: function _processDataItemCore(item, _ref3) {\n          var data = _ref3.data,\n              type = _ref3.type;\n\n          if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            item.data = createObjectWithChanges(item.data, data);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _processRemoveCore: function _processRemoveCore(changes, editIndex, processIfBatch) {\n          if (this.isBatchEditMode() && !processIfBatch) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _processRemoveIfError: function _processRemoveIfError() {\n          if (this.isBatchEditMode()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createTable: function _createTable() {\n          var $table = this.callBase.apply(this, arguments);\n          var editingController = this._editingController;\n\n          if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\n            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(function () {\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isRowRemoved = !!row.removed;\n\n            if (editingController.isBatchEditMode()) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            }\n          }\n\n          return $row;\n        }\n      },\n      headerPanel: {\n        isVisible: function isVisible() {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js"],"names":["$","domAdapter","getWindow","eventsEngine","isDefined","isString","name","clickEventName","pointerEvents","addNamespace","holdEvent","when","Deferred","deferRender","createObjectWithChanges","EDIT_MODE_BATCH","EDIT_MODE_CELL","TARGET_COMPONENT_NAME","FOCUS_OVERLAY_CLASS","ADD_ROW_BUTTON_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","EDITOR_CELL_CLASS","ROW_CLASS","CELL_MODIFIED_CLASS","DATA_ROW_CLASS","ROW_REMOVED","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","DATA_EDIT_DATA_REMOVE_TYPE","extenders","controllers","editing","init","needCreateHandlers","_saveEditorHandler","callBase","apply","arguments","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_this$getController","getController","_pointerDownEditorHandler","e","target","createAction","event","$target","targetComponent","is","checkEditorPopup","$element","closest","concat","length","isCellOrBatchEditMode","_editCellInProgress","isEditorPopup","isDomElement","document","isAnotherComponent","_disposed","component","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","isEditing","_closeEditItem","bind","on","getDocument","up","down","option","isBatchEditMode","_needToCloseEditableCell","$targetElement","result","isCurrentComponentElement","isDataRow","rowsView","getView","$targetCell","rowIndex","getRowIndex","parent","columnIndex","getCellElements","index","visibleColumns","_columnsController","getVisibleColumns","allowEditing","isEditCell","closeEditCell","_focusEditorIfNeed","_needFocusEditor","_this$_rowsView","editColumnIndex","_getVisibleEditColumnIndex","$cell","_rowsView","_getCellElement","_getVisibleEditRowIndex","find","_focusEditingCell","isEditRowKeyDefined","isEditColumnNameDefined","_handleEditColumnNameChange","args","oldRowIndex","previousValue","value","getVisibleColumnIndex","oldColumnIndex","_editCellFromOptionChanged","_addRow","parentKey","deferred","hasChanges","_deferred","saveEditData","done","addRow","resolve","fail","reject","promise","editCell","_editCell","options","d","coreResult","executeOperation","_editCellCore","dataController","_dataController","isEditByOptionChanged","_getNormalizedEditCellOptions","column","item","params","data","cancel","key","fireError","rowType","removed","editRowIndex","getRowIndexOffset","_beforeEditCell","_prepareEditCell","_processCanceledEditingCell","isNewRow","always","publicMethods","_ref","columnsController","items","oldColumn","_getEditColumn","columnOption","getVisibleIndex","_isEditingStart","_pageIndex","pageIndex","_setEditRowKey","_setEditColumnNameByIndex","showEditorAlways","_addInternalData","oldData","isError","withoutSaveEditData","oldEditRowIndex","_closeEditCellCore","error","rowIndices","_resetEditRowKey","_resetEditColumnName","_beforeCloseEditCellInBatchMode","updateItems","changeType","_resetModifiedClassCells","changes","columnsCount","forEach","_ref2","getRowIndexByKey","removeClass","_prepareChange","text","$cellElement","cellElement","_applyModified","_cancelSaving","_resetEditIndices","optionChanged","fullName","handled","columns","_repaintEditCell","_handleEditRowKeyChange","oldRowIndexCorrection","_getEditRowIndexCorrection","_this$_editCellFromOp","call","deleteRow","rowKey","getKeyByRowIndex","_checkAndDeleteRow","_deleteRowCore","_refreshCore","isPageChanged","needResetIndexes","_allowRowAdding","_afterDeleteRow","_updateEditRow","row","forceUpdateRow","isCustomSetCellValue","_updateRowImmediately","_isDefaultButtonVisible","button","isBatchMode","allowDeleting","_isRowDeleteAllowed","_beforeEndSaving","_changes$","type","prepareEditButtons","headerPanel","editingOptions","buttonItems","allowUpdating","allowAdding","push","prepareButtonItem","_applyChange","isUpdateInCellMode","setCellValue","defaultSetCellValue","focusPreviousEditingCell","hasEditData","_applyChangeCore","_needUpdateRow","_processDataItemCore","_ref3","_processRemoveCore","editIndex","processIfBatch","_processRemoveIfError","views","_createTable","$table","editingController","_editingController","_createRow","$row","isRowRemoved","addClass","isVisible","mode"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    deferRender\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    EDIT_MODE_BATCH,\r\n    EDIT_MODE_CELL,\r\n    TARGET_COMPONENT_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar ROW_REMOVED = \"dx-row-removed\";\r\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\r\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\r\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nexport default {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                init: function() {\r\n                    var needCreateHandlers = !this._saveEditorHandler;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (needCreateHandlers) {\r\n                        var $pointerDownTarget;\r\n                        var isResizing;\r\n                        this._pointerUpEditorHandler = () => {\r\n                            var _this$getController;\r\n                            isResizing = null === (_this$getController = this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing()\r\n                        };\r\n                        this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\r\n                        this._saveEditorHandler = this.createAction((function(e) {\r\n                            var event = e.event;\r\n                            var $target = $(event.target);\r\n                            var targetComponent = event[TARGET_COMPONENT_NAME];\r\n                            if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\r\n                                return\r\n                            }\r\n\r\n                            function checkEditorPopup($element) {\r\n                                return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length\r\n                            }\r\n                            if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\r\n                                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                                var isDomElement = !!$target.closest(getWindow().document).length;\r\n                                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\r\n                                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\r\n                                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                                var isCellEditMode = this.isCellEditMode();\r\n                                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isDomElement || isAnotherComponent)) {\r\n                                    this._closeEditItem.bind(this)($target)\r\n                                }\r\n                            }\r\n                        }));\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n                    }\r\n                },\r\n                isCellEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_CELL\r\n                },\r\n                isBatchEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_BATCH\r\n                },\r\n                isCellOrBatchEditMode: function() {\r\n                    return this.isCellEditMode() || this.isBatchEditMode()\r\n                },\r\n                _needToCloseEditableCell: function($targetElement) {\r\n                    var $element = this.component.$element();\r\n                    var result = this.isEditing();\r\n                    var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n                    if (isCurrentComponentElement) {\r\n                        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\r\n                        if (isDataRow) {\r\n                            var rowsView = this.getView(\"rowsView\");\r\n                            var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\r\n                            var rowIndex = rowsView.getRowIndex($targetCell.parent());\r\n                            var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\r\n                            var visibleColumns = this._columnsController.getVisibleColumns();\r\n                            var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\r\n                            result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)\r\n                        }\r\n                    }\r\n                    return result || this.callBase.apply(this, arguments)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    if (this._needToCloseEditableCell($targetElement)) {\r\n                        this.closeEditCell()\r\n                    }\r\n                },\r\n                _focusEditorIfNeed: function() {\r\n                    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\r\n                        var _this$_rowsView;\r\n                        var editColumnIndex = this._getVisibleEditColumnIndex();\r\n                        var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n                        if ($cell && !$cell.find(\":focus\").length) {\r\n                            this._focusEditingCell(() => {\r\n                                this._editCellInProgress = false\r\n                            }, $cell, true)\r\n                        } else {\r\n                            this._editCellInProgress = false\r\n                        }\r\n                        this._needFocusEditor = false\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                isEditing: function() {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n                        var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\r\n                        return isEditRowKeyDefined && isEditColumnNameDefined\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditColumnNameChange: function(args) {\r\n                    var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\r\n                    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\r\n                        var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\r\n                        var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\r\n                        this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)\r\n                    }\r\n                },\r\n                _addRow: function(parentKey, deferred) {\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        var _deferred = new Deferred;\r\n                        this.saveEditData().done(() => {\r\n                            if (!this.hasChanges()) {\r\n                                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject)\r\n                            } else {\r\n                                _deferred.reject(\"cancel\")\r\n                            }\r\n                        });\r\n                        return _deferred.promise()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                editCell: function(rowIndex, columnIndex) {\r\n                    return this._editCell({\r\n                        rowIndex: rowIndex,\r\n                        columnIndex: columnIndex\r\n                    })\r\n                },\r\n                _editCell: function(options) {\r\n                    var d = new Deferred;\r\n                    var coreResult;\r\n                    this.executeOperation(d, () => {\r\n                        coreResult = this._editCellCore(options);\r\n                        when(coreResult).done(d.resolve).fail(d.reject)\r\n                    });\r\n                    return void 0 !== coreResult ? coreResult : d.promise()\r\n                },\r\n                _editCellCore: function(options) {\r\n                    var dataController = this._dataController;\r\n                    var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\r\n                    var {\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    } = this._getNormalizedEditCellOptions(options);\r\n                    var params = {\r\n                        data: null === item || void 0 === item ? void 0 : item.data,\r\n                        cancel: false,\r\n                        column: column\r\n                    };\r\n                    if (void 0 === item.key) {\r\n                        this._dataController.fireError(\"E1043\");\r\n                        return\r\n                    }\r\n                    if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\r\n                        if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\r\n                            return true\r\n                        }\r\n                        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n                        return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\r\n                            if (cancel) {\r\n                                return\r\n                            }\r\n                            if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                                this._processCanceledEditingCell()\r\n                            }\r\n                        })\r\n                    }\r\n                    return false\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\r\n                        var d = new Deferred;\r\n                        this.saveEditData().always(() => {\r\n                            d.resolve(this.hasChanges())\r\n                        });\r\n                        return d\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    var publicMethods = this.callBase.apply(this, arguments);\r\n                    return publicMethods.concat([\"editCell\", \"closeEditCell\"])\r\n                },\r\n                _getNormalizedEditCellOptions: function(_ref) {\r\n                    var {\r\n                        oldColumnIndex: oldColumnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    } = _ref;\r\n                    var columnsController = this._columnsController;\r\n                    var visibleColumns = columnsController.getVisibleColumns();\r\n                    var items = this._dataController.items();\r\n                    var item = items[rowIndex];\r\n                    var oldColumn;\r\n                    if (isDefined(oldColumnIndex)) {\r\n                        oldColumn = visibleColumns[oldColumnIndex]\r\n                    } else {\r\n                        oldColumn = this._getEditColumn()\r\n                    }\r\n                    if (!isDefined(oldRowIndex)) {\r\n                        oldRowIndex = this._getVisibleEditRowIndex()\r\n                    }\r\n                    if (isString(columnIndex)) {\r\n                        columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n                        columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n                    }\r\n                    var column = visibleColumns[columnIndex];\r\n                    return {\r\n                        oldColumn: oldColumn,\r\n                        columnIndex: columnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    }\r\n                },\r\n                _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {\r\n                    if (!item.isNewRow) {\r\n                        params.key = item.key\r\n                    }\r\n                    if (this._isEditingStart(params)) {\r\n                        return false\r\n                    }\r\n                    this._pageIndex = this._dataController.pageIndex();\r\n                    this._setEditRowKey(item.key);\r\n                    this._setEditColumnNameByIndex(editColumnIndex);\r\n                    if (!params.column.showEditorAlways) {\r\n                        this._addInternalData({\r\n                            key: item.key,\r\n                            oldData: item.data\r\n                        })\r\n                    }\r\n                    return true\r\n                },\r\n                closeEditCell: function(isError, withoutSaveEditData) {\r\n                    var result = when();\r\n                    var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var deferred = new Deferred;\r\n                        result = new Deferred;\r\n                        this.executeOperation(deferred, () => {\r\n                            this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)\r\n                        })\r\n                    }\r\n                    return result.promise()\r\n                },\r\n                _closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData) {\r\n                    var dataController = this._dataController;\r\n                    var deferred = new Deferred;\r\n                    var promise = deferred.promise();\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        if (!withoutSaveEditData) {\r\n                            this.saveEditData().done(error => {\r\n                                if (!this.hasChanges()) {\r\n                                    this.closeEditCell(!!error).always(deferred.resolve);\r\n                                    return\r\n                                }\r\n                                deferred.resolve()\r\n                            });\r\n                            return promise\r\n                        }\r\n                    } else if (oldEditRowIndex >= 0) {\r\n                        var rowIndices = [oldEditRowIndex];\r\n                        this._resetEditRowKey();\r\n                        this._resetEditColumnName();\r\n                        this._beforeCloseEditCellInBatchMode(rowIndices);\r\n                        if (!isError) {\r\n                            dataController.updateItems({\r\n                                changeType: \"update\",\r\n                                rowIndices: rowIndices\r\n                            })\r\n                        }\r\n                    }\r\n                    deferred.resolve();\r\n                    return promise\r\n                },\r\n                _resetModifiedClassCells: function(changes) {\r\n                    if (this.isBatchEditMode()) {\r\n                        var columnsCount = this._columnsController.getVisibleColumns().length;\r\n                        changes.forEach(_ref2 => {\r\n                            var {\r\n                                key: key\r\n                            } = _ref2;\r\n                            var rowIndex = this._dataController.getRowIndexByKey(key);\r\n                            if (-1 !== rowIndex) {\r\n                                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                                    this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                _prepareChange: function(options, value, text) {\r\n                    var $cellElement = $(options.cellElement);\r\n                    if (this.isBatchEditMode() && void 0 !== options.key) {\r\n                        this._applyModified($cellElement, options)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _cancelSaving: function() {\r\n                    var dataController = this._dataController;\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetEditIndices()\r\n                        }\r\n                        dataController.updateItems()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\r\n                        this._handleEditColumnNameChange(args);\r\n                        args.handled = true\r\n                    } else {\r\n                        this.callBase(args)\r\n                    }\r\n                },\r\n                _editCellFromOptionChanged: function(columnIndex, oldColumnIndex, oldRowIndex) {\r\n                    var columns = this._columnsController.getVisibleColumns();\r\n                    if (columnIndex > -1) {\r\n                        deferRender(() => {\r\n                            this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)\r\n                        })\r\n                    }\r\n                },\r\n                _handleEditRowKeyChange: function(args) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var columnIndex = this._getVisibleEditColumnIndex();\r\n                        var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n                        var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n                        if (isDefined(args.value) && args.value !== args.previousValue) {\r\n                            var _this$_editCellFromOp;\r\n                            null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex)\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    if (this.isCellEditMode() && this.isEditing()) {\r\n                        var isNewRow = this._dataController.items()[rowIndex].isNewRow;\r\n                        var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                        this.closeEditCell(null, isNewRow).always(() => {\r\n                            rowIndex = this._dataController.getRowIndexByKey(rowKey);\r\n                            this._checkAndDeleteRow(rowIndex)\r\n                        })\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _checkAndDeleteRow: function(rowIndex) {\r\n                    if (this.isBatchEditMode()) {\r\n                        this._deleteRowCore(rowIndex)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _refreshCore: function(isPageChanged) {\r\n                    var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (needResetIndexes) {\r\n                            this._resetEditColumnName();\r\n                            this._resetEditRowKey()\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _allowRowAdding: function(params) {\r\n                    if (this.isBatchEditMode()) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n                    var dataController = this._dataController;\r\n                    if (this.isBatchEditMode()) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [oldEditRowIndex, rowIndex]\r\n                        });\r\n                        return (new Deferred).resolve()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isDefaultButtonVisible: function(button, options) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isBatchMode = this.isBatchEditMode();\r\n                        switch (button.name) {\r\n                            case \"save\":\r\n                            case \"cancel\":\r\n                            case \"edit\":\r\n                                return false;\r\n                            case \"delete\":\r\n                                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\r\n                            case \"undelete\":\r\n                                return isBatchMode && this.allowDeleting(options) && options.row.removed;\r\n                            default:\r\n                                return this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isRowDeleteAllowed: function() {\r\n                    var callBase = this.callBase.apply(this, arguments);\r\n                    return callBase || this.isBatchEditMode()\r\n                },\r\n                _beforeEndSaving: function(changes) {\r\n                    if (this.isCellEditMode()) {\r\n                        var _changes$;\r\n                        if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\r\n                            this.callBase.apply(this, arguments)\r\n                        }\r\n                    } else {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetModifiedClassCells(changes)\r\n                        }\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                prepareEditButtons: function(headerPanel) {\r\n                    var editingOptions = this.option(\"editing\") || {};\r\n                    var buttonItems = this.callBase.apply(this, arguments);\r\n                    if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22))\r\n                    }\r\n                    return buttonItems\r\n                },\r\n                _applyChange: function(options, params, forceUpdateRow) {\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n                    var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\r\n                    if (focusPreviousEditingCell) {\r\n                        this._focusEditingCell();\r\n                        this._updateEditRow(options.row, true, isCustomSetCellValue);\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _applyChangeCore: function(options, forceUpdateRow) {\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    if (showEditorAlways && !forceUpdateRow) {\r\n                        if (isUpdateInCellMode) {\r\n                            this._setEditRowKey(options.row.key, true);\r\n                            this._setEditColumnNameByIndex(options.columnIndex, true);\r\n                            return this.saveEditData()\r\n                        } else if (this.isBatchEditMode()) {\r\n                            forceUpdateRow = this._needUpdateRow(options.column);\r\n                            return this.callBase(options, forceUpdateRow)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processDataItemCore: function(item, _ref3) {\r\n                    var {\r\n                        data: data,\r\n                        type: type\r\n                    } = _ref3;\r\n                    if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                        item.data = createObjectWithChanges(item.data, data)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveCore: function(changes, editIndex, processIfBatch) {\r\n                    if (this.isBatchEditMode() && !processIfBatch) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveIfError: function() {\r\n                    if (this.isBatchEditMode()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    var editingController = this._editingController;\r\n                    if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\r\n                        eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(() => {\r\n                            if (editingController.isEditing()) {\r\n                                editingController.closeEditCell()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isRowRemoved = !!row.removed;\r\n                        if (editingController.isBatchEditMode()) {\r\n                            isRowRemoved && $row.addClass(ROW_REMOVED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                }\r\n            },\r\n            headerPanel: {\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}