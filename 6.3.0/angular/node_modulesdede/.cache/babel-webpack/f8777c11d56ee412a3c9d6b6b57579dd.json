{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { each } from \"../../core/utils/iterator\";\nimport { format } from \"../../core/utils/string\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\nimport { FileManagerMessages } from \"./ui.file_manager.messages\";\n\nvar FileManagerEditingControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerEditingControl, _Widget);\n\n  var _super = _createSuper(FileManagerEditingControl);\n\n  function FileManagerEditingControl() {\n    _classCallCheck(this, FileManagerEditingControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerEditingControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._controller = this.option(\"controller\");\n\n      this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\n\n      this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\n\n      this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\n\n      this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\n\n      this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\n\n      this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\n\n      this._model = this.option(\"model\");\n      this._uploadOperationInfoMap = {};\n      this._dialogManager = new FileManagerDialogManager(this.$element(), {\n        chooseDirectoryDialog: {\n          provider: this._controller._fileProvider,\n          getDirectories: this._controller.getDirectories.bind(this._controller),\n          getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\n        },\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        onDialogClosed: this._onDialogClosed.bind(this)\n      });\n      this._fileUploader = this._createFileUploader();\n      var notificationControl = this.option(\"notificationControl\");\n\n      if (notificationControl) {\n        this._initNotificationControl(notificationControl);\n      }\n\n      this._createMetadataMap();\n    }\n  }, {\n    key: \"_initNotificationControl\",\n    value: function _initNotificationControl(notificationControl) {\n      var _this = this;\n\n      this._notificationControl = notificationControl;\n\n      this._notificationControl.option({\n        onOperationCanceled: function onOperationCanceled(_ref) {\n          var info = _ref.info;\n          return _this._onCancelUploadSession(info);\n        },\n        onOperationItemCanceled: function onOperationItemCanceled(_ref2) {\n          var item = _ref2.item,\n              itemIndex = _ref2.itemIndex;\n          return _this._onCancelFileUpload(item, itemIndex);\n        }\n      });\n    }\n  }, {\n    key: \"_getFileUploaderComponent\",\n    value: function _getFileUploaderComponent() {\n      return FileManagerFileUploader;\n    }\n  }, {\n    key: \"_createFileUploader\",\n    value: function _createFileUploader() {\n      var _this2 = this;\n\n      var $fileUploader = $(\"<div>\").appendTo(this.$element());\n      return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\n        getController: this._getFileUploaderController.bind(this),\n        dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\n        onUploadSessionStarted: function onUploadSessionStarted(e) {\n          return _this2._onUploadSessionStarted(e);\n        },\n        onUploadProgress: function onUploadProgress(e) {\n          return _this2._onUploadProgress(e);\n        }\n      });\n    }\n  }, {\n    key: \"setUploaderDropZone\",\n    value: function setUploaderDropZone($element) {\n      this._fileUploader.option(\"dropZone\", $element);\n    }\n  }, {\n    key: \"_getFileUploaderController\",\n    value: function _getFileUploaderController() {\n      var _this3 = this;\n\n      var uploadDirectory = this.uploadDirectoryInfo.fileItem;\n      return {\n        chunkSize: this._controller.getFileUploadChunkSize(),\n        uploadFileChunk: function uploadFileChunk(fileData, chunksInfo) {\n          return _this3._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory);\n        },\n        abortFileUpload: function abortFileUpload(fileData, chunksInfo) {\n          return _this3._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory);\n        }\n      };\n    }\n  }, {\n    key: \"_createMetadataMap\",\n    value: function _createMetadataMap() {\n      var _this4 = this;\n\n      this._metadataMap = {\n        create: {\n          action: function action(arg) {\n            return _this4._tryCreate(arg);\n          },\n          affectsAllItems: true,\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\n        },\n        rename: {\n          action: function action(arg) {\n            return _this4._tryRename(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\n        },\n        delete: {\n          action: function action(arg) {\n            return _this4._tryDelete(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\n        },\n        move: {\n          action: function action(arg) {\n            return _this4._tryMove(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\n        },\n        copy: {\n          action: function action(arg) {\n            return _this4._tryCopy(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\n        },\n        upload: {\n          action: function action(arg) {\n            return _this4._tryUpload(arg);\n          },\n          allowCancel: true,\n          allowItemProgress: true,\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\n          canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\n        },\n        download: {\n          action: function action(arg) {\n            return _this4._download(arg);\n          }\n        },\n        getItemContent: {\n          action: function action(arg) {\n            return _this4._getItemContent(arg);\n          }\n        },\n        getItems: {\n          singleItemProcessingMessage: \"\",\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\n        }\n      };\n    }\n  }, {\n    key: \"getCommandActions\",\n    value: function getCommandActions() {\n      var _this5 = this;\n\n      var result = {};\n      each(this._metadataMap, function (name) {\n        if (Object.prototype.hasOwnProperty.call(_this5._metadataMap, name)) {\n          result[name] = function (arg) {\n            return _this5._executeAction(name, arg);\n          };\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_executeAction\",\n    value: function _executeAction(actionName, arg) {\n      var actionMetadata = this._metadataMap[actionName];\n      return actionMetadata ? actionMetadata.action(arg) : null;\n    }\n  }, {\n    key: \"_onCancelUploadSession\",\n    value: function _onCancelUploadSession(info) {\n      this._fileUploader.cancelUpload(info.uploadSessionId);\n    }\n  }, {\n    key: \"_onCancelFileUpload\",\n    value: function _onCancelFileUpload(item, itemIndex) {\n      this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex);\n    }\n  }, {\n    key: \"_onUploadProgress\",\n    value: function _onUploadProgress(_ref3) {\n      var sessionId = _ref3.sessionId,\n          fileIndex = _ref3.fileIndex,\n          commonValue = _ref3.commonValue,\n          fileValue = _ref3.fileValue;\n      var operationInfo = this._uploadOperationInfoMap[sessionId];\n\n      this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue);\n    }\n  }, {\n    key: \"_onUploadSessionStarted\",\n    value: function _onUploadSessionStarted(_ref4) {\n      var sessionInfo = _ref4.sessionInfo;\n\n      this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo);\n    }\n  }, {\n    key: \"_onEditActionStarting\",\n    value: function _onEditActionStarting(actionInfo) {\n      var actionMetadata = this._metadataMap[actionInfo.name];\n      var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\n\n      var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\n\n      extend(actionInfo.customData, {\n        context: context,\n        operationInfo: operationInfo\n      });\n\n      switch (actionInfo.name) {\n        case \"upload\":\n          var sessionId = actionInfo.customData.sessionInfo.sessionId;\n          operationInfo.uploadSessionId = sessionId;\n          this._uploadOperationInfoMap[sessionId] = operationInfo;\n          break;\n\n        case \"rename\":\n          actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName;\n      }\n    }\n  }, {\n    key: \"_onEditActionResultAcquired\",\n    value: function _onEditActionResultAcquired(actionInfo) {\n      var _this6 = this;\n\n      var _actionInfo$customDat = actionInfo.customData,\n          context = _actionInfo$customDat.context,\n          operationInfo = _actionInfo$customDat.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n      var details = context.itemInfos.map(function (itemInfo) {\n        return _this6._getItemProgressDisplayInfo(itemInfo);\n      });\n\n      this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel);\n    }\n  }, {\n    key: \"_onEditActionError\",\n    value: function _onEditActionError(actionInfo, errorInfo) {\n      var _actionInfo$customDat2 = actionInfo.customData,\n          context = _actionInfo$customDat2.context,\n          operationInfo = _actionInfo$customDat2.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n\n      this._handleActionError(operationInfo, context, errorInfo);\n\n      this._completeAction(operationInfo, context);\n    }\n  }, {\n    key: \"_onEditActionItemError\",\n    value: function _onEditActionItemError(actionInfo, errorInfo) {\n      var _actionInfo$customDat3 = actionInfo.customData,\n          context = _actionInfo$customDat3.context,\n          operationInfo = _actionInfo$customDat3.operationInfo;\n\n      this._handleActionError(operationInfo, context, errorInfo);\n    }\n  }, {\n    key: \"_onCompleteEditActionItem\",\n    value: function _onCompleteEditActionItem(actionInfo, info) {\n      var _actionInfo$customDat4 = actionInfo.customData,\n          context = _actionInfo$customDat4.context,\n          operationInfo = _actionInfo$customDat4.operationInfo;\n\n      if (!info.result || !info.result.canceled) {\n        context.completeOperationItem(info.index);\n\n        this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress);\n      }\n    }\n  }, {\n    key: \"_onCompleteEditAction\",\n    value: function _onCompleteEditAction(actionInfo) {\n      var _actionInfo$customDat5 = actionInfo.customData,\n          context = _actionInfo$customDat5.context,\n          operationInfo = _actionInfo$customDat5.operationInfo;\n\n      this._completeAction(operationInfo, context);\n\n      if (\"upload\" === actionInfo.name) {\n        delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId];\n      }\n    }\n  }, {\n    key: \"_tryCreate\",\n    value: function _tryCreate(parentDirectories) {\n      var _this7 = this;\n\n      var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\n\n      var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\n      return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(function (_ref5) {\n        var name = _ref5.name;\n        return _this7._controller.createDirectory(parentDirectoryInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryRename\",\n    value: function _tryRename(itemInfos) {\n      var _this8 = this;\n\n      var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\n\n      return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(function (_ref6) {\n        var name = _ref6.name;\n        return _this8._controller.renameItem(itemInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryDelete\",\n    value: function _tryDelete(itemInfos) {\n      var _this9 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      var itemName = itemInfos[0].fileItem.name;\n      var itemCount = itemInfos.length;\n      return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\n        itemName: itemName,\n        itemCount: itemCount\n      }).then(function () {\n        return _this9._controller.deleteItems(itemInfos);\n      });\n    }\n  }, {\n    key: \"_tryMove\",\n    value: function _tryMove(itemInfos) {\n      var _this10 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(function (_ref7) {\n        var folder = _ref7.folder;\n        return _this10._controller.moveItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryCopy\",\n    value: function _tryCopy(itemInfos) {\n      var _this11 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(function (_ref8) {\n        var folder = _ref8.folder;\n        return _this11._controller.copyItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryUpload\",\n    value: function _tryUpload(destinationFolder) {\n      this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\n\n      this._fileUploader.tryUpload();\n    }\n  }, {\n    key: \"_download\",\n    value: function _download(itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._controller.downloadItems(itemInfos);\n    }\n  }, {\n    key: \"_getItemContent\",\n    value: function _getItemContent(itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._controller.getItemContent(itemInfos);\n    }\n  }, {\n    key: \"_completeAction\",\n    value: function _completeAction(operationInfo, context) {\n      this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\n\n      if (context.hasModifiedItems()) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleActionError\",\n    value: function _handleActionError(operationInfo, context, errorInfo) {\n      operationInfo.hasError = true;\n\n      if (context.singleRequest) {\n        this._handleSingleRequestActionError(operationInfo, context, errorInfo);\n      } else {\n        this._handleMultipleRequestActionError(operationInfo, context, errorInfo);\n      }\n    }\n  }, {\n    key: \"_handleSingleRequestActionError\",\n    value: function _handleSingleRequestActionError(operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForSingleRequestError();\n      var itemName = context.itemNewName;\n\n      var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n      context.processSingleRequestError(errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\n\n      if (context.multipleItems) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleMultipleRequestActionError\",\n    value: function _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\n\n      var errorText = this._getErrorText(errorInfo, itemInfo);\n\n      context.processMultipleRequestError(errorInfo.index, errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo);\n    }\n  }, {\n    key: \"_getOperationErrorInfo\",\n    value: function _getOperationErrorInfo(context) {\n      var detailError = context.errorState.currentDetailError;\n      return {\n        commonErrorText: context.errorState.commonErrorText,\n        item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\n        itemIndex: detailError.itemIndex,\n        detailErrorText: detailError.errorText\n      };\n    }\n  }, {\n    key: \"_getErrorText\",\n    value: function _getErrorText(errorInfo, itemInfo, itemName) {\n      itemName = itemName || (null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name);\n      var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\n      var errorArgs = {\n        fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\n        errorCode: errorInfo.errorCode,\n        errorText: errorText\n      };\n\n      this._raiseOnError(errorArgs);\n\n      return errorArgs.errorText;\n    }\n  }, {\n    key: \"_getItemProgressDisplayInfo\",\n    value: function _getItemProgressDisplayInfo(itemInfo) {\n      return {\n        commonText: itemInfo.fileItem.name,\n        imageUrl: this._getItemThumbnail(itemInfo)\n      };\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function _showDialog(dialog, dialogArgument) {\n      this._dialogDeferred = new Deferred();\n      dialog.show(dialogArgument);\n      return this._dialogDeferred.promise();\n    }\n  }, {\n    key: \"_onDialogClosed\",\n    value: function _onDialogClosed(e) {\n      var result = e.dialogResult;\n\n      if (result) {\n        this._dialogDeferred.resolve(result);\n      } else {\n        this._dialogDeferred.reject();\n      }\n    }\n  }, {\n    key: \"updateDialogRtl\",\n    value: function updateDialogRtl(value) {\n      this._dialogManager.updateDialogRtl(value);\n    }\n  }, {\n    key: \"_getItemThumbnail\",\n    value: function _getItemThumbnail(item) {\n      var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n\n      if (!itemThumbnailGetter) {\n        return null;\n      }\n\n      var info = itemThumbnailGetter(item);\n      return info ? info.thumbnail : null;\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onSuccess: this._createActionByOption(\"onSuccess\"),\n        onError: this._createActionByOption(\"onError\"),\n        onCreating: this._createActionByOption(\"onCreating\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        model: {\n          getMultipleSelectedItems: null\n        },\n        notificationControl: null,\n        getItemThumbnail: null,\n        onSuccess: null,\n        onError: null,\n        onCreating: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"model\":\n          this.repaint();\n          break;\n\n        case \"notificationControl\":\n          this._initNotificationControl(args.value);\n\n          break;\n\n        case \"getItemThumbnail\":\n          break;\n\n        case \"uploadDropZonePlaceholderContainer\":\n          this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\n\n          break;\n\n        case \"onSuccess\":\n        case \"onError\":\n        case \"onCreating\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_raiseOnSuccess\",\n    value: function _raiseOnSuccess(updatedOnlyFiles) {\n      this._actions.onSuccess({\n        updatedOnlyFiles: updatedOnlyFiles\n      });\n    }\n  }, {\n    key: \"_raiseOnError\",\n    value: function _raiseOnError(args) {\n      this._actions.onError(args);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function _getCurrentDirectory() {\n      return this._controller.getCurrentDirectory();\n    }\n  }, {\n    key: \"uploadDirectoryInfo\",\n    get: function get() {\n      return this._uploadDirectoryInfo || this._getCurrentDirectory();\n    }\n  }]);\n\n  return FileManagerEditingControl;\n}(Widget);\n\nvar FileManagerActionContext = /*#__PURE__*/function () {\n  function FileManagerActionContext(actionMetadata, itemInfos, directoryInfo) {\n    _classCallCheck(this, FileManagerActionContext);\n\n    this._actionMetadata = actionMetadata;\n    this._itemInfos = itemInfos;\n    this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(function (info) {\n      return !info.fileItem.isDirectory;\n    });\n    this._items = this._itemInfos.map(function (itemInfo) {\n      return itemInfo.fileItem;\n    });\n    this._multipleItems = this._items.length > 1;\n    this._location = directoryInfo.getDisplayName();\n    this._singleRequest = true;\n    this._completedItems = [];\n    this._commonProgress = 0;\n    this._errorState = {\n      failedCount: 0\n    };\n    this._itemNewName = \"\";\n  }\n\n  _createClass(FileManagerActionContext, [{\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(itemIndex) {\n      if (this._singleRequest) {\n        this._completedItems = _toConsumableArray(this._items);\n      } else {\n        var item = this._items[itemIndex];\n\n        this._completedItems.push(item);\n      }\n\n      if (!this._actionMetadata.allowItemProgress) {\n        this._commonProgress = this._completedItems.length / this._items.length * 100;\n      }\n    }\n  }, {\n    key: \"processSingleRequestError\",\n    value: function processSingleRequestError(errorText) {\n      this._errorState.failedCount = 1;\n      this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\n      var itemIndex = this._multipleItems ? -1 : 1;\n      var itemInfo = this.getItemForSingleRequestError();\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"processMultipleRequestError\",\n    value: function processMultipleRequestError(itemIndex, errorText) {\n      this._errorState.failedCount++;\n      this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\n      var itemInfo = this.getItemForMultipleRequestError(itemIndex);\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"hasModifiedItems\",\n    value: function hasModifiedItems() {\n      return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems;\n    }\n  }, {\n    key: \"getItemForSingleRequestError\",\n    value: function getItemForSingleRequestError() {\n      return this._multipleItems ? null : this._itemInfos[0];\n    }\n  }, {\n    key: \"getItemForMultipleRequestError\",\n    value: function getItemForMultipleRequestError(itemIndex) {\n      return this._itemInfos[itemIndex];\n    }\n  }, {\n    key: \"_setCurrentDetailError\",\n    value: function _setCurrentDetailError(itemIndex, itemInfo, errorText) {\n      this._errorState.currentDetailError = {\n        itemIndex: itemIndex,\n        itemInfo: itemInfo,\n        errorText: errorText\n      };\n    }\n  }, {\n    key: \"_hasCompletedItems\",\n    value: function _hasCompletedItems() {\n      return this._completedItems.length > 0;\n    }\n  }, {\n    key: \"actionMetadata\",\n    get: function get() {\n      return this._actionMetadata;\n    }\n  }, {\n    key: \"itemInfos\",\n    get: function get() {\n      return this._itemInfos;\n    }\n  }, {\n    key: \"itemNewName\",\n    get: function get() {\n      return this._itemNewName;\n    },\n    set: function set(value) {\n      this._itemNewName = value;\n    }\n  }, {\n    key: \"errorState\",\n    get: function get() {\n      return this._errorState;\n    }\n  }, {\n    key: \"singleRequest\",\n    get: function get() {\n      return this._singleRequest;\n    },\n    set: function set(value) {\n      this._singleRequest = value;\n    }\n  }, {\n    key: \"multipleItems\",\n    get: function get() {\n      return this._multipleItems;\n    }\n  }, {\n    key: \"onlyFiles\",\n    get: function get() {\n      return this._onlyFiles;\n    }\n  }, {\n    key: \"processingMessage\",\n    get: function get() {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location);\n    }\n  }, {\n    key: \"successMessage\",\n    get: function get() {\n      if (this._hasCompletedItems()) {\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location);\n      } else {\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage;\n      }\n    }\n  }, {\n    key: \"completionMessage\",\n    get: function get() {\n      return this.success ? this.successMessage : this.errorState.commonErrorText;\n    }\n  }, {\n    key: \"statusText\",\n    get: function get() {\n      return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0;\n    }\n  }, {\n    key: \"commonProgress\",\n    get: function get() {\n      return this._commonProgress;\n    }\n  }, {\n    key: \"success\",\n    get: function get() {\n      return !this._errorState.failedCount;\n    }\n  }]);\n\n  return FileManagerActionContext;\n}();\n\nexport default FileManagerEditingControl;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.editing.js"],"names":["$","extend","Deferred","each","format","messageLocalization","Widget","FileManagerDialogManager","FileManagerFileUploader","FileManagerMessages","FileManagerEditingControl","_initActions","_controller","option","on","_onEditActionStarting","bind","_onEditActionResultAcquired","_onEditActionItemError","_onEditActionError","_onCompleteEditActionItem","_onCompleteEditAction","_model","_uploadOperationInfoMap","_dialogManager","$element","chooseDirectoryDialog","provider","_fileProvider","getDirectories","getCurrentDirectory","rtlEnabled","onDialogClosed","_onDialogClosed","_fileUploader","_createFileUploader","notificationControl","_initNotificationControl","_createMetadataMap","_notificationControl","onOperationCanceled","_ref","info","_onCancelUploadSession","onOperationItemCanceled","_ref2","item","itemIndex","_onCancelFileUpload","$fileUploader","appendTo","_createComponent","_getFileUploaderComponent","getController","_getFileUploaderController","dropZonePlaceholderContainer","onUploadSessionStarted","e","_onUploadSessionStarted","onUploadProgress","_onUploadProgress","uploadDirectory","uploadDirectoryInfo","fileItem","chunkSize","getFileUploadChunkSize","uploadFileChunk","fileData","chunksInfo","abortFileUpload","_metadataMap","create","action","arg","_tryCreate","affectsAllItems","singleItemProcessingMessage","singleItemSuccessMessage","singleItemErrorMessage","commonErrorMessage","rename","_tryRename","delete","_tryDelete","multipleItemsProcessingMessage","multipleItemsSuccessMessage","multipleItemsErrorMessage","move","_tryMove","copy","_tryCopy","upload","_tryUpload","allowCancel","allowItemProgress","canceledMessage","download","_download","getItemContent","_getItemContent","getItems","result","name","Object","prototype","hasOwnProperty","call","_executeAction","actionName","actionMetadata","cancelUpload","uploadSessionId","cancelFileUpload","_ref3","sessionId","fileIndex","commonValue","fileValue","operationInfo","updateOperationItemProgress","_ref4","sessionInfo","processUploadSession","actionInfo","context","FileManagerActionContext","itemInfos","directory","addOperation","processingMessage","customData","itemNewName","singleRequest","details","map","itemInfo","_getItemProgressDisplayInfo","addOperationDetails","errorInfo","_handleActionError","_completeAction","canceled","completeOperationItem","index","commonProgress","parentDirectories","parentDirectoryInfo","_getCurrentDirectory","newDirName","_showDialog","getCreateItemDialog","then","_ref5","createDirectory","getMultipleSelectedItems","getRenameItemDialog","_ref6","renameItem","itemName","itemCount","length","getDeleteItemDialog","deleteItems","getMoveDialog","_ref7","folder","moveItems","getCopyDialog","_ref8","copyItems","destinationFolder","_uploadDirectoryInfo","tryUpload","downloadItems","completeOperation","completionMessage","success","statusText","hasModifiedItems","_raiseOnSuccess","onlyFiles","hasError","_handleSingleRequestActionError","_handleMultipleRequestActionError","getItemForSingleRequestError","errorText","_getErrorText","processSingleRequestError","operationErrorInfo","_getOperationErrorInfo","completeSingleOperationWithError","multipleItems","getItemForMultipleRequestError","processMultipleRequestError","addOperationDetailsError","detailError","errorState","currentDetailError","commonErrorText","detailErrorText","get","errorCode","errorArgs","fileSystemItem","_raiseOnError","commonText","imageUrl","_getItemThumbnail","dialog","dialogArgument","_dialogDeferred","show","promise","dialogResult","resolve","reject","value","updateDialogRtl","itemThumbnailGetter","thumbnail","_actions","onSuccess","_createActionByOption","onError","onCreating","model","getItemThumbnail","args","repaint","updatedOnlyFiles","directoryInfo","_actionMetadata","_itemInfos","_onlyFiles","every","isDirectory","_items","_multipleItems","_location","getDisplayName","_singleRequest","_completedItems","_commonProgress","_errorState","failedCount","_itemNewName","push","_setCurrentDetailError","_hasCompletedItems","successMessage"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,QADJ,QAEO,2BAFP;AAGA,SACIC,IADJ,QAEO,2BAFP;AAGA,SACIC,MADJ,QAEO,yBAFP;AAGA,OAAOC,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,wBAAP,MAAqC,kCAArC;AACA,OAAOC,uBAAP,MAAoC,iCAApC;AACA,SACIC,mBADJ,QAEO,4BAFP;;IAGMC,yB;;;;;;;;;;;;;WACF,uBAAc;AACV;;AACA,WAAKC,YAAL;;AACA,WAAKC,WAAL,GAAmB,KAAKC,MAAL,CAAY,YAAZ,CAAnB;;AACA,WAAKD,WAAL,CAAiBE,EAAjB,CAAoB,oBAApB,EAA0C,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA1C;;AACA,WAAKJ,WAAL,CAAiBE,EAAjB,CAAoB,0BAApB,EAAgD,KAAKG,2BAAL,CAAiCD,IAAjC,CAAsC,IAAtC,CAAhD;;AACA,WAAKJ,WAAL,CAAiBE,EAAjB,CAAoB,qBAApB,EAA2C,KAAKI,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,CAA3C;;AACA,WAAKJ,WAAL,CAAiBE,EAAjB,CAAoB,iBAApB,EAAuC,KAAKK,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CAAvC;;AACA,WAAKJ,WAAL,CAAiBE,EAAjB,CAAoB,wBAApB,EAA8C,KAAKM,yBAAL,CAA+BJ,IAA/B,CAAoC,IAApC,CAA9C;;AACA,WAAKJ,WAAL,CAAiBE,EAAjB,CAAoB,oBAApB,EAA0C,KAAKO,qBAAL,CAA2BL,IAA3B,CAAgC,IAAhC,CAA1C;;AACA,WAAKM,MAAL,GAAc,KAAKT,MAAL,CAAY,OAAZ,CAAd;AACA,WAAKU,uBAAL,GAA+B,EAA/B;AACA,WAAKC,cAAL,GAAsB,IAAIjB,wBAAJ,CAA6B,KAAKkB,QAAL,EAA7B,EAA8C;AAChEC,QAAAA,qBAAqB,EAAE;AACnBC,UAAAA,QAAQ,EAAE,KAAKf,WAAL,CAAiBgB,aADR;AAEnBC,UAAAA,cAAc,EAAE,KAAKjB,WAAL,CAAiBiB,cAAjB,CAAgCb,IAAhC,CAAqC,KAAKJ,WAA1C,CAFG;AAGnBkB,UAAAA,mBAAmB,EAAE,KAAKlB,WAAL,CAAiBkB,mBAAjB,CAAqCd,IAArC,CAA0C,KAAKJ,WAA/C;AAHF,SADyC;AAMhEmB,QAAAA,UAAU,EAAE,KAAKlB,MAAL,CAAY,YAAZ,CANoD;AAOhEmB,QAAAA,cAAc,EAAE,KAAKC,eAAL,CAAqBjB,IAArB,CAA0B,IAA1B;AAPgD,OAA9C,CAAtB;AASA,WAAKkB,aAAL,GAAqB,KAAKC,mBAAL,EAArB;AACA,UAAIC,mBAAmB,GAAG,KAAKvB,MAAL,CAAY,qBAAZ,CAA1B;;AACA,UAAIuB,mBAAJ,EAAyB;AACrB,aAAKC,wBAAL,CAA8BD,mBAA9B;AACH;;AACD,WAAKE,kBAAL;AACH;;;WACD,kCAAyBF,mBAAzB,EAA8C;AAAA;;AAC1C,WAAKG,oBAAL,GAA4BH,mBAA5B;;AACA,WAAKG,oBAAL,CAA0B1B,MAA1B,CAAiC;AAC7B2B,QAAAA,mBAAmB,EAAE,6BAAAC,IAAI,EAAI;AACzB,cACUC,IADV,GAEID,IAFJ,CACIC,IADJ;AAGA,iBAAO,KAAI,CAACC,sBAAL,CAA4BD,IAA5B,CAAP;AACH,SAN4B;AAO7BE,QAAAA,uBAAuB,EAAE,iCAAAC,KAAK,EAAI;AAC9B,cACUC,IADV,GAGID,KAHJ,CACIC,IADJ;AAAA,cAEeC,SAFf,GAGIF,KAHJ,CAEIE,SAFJ;AAIA,iBAAO,KAAI,CAACC,mBAAL,CAAyBF,IAAzB,EAA+BC,SAA/B,CAAP;AACH;AAb4B,OAAjC;AAeH;;;WACD,qCAA4B;AACxB,aAAOvC,uBAAP;AACH;;;WACD,+BAAsB;AAAA;;AAClB,UAAIyC,aAAa,GAAGjD,CAAC,CAAC,OAAD,CAAD,CAAWkD,QAAX,CAAoB,KAAKzB,QAAL,EAApB,CAApB;AACA,aAAO,KAAK0B,gBAAL,CAAsBF,aAAtB,EAAqC,KAAKG,yBAAL,EAArC,EAAuE;AAC1EC,QAAAA,aAAa,EAAE,KAAKC,0BAAL,CAAgCtC,IAAhC,CAAqC,IAArC,CAD2D;AAE1EuC,QAAAA,4BAA4B,EAAE,KAAK1C,MAAL,CAAY,oCAAZ,CAF4C;AAG1E2C,QAAAA,sBAAsB,EAAE,gCAAAC,CAAC;AAAA,iBAAI,MAAI,CAACC,uBAAL,CAA6BD,CAA7B,CAAJ;AAAA,SAHiD;AAI1EE,QAAAA,gBAAgB,EAAE,0BAAAF,CAAC;AAAA,iBAAI,MAAI,CAACG,iBAAL,CAAuBH,CAAvB,CAAJ;AAAA;AAJuD,OAAvE,CAAP;AAMH;;;WACD,6BAAoBhC,QAApB,EAA8B;AAC1B,WAAKS,aAAL,CAAmBrB,MAAnB,CAA0B,UAA1B,EAAsCY,QAAtC;AACH;;;WACD,sCAA6B;AAAA;;AACzB,UAAIoC,eAAe,GAAG,KAAKC,mBAAL,CAAyBC,QAA/C;AACA,aAAO;AACHC,QAAAA,SAAS,EAAE,KAAKpD,WAAL,CAAiBqD,sBAAjB,EADR;AAEHC,QAAAA,eAAe,EAAE,yBAACC,QAAD,EAAWC,UAAX;AAAA,iBAA0B,MAAI,CAACxD,WAAL,CAAiBsD,eAAjB,CAAiCC,QAAjC,EAA2CC,UAA3C,EAAuDP,eAAvD,CAA1B;AAAA,SAFd;AAGHQ,QAAAA,eAAe,EAAE,yBAACF,QAAD,EAAWC,UAAX;AAAA,iBAA0B,MAAI,CAACxD,WAAL,CAAiByD,eAAjB,CAAiCF,QAAjC,EAA2CC,UAA3C,EAAuDP,eAAvD,CAA1B;AAAA;AAHd,OAAP;AAKH;;;WACD,8BAAqB;AAAA;;AACjB,WAAKS,YAAL,GAAoB;AAChBC,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACC,UAAL,CAAgBD,GAAhB,CAAJ;AAAA,WADP;AAEJE,UAAAA,eAAe,EAAE,IAFb;AAGJC,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CAHzB;AAIJyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,qDAA3B,CAJtB;AAKJ0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CALpB;AAMJ2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,+CAA3B;AANhB,SADQ;AAShB4E,QAAAA,MAAM,EAAE;AACJR,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACQ,UAAL,CAAgBR,GAAhB,CAAJ;AAAA,WADP;AAEJG,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CAFzB;AAGJyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,qDAA3B,CAHtB;AAIJ0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CAJpB;AAKJ2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,+CAA3B;AALhB,SATQ;AAgBhB8E,QAAAA,MAAM,EAAE;AACJV,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACU,UAAL,CAAgBV,GAAhB,CAAJ;AAAA,WADP;AAEJG,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CAFzB;AAGJgF,UAAAA,8BAA8B,EAAE/E,mBAAmB,CAACD,MAApB,CAA2B,2DAA3B,CAH5B;AAIJyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,qDAA3B,CAJtB;AAKJiF,UAAAA,2BAA2B,EAAEhF,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CALzB;AAMJ0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CANpB;AAOJkF,UAAAA,yBAAyB,EAAEjF,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CAPvB;AAQJ2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,+CAA3B;AARhB,SAhBQ;AA0BhBmF,QAAAA,IAAI,EAAE;AACFf,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACe,QAAL,CAAcf,GAAd,CAAJ;AAAA,WADT;AAEFG,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CAF3B;AAGFgF,UAAAA,8BAA8B,EAAE/E,mBAAmB,CAACD,MAApB,CAA2B,yDAA3B,CAH9B;AAIFyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CAJxB;AAKFiF,UAAAA,2BAA2B,EAAEhF,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CAL3B;AAMF0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,iDAA3B,CANtB;AAOFkF,UAAAA,yBAAyB,EAAEjF,mBAAmB,CAACD,MAApB,CAA2B,oDAA3B,CAPzB;AAQF2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,6CAA3B;AARlB,SA1BU;AAoChBqF,QAAAA,IAAI,EAAE;AACFjB,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACiB,QAAL,CAAcjB,GAAd,CAAJ;AAAA,WADT;AAEFG,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CAF3B;AAGFgF,UAAAA,8BAA8B,EAAE/E,mBAAmB,CAACD,MAApB,CAA2B,yDAA3B,CAH9B;AAIFyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CAJxB;AAKFiF,UAAAA,2BAA2B,EAAEhF,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CAL3B;AAMF0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,iDAA3B,CANtB;AAOFkF,UAAAA,yBAAyB,EAAEjF,mBAAmB,CAACD,MAApB,CAA2B,oDAA3B,CAPzB;AAQF2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,6CAA3B;AARlB,SApCU;AA8ChBuF,QAAAA,MAAM,EAAE;AACJnB,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACmB,UAAL,CAAgBnB,GAAhB,CAAJ;AAAA,WADP;AAEJoB,UAAAA,WAAW,EAAE,IAFT;AAGJC,UAAAA,iBAAiB,EAAE,IAHf;AAIJlB,UAAAA,2BAA2B,EAAEvE,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CAJzB;AAKJgF,UAAAA,8BAA8B,EAAE/E,mBAAmB,CAACD,MAApB,CAA2B,2DAA3B,CAL5B;AAMJyE,UAAAA,wBAAwB,EAAExE,mBAAmB,CAACD,MAApB,CAA2B,qDAA3B,CANtB;AAOJiF,UAAAA,2BAA2B,EAAEhF,mBAAmB,CAACD,MAApB,CAA2B,wDAA3B,CAPzB;AAQJ0E,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,mDAA3B,CARpB;AASJkF,UAAAA,yBAAyB,EAAEjF,mBAAmB,CAACD,MAApB,CAA2B,sDAA3B,CATvB;AAUJ2F,UAAAA,eAAe,EAAE1F,mBAAmB,CAACD,MAApB,CAA2B,4CAA3B;AAVb,SA9CQ;AA0DhB4F,QAAAA,QAAQ,EAAE;AACNxB,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAACwB,SAAL,CAAexB,GAAf,CAAJ;AAAA;AADL,SA1DM;AA6DhByB,QAAAA,cAAc,EAAE;AACZ1B,UAAAA,MAAM,EAAE,gBAAAC,GAAG;AAAA,mBAAI,MAAI,CAAC0B,eAAL,CAAqB1B,GAArB,CAAJ;AAAA;AADC,SA7DA;AAgEhB2B,QAAAA,QAAQ,EAAE;AACNxB,UAAAA,2BAA2B,EAAE,EADvB;AAENE,UAAAA,sBAAsB,EAAEzE,mBAAmB,CAACD,MAApB,CAA2B,wCAA3B,CAFlB;AAGN2E,UAAAA,kBAAkB,EAAE1E,mBAAmB,CAACD,MAApB,CAA2B,wCAA3B;AAHd;AAhEM,OAApB;AAsEH;;;WACD,6BAAoB;AAAA;;AAChB,UAAIiG,MAAM,GAAG,EAAb;AACAlG,MAAAA,IAAI,CAAC,KAAKmE,YAAN,EAAoB,UAAAgC,IAAI,EAAI;AAC5B,YAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,MAAI,CAACpC,YAA1C,EAAwDgC,IAAxD,CAAJ,EAAmE;AAC/DD,UAAAA,MAAM,CAACC,IAAD,CAAN,GAAe,UAAA7B,GAAG;AAAA,mBAAI,MAAI,CAACkC,cAAL,CAAoBL,IAApB,EAA0B7B,GAA1B,CAAJ;AAAA,WAAlB;AACH;AACJ,OAJG,CAAJ;AAKA,aAAO4B,MAAP;AACH;;;WACD,wBAAeO,UAAf,EAA2BnC,GAA3B,EAAgC;AAC5B,UAAIoC,cAAc,GAAG,KAAKvC,YAAL,CAAkBsC,UAAlB,CAArB;AACA,aAAOC,cAAc,GAAGA,cAAc,CAACrC,MAAf,CAAsBC,GAAtB,CAAH,GAAgC,IAArD;AACH;;;WACD,gCAAuB/B,IAAvB,EAA6B;AACzB,WAAKR,aAAL,CAAmB4E,YAAnB,CAAgCpE,IAAI,CAACqE,eAArC;AACH;;;WACD,6BAAoBjE,IAApB,EAA0BC,SAA1B,EAAqC;AACjC,WAAKb,aAAL,CAAmB8E,gBAAnB,CAAoClE,IAAI,CAACJ,IAAL,CAAUqE,eAA9C,EAA+DhE,SAA/D;AACH;;;WACD,2BAAkBkE,KAAlB,EAAyB;AACrB,UACeC,SADf,GAKID,KALJ,CACIC,SADJ;AAAA,UAEeC,SAFf,GAKIF,KALJ,CAEIE,SAFJ;AAAA,UAGiBC,WAHjB,GAKIH,KALJ,CAGIG,WAHJ;AAAA,UAIeC,SAJf,GAKIJ,KALJ,CAIII,SAJJ;AAMA,UAAIC,aAAa,GAAG,KAAK/F,uBAAL,CAA6B2F,SAA7B,CAApB;;AACA,WAAK3E,oBAAL,CAA0BgF,2BAA1B,CAAsDD,aAAtD,EAAqEH,SAArE,EAAgF,MAAME,SAAtF,EAAiG,MAAMD,WAAvG;AACH;;;WACD,iCAAwBI,KAAxB,EAA+B;AAC3B,UACiBC,WADjB,GAEID,KAFJ,CACIC,WADJ;;AAGA,WAAK7G,WAAL,CAAiB8G,oBAAjB,CAAsCD,WAAtC,EAAmD,KAAK3D,mBAAxD;AACH;;;WACD,+BAAsB6D,UAAtB,EAAkC;AAC9B,UAAId,cAAc,GAAG,KAAKvC,YAAL,CAAkBqD,UAAU,CAACrB,IAA7B,CAArB;AACA,UAAIsB,OAAO,GAAG,IAAIC,wBAAJ,CAA6BhB,cAA7B,EAA6Cc,UAAU,CAACG,SAAxD,EAAmEH,UAAU,CAACI,SAA9E,CAAd;;AACA,UAAIT,aAAa,GAAG,KAAK/E,oBAAL,CAA0ByF,YAA1B,CAAuCJ,OAAO,CAACK,iBAA/C,EAAkEpB,cAAc,CAAChB,WAAjF,EAA8F,CAACgB,cAAc,CAACf,iBAA9G,CAApB;;AACA7F,MAAAA,MAAM,CAAC0H,UAAU,CAACO,UAAZ,EAAwB;AAC1BN,QAAAA,OAAO,EAAEA,OADiB;AAE1BN,QAAAA,aAAa,EAAEA;AAFW,OAAxB,CAAN;;AAIA,cAAQK,UAAU,CAACrB,IAAnB;AACI,aAAK,QAAL;AACI,cAAIY,SAAS,GAAGS,UAAU,CAACO,UAAX,CAAsBT,WAAtB,CAAkCP,SAAlD;AACAI,UAAAA,aAAa,CAACP,eAAd,GAAgCG,SAAhC;AACA,eAAK3F,uBAAL,CAA6B2F,SAA7B,IAA0CI,aAA1C;AACA;;AACJ,aAAK,QAAL;AACIK,UAAAA,UAAU,CAACO,UAAX,CAAsBN,OAAtB,CAA8BO,WAA9B,GAA4CR,UAAU,CAACO,UAAX,CAAsBC,WAAlE;AAPR;AASH;;;WACD,qCAA4BR,UAA5B,EAAwC;AAAA;;AACpC,kCAGIA,UAAU,CAACO,UAHf;AAAA,UACaN,OADb,yBACIA,OADJ;AAAA,UAEmBN,aAFnB,yBAEIA,aAFJ;AAIAM,MAAAA,OAAO,CAACQ,aAAR,GAAwBT,UAAU,CAACS,aAAnC;AACA,UAAIC,OAAO,GAAGT,OAAO,CAACE,SAAR,CAAkBQ,GAAlB,CAAsB,UAAAC,QAAQ;AAAA,eAAI,MAAI,CAACC,2BAAL,CAAiCD,QAAjC,CAAJ;AAAA,OAA9B,CAAd;;AACA,WAAKhG,oBAAL,CAA0BkG,mBAA1B,CAA8CnB,aAA9C,EAA6De,OAA7D,EAAsET,OAAO,CAACf,cAAR,CAAuBhB,WAA7F;AACH;;;WACD,4BAAmB8B,UAAnB,EAA+Be,SAA/B,EAA0C;AACtC,mCAGIf,UAAU,CAACO,UAHf;AAAA,UACaN,OADb,0BACIA,OADJ;AAAA,UAEmBN,aAFnB,0BAEIA,aAFJ;AAIAM,MAAAA,OAAO,CAACQ,aAAR,GAAwBT,UAAU,CAACS,aAAnC;;AACA,WAAKO,kBAAL,CAAwBrB,aAAxB,EAAuCM,OAAvC,EAAgDc,SAAhD;;AACA,WAAKE,eAAL,CAAqBtB,aAArB,EAAoCM,OAApC;AACH;;;WACD,gCAAuBD,UAAvB,EAAmCe,SAAnC,EAA8C;AAC1C,mCAGIf,UAAU,CAACO,UAHf;AAAA,UACaN,OADb,0BACIA,OADJ;AAAA,UAEmBN,aAFnB,0BAEIA,aAFJ;;AAIA,WAAKqB,kBAAL,CAAwBrB,aAAxB,EAAuCM,OAAvC,EAAgDc,SAAhD;AACH;;;WACD,mCAA0Bf,UAA1B,EAAsCjF,IAAtC,EAA4C;AACxC,mCAGIiF,UAAU,CAACO,UAHf;AAAA,UACaN,OADb,0BACIA,OADJ;AAAA,UAEmBN,aAFnB,0BAEIA,aAFJ;;AAIA,UAAI,CAAC5E,IAAI,CAAC2D,MAAN,IAAgB,CAAC3D,IAAI,CAAC2D,MAAL,CAAYwC,QAAjC,EAA2C;AACvCjB,QAAAA,OAAO,CAACkB,qBAAR,CAA8BpG,IAAI,CAACqG,KAAnC;;AACA,aAAKxG,oBAAL,CAA0BuG,qBAA1B,CAAgDxB,aAAhD,EAA+D5E,IAAI,CAACqG,KAApE,EAA2EnB,OAAO,CAACoB,cAAnF;AACH;AACJ;;;WACD,+BAAsBrB,UAAtB,EAAkC;AAC9B,mCAGIA,UAAU,CAACO,UAHf;AAAA,UACaN,OADb,0BACIA,OADJ;AAAA,UAEmBN,aAFnB,0BAEIA,aAFJ;;AAIA,WAAKsB,eAAL,CAAqBtB,aAArB,EAAoCM,OAApC;;AACA,UAAI,aAAaD,UAAU,CAACrB,IAA5B,EAAkC;AAC9B,eAAO,KAAK/E,uBAAL,CAA6BoG,UAAU,CAACO,UAAX,CAAsBT,WAAtB,CAAkCP,SAA/D,CAAP;AACH;AACJ;;;WACD,oBAAW+B,iBAAX,EAA8B;AAAA;;AAC1B,UAAIC,mBAAmB,GAAGD,iBAAiB,IAAIA,iBAAiB,CAAC,CAAD,CAAtC,IAA6C,KAAKE,oBAAL,EAAvE;;AACA,UAAIC,UAAU,GAAG/I,mBAAmB,CAACD,MAApB,CAA2B,gCAA3B,CAAjB;AACA,aAAO,KAAKiJ,WAAL,CAAiB,KAAK7H,cAAL,CAAoB8H,mBAApB,EAAjB,EAA4DF,UAA5D,EAAwEG,IAAxE,CAA6E,UAAAC,KAAK,EAAI;AACzF,YACUlD,IADV,GAEIkD,KAFJ,CACIlD,IADJ;AAGA,eAAO,MAAI,CAAC1F,WAAL,CAAiB6I,eAAjB,CAAiCP,mBAAjC,EAAsD5C,IAAtD,CAAP;AACH,OALM,CAAP;AAMH;;;WACD,oBAAWwB,SAAX,EAAsB;AAAA;;AAClB,UAAIS,QAAQ,GAAGT,SAAS,IAAIA,SAAS,CAAC,CAAD,CAAtB,IAA6B,KAAKxG,MAAL,CAAYoI,wBAAZ,GAAuC,CAAvC,CAA5C;;AACA,aAAO,KAAKL,WAAL,CAAiB,KAAK7H,cAAL,CAAoBmI,mBAApB,EAAjB,EAA4DpB,QAAQ,CAACxE,QAAT,CAAkBuC,IAA9E,EAAoFiD,IAApF,CAAyF,UAAAK,KAAK,EAAI;AACrG,YACUtD,IADV,GAEIsD,KAFJ,CACItD,IADJ;AAGA,eAAO,MAAI,CAAC1F,WAAL,CAAiBiJ,UAAjB,CAA4BtB,QAA5B,EAAsCjC,IAAtC,CAAP;AACH,OALM,CAAP;AAMH;;;WACD,oBAAWwB,SAAX,EAAsB;AAAA;;AAClBA,MAAAA,SAAS,GAAGA,SAAS,IAAI,KAAKxG,MAAL,CAAYoI,wBAAZ,EAAzB;AACA,UAAII,QAAQ,GAAGhC,SAAS,CAAC,CAAD,CAAT,CAAa/D,QAAb,CAAsBuC,IAArC;AACA,UAAIyD,SAAS,GAAGjC,SAAS,CAACkC,MAA1B;AACA,aAAO,KAAKX,WAAL,CAAiB,KAAK7H,cAAL,CAAoByI,mBAApB,EAAjB,EAA4D;AAC/DH,QAAAA,QAAQ,EAAEA,QADqD;AAE/DC,QAAAA,SAAS,EAAEA;AAFoD,OAA5D,EAGJR,IAHI,CAGC;AAAA,eAAM,MAAI,CAAC3I,WAAL,CAAiBsJ,WAAjB,CAA6BpC,SAA7B,CAAN;AAAA,OAHD,CAAP;AAIH;;;WACD,kBAASA,SAAT,EAAoB;AAAA;;AAChBA,MAAAA,SAAS,GAAGA,SAAS,IAAI,KAAKxG,MAAL,CAAYoI,wBAAZ,EAAzB;AACA,aAAO,KAAKL,WAAL,CAAiB,KAAK7H,cAAL,CAAoB2I,aAApB,CAAkCrC,SAAlC,CAAjB,EAA+DyB,IAA/D,CAAoE,UAAAa,KAAK,EAAI;AAChF,YACYC,MADZ,GAEID,KAFJ,CACIC,MADJ;AAGA,eAAO,OAAI,CAACzJ,WAAL,CAAiB0J,SAAjB,CAA2BxC,SAA3B,EAAsCuC,MAAtC,CAAP;AACH,OALM,CAAP;AAMH;;;WACD,kBAASvC,SAAT,EAAoB;AAAA;;AAChBA,MAAAA,SAAS,GAAGA,SAAS,IAAI,KAAKxG,MAAL,CAAYoI,wBAAZ,EAAzB;AACA,aAAO,KAAKL,WAAL,CAAiB,KAAK7H,cAAL,CAAoB+I,aAApB,CAAkCzC,SAAlC,CAAjB,EAA+DyB,IAA/D,CAAoE,UAAAiB,KAAK,EAAI;AAChF,YACYH,MADZ,GAEIG,KAFJ,CACIH,MADJ;AAGA,eAAO,OAAI,CAACzJ,WAAL,CAAiB6J,SAAjB,CAA2B3C,SAA3B,EAAsCuC,MAAtC,CAAP;AACH,OALM,CAAP;AAMH;;;WACD,oBAAWK,iBAAX,EAA8B;AAC1B,WAAKC,oBAAL,GAA4B,SAASD,iBAAT,IAA8B,KAAK,CAAL,KAAWA,iBAAzC,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAAC,CAAD,CAAnH;;AACA,WAAKxI,aAAL,CAAmB0I,SAAnB;AACH;;;WACD,mBAAU9C,SAAV,EAAqB;AACjBA,MAAAA,SAAS,GAAGA,SAAS,IAAI,KAAKxG,MAAL,CAAYoI,wBAAZ,EAAzB;AACA,aAAO,KAAK9I,WAAL,CAAiBiK,aAAjB,CAA+B/C,SAA/B,CAAP;AACH;;;WACD,yBAAgBA,SAAhB,EAA2B;AACvBA,MAAAA,SAAS,GAAGA,SAAS,IAAI,KAAKxG,MAAL,CAAYoI,wBAAZ,EAAzB;AACA,aAAO,KAAK9I,WAAL,CAAiBsF,cAAjB,CAAgC4B,SAAhC,CAAP;AACH;;;WACD,yBAAgBR,aAAhB,EAA+BM,OAA/B,EAAwC;AACpC,WAAKrF,oBAAL,CAA0BuI,iBAA1B,CAA4CxD,aAA5C,EAA2DM,OAAO,CAACmD,iBAAnE,EAAsF,CAACnD,OAAO,CAACoD,OAA/F,EAAwGpD,OAAO,CAACqD,UAAhH;;AACA,UAAIrD,OAAO,CAACsD,gBAAR,EAAJ,EAAgC;AAC5B,aAAKC,eAAL,CAAqBvD,OAAO,CAACwD,SAA7B;AACH;AACJ;;;WACD,4BAAmB9D,aAAnB,EAAkCM,OAAlC,EAA2Cc,SAA3C,EAAsD;AAClDpB,MAAAA,aAAa,CAAC+D,QAAd,GAAyB,IAAzB;;AACA,UAAIzD,OAAO,CAACQ,aAAZ,EAA2B;AACvB,aAAKkD,+BAAL,CAAqChE,aAArC,EAAoDM,OAApD,EAA6Dc,SAA7D;AACH,OAFD,MAEO;AACH,aAAK6C,iCAAL,CAAuCjE,aAAvC,EAAsDM,OAAtD,EAA+Dc,SAA/D;AACH;AACJ;;;WACD,yCAAgCpB,aAAhC,EAA+CM,OAA/C,EAAwDc,SAAxD,EAAmE;AAC/D,UAAIH,QAAQ,GAAGX,OAAO,CAAC4D,4BAAR,EAAf;AACA,UAAI1B,QAAQ,GAAGlC,OAAO,CAACO,WAAvB;;AACA,UAAIsD,SAAS,GAAG,KAAKC,aAAL,CAAmBhD,SAAnB,EAA8BH,QAA9B,EAAwCuB,QAAxC,CAAhB;;AACAlC,MAAAA,OAAO,CAAC+D,yBAAR,CAAkCF,SAAlC;;AACA,UAAIG,kBAAkB,GAAG,KAAKC,sBAAL,CAA4BjE,OAA5B,CAAzB;;AACA,WAAKrF,oBAAL,CAA0BuJ,gCAA1B,CAA2DxE,aAA3D,EAA0EsE,kBAA1E;;AACA,UAAIhE,OAAO,CAACmE,aAAZ,EAA2B;AACvB,aAAKZ,eAAL,CAAqBvD,OAAO,CAACwD,SAA7B;AACH;AACJ;;;WACD,2CAAkC9D,aAAlC,EAAiDM,OAAjD,EAA0Dc,SAA1D,EAAqE;AACjE,UAAIH,QAAQ,GAAGX,OAAO,CAACoE,8BAAR,CAAuCtD,SAAS,CAACK,KAAjD,CAAf;;AACA,UAAI0C,SAAS,GAAG,KAAKC,aAAL,CAAmBhD,SAAnB,EAA8BH,QAA9B,CAAhB;;AACAX,MAAAA,OAAO,CAACqE,2BAAR,CAAoCvD,SAAS,CAACK,KAA9C,EAAqD0C,SAArD;;AACA,UAAIG,kBAAkB,GAAG,KAAKC,sBAAL,CAA4BjE,OAA5B,CAAzB;;AACA,WAAKrF,oBAAL,CAA0B2J,wBAA1B,CAAmD5E,aAAnD,EAAkEsE,kBAAlE;AACH;;;WACD,gCAAuBhE,OAAvB,EAAgC;AAC5B,UAAIuE,WAAW,GAAGvE,OAAO,CAACwE,UAAR,CAAmBC,kBAArC;AACA,aAAO;AACHC,QAAAA,eAAe,EAAE1E,OAAO,CAACwE,UAAR,CAAmBE,eADjC;AAEHxJ,QAAAA,IAAI,EAAEqJ,WAAW,CAAC5D,QAAZ,GAAuB,KAAKC,2BAAL,CAAiC2D,WAAW,CAAC5D,QAA7C,CAAvB,GAAgF,IAFnF;AAGHxF,QAAAA,SAAS,EAAEoJ,WAAW,CAACpJ,SAHpB;AAIHwJ,QAAAA,eAAe,EAAEJ,WAAW,CAACV;AAJ1B,OAAP;AAMH;;;WACD,uBAAc/C,SAAd,EAAyBH,QAAzB,EAAmCuB,QAAnC,EAA6C;AACzCA,MAAAA,QAAQ,GAAGA,QAAQ,KAAK,SAASvB,QAAT,IAAqB,KAAK,CAAL,KAAWA,QAAhC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACxE,QAAT,CAAkBuC,IAA3E,CAAnB;AACA,UAAImF,SAAS,GAAG/C,SAAS,CAAC+C,SAAV,IAAuBhL,mBAAmB,CAAC+L,GAApB,CAAwB9D,SAAS,CAAC+D,SAAlC,EAA6C3C,QAA7C,CAAvC;AACA,UAAI4C,SAAS,GAAG;AACZC,QAAAA,cAAc,EAAE,SAASpE,QAAT,IAAqB,KAAK,CAAL,KAAWA,QAAhC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACxE,QADjE;AAEZ0I,QAAAA,SAAS,EAAE/D,SAAS,CAAC+D,SAFT;AAGZhB,QAAAA,SAAS,EAAEA;AAHC,OAAhB;;AAKA,WAAKmB,aAAL,CAAmBF,SAAnB;;AACA,aAAOA,SAAS,CAACjB,SAAjB;AACH;;;WACD,qCAA4BlD,QAA5B,EAAsC;AAClC,aAAO;AACHsE,QAAAA,UAAU,EAAEtE,QAAQ,CAACxE,QAAT,CAAkBuC,IAD3B;AAEHwG,QAAAA,QAAQ,EAAE,KAAKC,iBAAL,CAAuBxE,QAAvB;AAFP,OAAP;AAIH;;;WACD,qBAAYyE,MAAZ,EAAoBC,cAApB,EAAoC;AAChC,WAAKC,eAAL,GAAuB,IAAIhN,QAAJ,EAAvB;AACA8M,MAAAA,MAAM,CAACG,IAAP,CAAYF,cAAZ;AACA,aAAO,KAAKC,eAAL,CAAqBE,OAArB,EAAP;AACH;;;WACD,yBAAgB3J,CAAhB,EAAmB;AACf,UAAI4C,MAAM,GAAG5C,CAAC,CAAC4J,YAAf;;AACA,UAAIhH,MAAJ,EAAY;AACR,aAAK6G,eAAL,CAAqBI,OAArB,CAA6BjH,MAA7B;AACH,OAFD,MAEO;AACH,aAAK6G,eAAL,CAAqBK,MAArB;AACH;AACJ;;;WACD,yBAAgBC,KAAhB,EAAuB;AACnB,WAAKhM,cAAL,CAAoBiM,eAApB,CAAoCD,KAApC;AACH;;;WACD,2BAAkB1K,IAAlB,EAAwB;AACpB,UAAI4K,mBAAmB,GAAG,KAAK7M,MAAL,CAAY,kBAAZ,CAA1B;;AACA,UAAI,CAAC6M,mBAAL,EAA0B;AACtB,eAAO,IAAP;AACH;;AACD,UAAIhL,IAAI,GAAGgL,mBAAmB,CAAC5K,IAAD,CAA9B;AACA,aAAOJ,IAAI,GAAGA,IAAI,CAACiL,SAAR,GAAoB,IAA/B;AACH;;;WACD,wBAAe;AACX,WAAKC,QAAL,GAAgB;AACZC,QAAAA,SAAS,EAAE,KAAKC,qBAAL,CAA2B,WAA3B,CADC;AAEZC,QAAAA,OAAO,EAAE,KAAKD,qBAAL,CAA2B,SAA3B,CAFG;AAGZE,QAAAA,UAAU,EAAE,KAAKF,qBAAL,CAA2B,YAA3B;AAHA,OAAhB;AAKH;;;WACD,8BAAqB;AACjB,aAAO7N,MAAM,oGAA6B;AACtCgO,QAAAA,KAAK,EAAE;AACHvE,UAAAA,wBAAwB,EAAE;AADvB,SAD+B;AAItCtH,QAAAA,mBAAmB,EAAE,IAJiB;AAKtC8L,QAAAA,gBAAgB,EAAE,IALoB;AAMtCL,QAAAA,SAAS,EAAE,IAN2B;AAOtCE,QAAAA,OAAO,EAAE,IAP6B;AAQtCC,QAAAA,UAAU,EAAE;AAR0B,OAA7B,CAAb;AAUH;;;WACD,wBAAeG,IAAf,EAAqB;AACjB,UAAI7H,IAAI,GAAG6H,IAAI,CAAC7H,IAAhB;;AACA,cAAQA,IAAR;AACI,aAAK,OAAL;AACI,eAAK8H,OAAL;AACA;;AACJ,aAAK,qBAAL;AACI,eAAK/L,wBAAL,CAA8B8L,IAAI,CAACX,KAAnC;;AACA;;AACJ,aAAK,kBAAL;AACI;;AACJ,aAAK,oCAAL;AACI,eAAKtL,aAAL,CAAmBrB,MAAnB,CAA0B,8BAA1B,EAA0DsN,IAAI,CAACX,KAA/D;;AACA;;AACJ,aAAK,WAAL;AACA,aAAK,SAAL;AACA,aAAK,YAAL;AACI,eAAKI,QAAL,CAActH,IAAd,IAAsB,KAAKwH,qBAAL,CAA2BxH,IAA3B,CAAtB;AACA;;AACJ;AACI,wGAAqB6H,IAArB;;AAlBR;AAoBH;;;WACD,yBAAgBE,gBAAhB,EAAkC;AAC9B,WAAKT,QAAL,CAAcC,SAAd,CAAwB;AACpBQ,QAAAA,gBAAgB,EAAEA;AADE,OAAxB;AAGH;;;WACD,uBAAcF,IAAd,EAAoB;AAChB,WAAKP,QAAL,CAAcG,OAAd,CAAsBI,IAAtB;AACH;;;WACD,gCAAuB;AACnB,aAAO,KAAKvN,WAAL,CAAiBkB,mBAAjB,EAAP;AACH;;;SACD,eAA0B;AACtB,aAAO,KAAK6I,oBAAL,IAA6B,KAAKxB,oBAAL,EAApC;AACH;;;;EAnbmC7I,M;;IAqblCuH,wB;AACF,oCAAYhB,cAAZ,EAA4BiB,SAA5B,EAAuCwG,aAAvC,EAAsD;AAAA;;AAClD,SAAKC,eAAL,GAAuB1H,cAAvB;AACA,SAAK2H,UAAL,GAAkB1G,SAAlB;AACA,SAAK2G,UAAL,GAAkB,CAAC,KAAKF,eAAL,CAAqB5J,eAAtB,IAAyC,KAAK6J,UAAL,CAAgBE,KAAhB,CAAsB,UAAAhM,IAAI;AAAA,aAAI,CAACA,IAAI,CAACqB,QAAL,CAAc4K,WAAnB;AAAA,KAA1B,CAA3D;AACA,SAAKC,MAAL,GAAc,KAAKJ,UAAL,CAAgBlG,GAAhB,CAAoB,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACxE,QAAb;AAAA,KAA5B,CAAd;AACA,SAAK8K,cAAL,GAAsB,KAAKD,MAAL,CAAY5E,MAAZ,GAAqB,CAA3C;AACA,SAAK8E,SAAL,GAAiBR,aAAa,CAACS,cAAd,EAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,WAAL,GAAmB;AACfC,MAAAA,WAAW,EAAE;AADE,KAAnB;AAGA,SAAKC,YAAL,GAAoB,EAApB;AACH;;;;WACD,+BAAsBtM,SAAtB,EAAiC;AAC7B,UAAI,KAAKiM,cAAT,EAAyB;AACrB,aAAKC,eAAL,sBAA2B,KAAKL,MAAhC;AACH,OAFD,MAEO;AACH,YAAI9L,IAAI,GAAG,KAAK8L,MAAL,CAAY7L,SAAZ,CAAX;;AACA,aAAKkM,eAAL,CAAqBK,IAArB,CAA0BxM,IAA1B;AACH;;AACD,UAAI,CAAC,KAAKyL,eAAL,CAAqBzI,iBAA1B,EAA6C;AACzC,aAAKoJ,eAAL,GAAuB,KAAKD,eAAL,CAAqBjF,MAArB,GAA8B,KAAK4E,MAAL,CAAY5E,MAA1C,GAAmD,GAA1E;AACH;AACJ;;;WACD,mCAA0ByB,SAA1B,EAAqC;AACjC,WAAK0D,WAAL,CAAiBC,WAAjB,GAA+B,CAA/B;AACA,WAAKD,WAAL,CAAiB7C,eAAjB,GAAmC,KAAKuC,cAAL,GAAsB,KAAKN,eAAL,CAAqBxJ,kBAA3C,GAAgE,KAAKwJ,eAAL,CAAqBzJ,sBAAxH;AACA,UAAI/B,SAAS,GAAG,KAAK8L,cAAL,GAAsB,CAAC,CAAvB,GAA2B,CAA3C;AACA,UAAItG,QAAQ,GAAG,KAAKiD,4BAAL,EAAf;;AACA,WAAK+D,sBAAL,CAA4BxM,SAA5B,EAAuCwF,QAAvC,EAAiDkD,SAAjD;AACH;;;WACD,qCAA4B1I,SAA5B,EAAuC0I,SAAvC,EAAkD;AAC9C,WAAK0D,WAAL,CAAiBC,WAAjB;AACA,WAAKD,WAAL,CAAiB7C,eAAjB,GAAmC,KAAK6C,WAAL,CAAiBC,WAAjB,GAA+B,CAA/B,GAAmChP,MAAM,CAAC,KAAKmO,eAAL,CAAqBjJ,yBAAtB,EAAiD,KAAK6J,WAAL,CAAiBC,WAAlE,CAAzC,GAA0H,KAAKb,eAAL,CAAqBzJ,sBAAlL;AACA,UAAIyD,QAAQ,GAAG,KAAKyD,8BAAL,CAAoCjJ,SAApC,CAAf;;AACA,WAAKwM,sBAAL,CAA4BxM,SAA5B,EAAuCwF,QAAvC,EAAiDkD,SAAjD;AACH;;;WACD,4BAAmB;AACf,aAAO,KAAK+D,kBAAL,MAA6B,KAAKR,cAAL,IAAuB,CAAC,KAAKhE,OAA7B,IAAwC,KAAK6D,cAAjF;AACH;;;WACD,wCAA+B;AAC3B,aAAO,KAAKA,cAAL,GAAsB,IAAtB,GAA6B,KAAKL,UAAL,CAAgB,CAAhB,CAApC;AACH;;;WACD,wCAA+BzL,SAA/B,EAA0C;AACtC,aAAO,KAAKyL,UAAL,CAAgBzL,SAAhB,CAAP;AACH;;;WACD,gCAAuBA,SAAvB,EAAkCwF,QAAlC,EAA4CkD,SAA5C,EAAuD;AACnD,WAAK0D,WAAL,CAAiB9C,kBAAjB,GAAsC;AAClCtJ,QAAAA,SAAS,EAAEA,SADuB;AAElCwF,QAAAA,QAAQ,EAAEA,QAFwB;AAGlCkD,QAAAA,SAAS,EAAEA;AAHuB,OAAtC;AAKH;;;WACD,8BAAqB;AACjB,aAAO,KAAKwD,eAAL,CAAqBjF,MAArB,GAA8B,CAArC;AACH;;;SACD,eAAqB;AACjB,aAAO,KAAKuE,eAAZ;AACH;;;SACD,eAAgB;AACZ,aAAO,KAAKC,UAAZ;AACH;;;SACD,eAAkB;AACd,aAAO,KAAKa,YAAZ;AACH,K;SACD,aAAgB7B,KAAhB,EAAuB;AACnB,WAAK6B,YAAL,GAAoB7B,KAApB;AACH;;;SACD,eAAiB;AACb,aAAO,KAAK2B,WAAZ;AACH;;;SACD,eAAoB;AAChB,aAAO,KAAKH,cAAZ;AACH,K;SACD,aAAkBxB,KAAlB,EAAyB;AACrB,WAAKwB,cAAL,GAAsBxB,KAAtB;AACH;;;SACD,eAAoB;AAChB,aAAO,KAAKqB,cAAZ;AACH;;;SACD,eAAgB;AACZ,aAAO,KAAKJ,UAAZ;AACH;;;SACD,eAAwB;AACpB,aAAO,KAAKI,cAAL,GAAsBzO,MAAM,CAAC,KAAKmO,eAAL,CAAqBnJ,8BAAtB,EAAsD,KAAKwJ,MAAL,CAAY5E,MAAlE,EAA0E,KAAK8E,SAA/E,CAA5B,GAAwH1O,MAAM,CAAC,KAAKmO,eAAL,CAAqB3J,2BAAtB,EAAmD,KAAKkK,SAAxD,CAArI;AACH;;;SACD,eAAqB;AACjB,UAAI,KAAKU,kBAAL,EAAJ,EAA+B;AAC3B,eAAO,KAAKX,cAAL,GAAsBzO,MAAM,CAAC,KAAKmO,eAAL,CAAqBlJ,2BAAtB,EAAmD,KAAK4J,eAAL,CAAqBjF,MAAxE,EAAgF,KAAK8E,SAArF,CAA5B,GAA8H1O,MAAM,CAAC,KAAKmO,eAAL,CAAqB1J,wBAAtB,EAAgD,KAAKiK,SAArD,CAA3I;AACH,OAFD,MAEO;AACH,eAAO,KAAKD,cAAL,GAAsBzO,MAAM,CAAC,KAAKmO,eAAL,CAAqBjJ,yBAAtB,EAAiD,KAAKsJ,MAAL,CAAY5E,MAA7D,CAA5B,GAAmG,KAAKuE,eAAL,CAAqBzJ,sBAA/H;AACH;AACJ;;;SACD,eAAwB;AACpB,aAAO,KAAKkG,OAAL,GAAe,KAAKyE,cAApB,GAAqC,KAAKrD,UAAL,CAAgBE,eAA5D;AACH;;;SACD,eAAiB;AACb,aAAO,KAAKtB,OAAL,IAAgB,CAAC,KAAKwE,kBAAL,EAAjB,GAA6C,KAAKjB,eAAL,CAAqBxI,eAAlE,GAAoF,KAAK,CAAhG;AACH;;;SACD,eAAqB;AACjB,aAAO,KAAKmJ,eAAZ;AACH;;;SACD,eAAc;AACV,aAAO,CAAC,KAAKC,WAAL,CAAiBC,WAAzB;AACH;;;;;;AAEL,eAAe1O,yBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    format\r\n} from \"../../core/utils/string\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\r\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\r\nimport {\r\n    FileManagerMessages\r\n} from \"./ui.file_manager.messages\";\r\nclass FileManagerEditingControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._controller = this.option(\"controller\");\r\n        this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\r\n        this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\r\n        this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\r\n        this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\r\n        this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\r\n        this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\r\n        this._model = this.option(\"model\");\r\n        this._uploadOperationInfoMap = {};\r\n        this._dialogManager = new FileManagerDialogManager(this.$element(), {\r\n            chooseDirectoryDialog: {\r\n                provider: this._controller._fileProvider,\r\n                getDirectories: this._controller.getDirectories.bind(this._controller),\r\n                getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\r\n            },\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            onDialogClosed: this._onDialogClosed.bind(this)\r\n        });\r\n        this._fileUploader = this._createFileUploader();\r\n        var notificationControl = this.option(\"notificationControl\");\r\n        if (notificationControl) {\r\n            this._initNotificationControl(notificationControl)\r\n        }\r\n        this._createMetadataMap()\r\n    }\r\n    _initNotificationControl(notificationControl) {\r\n        this._notificationControl = notificationControl;\r\n        this._notificationControl.option({\r\n            onOperationCanceled: _ref => {\r\n                var {\r\n                    info: info\r\n                } = _ref;\r\n                return this._onCancelUploadSession(info)\r\n            },\r\n            onOperationItemCanceled: _ref2 => {\r\n                var {\r\n                    item: item,\r\n                    itemIndex: itemIndex\r\n                } = _ref2;\r\n                return this._onCancelFileUpload(item, itemIndex)\r\n            }\r\n        })\r\n    }\r\n    _getFileUploaderComponent() {\r\n        return FileManagerFileUploader\r\n    }\r\n    _createFileUploader() {\r\n        var $fileUploader = $(\"<div>\").appendTo(this.$element());\r\n        return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\r\n            getController: this._getFileUploaderController.bind(this),\r\n            dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\r\n            onUploadSessionStarted: e => this._onUploadSessionStarted(e),\r\n            onUploadProgress: e => this._onUploadProgress(e)\r\n        })\r\n    }\r\n    setUploaderDropZone($element) {\r\n        this._fileUploader.option(\"dropZone\", $element)\r\n    }\r\n    _getFileUploaderController() {\r\n        var uploadDirectory = this.uploadDirectoryInfo.fileItem;\r\n        return {\r\n            chunkSize: this._controller.getFileUploadChunkSize(),\r\n            uploadFileChunk: (fileData, chunksInfo) => this._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory),\r\n            abortFileUpload: (fileData, chunksInfo) => this._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory)\r\n        }\r\n    }\r\n    _createMetadataMap() {\r\n        this._metadataMap = {\r\n            create: {\r\n                action: arg => this._tryCreate(arg),\r\n                affectsAllItems: true,\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\r\n            },\r\n            rename: {\r\n                action: arg => this._tryRename(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\r\n            },\r\n            delete: {\r\n                action: arg => this._tryDelete(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\r\n            },\r\n            move: {\r\n                action: arg => this._tryMove(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\r\n            },\r\n            copy: {\r\n                action: arg => this._tryCopy(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\r\n            },\r\n            upload: {\r\n                action: arg => this._tryUpload(arg),\r\n                allowCancel: true,\r\n                allowItemProgress: true,\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\r\n                canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\r\n            },\r\n            download: {\r\n                action: arg => this._download(arg)\r\n            },\r\n            getItemContent: {\r\n                action: arg => this._getItemContent(arg)\r\n            },\r\n            getItems: {\r\n                singleItemProcessingMessage: \"\",\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\r\n            }\r\n        }\r\n    }\r\n    getCommandActions() {\r\n        var result = {};\r\n        each(this._metadataMap, name => {\r\n            if (Object.prototype.hasOwnProperty.call(this._metadataMap, name)) {\r\n                result[name] = arg => this._executeAction(name, arg)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    _executeAction(actionName, arg) {\r\n        var actionMetadata = this._metadataMap[actionName];\r\n        return actionMetadata ? actionMetadata.action(arg) : null\r\n    }\r\n    _onCancelUploadSession(info) {\r\n        this._fileUploader.cancelUpload(info.uploadSessionId)\r\n    }\r\n    _onCancelFileUpload(item, itemIndex) {\r\n        this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex)\r\n    }\r\n    _onUploadProgress(_ref3) {\r\n        var {\r\n            sessionId: sessionId,\r\n            fileIndex: fileIndex,\r\n            commonValue: commonValue,\r\n            fileValue: fileValue\r\n        } = _ref3;\r\n        var operationInfo = this._uploadOperationInfoMap[sessionId];\r\n        this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue)\r\n    }\r\n    _onUploadSessionStarted(_ref4) {\r\n        var {\r\n            sessionInfo: sessionInfo\r\n        } = _ref4;\r\n        this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo)\r\n    }\r\n    _onEditActionStarting(actionInfo) {\r\n        var actionMetadata = this._metadataMap[actionInfo.name];\r\n        var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\r\n        var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\r\n        extend(actionInfo.customData, {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        });\r\n        switch (actionInfo.name) {\r\n            case \"upload\":\r\n                var sessionId = actionInfo.customData.sessionInfo.sessionId;\r\n                operationInfo.uploadSessionId = sessionId;\r\n                this._uploadOperationInfoMap[sessionId] = operationInfo;\r\n                break;\r\n            case \"rename\":\r\n                actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName\r\n        }\r\n    }\r\n    _onEditActionResultAcquired(actionInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        context.singleRequest = actionInfo.singleRequest;\r\n        var details = context.itemInfos.map(itemInfo => this._getItemProgressDisplayInfo(itemInfo));\r\n        this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel)\r\n    }\r\n    _onEditActionError(actionInfo, errorInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        context.singleRequest = actionInfo.singleRequest;\r\n        this._handleActionError(operationInfo, context, errorInfo);\r\n        this._completeAction(operationInfo, context)\r\n    }\r\n    _onEditActionItemError(actionInfo, errorInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        this._handleActionError(operationInfo, context, errorInfo)\r\n    }\r\n    _onCompleteEditActionItem(actionInfo, info) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        if (!info.result || !info.result.canceled) {\r\n            context.completeOperationItem(info.index);\r\n            this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress)\r\n        }\r\n    }\r\n    _onCompleteEditAction(actionInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        this._completeAction(operationInfo, context);\r\n        if (\"upload\" === actionInfo.name) {\r\n            delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId]\r\n        }\r\n    }\r\n    _tryCreate(parentDirectories) {\r\n        var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\r\n        var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\r\n        return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(_ref5 => {\r\n            var {\r\n                name: name\r\n            } = _ref5;\r\n            return this._controller.createDirectory(parentDirectoryInfo, name)\r\n        })\r\n    }\r\n    _tryRename(itemInfos) {\r\n        var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\r\n        return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(_ref6 => {\r\n            var {\r\n                name: name\r\n            } = _ref6;\r\n            return this._controller.renameItem(itemInfo, name)\r\n        })\r\n    }\r\n    _tryDelete(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        var itemName = itemInfos[0].fileItem.name;\r\n        var itemCount = itemInfos.length;\r\n        return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\r\n            itemName: itemName,\r\n            itemCount: itemCount\r\n        }).then(() => this._controller.deleteItems(itemInfos))\r\n    }\r\n    _tryMove(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(_ref7 => {\r\n            var {\r\n                folder: folder\r\n            } = _ref7;\r\n            return this._controller.moveItems(itemInfos, folder)\r\n        })\r\n    }\r\n    _tryCopy(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(_ref8 => {\r\n            var {\r\n                folder: folder\r\n            } = _ref8;\r\n            return this._controller.copyItems(itemInfos, folder)\r\n        })\r\n    }\r\n    _tryUpload(destinationFolder) {\r\n        this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\r\n        this._fileUploader.tryUpload()\r\n    }\r\n    _download(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        return this._controller.downloadItems(itemInfos)\r\n    }\r\n    _getItemContent(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        return this._controller.getItemContent(itemInfos)\r\n    }\r\n    _completeAction(operationInfo, context) {\r\n        this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\r\n        if (context.hasModifiedItems()) {\r\n            this._raiseOnSuccess(context.onlyFiles)\r\n        }\r\n    }\r\n    _handleActionError(operationInfo, context, errorInfo) {\r\n        operationInfo.hasError = true;\r\n        if (context.singleRequest) {\r\n            this._handleSingleRequestActionError(operationInfo, context, errorInfo)\r\n        } else {\r\n            this._handleMultipleRequestActionError(operationInfo, context, errorInfo)\r\n        }\r\n    }\r\n    _handleSingleRequestActionError(operationInfo, context, errorInfo) {\r\n        var itemInfo = context.getItemForSingleRequestError();\r\n        var itemName = context.itemNewName;\r\n        var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\r\n        context.processSingleRequestError(errorText);\r\n        var operationErrorInfo = this._getOperationErrorInfo(context);\r\n        this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\r\n        if (context.multipleItems) {\r\n            this._raiseOnSuccess(context.onlyFiles)\r\n        }\r\n    }\r\n    _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\r\n        var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\r\n        var errorText = this._getErrorText(errorInfo, itemInfo);\r\n        context.processMultipleRequestError(errorInfo.index, errorText);\r\n        var operationErrorInfo = this._getOperationErrorInfo(context);\r\n        this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo)\r\n    }\r\n    _getOperationErrorInfo(context) {\r\n        var detailError = context.errorState.currentDetailError;\r\n        return {\r\n            commonErrorText: context.errorState.commonErrorText,\r\n            item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\r\n            itemIndex: detailError.itemIndex,\r\n            detailErrorText: detailError.errorText\r\n        }\r\n    }\r\n    _getErrorText(errorInfo, itemInfo, itemName) {\r\n        itemName = itemName || (null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name);\r\n        var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\r\n        var errorArgs = {\r\n            fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorText\r\n        };\r\n        this._raiseOnError(errorArgs);\r\n        return errorArgs.errorText\r\n    }\r\n    _getItemProgressDisplayInfo(itemInfo) {\r\n        return {\r\n            commonText: itemInfo.fileItem.name,\r\n            imageUrl: this._getItemThumbnail(itemInfo)\r\n        }\r\n    }\r\n    _showDialog(dialog, dialogArgument) {\r\n        this._dialogDeferred = new Deferred;\r\n        dialog.show(dialogArgument);\r\n        return this._dialogDeferred.promise()\r\n    }\r\n    _onDialogClosed(e) {\r\n        var result = e.dialogResult;\r\n        if (result) {\r\n            this._dialogDeferred.resolve(result)\r\n        } else {\r\n            this._dialogDeferred.reject()\r\n        }\r\n    }\r\n    updateDialogRtl(value) {\r\n        this._dialogManager.updateDialogRtl(value)\r\n    }\r\n    _getItemThumbnail(item) {\r\n        var itemThumbnailGetter = this.option(\"getItemThumbnail\");\r\n        if (!itemThumbnailGetter) {\r\n            return null\r\n        }\r\n        var info = itemThumbnailGetter(item);\r\n        return info ? info.thumbnail : null\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onSuccess: this._createActionByOption(\"onSuccess\"),\r\n            onError: this._createActionByOption(\"onError\"),\r\n            onCreating: this._createActionByOption(\"onCreating\")\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            model: {\r\n                getMultipleSelectedItems: null\r\n            },\r\n            notificationControl: null,\r\n            getItemThumbnail: null,\r\n            onSuccess: null,\r\n            onError: null,\r\n            onCreating: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"model\":\r\n                this.repaint();\r\n                break;\r\n            case \"notificationControl\":\r\n                this._initNotificationControl(args.value);\r\n                break;\r\n            case \"getItemThumbnail\":\r\n                break;\r\n            case \"uploadDropZonePlaceholderContainer\":\r\n                this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\r\n                break;\r\n            case \"onSuccess\":\r\n            case \"onError\":\r\n            case \"onCreating\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _raiseOnSuccess(updatedOnlyFiles) {\r\n        this._actions.onSuccess({\r\n            updatedOnlyFiles: updatedOnlyFiles\r\n        })\r\n    }\r\n    _raiseOnError(args) {\r\n        this._actions.onError(args)\r\n    }\r\n    _getCurrentDirectory() {\r\n        return this._controller.getCurrentDirectory()\r\n    }\r\n    get uploadDirectoryInfo() {\r\n        return this._uploadDirectoryInfo || this._getCurrentDirectory()\r\n    }\r\n}\r\nclass FileManagerActionContext {\r\n    constructor(actionMetadata, itemInfos, directoryInfo) {\r\n        this._actionMetadata = actionMetadata;\r\n        this._itemInfos = itemInfos;\r\n        this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(info => !info.fileItem.isDirectory);\r\n        this._items = this._itemInfos.map(itemInfo => itemInfo.fileItem);\r\n        this._multipleItems = this._items.length > 1;\r\n        this._location = directoryInfo.getDisplayName();\r\n        this._singleRequest = true;\r\n        this._completedItems = [];\r\n        this._commonProgress = 0;\r\n        this._errorState = {\r\n            failedCount: 0\r\n        };\r\n        this._itemNewName = \"\"\r\n    }\r\n    completeOperationItem(itemIndex) {\r\n        if (this._singleRequest) {\r\n            this._completedItems = [...this._items]\r\n        } else {\r\n            var item = this._items[itemIndex];\r\n            this._completedItems.push(item)\r\n        }\r\n        if (!this._actionMetadata.allowItemProgress) {\r\n            this._commonProgress = this._completedItems.length / this._items.length * 100\r\n        }\r\n    }\r\n    processSingleRequestError(errorText) {\r\n        this._errorState.failedCount = 1;\r\n        this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\r\n        var itemIndex = this._multipleItems ? -1 : 1;\r\n        var itemInfo = this.getItemForSingleRequestError();\r\n        this._setCurrentDetailError(itemIndex, itemInfo, errorText)\r\n    }\r\n    processMultipleRequestError(itemIndex, errorText) {\r\n        this._errorState.failedCount++;\r\n        this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\r\n        var itemInfo = this.getItemForMultipleRequestError(itemIndex);\r\n        this._setCurrentDetailError(itemIndex, itemInfo, errorText)\r\n    }\r\n    hasModifiedItems() {\r\n        return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems\r\n    }\r\n    getItemForSingleRequestError() {\r\n        return this._multipleItems ? null : this._itemInfos[0]\r\n    }\r\n    getItemForMultipleRequestError(itemIndex) {\r\n        return this._itemInfos[itemIndex]\r\n    }\r\n    _setCurrentDetailError(itemIndex, itemInfo, errorText) {\r\n        this._errorState.currentDetailError = {\r\n            itemIndex: itemIndex,\r\n            itemInfo: itemInfo,\r\n            errorText: errorText\r\n        }\r\n    }\r\n    _hasCompletedItems() {\r\n        return this._completedItems.length > 0\r\n    }\r\n    get actionMetadata() {\r\n        return this._actionMetadata\r\n    }\r\n    get itemInfos() {\r\n        return this._itemInfos\r\n    }\r\n    get itemNewName() {\r\n        return this._itemNewName\r\n    }\r\n    set itemNewName(value) {\r\n        this._itemNewName = value\r\n    }\r\n    get errorState() {\r\n        return this._errorState\r\n    }\r\n    get singleRequest() {\r\n        return this._singleRequest\r\n    }\r\n    set singleRequest(value) {\r\n        this._singleRequest = value\r\n    }\r\n    get multipleItems() {\r\n        return this._multipleItems\r\n    }\r\n    get onlyFiles() {\r\n        return this._onlyFiles\r\n    }\r\n    get processingMessage() {\r\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location)\r\n    }\r\n    get successMessage() {\r\n        if (this._hasCompletedItems()) {\r\n            return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location)\r\n        } else {\r\n            return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage\r\n        }\r\n    }\r\n    get completionMessage() {\r\n        return this.success ? this.successMessage : this.errorState.commonErrorText\r\n    }\r\n    get statusText() {\r\n        return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0\r\n    }\r\n    get commonProgress() {\r\n        return this._commonProgress\r\n    }\r\n    get success() {\r\n        return !this._errorState.failedCount\r\n    }\r\n}\r\nexport default FileManagerEditingControl;\r\n"]},"metadata":{},"sourceType":"module"}