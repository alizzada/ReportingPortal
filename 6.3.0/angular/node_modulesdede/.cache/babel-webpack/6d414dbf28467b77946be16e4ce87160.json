{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sankey/graph.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar WHITE = \"white\";\nvar GRAY = \"gray\";\nvar BLACK = \"black\";\nvar routines = {\n  maxOfArray: function maxOfArray(arr, callback) {\n    var m = 0;\n\n    var callback_function = function callback_function(v) {\n      return v;\n    };\n\n    if (callback) {\n      callback_function = callback;\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n      if (callback_function(arr[i]) > m) {\n        m = callback_function(arr[i]);\n      }\n    }\n\n    return m;\n  }\n};\n\nvar getVertices = function getVertices(links) {\n  var vert = [];\n  links.forEach(function (link) {\n    if (-1 === vert.indexOf(link[0])) {\n      vert.push(link[0]);\n    }\n\n    if (-1 === vert.indexOf(link[1])) {\n      vert.push(link[1]);\n    }\n  });\n  return vert;\n};\n\nvar getAdjacentVertices = function getAdjacentVertices(links, vertex) {\n  var avert = [];\n  links.forEach(function (link) {\n    if (link[0] === vertex && -1 === avert.indexOf(link[1])) {\n      avert.push(link[1]);\n    }\n  });\n  return avert;\n};\n\nvar getReverseAdjacentVertices = function getReverseAdjacentVertices(links, vertex) {\n  var avert = [];\n  links.forEach(function (link) {\n    if (link[1] === vertex && -1 === avert.indexOf(link[0])) {\n      avert.push(link[0]);\n    }\n  });\n  return avert;\n};\n\nvar struct = {\n  _hasCycle: false,\n  _sortedList: [],\n  hasCycle: function hasCycle(links) {\n    var _this = this;\n\n    this._hasCycle = false;\n    this._sortedList = [];\n    var vertices = {};\n    var allVertices = getVertices(links);\n    allVertices.forEach(function (vertex) {\n      vertices[vertex] = {\n        color: WHITE\n      };\n    });\n    allVertices.forEach(function (vertex) {\n      if (vertices[vertex].color === WHITE) {\n        _this._depthFirstSearch(links, vertices, vertex);\n      }\n    });\n\n    this._sortedList.reverse();\n\n    return this._hasCycle;\n  },\n  _depthFirstSearch: function _depthFirstSearch(links, vertices, vertex) {\n    vertices[vertex].color = GRAY;\n    var averts = getAdjacentVertices(links, vertex);\n\n    for (var a = 0; a < averts.length; a++) {\n      if (vertices[averts[a]].color === WHITE) {\n        this._depthFirstSearch(links, vertices, averts[a]);\n      } else if (vertices[averts[a]].color === GRAY) {\n        this._hasCycle = true;\n      }\n    }\n\n    this._sortedList.push({\n      name: vertex,\n      lp: null,\n      incoming: getReverseAdjacentVertices(links, vertex),\n      outgoing: getAdjacentVertices(links, vertex)\n    });\n\n    vertices[vertex].color = BLACK;\n  },\n  computeLongestPaths: function computeLongestPaths(links) {\n    var sortedVertices = this._sortedList;\n    sortedVertices.forEach(function (vertex) {\n      var averts = getReverseAdjacentVertices(links, vertex.name);\n\n      if (0 === averts.length) {\n        vertex.lp = 0;\n      } else {\n        var maxLP = [];\n        averts.forEach(function (adjacentVertex) {\n          maxLP.push(sortedVertices.filter(function (sv) {\n            return sv.name === adjacentVertex;\n          })[0].lp);\n        });\n        vertex.lp = routines.maxOfArray(maxLP) + 1;\n      }\n    });\n    return this._sortedList;\n  }\n};\nexport default {\n  struct: struct,\n  routines: routines,\n  getVertices: getVertices,\n  getAdjacentVertices: getAdjacentVertices,\n  getReverseAdjacentVertices: getReverseAdjacentVertices\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/viz/sankey/graph.js"],"names":["WHITE","GRAY","BLACK","routines","maxOfArray","arr","callback","m","callback_function","v","i","length","getVertices","links","vert","forEach","link","indexOf","push","getAdjacentVertices","vertex","avert","getReverseAdjacentVertices","struct","_hasCycle","_sortedList","hasCycle","vertices","allVertices","color","_depthFirstSearch","reverse","averts","a","name","lp","incoming","outgoing","computeLongestPaths","sortedVertices","maxLP","adjacentVertex","filter","sv"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/sankey/graph.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nvar WHITE = \"white\";\r\nvar GRAY = \"gray\";\r\nvar BLACK = \"black\";\r\nvar routines = {\r\n    maxOfArray: function(arr, callback) {\r\n        var m = 0;\r\n        var callback_function = v => v;\r\n        if (callback) {\r\n            callback_function = callback\r\n        }\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (callback_function(arr[i]) > m) {\r\n                m = callback_function(arr[i])\r\n            }\r\n        }\r\n        return m\r\n    }\r\n};\r\nvar getVertices = function(links) {\r\n    var vert = [];\r\n    links.forEach(link => {\r\n        if (-1 === vert.indexOf(link[0])) {\r\n            vert.push(link[0])\r\n        }\r\n        if (-1 === vert.indexOf(link[1])) {\r\n            vert.push(link[1])\r\n        }\r\n    });\r\n    return vert\r\n};\r\nvar getAdjacentVertices = function(links, vertex) {\r\n    var avert = [];\r\n    links.forEach(link => {\r\n        if (link[0] === vertex && -1 === avert.indexOf(link[1])) {\r\n            avert.push(link[1])\r\n        }\r\n    });\r\n    return avert\r\n};\r\nvar getReverseAdjacentVertices = function(links, vertex) {\r\n    var avert = [];\r\n    links.forEach(link => {\r\n        if (link[1] === vertex && -1 === avert.indexOf(link[0])) {\r\n            avert.push(link[0])\r\n        }\r\n    });\r\n    return avert\r\n};\r\nvar struct = {\r\n    _hasCycle: false,\r\n    _sortedList: [],\r\n    hasCycle: function(links) {\r\n        this._hasCycle = false;\r\n        this._sortedList = [];\r\n        var vertices = {};\r\n        var allVertices = getVertices(links);\r\n        allVertices.forEach(vertex => {\r\n            vertices[vertex] = {\r\n                color: WHITE\r\n            }\r\n        });\r\n        allVertices.forEach(vertex => {\r\n            if (vertices[vertex].color === WHITE) {\r\n                this._depthFirstSearch(links, vertices, vertex)\r\n            }\r\n        });\r\n        this._sortedList.reverse();\r\n        return this._hasCycle\r\n    },\r\n    _depthFirstSearch: function(links, vertices, vertex) {\r\n        vertices[vertex].color = GRAY;\r\n        var averts = getAdjacentVertices(links, vertex);\r\n        for (var a = 0; a < averts.length; a++) {\r\n            if (vertices[averts[a]].color === WHITE) {\r\n                this._depthFirstSearch(links, vertices, averts[a])\r\n            } else if (vertices[averts[a]].color === GRAY) {\r\n                this._hasCycle = true\r\n            }\r\n        }\r\n        this._sortedList.push({\r\n            name: vertex,\r\n            lp: null,\r\n            incoming: getReverseAdjacentVertices(links, vertex),\r\n            outgoing: getAdjacentVertices(links, vertex)\r\n        });\r\n        vertices[vertex].color = BLACK\r\n    },\r\n    computeLongestPaths(links) {\r\n        var sortedVertices = this._sortedList;\r\n        sortedVertices.forEach(vertex => {\r\n            var averts = getReverseAdjacentVertices(links, vertex.name);\r\n            if (0 === averts.length) {\r\n                vertex.lp = 0\r\n            } else {\r\n                var maxLP = [];\r\n                averts.forEach(adjacentVertex => {\r\n                    maxLP.push(sortedVertices.filter(sv => sv.name === adjacentVertex)[0].lp)\r\n                });\r\n                vertex.lp = routines.maxOfArray(maxLP) + 1\r\n            }\r\n        });\r\n        return this._sortedList\r\n    }\r\n};\r\nexport default {\r\n    struct: struct,\r\n    routines: routines,\r\n    getVertices: getVertices,\r\n    getAdjacentVertices: getAdjacentVertices,\r\n    getReverseAdjacentVertices: getReverseAdjacentVertices\r\n};\r\n"]},"metadata":{},"sourceType":"module"}