{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport cellFormatHelper from \"./excel.cell_format_helper\";\nimport fillHelper from \"./excel.fill_helper\";\nimport fontHelper from \"./excel.font_helper\";\nimport numberFormatHelper from \"./excel.number_format_helper\";\n\nvar ExcelFile = /*#__PURE__*/function () {\n  function ExcelFile() {\n    _classCallCheck(this, ExcelFile);\n\n    this._cellFormatTags = [];\n    this._fillTags = [];\n    this._fontTags = [];\n    this._numberFormatTags = [];\n\n    this._fillTags.push(fillHelper.tryCreateTag({\n      patternFill: {\n        patternType: \"none\"\n      }\n    }));\n  }\n\n  _createClass(ExcelFile, [{\n    key: \"registerCellFormat\",\n    value: function registerCellFormat(cellFormat) {\n      var result;\n      var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\n        registerFill: this.registerFill.bind(this),\n        registerFont: this.registerFont.bind(this),\n        registerNumberFormat: this.registerNumberFormat.bind(this)\n      });\n\n      if (isDefined(cellFormatTag)) {\n        for (var i = 0; i < this._cellFormatTags.length; i++) {\n          if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\n            result = i;\n            break;\n          }\n        }\n\n        if (void 0 === result) {\n          result = this._cellFormatTags.push(cellFormatTag) - 1;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"generateCellFormatsXml\",\n    value: function generateCellFormatsXml() {\n      var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(function (tag) {\n        return cellFormatHelper.toXml(tag);\n      });\n\n      return tagHelper.toXml(\"cellXfs\", {\n        count: cellFormatTagsAsXmlStringsArray.length\n      }, cellFormatTagsAsXmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"registerFill\",\n    value: function registerFill(fill) {\n      var result;\n      var fillTag = fillHelper.tryCreateTag(fill);\n\n      if (isDefined(fillTag)) {\n        for (var i = 0; i < this._fillTags.length; i++) {\n          if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\n            result = i;\n            break;\n          }\n        }\n\n        if (void 0 === result) {\n          if (this._fillTags.length < 2) {\n            this._fillTags.push(fillHelper.tryCreateTag({\n              patternFill: {\n                patternType: \"Gray125\"\n              }\n            }));\n          }\n\n          result = this._fillTags.push(fillTag) - 1;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"generateFillsXml\",\n    value: function generateFillsXml() {\n      var tagsAsXmlStringsArray = this._fillTags.map(function (tag) {\n        return fillHelper.toXml(tag);\n      });\n\n      return tagHelper.toXml(\"fills\", {\n        count: tagsAsXmlStringsArray.length\n      }, tagsAsXmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"registerFont\",\n    value: function registerFont(font) {\n      var result;\n      var fontTag = fontHelper.tryCreateTag(font);\n\n      if (isDefined(fontTag)) {\n        for (var i = 0; i < this._fontTags.length; i++) {\n          if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\n            result = i;\n            break;\n          }\n        }\n\n        if (void 0 === result) {\n          result = this._fontTags.push(fontTag) - 1;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"generateFontsXml\",\n    value: function generateFontsXml() {\n      var xmlStringsArray = this._fontTags.map(function (tag) {\n        return fontHelper.toXml(tag);\n      });\n\n      return tagHelper.toXml(\"fonts\", {\n        count: xmlStringsArray.length\n      }, xmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"_convertNumberFormatIndexToId\",\n    value: function _convertNumberFormatIndexToId(index) {\n      return 165 + index;\n    }\n  }, {\n    key: \"registerNumberFormat\",\n    value: function registerNumberFormat(numberFormat) {\n      var result;\n      var tag = numberFormatHelper.tryCreateTag(numberFormat);\n\n      if (isDefined(tag)) {\n        for (var i = 0; i < this._numberFormatTags.length; i++) {\n          if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\n            result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\n            break;\n          }\n        }\n\n        if (void 0 === result) {\n          tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\n          result = tag[numberFormatHelper.ID_PROPERTY_NAME];\n\n          this._numberFormatTags.push(tag);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"generateNumberFormatsXml\",\n    value: function generateNumberFormatsXml() {\n      if (this._numberFormatTags.length > 0) {\n        var xmlStringsArray = this._numberFormatTags.map(function (tag) {\n          return numberFormatHelper.toXml(tag);\n        });\n\n        return tagHelper.toXml(\"numFmts\", {\n          count: xmlStringsArray.length\n        }, xmlStringsArray.join(\"\"));\n      } else {\n        return \"\";\n      }\n    }\n  }], [{\n    key: \"copyCellFormat\",\n    value: function copyCellFormat(source) {\n      return cellFormatHelper.copy(source);\n    }\n  }]);\n\n  return ExcelFile;\n}();\n\nexport { ExcelFile as default };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/exporter/excel/excel.file.js"],"names":["isDefined","tagHelper","cellFormatHelper","fillHelper","fontHelper","numberFormatHelper","ExcelFile","_cellFormatTags","_fillTags","_fontTags","_numberFormatTags","push","tryCreateTag","patternFill","patternType","cellFormat","result","cellFormatTag","registerFill","bind","registerFont","registerNumberFormat","i","length","areEqual","cellFormatTagsAsXmlStringsArray","map","tag","toXml","count","join","fill","fillTag","tagsAsXmlStringsArray","font","fontTag","xmlStringsArray","index","numberFormat","ID_PROPERTY_NAME","_convertNumberFormatIndexToId","source","copy"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport tagHelper from \"./excel.tag_helper\";\r\nimport cellFormatHelper from \"./excel.cell_format_helper\";\r\nimport fillHelper from \"./excel.fill_helper\";\r\nimport fontHelper from \"./excel.font_helper\";\r\nimport numberFormatHelper from \"./excel.number_format_helper\";\r\nexport default class ExcelFile {\r\n    constructor() {\r\n        this._cellFormatTags = [];\r\n        this._fillTags = [];\r\n        this._fontTags = [];\r\n        this._numberFormatTags = [];\r\n        this._fillTags.push(fillHelper.tryCreateTag({\r\n            patternFill: {\r\n                patternType: \"none\"\r\n            }\r\n        }))\r\n    }\r\n    registerCellFormat(cellFormat) {\r\n        var result;\r\n        var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\r\n            registerFill: this.registerFill.bind(this),\r\n            registerFont: this.registerFont.bind(this),\r\n            registerNumberFormat: this.registerNumberFormat.bind(this)\r\n        });\r\n        if (isDefined(cellFormatTag)) {\r\n            for (var i = 0; i < this._cellFormatTags.length; i++) {\r\n                if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._cellFormatTags.push(cellFormatTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    static copyCellFormat(source) {\r\n        return cellFormatHelper.copy(source)\r\n    }\r\n    generateCellFormatsXml() {\r\n        var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\r\n        return tagHelper.toXml(\"cellXfs\", {\r\n            count: cellFormatTagsAsXmlStringsArray.length\r\n        }, cellFormatTagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFill(fill) {\r\n        var result;\r\n        var fillTag = fillHelper.tryCreateTag(fill);\r\n        if (isDefined(fillTag)) {\r\n            for (var i = 0; i < this._fillTags.length; i++) {\r\n                if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                if (this._fillTags.length < 2) {\r\n                    this._fillTags.push(fillHelper.tryCreateTag({\r\n                        patternFill: {\r\n                            patternType: \"Gray125\"\r\n                        }\r\n                    }))\r\n                }\r\n                result = this._fillTags.push(fillTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFillsXml() {\r\n        var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fills\", {\r\n            count: tagsAsXmlStringsArray.length\r\n        }, tagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFont(font) {\r\n        var result;\r\n        var fontTag = fontHelper.tryCreateTag(font);\r\n        if (isDefined(fontTag)) {\r\n            for (var i = 0; i < this._fontTags.length; i++) {\r\n                if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._fontTags.push(fontTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFontsXml() {\r\n        var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fonts\", {\r\n            count: xmlStringsArray.length\r\n        }, xmlStringsArray.join(\"\"))\r\n    }\r\n    _convertNumberFormatIndexToId(index) {\r\n        return 165 + index\r\n    }\r\n    registerNumberFormat(numberFormat) {\r\n        var result;\r\n        var tag = numberFormatHelper.tryCreateTag(numberFormat);\r\n        if (isDefined(tag)) {\r\n            for (var i = 0; i < this._numberFormatTags.length; i++) {\r\n                if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\r\n                    result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\r\n                result = tag[numberFormatHelper.ID_PROPERTY_NAME];\r\n                this._numberFormatTags.push(tag)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateNumberFormatsXml() {\r\n        if (this._numberFormatTags.length > 0) {\r\n            var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\r\n            return tagHelper.toXml(\"numFmts\", {\r\n                count: xmlStringsArray.length\r\n            }, xmlStringsArray.join(\"\"))\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}