{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\n\nvar HorizontalCurrentTimeShader = /*#__PURE__*/function (_CurrentTimeShader) {\n  _inherits(HorizontalCurrentTimeShader, _CurrentTimeShader);\n\n  var _super = _createSuper(HorizontalCurrentTimeShader);\n\n  function HorizontalCurrentTimeShader() {\n    _classCallCheck(this, HorizontalCurrentTimeShader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalCurrentTimeShader, [{\n    key: \"renderShader\",\n    value: function renderShader() {\n      var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n\n      for (var i = 0; i < groupCount; i++) {\n        var isFirstShader = 0 === i;\n        var $shader = isFirstShader ? this._$shader : this.createShader();\n        this.applyShaderMargin($shader);\n\n        if (this._workSpace.isGroupedByDate()) {\n          this._customizeGroupedByDateShader($shader, i);\n        } else {\n          this._customizeShader($shader, i);\n        }\n\n        !isFirstShader && this._shader.push($shader);\n      }\n    }\n  }, {\n    key: \"_customizeShader\",\n    value: function _customizeShader($shader, groupIndex) {\n      var shaderWidth = this._workSpace.getIndicationWidth();\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (groupIndex >= 1) {\n        var workSpace = this._workSpace;\n        var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n        $shader.css(\"left\", indicationWidth);\n      } else {\n        $shader.css(\"left\", 0);\n      }\n    }\n  }, {\n    key: \"_applyShaderWidth\",\n    value: function _applyShaderWidth($shader, width) {\n      var maxWidth = getBoundingRect(this._$container.get(0)).width;\n\n      if (width > maxWidth) {\n        width = maxWidth;\n      }\n\n      if (width > 0) {\n        $shader.width(width);\n      }\n    }\n  }, {\n    key: \"_customizeGroupedByDateShader\",\n    value: function _customizeGroupedByDateShader($shader, groupIndex) {\n      var cellCount = this._workSpace.getIndicationCellCount();\n\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      var isFirstShaderPart = 0 === groupIndex;\n      var workSpace = this._workSpace;\n      var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n      var shaderLeft;\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (isFirstShaderPart) {\n        shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n      } else {\n        shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n      }\n\n      $shader.css(\"left\", shaderLeft);\n    }\n  }]);\n\n  return HorizontalCurrentTimeShader;\n}(CurrentTimeShader);\n\nexport default HorizontalCurrentTimeShader;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js"],"names":["getBoundingRect","CurrentTimeShader","HorizontalCurrentTimeShader","groupCount","_workSpace","_isHorizontalGroupedWorkSpace","_getGroupCount","i","isFirstShader","$shader","_$shader","createShader","applyShaderMargin","isGroupedByDate","_customizeGroupedByDateShader","_customizeShader","_shader","push","groupIndex","shaderWidth","getIndicationWidth","_applyShaderWidth","workSpace","indicationWidth","_getCellCount","getCellWidth","css","width","maxWidth","_$container","get","cellCount","getIndicationCellCount","integerPart","Math","floor","fractionPart","isFirstShaderPart","shaderLeft"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var isFirstShader = 0 === i;\r\n            var $shader = isFirstShader ? this._$shader : this.createShader();\r\n            this.applyShaderMargin($shader);\r\n            if (this._workSpace.isGroupedByDate()) {\r\n                this._customizeGroupedByDateShader($shader, i)\r\n            } else {\r\n                this._customizeShader($shader, i)\r\n            }!isFirstShader && this._shader.push($shader)\r\n        }\r\n    }\r\n    _customizeShader($shader, groupIndex) {\r\n        var shaderWidth = this._workSpace.getIndicationWidth();\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (groupIndex >= 1) {\r\n            var workSpace = this._workSpace;\r\n            var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\r\n            $shader.css(\"left\", indicationWidth)\r\n        } else {\r\n            $shader.css(\"left\", 0)\r\n        }\r\n    }\r\n    _applyShaderWidth($shader, width) {\r\n        var maxWidth = getBoundingRect(this._$container.get(0)).width;\r\n        if (width > maxWidth) {\r\n            width = maxWidth\r\n        }\r\n        if (width > 0) {\r\n            $shader.width(width)\r\n        }\r\n    }\r\n    _customizeGroupedByDateShader($shader, groupIndex) {\r\n        var cellCount = this._workSpace.getIndicationCellCount();\r\n        var integerPart = Math.floor(cellCount);\r\n        var fractionPart = cellCount - integerPart;\r\n        var isFirstShaderPart = 0 === groupIndex;\r\n        var workSpace = this._workSpace;\r\n        var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\r\n        var shaderLeft;\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (isFirstShaderPart) {\r\n            shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex\r\n        } else {\r\n            shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth()\r\n        }\r\n        $shader.css(\"left\", shaderLeft)\r\n    }\r\n}\r\nexport default HorizontalCurrentTimeShader;\r\n"]},"metadata":{},"sourceType":"module"}