{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nimport { getChar } from \"../../events/utils/index\";\nimport Promise from \"../../core/polyfills/promise\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\n\nvar DefaultMaskStrategy = /*#__PURE__*/function (_BaseMaskStrategy) {\n  _inherits(DefaultMaskStrategy, _BaseMaskStrategy);\n\n  var _super = _createSuper(DefaultMaskStrategy);\n\n  function DefaultMaskStrategy() {\n    _classCallCheck(this, DefaultMaskStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DefaultMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function _getStrategyName() {\n      return \"default\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function getHandleEventNames() {\n      return [].concat(_toConsumableArray(_get(_getPrototypeOf(DefaultMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"keyPress\"]);\n    }\n  }, {\n    key: \"_keyPressHandler\",\n    value: function _keyPressHandler(event) {\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n\n      if (this.editor._isControlKeyFired(event)) {\n        return;\n      }\n\n      var editor = this.editor;\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey(getChar(event));\n      });\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function _inputHandler(event) {\n      if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n        this._handleBackspaceInput(event);\n      }\n\n      if (event.originalEvent) {\n        this._autoFillHandler(event);\n      }\n\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n      var inputValue = this.editorInput().val();\n      var caret = this.editorCaret();\n\n      if (!caret.end) {\n        return;\n      }\n\n      caret.start = caret.end - 1;\n      var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n      var char = inputValue[caret.start];\n      var editor = this.editor;\n      this.editorInput().val(oldValue);\n\n      editor._caret({\n        start: caret.start,\n        end: caret.start\n      });\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey(char);\n      });\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function _backspaceHandler(event) {\n      var _this = this;\n\n      var editor = this.editor;\n      this._keyPressHandled = true;\n\n      var afterBackspaceHandler = function afterBackspaceHandler(needAdjustCaret, callBack) {\n        if (needAdjustCaret) {\n          editor._direction(_this.DIRECTION.FORWARD);\n\n          editor._adjustCaret();\n        }\n\n        var currentCaret = _this.editorCaret();\n\n        return new Promise(function (resolve) {\n          clearTimeout(_this._backspaceHandlerTimeout);\n          _this._backspaceHandlerTimeout = setTimeout(function () {\n            callBack(currentCaret);\n            resolve();\n          });\n        });\n      };\n\n      editor._maskKeyHandler(event, function () {\n        if (editor._hasSelection()) {\n          return afterBackspaceHandler(true, function (currentCaret) {\n            editor._displayMask(currentCaret);\n\n            editor._maskRulesChain.reset();\n          });\n        }\n\n        if (editor._tryMoveCaretBackward()) {\n          return afterBackspaceHandler(false, function (currentCaret) {\n            _this.editorCaret(currentCaret);\n          });\n        }\n\n        editor._handleKey(EMPTY_CHAR, _this.DIRECTION.BACKWARD);\n\n        return afterBackspaceHandler(true, function (currentCaret) {\n          editor._displayMask(currentCaret);\n\n          editor._maskRulesChain.reset();\n        });\n      });\n    }\n  }, {\n    key: \"_backspaceInputHandled\",\n    value: function _backspaceInputHandled(inputType) {\n      return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n    }\n  }, {\n    key: \"_handleBackspaceInput\",\n    value: function _handleBackspaceInput(event) {\n      var _this$editorCaret = this.editorCaret(),\n          start = _this$editorCaret.start,\n          end = _this$editorCaret.end;\n\n      this.editorCaret({\n        start: start + 1,\n        end: end + 1\n      });\n\n      this._backspaceHandler(event);\n    }\n  }]);\n\n  return DefaultMaskStrategy;\n}(BaseMaskStrategy);\n\nexport default DefaultMaskStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.default.js"],"names":["BaseMaskStrategy","getChar","Promise","BACKSPACE_INPUT_TYPE","EMPTY_CHAR","DefaultMaskStrategy","event","_keyPressHandled","editor","_isControlKeyFired","_maskKeyHandler","_handleKey","_backspaceInputHandled","originalEvent","inputType","_handleBackspaceInput","_autoFillHandler","inputValue","editorInput","val","caret","editorCaret","end","start","oldValue","substring","char","_caret","afterBackspaceHandler","needAdjustCaret","callBack","_direction","DIRECTION","FORWARD","_adjustCaret","currentCaret","resolve","clearTimeout","_backspaceHandlerTimeout","setTimeout","_hasSelection","_displayMask","_maskRulesChain","reset","_tryMoveCaretBackward","BACKWARD","_backspaceHandler"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\r\nimport {\r\n    getChar\r\n} from \"../../events/utils/index\";\r\nimport Promise from \"../../core/polyfills/promise\";\r\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\r\nvar EMPTY_CHAR = \" \";\r\nclass DefaultMaskStrategy extends BaseMaskStrategy {\r\n    _getStrategyName() {\r\n        return \"default\"\r\n    }\r\n    getHandleEventNames() {\r\n        return [...super.getHandleEventNames(), \"keyPress\"]\r\n    }\r\n    _keyPressHandler(event) {\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        if (this.editor._isControlKeyFired(event)) {\r\n            return\r\n        }\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        editor._maskKeyHandler(event, () => editor._handleKey(getChar(event)))\r\n    }\r\n    _inputHandler(event) {\r\n        if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\r\n            this._handleBackspaceInput(event)\r\n        }\r\n        if (event.originalEvent) {\r\n            this._autoFillHandler(event)\r\n        }\r\n        if (this._keyPressHandled) {\r\n            return\r\n        }\r\n        this._keyPressHandled = true;\r\n        var inputValue = this.editorInput().val();\r\n        var caret = this.editorCaret();\r\n        if (!caret.end) {\r\n            return\r\n        }\r\n        caret.start = caret.end - 1;\r\n        var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\r\n        var char = inputValue[caret.start];\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this.editorInput().val(oldValue);\r\n        editor._caret({\r\n            start: caret.start,\r\n            end: caret.start\r\n        });\r\n        editor._maskKeyHandler(event, () => editor._handleKey(char))\r\n    }\r\n    _backspaceHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        var afterBackspaceHandler = (needAdjustCaret, callBack) => {\r\n            if (needAdjustCaret) {\r\n                editor._direction(this.DIRECTION.FORWARD);\r\n                editor._adjustCaret()\r\n            }\r\n            var currentCaret = this.editorCaret();\r\n            return new Promise(resolve => {\r\n                clearTimeout(this._backspaceHandlerTimeout);\r\n                this._backspaceHandlerTimeout = setTimeout((function() {\r\n                    callBack(currentCaret);\r\n                    resolve()\r\n                }))\r\n            })\r\n        };\r\n        editor._maskKeyHandler(event, () => {\r\n            if (editor._hasSelection()) {\r\n                return afterBackspaceHandler(true, currentCaret => {\r\n                    editor._displayMask(currentCaret);\r\n                    editor._maskRulesChain.reset()\r\n                })\r\n            }\r\n            if (editor._tryMoveCaretBackward()) {\r\n                return afterBackspaceHandler(false, currentCaret => {\r\n                    this.editorCaret(currentCaret)\r\n                })\r\n            }\r\n            editor._handleKey(EMPTY_CHAR, this.DIRECTION.BACKWARD);\r\n            return afterBackspaceHandler(true, currentCaret => {\r\n                editor._displayMask(currentCaret);\r\n                editor._maskRulesChain.reset()\r\n            })\r\n        })\r\n    }\r\n    _backspaceInputHandled(inputType) {\r\n        return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled\r\n    }\r\n    _handleBackspaceInput(event) {\r\n        var {\r\n            start: start,\r\n            end: end\r\n        } = this.editorCaret();\r\n        this.editorCaret({\r\n            start: start + 1,\r\n            end: end + 1\r\n        });\r\n        this._backspaceHandler(event)\r\n    }\r\n}\r\nexport default DefaultMaskStrategy;\r\n"]},"metadata":{},"sourceType":"module"}