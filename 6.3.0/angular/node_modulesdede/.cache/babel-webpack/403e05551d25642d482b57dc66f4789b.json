{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport \"./ui.tree_list.editor_factory\";\nimport $ from \"../../core/renderer\";\nimport errors from \"../widget/ui.errors\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { editingModule } from \"../grid_core/ui.grid_core.editing\";\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EditingController = editingModule.controllers.editing.inherit({\n  _generateNewItem: function _generateNewItem(key) {\n    var item = this.callBase(key);\n    item.data = {\n      key: key\n    };\n    item.children = [];\n    item.level = 0;\n    item.parentKey = this.option(\"rootValue\");\n    return item;\n  },\n  _needInsertItem: function _needInsertItem(change, changeType, items, item) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);\n\n    if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n      var rowIndex = gridCoreUtils.getIndexByKey(parentKey, items);\n\n      if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\n        items.splice(rowIndex + 1, 0, item);\n      }\n\n      return false;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _isEditColumnVisible: function _isEditColumnVisible() {\n    var result = this.callBase.apply(this, arguments);\n    var editingOptions = this.option(\"editing\");\n    return result || editingOptions.allowAdding;\n  },\n  _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n    var result = this.callBase.apply(this, arguments);\n    var row = options.row;\n\n    if (\"add\" === button.name) {\n      return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow);\n    }\n\n    return result;\n  },\n  _getEditingButtons: function _getEditingButtons(options) {\n    var buttons = this.callBase.apply(this, arguments);\n\n    if (!options.column.buttons) {\n      buttons.unshift(this._getButtonConfig(\"add\", options));\n    }\n\n    return buttons;\n  },\n  _beforeSaveEditData: function _beforeSaveEditData(change) {\n    var dataController = this._dataController;\n    var result = this.callBase.apply(this, arguments);\n\n    if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\n      var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\n      var key = null === store || void 0 === store ? void 0 : store.key();\n\n      if (!isDefined(key)) {\n        throw errors.Error(\"E1045\");\n      }\n    }\n\n    return result;\n  },\n  addRowByRowIndex: function addRowByRowIndex(rowIndex) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.getVisibleRows()[rowIndex];\n    return this.addRow(row ? row.key : void 0);\n  },\n  addRow: function addRow(key) {\n    var that = this;\n    var callBase = that.callBase;\n    var dataController = that.getController(\"data\");\n\n    if (void 0 !== key && !dataController.isRowExpanded(key)) {\n      var deferred = new Deferred();\n      dataController.expandRow(key).done(function () {\n        setTimeout(function () {\n          callBase.call(that, key).done(deferred.resolve).fail(deferred.reject);\n        });\n      }).fail(deferred.reject);\n      return deferred.promise();\n    }\n\n    if (void 0 === key) {\n      key = that.option(\"rootValue\");\n    }\n\n    return callBase.call(that, key);\n  },\n  _initNewRow: function _initNewRow(options, parentKey) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentIdSetter = dataSourceAdapter.createParentIdSetter();\n    parentIdSetter(options.data, parentKey);\n    return this.callBase.apply(this, arguments);\n  },\n  allowAdding: function allowAdding(options) {\n    return this._allowEditAction(\"allowAdding\", options);\n  },\n  _needToCloseEditableCell: function _needToCloseEditableCell($targetElement) {\n    return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing();\n  },\n  getButtonLocalizationNames: function getButtonLocalizationNames() {\n    var names = this.callBase.apply(this);\n    names.add = \"dxTreeList-editingAddRowToNode\";\n    return names;\n  }\n});\nvar originalRowClick = editingModule.extenders.views.rowsView._rowClick;\nvar originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;\n\nvar validateClick = function validateClick(e) {\n  var $targetElement = $(e.event.target);\n  var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\n\n  if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n    return false;\n  }\n\n  return !needToCallOriginalClickHandler.call(this, e, originalClickHandler);\n};\n\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\n  var $targetElement = $(e.event.target);\n\n  if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\n    originalClickHandler.call(this, e);\n    return true;\n  }\n\n  return false;\n}\n\nvar RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {\n  _renderCellCommandContent: function _renderCellCommandContent($container, options) {\n    var editingController = this._editingController;\n    var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\n    var isEditing = options.isEditing || isEditRow;\n\n    if (!isEditing) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return false;\n  },\n  _rowClick: function _rowClick(e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _rowDblClick: function _rowDblClick(e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  }\n});\ntreeListCore.registerModule(\"editing\", {\n  defaultOptions: function defaultOptions() {\n    return extend(true, editingModule.defaultOptions(), {\n      editing: {\n        texts: {\n          addRowToNode: messageLocalization.format(\"dxTreeList-editingAddRowToNode\")\n        }\n      }\n    });\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: extend(true, {}, editingModule.extenders.controllers, {\n      data: {\n        changeRowExpand: function changeRowExpand() {\n          this._editingController.refresh();\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    }),\n    views: {\n      rowsView: RowsViewExtender,\n      headerPanel: editingModule.extenders.views.headerPanel\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing.js"],"names":["$","errors","isDefined","extend","Deferred","messageLocalization","treeListCore","gridCoreUtils","editingModule","TREELIST_EXPAND_ICON_CONTAINER_CLASS","SELECT_CHECKBOX_CLASS","DATA_EDIT_DATA_INSERT_TYPE","EditingController","controllers","editing","inherit","_generateNewItem","key","item","callBase","data","children","level","parentKey","option","_needInsertItem","change","changeType","items","dataController","getController","dataSourceAdapter","dataSource","parentKeyOf","rowIndex","getIndexByKey","_dataController","isRowExpanded","splice","apply","arguments","_isEditColumnVisible","result","editingOptions","allowAdding","_isDefaultButtonVisible","button","options","row","name","_getVisibleEditRowIndex","removed","isNewRow","_getEditingButtons","buttons","column","unshift","_getButtonConfig","_beforeSaveEditData","type","store","Error","addRowByRowIndex","getVisibleRows","addRow","that","deferred","expandRow","done","setTimeout","call","resolve","fail","reject","promise","_initNewRow","parentIdSetter","createParentIdSetter","_allowEditAction","_needToCloseEditableCell","$targetElement","closest","length","isEditing","getButtonLocalizationNames","names","add","originalRowClick","extenders","views","rowsView","_rowClick","originalRowDblClick","_rowDblClick","validateClick","e","event","target","originalClickHandler","needToCallOriginalClickHandler","RowsViewExtender","_renderCellCommandContent","$container","editingController","_editingController","isEditRow","registerModule","defaultOptions","texts","addRowToNode","format","changeRowExpand","refresh","headerPanel"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,+BAAP;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SACIC,SADJ,QAEO,uBAFP;AAGA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,QADJ,QAEO,2BAFP;AAGA,OAAOC,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SACIC,aADJ,QAEO,mCAFP;AAGA,IAAIC,oCAAoC,GAAG,4BAA3C;AACA,IAAIC,qBAAqB,GAAG,oBAA5B;AACA,IAAIC,0BAA0B,GAAG,QAAjC;AACA,IAAIC,iBAAiB,GAAGJ,aAAa,CAACK,WAAd,CAA0BC,OAA1B,CAAkCC,OAAlC,CAA0C;AAC9DC,EAAAA,gBAAgB,EAAE,0BAASC,GAAT,EAAc;AAC5B,QAAIC,IAAI,GAAG,KAAKC,QAAL,CAAcF,GAAd,CAAX;AACAC,IAAAA,IAAI,CAACE,IAAL,GAAY;AACRH,MAAAA,GAAG,EAAEA;AADG,KAAZ;AAGAC,IAAAA,IAAI,CAACG,QAAL,GAAgB,EAAhB;AACAH,IAAAA,IAAI,CAACI,KAAL,GAAa,CAAb;AACAJ,IAAAA,IAAI,CAACK,SAAL,GAAiB,KAAKC,MAAL,CAAY,WAAZ,CAAjB;AACA,WAAON,IAAP;AACH,GAV6D;AAW9DO,EAAAA,eAAe,EAAE,yBAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCV,IAApC,EAA0C;AACvD,QAAIW,cAAc,GAAG,KAAKC,aAAL,CAAmB,MAAnB,CAArB;AACA,QAAIC,iBAAiB,GAAGF,cAAc,CAACG,UAAf,EAAxB;AACA,QAAIT,SAAS,GAAG,SAASQ,iBAAT,IAA8B,KAAK,CAAL,KAAWA,iBAAzC,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE,WAAlB,CAA8BP,MAAM,CAACN,IAArC,CAAtF;;AACA,QAAI,KAAK,CAAL,KAAWG,SAAX,IAAwBA,SAAS,KAAK,KAAKC,MAAL,CAAY,WAAZ,CAA1C,EAAoE;AAChE,UAAIU,QAAQ,GAAG3B,aAAa,CAAC4B,aAAd,CAA4BZ,SAA5B,EAAuCK,KAAvC,CAAf;;AACA,UAAIM,QAAQ,IAAI,CAAZ,IAAiB,KAAKE,eAAL,CAAqBC,aAArB,CAAmCd,SAAnC,CAArB,EAAoE;AAChEK,QAAAA,KAAK,CAACU,MAAN,CAAaJ,QAAQ,GAAG,CAAxB,EAA2B,CAA3B,EAA8BhB,IAA9B;AACH;;AACD,aAAO,KAAP;AACH;;AACD,WAAO,KAAKC,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH,GAvB6D;AAwB9DC,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,QAAIC,MAAM,GAAG,KAAKvB,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAb;AACA,QAAIG,cAAc,GAAG,KAAKnB,MAAL,CAAY,SAAZ,CAArB;AACA,WAAOkB,MAAM,IAAIC,cAAc,CAACC,WAAhC;AACH,GA5B6D;AA6B9DC,EAAAA,uBAAuB,EAAE,iCAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAC/C,QAAIL,MAAM,GAAG,KAAKvB,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAb;AACA,QAAIQ,GAAG,GAAGD,OAAO,CAACC,GAAlB;;AACA,QAAI,UAAUF,MAAM,CAACG,IAArB,EAA2B;AACvB,aAAO,KAAKL,WAAL,CAAiBG,OAAjB,KAA6BC,GAAG,CAACd,QAAJ,KAAiB,KAAKgB,uBAAL,EAA9C,IAAgF,EAAEF,GAAG,CAACG,OAAJ,IAAeH,GAAG,CAACI,QAArB,CAAvF;AACH;;AACD,WAAOV,MAAP;AACH,GApC6D;AAqC9DW,EAAAA,kBAAkB,EAAE,4BAASN,OAAT,EAAkB;AAClC,QAAIO,OAAO,GAAG,KAAKnC,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAd;;AACA,QAAI,CAACO,OAAO,CAACQ,MAAR,CAAeD,OAApB,EAA6B;AACzBA,MAAAA,OAAO,CAACE,OAAR,CAAgB,KAAKC,gBAAL,CAAsB,KAAtB,EAA6BV,OAA7B,CAAhB;AACH;;AACD,WAAOO,OAAP;AACH,GA3C6D;AA4C9DI,EAAAA,mBAAmB,EAAE,6BAAShC,MAAT,EAAiB;AAClC,QAAIG,cAAc,GAAG,KAAKO,eAA1B;AACA,QAAIM,MAAM,GAAG,KAAKvB,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAb;;AACA,QAAId,MAAM,IAAIA,MAAM,CAACiC,IAAP,KAAgBhD,0BAA9B,EAA0D;AACtD,UAAIiD,KAAK,GAAG,SAAS/B,cAAT,IAA2B,KAAK,CAAL,KAAWA,cAAtC,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAAC+B,KAAf,EAA5E;AACA,UAAI3C,GAAG,GAAG,SAAS2C,KAAT,IAAkB,KAAK,CAAL,KAAWA,KAA7B,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAC3C,GAAN,EAAxD;;AACA,UAAI,CAACf,SAAS,CAACe,GAAD,CAAd,EAAqB;AACjB,cAAMhB,MAAM,CAAC4D,KAAP,CAAa,OAAb,CAAN;AACH;AACJ;;AACD,WAAOnB,MAAP;AACH,GAvD6D;AAwD9DoB,EAAAA,gBAAgB,EAAE,0BAAS5B,QAAT,EAAmB;AACjC,QAAIL,cAAc,GAAG,KAAKC,aAAL,CAAmB,MAAnB,CAArB;AACA,QAAIkB,GAAG,GAAGnB,cAAc,CAACkC,cAAf,GAAgC7B,QAAhC,CAAV;AACA,WAAO,KAAK8B,MAAL,CAAYhB,GAAG,GAAGA,GAAG,CAAC/B,GAAP,GAAa,KAAK,CAAjC,CAAP;AACH,GA5D6D;AA6D9D+C,EAAAA,MAAM,EAAE,gBAAS/C,GAAT,EAAc;AAClB,QAAIgD,IAAI,GAAG,IAAX;AACA,QAAI9C,QAAQ,GAAG8C,IAAI,CAAC9C,QAApB;AACA,QAAIU,cAAc,GAAGoC,IAAI,CAACnC,aAAL,CAAmB,MAAnB,CAArB;;AACA,QAAI,KAAK,CAAL,KAAWb,GAAX,IAAkB,CAACY,cAAc,CAACQ,aAAf,CAA6BpB,GAA7B,CAAvB,EAA0D;AACtD,UAAIiD,QAAQ,GAAG,IAAI9D,QAAJ,EAAf;AACAyB,MAAAA,cAAc,CAACsC,SAAf,CAAyBlD,GAAzB,EAA8BmD,IAA9B,CAAoC,YAAW;AAC3CC,QAAAA,UAAU,CAAE,YAAW;AACnBlD,UAAAA,QAAQ,CAACmD,IAAT,CAAcL,IAAd,EAAoBhD,GAApB,EAAyBmD,IAAzB,CAA8BF,QAAQ,CAACK,OAAvC,EAAgDC,IAAhD,CAAqDN,QAAQ,CAACO,MAA9D;AACH,SAFS,CAAV;AAGH,OAJD,EAIID,IAJJ,CAISN,QAAQ,CAACO,MAJlB;AAKA,aAAOP,QAAQ,CAACQ,OAAT,EAAP;AACH;;AACD,QAAI,KAAK,CAAL,KAAWzD,GAAf,EAAoB;AAChBA,MAAAA,GAAG,GAAGgD,IAAI,CAACzC,MAAL,CAAY,WAAZ,CAAN;AACH;;AACD,WAAOL,QAAQ,CAACmD,IAAT,CAAcL,IAAd,EAAoBhD,GAApB,CAAP;AACH,GA9E6D;AA+E9D0D,EAAAA,WAAW,EAAE,qBAAS5B,OAAT,EAAkBxB,SAAlB,EAA6B;AACtC,QAAIM,cAAc,GAAG,KAAKC,aAAL,CAAmB,MAAnB,CAArB;AACA,QAAIC,iBAAiB,GAAGF,cAAc,CAACG,UAAf,EAAxB;AACA,QAAI4C,cAAc,GAAG7C,iBAAiB,CAAC8C,oBAAlB,EAArB;AACAD,IAAAA,cAAc,CAAC7B,OAAO,CAAC3B,IAAT,EAAeG,SAAf,CAAd;AACA,WAAO,KAAKJ,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH,GArF6D;AAsF9DI,EAAAA,WAAW,EAAE,qBAASG,OAAT,EAAkB;AAC3B,WAAO,KAAK+B,gBAAL,CAAsB,aAAtB,EAAqC/B,OAArC,CAAP;AACH,GAxF6D;AAyF9DgC,EAAAA,wBAAwB,EAAE,kCAASC,cAAT,EAAyB;AAC/C,WAAO,KAAK7D,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,KAAwCwC,cAAc,CAACC,OAAf,CAAuB,MAAMxE,oCAA7B,EAAmEyE,MAAnE,IAA6E,KAAKC,SAAL,EAA5H;AACH,GA3F6D;AA4F9DC,EAAAA,0BA5F8D,wCA4FjC;AACzB,QAAIC,KAAK,GAAG,KAAKlE,QAAL,CAAcoB,KAAd,CAAoB,IAApB,CAAZ;AACA8C,IAAAA,KAAK,CAACC,GAAN,GAAY,gCAAZ;AACA,WAAOD,KAAP;AACH;AAhG6D,CAA1C,CAAxB;AAkGA,IAAIE,gBAAgB,GAAG/E,aAAa,CAACgF,SAAd,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuCC,SAA9D;AACA,IAAIC,mBAAmB,GAAGpF,aAAa,CAACgF,SAAd,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuCG,YAAjE;;AACA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,CAAT,EAAY;AAC5B,MAAIf,cAAc,GAAGhF,CAAC,CAAC+F,CAAC,CAACC,KAAF,CAAQC,MAAT,CAAtB;AACA,MAAIC,oBAAoB,GAAG,iBAAiBH,CAAC,CAACC,KAAF,CAAQrC,IAAzB,GAAgCiC,mBAAhC,GAAsDL,gBAAjF;;AACA,MAAIP,cAAc,CAACC,OAAf,CAAuB,MAAMvE,qBAA7B,EAAoDwE,MAAxD,EAAgE;AAC5D,WAAO,KAAP;AACH;;AACD,SAAO,CAACiB,8BAA8B,CAAC7B,IAA/B,CAAoC,IAApC,EAA0CyB,CAA1C,EAA6CG,oBAA7C,CAAR;AACH,CAPD;;AASA,SAASC,8BAAT,CAAwCJ,CAAxC,EAA2CG,oBAA3C,EAAiE;AAC7D,MAAIlB,cAAc,GAAGhF,CAAC,CAAC+F,CAAC,CAACC,KAAF,CAAQC,MAAT,CAAtB;;AACA,MAAI,CAACjB,cAAc,CAACC,OAAf,CAAuB,MAAMxE,oCAA7B,EAAmEyE,MAAxE,EAAgF;AAC5EgB,IAAAA,oBAAoB,CAAC5B,IAArB,CAA0B,IAA1B,EAAgCyB,CAAhC;AACA,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,IAAIK,gBAAgB,GAAGjG,MAAM,CAAC,EAAD,EAAKK,aAAa,CAACgF,SAAd,CAAwBC,KAAxB,CAA8BC,QAAnC,EAA6C;AACtEW,EAAAA,yBAAyB,EAAE,mCAASC,UAAT,EAAqBvD,OAArB,EAA8B;AACrD,QAAIwD,iBAAiB,GAAG,KAAKC,kBAA7B;AACA,QAAIC,SAAS,GAAG1D,OAAO,CAACC,GAAR,IAAeuD,iBAAiB,CAACE,SAAlB,CAA4B1D,OAAO,CAACC,GAAR,CAAYd,QAAxC,CAA/B;AACA,QAAIiD,SAAS,GAAGpC,OAAO,CAACoC,SAAR,IAAqBsB,SAArC;;AACA,QAAI,CAACtB,SAAL,EAAgB;AACZ,aAAO,KAAKhE,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH;;AACD,WAAO,KAAP;AACH,GATqE;AAUtEmD,EAAAA,SAAS,EAAE,mBAASI,CAAT,EAAY;AACnB,QAAID,aAAa,CAACxB,IAAd,CAAmB,IAAnB,EAAyByB,CAAzB,CAAJ,EAAiC;AAC7B,WAAK5E,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACH;AACJ,GAdqE;AAetEqD,EAAAA,YAAY,EAAE,sBAASE,CAAT,EAAY;AACtB,QAAID,aAAa,CAACxB,IAAd,CAAmB,IAAnB,EAAyByB,CAAzB,CAAJ,EAAiC;AAC7B,WAAK5E,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACH;AACJ;AAnBqE,CAA7C,CAA7B;AAqBAlC,YAAY,CAACoG,cAAb,CAA4B,SAA5B,EAAuC;AACnCC,EAAAA,cAAc,EAAE,0BAAW;AACvB,WAAOxG,MAAM,CAAC,IAAD,EAAOK,aAAa,CAACmG,cAAd,EAAP,EAAuC;AAChD7F,MAAAA,OAAO,EAAE;AACL8F,QAAAA,KAAK,EAAE;AACHC,UAAAA,YAAY,EAAExG,mBAAmB,CAACyG,MAApB,CAA2B,gCAA3B;AADX;AADF;AADuC,KAAvC,CAAb;AAOH,GATkC;AAUnCjG,EAAAA,WAAW,EAAE;AACTC,IAAAA,OAAO,EAAEF;AADA,GAVsB;AAanC4E,EAAAA,SAAS,EAAE;AACP3E,IAAAA,WAAW,EAAEV,MAAM,CAAC,IAAD,EAAO,EAAP,EAAWK,aAAa,CAACgF,SAAd,CAAwB3E,WAAnC,EAAgD;AAC/DO,MAAAA,IAAI,EAAE;AACF2F,QAAAA,eAAe,EAAE,2BAAW;AACxB,eAAKP,kBAAL,CAAwBQ,OAAxB;;AACA,iBAAO,KAAK7F,QAAL,CAAcoB,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACH;AAJC;AADyD,KAAhD,CADZ;AASPiD,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAEU,gBADP;AAEHa,MAAAA,WAAW,EAAEzG,aAAa,CAACgF,SAAd,CAAwBC,KAAxB,CAA8BwB;AAFxC;AATA;AAbwB,CAAvC","sourcesContent":["/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport \"./ui.tree_list.editor_factory\";\r\nimport $ from \"../../core/renderer\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport treeListCore from \"./ui.tree_list.core\";\r\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\r\nimport {\r\n    editingModule\r\n} from \"../grid_core/ui.grid_core.editing\";\r\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar EditingController = editingModule.controllers.editing.inherit({\r\n    _generateNewItem: function(key) {\r\n        var item = this.callBase(key);\r\n        item.data = {\r\n            key: key\r\n        };\r\n        item.children = [];\r\n        item.level = 0;\r\n        item.parentKey = this.option(\"rootValue\");\r\n        return item\r\n    },\r\n    _needInsertItem: function(change, changeType, items, item) {\r\n        var dataController = this.getController(\"data\");\r\n        var dataSourceAdapter = dataController.dataSource();\r\n        var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);\r\n        if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\r\n            var rowIndex = gridCoreUtils.getIndexByKey(parentKey, items);\r\n            if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\r\n                items.splice(rowIndex + 1, 0, item)\r\n            }\r\n            return false\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _isEditColumnVisible: function() {\r\n        var result = this.callBase.apply(this, arguments);\r\n        var editingOptions = this.option(\"editing\");\r\n        return result || editingOptions.allowAdding\r\n    },\r\n    _isDefaultButtonVisible: function(button, options) {\r\n        var result = this.callBase.apply(this, arguments);\r\n        var row = options.row;\r\n        if (\"add\" === button.name) {\r\n            return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow)\r\n        }\r\n        return result\r\n    },\r\n    _getEditingButtons: function(options) {\r\n        var buttons = this.callBase.apply(this, arguments);\r\n        if (!options.column.buttons) {\r\n            buttons.unshift(this._getButtonConfig(\"add\", options))\r\n        }\r\n        return buttons\r\n    },\r\n    _beforeSaveEditData: function(change) {\r\n        var dataController = this._dataController;\r\n        var result = this.callBase.apply(this, arguments);\r\n        if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\r\n            var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\r\n            var key = null === store || void 0 === store ? void 0 : store.key();\r\n            if (!isDefined(key)) {\r\n                throw errors.Error(\"E1045\")\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    addRowByRowIndex: function(rowIndex) {\r\n        var dataController = this.getController(\"data\");\r\n        var row = dataController.getVisibleRows()[rowIndex];\r\n        return this.addRow(row ? row.key : void 0)\r\n    },\r\n    addRow: function(key) {\r\n        var that = this;\r\n        var callBase = that.callBase;\r\n        var dataController = that.getController(\"data\");\r\n        if (void 0 !== key && !dataController.isRowExpanded(key)) {\r\n            var deferred = new Deferred;\r\n            dataController.expandRow(key).done((function() {\r\n                setTimeout((function() {\r\n                    callBase.call(that, key).done(deferred.resolve).fail(deferred.reject)\r\n                }))\r\n            })).fail(deferred.reject);\r\n            return deferred.promise()\r\n        }\r\n        if (void 0 === key) {\r\n            key = that.option(\"rootValue\")\r\n        }\r\n        return callBase.call(that, key)\r\n    },\r\n    _initNewRow: function(options, parentKey) {\r\n        var dataController = this.getController(\"data\");\r\n        var dataSourceAdapter = dataController.dataSource();\r\n        var parentIdSetter = dataSourceAdapter.createParentIdSetter();\r\n        parentIdSetter(options.data, parentKey);\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    allowAdding: function(options) {\r\n        return this._allowEditAction(\"allowAdding\", options)\r\n    },\r\n    _needToCloseEditableCell: function($targetElement) {\r\n        return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing()\r\n    },\r\n    getButtonLocalizationNames() {\r\n        var names = this.callBase.apply(this);\r\n        names.add = \"dxTreeList-editingAddRowToNode\";\r\n        return names\r\n    }\r\n});\r\nvar originalRowClick = editingModule.extenders.views.rowsView._rowClick;\r\nvar originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;\r\nvar validateClick = function(e) {\r\n    var $targetElement = $(e.event.target);\r\n    var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\r\n    if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n        return false\r\n    }\r\n    return !needToCallOriginalClickHandler.call(this, e, originalClickHandler)\r\n};\r\n\r\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\r\n    var $targetElement = $(e.event.target);\r\n    if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\r\n        originalClickHandler.call(this, e);\r\n        return true\r\n    }\r\n    return false\r\n}\r\nvar RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {\r\n    _renderCellCommandContent: function($container, options) {\r\n        var editingController = this._editingController;\r\n        var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\r\n        var isEditing = options.isEditing || isEditRow;\r\n        if (!isEditing) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return false\r\n    },\r\n    _rowClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _rowDblClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    }\r\n});\r\ntreeListCore.registerModule(\"editing\", {\r\n    defaultOptions: function() {\r\n        return extend(true, editingModule.defaultOptions(), {\r\n            editing: {\r\n                texts: {\r\n                    addRowToNode: messageLocalization.format(\"dxTreeList-editingAddRowToNode\")\r\n                }\r\n            }\r\n        })\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: extend(true, {}, editingModule.extenders.controllers, {\r\n            data: {\r\n                changeRowExpand: function() {\r\n                    this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }),\r\n        views: {\r\n            rowsView: RowsViewExtender,\r\n            headerPanel: editingModule.extenders.views.headerPanel\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}