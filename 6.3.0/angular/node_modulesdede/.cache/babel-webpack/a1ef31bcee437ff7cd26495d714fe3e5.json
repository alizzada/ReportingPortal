{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_uploader.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Guid from \"../core/guid\";\nimport { getWindow } from \"../core/utils/window\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport registerComponent from \"../core/component_registrator\";\nimport Callbacks from \"../core/utils/callbacks\";\nimport { isDefined, isFunction, isNumeric } from \"../core/utils/type\";\nimport { each } from \"../core/utils/iterator\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray } from \"../core/utils/array\";\nimport { Deferred, fromPromise } from \"../core/utils/deferred\";\nimport ajax from \"../core/utils/ajax\";\nimport Editor from \"./editor/editor\";\nimport Button from \"./button\";\nimport ProgressBar from \"./progress_bar\";\nimport browser from \"../core/utils/browser\";\nimport devices from \"../core/devices\";\nimport { addNamespace } from \"../events/utils/index\";\nimport { name as clickEventName } from \"../events/click\";\nimport messageLocalization from \"../localization/message\";\nimport { isMaterial } from \"./themes\";\nvar window = getWindow();\nvar FILEUPLOADER_CLASS = \"dx-fileuploader\";\nvar FILEUPLOADER_EMPTY_CLASS = \"dx-fileuploader-empty\";\nvar FILEUPLOADER_SHOW_FILE_LIST_CLASS = \"dx-fileuploader-show-file-list\";\nvar FILEUPLOADER_DRAGOVER_CLASS = \"dx-fileuploader-dragover\";\nvar FILEUPLOADER_WRAPPER_CLASS = \"dx-fileuploader-wrapper\";\nvar FILEUPLOADER_CONTAINER_CLASS = \"dx-fileuploader-container\";\nvar FILEUPLOADER_CONTENT_CLASS = \"dx-fileuploader-content\";\nvar FILEUPLOADER_INPUT_WRAPPER_CLASS = \"dx-fileuploader-input-wrapper\";\nvar FILEUPLOADER_INPUT_CONTAINER_CLASS = \"dx-fileuploader-input-container\";\nvar FILEUPLOADER_INPUT_LABEL_CLASS = \"dx-fileuploader-input-label\";\nvar FILEUPLOADER_INPUT_CLASS = \"dx-fileuploader-input\";\nvar FILEUPLOADER_FILES_CONTAINER_CLASS = \"dx-fileuploader-files-container\";\nvar FILEUPLOADER_FILE_CONTAINER_CLASS = \"dx-fileuploader-file-container\";\nvar FILEUPLOADER_FILE_INFO_CLASS = \"dx-fileuploader-file-info\";\nvar FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS = \"dx-fileuploader-file-status-message\";\nvar FILEUPLOADER_FILE_CLASS = \"dx-fileuploader-file\";\nvar FILEUPLOADER_FILE_NAME_CLASS = \"dx-fileuploader-file-name\";\nvar FILEUPLOADER_FILE_SIZE_CLASS = \"dx-fileuploader-file-size\";\nvar FILEUPLOADER_BUTTON_CLASS = \"dx-fileuploader-button\";\nvar FILEUPLOADER_BUTTON_CONTAINER_CLASS = \"dx-fileuploader-button-container\";\nvar FILEUPLOADER_CANCEL_BUTTON_CLASS = \"dx-fileuploader-cancel-button\";\nvar FILEUPLOADER_UPLOAD_BUTTON_CLASS = \"dx-fileuploader-upload-button\";\nvar FILEUPLOADER_INVALID_CLASS = \"dx-fileuploader-invalid\";\nvar FILEUPLOADER_AFTER_LOAD_DELAY = 400;\nvar FILEUPLOADER_CHUNK_META_DATA_NAME = \"chunkMetadata\";\n\nvar renderFileUploaderInput = function renderFileUploaderInput() {\n  return $(\"<input>\").attr(\"type\", \"file\");\n};\n\nvar isFormDataSupported = function isFormDataSupported() {\n  return !!window.FormData;\n};\n\nvar FileUploader = /*#__PURE__*/function (_Editor) {\n  _inherits(FileUploader, _Editor);\n\n  var _super = _createSuper(FileUploader);\n\n  function FileUploader() {\n    _classCallCheck(this, FileUploader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileUploader, [{\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var _this = this;\n\n      var click = function click(e) {\n        e.preventDefault();\n\n        var $selectButton = _this._selectButton.$element();\n\n        eventsEngine.trigger($selectButton, clickEventName);\n      };\n\n      return extend(_get(_getPrototypeOf(FileUploader.prototype), \"_supportedKeys\", this).call(this), {\n        space: click,\n        enter: click\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function _setOptionsByReference() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_setOptionsByReference\", this).call(this);\n\n      extend(this._optionsByReference, {\n        value: true\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileUploader.prototype), \"_getDefaultOptions\", this).call(this), {\n        chunkSize: 0,\n        value: [],\n        selectButtonText: messageLocalization.format(\"dxFileUploader-selectFile\"),\n        uploadButtonText: messageLocalization.format(\"dxFileUploader-upload\"),\n        labelText: messageLocalization.format(\"dxFileUploader-dropFile\"),\n        name: \"files[]\",\n        multiple: false,\n        accept: \"\",\n        uploadUrl: \"/\",\n        allowCanceling: true,\n        showFileList: true,\n        progress: 0,\n        dialogTrigger: void 0,\n        dropZone: void 0,\n        readyToUploadMessage: messageLocalization.format(\"dxFileUploader-readyToUpload\"),\n        uploadedMessage: messageLocalization.format(\"dxFileUploader-uploaded\"),\n        uploadFailedMessage: messageLocalization.format(\"dxFileUploader-uploadFailedMessage\"),\n        uploadAbortedMessage: messageLocalization.format(\"dxFileUploader-uploadAbortedMessage\"),\n        uploadMode: \"instantly\",\n        uploadMethod: \"POST\",\n        uploadHeaders: {},\n        uploadCustomData: {},\n        onBeforeSend: null,\n        onUploadStarted: null,\n        onUploaded: null,\n        onFilesUploaded: null,\n        onProgress: null,\n        onUploadError: null,\n        onUploadAborted: null,\n        onDropZoneEnter: null,\n        onDropZoneLeave: null,\n        allowedFileExtensions: [],\n        maxFileSize: 0,\n        minFileSize: 0,\n        inputAttr: {},\n        invalidFileExtensionMessage: messageLocalization.format(\"dxFileUploader-invalidFileExtension\"),\n        invalidMaxFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMaxFileSize\"),\n        invalidMinFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMinFileSize\"),\n        extendSelection: true,\n        validationMessageMode: \"always\",\n        uploadFile: null,\n        uploadChunk: null,\n        abortUpload: null,\n        validationMessageOffset: {\n          h: 0,\n          v: 0\n        },\n        useNativeInputClick: false,\n        useDragOver: true,\n        nativeDropSupported: true,\n        _uploadButtonType: \"normal\"\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(FileUploader.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: [{\n          platform: \"android\"\n        }],\n        options: {\n          validationMessageOffset: {\n            v: 0\n          }\n        }\n      }, {\n        device: function device() {\n          return \"desktop\" !== devices.real().deviceType;\n        },\n        options: {\n          useDragOver: false\n        }\n      }, {\n        device: function device() {\n          return !isFormDataSupported();\n        },\n        options: {\n          uploadMode: \"useForm\"\n        }\n      }, {\n        device: function device() {\n          return browser.msie || \"desktop\" !== devices.real().deviceType;\n        },\n        options: {\n          nativeDropSupported: false\n        }\n      }, {\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          _uploadButtonType: \"default\"\n        }\n      }]);\n    }\n  }, {\n    key: \"_initOptions\",\n    value: function _initOptions(options) {\n      var isLabelTextDefined = (\"labelText\" in options);\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_initOptions\", this).call(this, options);\n\n      if (!isLabelTextDefined && !this._shouldDragOverBeRendered()) {\n        this.option(\"labelText\", \"\");\n      }\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_init\", this).call(this);\n\n      this._initFileInput();\n\n      this._initLabel();\n\n      this._setUploadStrategy();\n\n      this._createFiles();\n\n      this._createBeforeSendAction();\n\n      this._createUploadStartedAction();\n\n      this._createUploadedAction();\n\n      this._createFilesUploadedAction();\n\n      this._createProgressAction();\n\n      this._createUploadErrorAction();\n\n      this._createUploadAbortedAction();\n\n      this._createDropZoneEnterAction();\n\n      this._createDropZoneLeaveAction();\n    }\n  }, {\n    key: \"_setUploadStrategy\",\n    value: function _setUploadStrategy() {\n      var strategy = null;\n\n      if (this.option(\"chunkSize\") > 0) {\n        var uploadChunk = this.option(\"uploadChunk\");\n        strategy = uploadChunk && isFunction(uploadChunk) ? new CustomChunksFileUploadStrategy(this) : new DefaultChunksFileUploadStrategy(this);\n      } else {\n        var uploadFile = this.option(\"uploadFile\");\n        strategy = uploadFile && isFunction(uploadFile) ? new CustomWholeFileUploadStrategy(this) : new DefaultWholeFileUploadStrategy(this);\n      }\n\n      this._uploadStrategy = strategy;\n    }\n  }, {\n    key: \"_initFileInput\",\n    value: function _initFileInput() {\n      var _this2 = this;\n\n      this._isCustomClickEvent = false;\n\n      if (!this._$fileInput) {\n        this._$fileInput = renderFileUploaderInput();\n        eventsEngine.on(this._$fileInput, \"change\", this._inputChangeHandler.bind(this));\n        eventsEngine.on(this._$fileInput, \"click\", function (e) {\n          e.stopPropagation();\n          return _this2.option(\"useNativeInputClick\") || _this2._isCustomClickEvent;\n        });\n      }\n\n      this._$fileInput.prop({\n        multiple: this.option(\"multiple\"),\n        accept: this.option(\"accept\"),\n        tabIndex: -1\n      });\n    }\n  }, {\n    key: \"_inputChangeHandler\",\n    value: function _inputChangeHandler() {\n      if (this._doPreventInputChange) {\n        return;\n      }\n\n      var fileName = this._$fileInput.val().replace(/^.*\\\\/, \"\");\n\n      var files = this._$fileInput.prop(\"files\");\n\n      if (files && !files.length && \"useForm\" !== this.option(\"uploadMode\")) {\n        return;\n      }\n\n      var value = files ? this._getFiles(files) : [{\n        name: fileName\n      }];\n\n      this._changeValue(value);\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_shouldFileListBeExtended\",\n    value: function _shouldFileListBeExtended() {\n      return \"useForm\" !== this.option(\"uploadMode\") && this.option(\"extendSelection\") && this.option(\"multiple\");\n    }\n  }, {\n    key: \"_removeDuplicates\",\n    value: function _removeDuplicates(files, value) {\n      var result = [];\n\n      for (var i = 0; i < value.length; i++) {\n        if (!this._isFileInArray(files, value[i])) {\n          result.push(value[i]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isFileInArray\",\n    value: function _isFileInArray(files, file) {\n      for (var i = 0; i < files.length; i++) {\n        var item = files[i];\n\n        if (item.size === file.size && item.name === file.name) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_changeValue\",\n    value: function _changeValue(value) {\n      var files = this._shouldFileListBeExtended() ? this.option(\"value\").slice() : [];\n\n      if (\"instantly\" !== this.option(\"uploadMode\")) {\n        value = this._removeDuplicates(files, value);\n      }\n\n      this.option(\"value\", files.concat(value));\n    }\n  }, {\n    key: \"_getFiles\",\n    value: function _getFiles(fileList) {\n      var values = [];\n      each(fileList, function (_, value) {\n        return values.push(value);\n      });\n      return values;\n    }\n  }, {\n    key: \"_getFile\",\n    value: function _getFile(fileData) {\n      var targetFileValue = isNumeric(fileData) ? this.option(\"value\")[fileData] : fileData;\n      return this._files.filter(function (file) {\n        return file.value === targetFileValue;\n      })[0];\n    }\n  }, {\n    key: \"_initLabel\",\n    value: function _initLabel() {\n      if (!this._$inputLabel) {\n        this._$inputLabel = $(\"<div>\");\n      }\n\n      this._updateInputLabelText();\n    }\n  }, {\n    key: \"_updateInputLabelText\",\n    value: function _updateInputLabelText() {\n      var correctedValue = this._isInteractionDisabled() ? \"\" : this.option(\"labelText\");\n\n      this._$inputLabel.text(correctedValue);\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function _focusTarget() {\n      return this.$element().find(\".\" + FILEUPLOADER_BUTTON_CLASS);\n    }\n  }, {\n    key: \"_getSubmitElement\",\n    value: function _getSubmitElement() {\n      return this._$fileInput;\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_initMarkup\", this).call(this);\n\n      this.$element().addClass(FILEUPLOADER_CLASS);\n\n      this._renderWrapper();\n\n      this._renderInputWrapper();\n\n      this._renderSelectButton();\n\n      this._renderInputContainer();\n\n      this._renderUploadButton();\n\n      this._preventRecreatingFiles = true;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this._preventRecreatingFiles = false;\n\n      this._attachDragEventHandlers(this._$inputWrapper);\n\n      this._attachDragEventHandlers(this.option(\"dropZone\"));\n\n      this._renderFiles();\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_render\", this).call(this);\n    }\n  }, {\n    key: \"_createFileProgressBar\",\n    value: function _createFileProgressBar(file) {\n      file.progressBar = this._createProgressBar(file.value.size);\n      file.progressBar.$element().appendTo(file.$file);\n\n      this._initStatusMessage(file);\n\n      this._ensureCancelButtonInitialized(file);\n    }\n  }, {\n    key: \"_setStatusMessage\",\n    value: function _setStatusMessage(file, message) {\n      var _this3 = this;\n\n      setTimeout(function () {\n        if (_this3.option(\"showFileList\")) {\n          if (file.$statusMessage) {\n            file.$statusMessage.text(message);\n            file.$statusMessage.css(\"display\", \"\");\n            file.progressBar.$element().remove();\n          }\n        }\n      }, FILEUPLOADER_AFTER_LOAD_DELAY);\n    }\n  }, {\n    key: \"_getUploadAbortedStatusMessage\",\n    value: function _getUploadAbortedStatusMessage() {\n      return \"instantly\" === this.option(\"uploadMode\") ? this.option(\"uploadAbortedMessage\") : this.option(\"readyToUploadMessage\");\n    }\n  }, {\n    key: \"_createFiles\",\n    value: function _createFiles() {\n      var _this4 = this;\n\n      var value = this.option(\"value\");\n\n      if (this._files && (0 === value.length || !this._shouldFileListBeExtended())) {\n        this._preventFilesUploading(this._files);\n\n        this._files = null;\n      }\n\n      if (!this._files) {\n        this._files = [];\n      }\n\n      each(value.slice(this._files.length), function (_, value) {\n        var file = _this4._createFile(value);\n\n        _this4._validateFile(file);\n\n        _this4._files.push(file);\n      });\n    }\n  }, {\n    key: \"_preventFilesUploading\",\n    value: function _preventFilesUploading(files) {\n      var _this5 = this;\n\n      files.forEach(function (file) {\n        return _this5._uploadStrategy.abortUpload(file);\n      });\n    }\n  }, {\n    key: \"_validateFile\",\n    value: function _validateFile(file) {\n      file.isValidFileExtension = this._validateFileExtension(file);\n      file.isValidMinSize = this._validateMinFileSize(file);\n      file.isValidMaxSize = this._validateMaxFileSize(file);\n    }\n  }, {\n    key: \"_validateFileExtension\",\n    value: function _validateFileExtension(file) {\n      var allowedExtensions = this.option(\"allowedFileExtensions\");\n      var fileExtension = file.value.name.substring(file.value.name.lastIndexOf(\".\")).toLowerCase();\n\n      if (0 === allowedExtensions.length) {\n        return true;\n      }\n\n      for (var i = 0; i < allowedExtensions.length; i++) {\n        if (fileExtension === allowedExtensions[i].toLowerCase()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_validateMaxFileSize\",\n    value: function _validateMaxFileSize(file) {\n      var fileSize = file.value.size;\n      var maxFileSize = this.option(\"maxFileSize\");\n      return maxFileSize > 0 ? fileSize <= maxFileSize : true;\n    }\n  }, {\n    key: \"_validateMinFileSize\",\n    value: function _validateMinFileSize(file) {\n      var fileSize = file.value.size;\n      var minFileSize = this.option(\"minFileSize\");\n      return minFileSize > 0 ? fileSize >= minFileSize : true;\n    }\n  }, {\n    key: \"_createBeforeSendAction\",\n    value: function _createBeforeSendAction() {\n      this._beforeSendAction = this._createActionByOption(\"onBeforeSend\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadStartedAction\",\n    value: function _createUploadStartedAction() {\n      this._uploadStartedAction = this._createActionByOption(\"onUploadStarted\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadedAction\",\n    value: function _createUploadedAction() {\n      this._uploadedAction = this._createActionByOption(\"onUploaded\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createFilesUploadedAction\",\n    value: function _createFilesUploadedAction() {\n      this._filesUploadedAction = this._createActionByOption(\"onFilesUploaded\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createProgressAction\",\n    value: function _createProgressAction() {\n      this._progressAction = this._createActionByOption(\"onProgress\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadAbortedAction\",\n    value: function _createUploadAbortedAction() {\n      this._uploadAbortedAction = this._createActionByOption(\"onUploadAborted\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadErrorAction\",\n    value: function _createUploadErrorAction() {\n      this._uploadErrorAction = this._createActionByOption(\"onUploadError\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createDropZoneEnterAction\",\n    value: function _createDropZoneEnterAction() {\n      this._dropZoneEnterAction = this._createActionByOption(\"onDropZoneEnter\");\n    }\n  }, {\n    key: \"_createDropZoneLeaveAction\",\n    value: function _createDropZoneLeaveAction() {\n      this._dropZoneLeaveAction = this._createActionByOption(\"onDropZoneLeave\");\n    }\n  }, {\n    key: \"_createFile\",\n    value: function _createFile(value) {\n      return {\n        value: value,\n        loadedSize: 0,\n        onProgress: Callbacks(),\n        onAbort: Callbacks(),\n        onLoad: Callbacks(),\n        onError: Callbacks(),\n        onLoadStart: Callbacks(),\n        isValidFileExtension: true,\n        isValidMaxSize: true,\n        isValidMinSize: true,\n        isValid: function isValid() {\n          return this.isValidFileExtension && this.isValidMaxSize && this.isValidMinSize;\n        },\n        isInitialized: false\n      };\n    }\n  }, {\n    key: \"_resetFileState\",\n    value: function _resetFileState(file) {\n      file.isAborted = false;\n      file.uploadStarted = false;\n      file.isStartLoad = false;\n      file.loadedSize = 0;\n      file.chunksData = void 0;\n      file.request = void 0;\n    }\n  }, {\n    key: \"_renderFiles\",\n    value: function _renderFiles() {\n      var _this6 = this;\n\n      var _this$_validationMess;\n\n      var value = this.option(\"value\");\n\n      if (!this._$filesContainer) {\n        this._$filesContainer = $(\"<div>\").addClass(FILEUPLOADER_FILES_CONTAINER_CLASS).appendTo(this._$content);\n      } else if (!this._shouldFileListBeExtended() || 0 === value.length) {\n        this._$filesContainer.empty();\n      }\n\n      var showFileList = this.option(\"showFileList\");\n\n      if (showFileList) {\n        each(this._files, function (_, file) {\n          if (!file.$file) {\n            _this6._renderFile(file);\n          }\n        });\n      }\n\n      this.$element().toggleClass(FILEUPLOADER_SHOW_FILE_LIST_CLASS, showFileList);\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._updateFileNameMaxWidth();\n\n      null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.repaint();\n    }\n  }, {\n    key: \"_renderFile\",\n    value: function _renderFile(file) {\n      var value = file.value;\n      var $fileContainer = $(\"<div>\").addClass(FILEUPLOADER_FILE_CONTAINER_CLASS).appendTo(this._$filesContainer);\n\n      this._renderFileButtons(file, $fileContainer);\n\n      file.$file = $(\"<div>\").addClass(FILEUPLOADER_FILE_CLASS).appendTo($fileContainer);\n      var $fileInfo = $(\"<div>\").addClass(FILEUPLOADER_FILE_INFO_CLASS).appendTo(file.$file);\n      file.$statusMessage = $(\"<div>\").addClass(FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS).appendTo(file.$file);\n      $(\"<div>\").addClass(FILEUPLOADER_FILE_NAME_CLASS).text(value.name).appendTo($fileInfo);\n\n      if (isDefined(value.size)) {\n        $(\"<div>\").addClass(FILEUPLOADER_FILE_SIZE_CLASS).text(this._getFileSize(value.size)).appendTo($fileInfo);\n      }\n\n      if (file.isValid()) {\n        file.$statusMessage.text(this.option(\"readyToUploadMessage\"));\n      } else {\n        if (!file.isValidFileExtension) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidFileExtensionMessage\"));\n        }\n\n        if (!file.isValidMaxSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMaxFileSizeMessage\"));\n        }\n\n        if (!file.isValidMinSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMinFileSizeMessage\"));\n        }\n\n        $fileContainer.addClass(FILEUPLOADER_INVALID_CLASS);\n      }\n    }\n  }, {\n    key: \"_createValidationElement\",\n    value: function _createValidationElement(key) {\n      return $(\"<span>\").text(this.option(key));\n    }\n  }, {\n    key: \"_updateFileNameMaxWidth\",\n    value: function _updateFileNameMaxWidth() {\n      var cancelButtonsCount = this.option(\"allowCanceling\") && \"useForm\" !== this.option(\"uploadMode\") ? 1 : 0;\n      var uploadButtonsCount = \"useButtons\" === this.option(\"uploadMode\") ? 1 : 0;\n\n      var filesContainerWidth = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_CONTAINER_CLASS).first().width() || this._$filesContainer.width();\n\n      var $buttonContainer = this._$filesContainer.find(\".\" + FILEUPLOADER_BUTTON_CONTAINER_CLASS).eq(0);\n\n      var buttonsWidth = $buttonContainer.width() * (cancelButtonsCount + uploadButtonsCount);\n\n      var $fileSize = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_SIZE_CLASS).eq(0);\n\n      var prevFileSize = $fileSize.text();\n      $fileSize.text(\"1000 Mb\");\n      var fileSizeWidth = $fileSize.width();\n      $fileSize.text(prevFileSize);\n\n      this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_NAME_CLASS).css(\"maxWidth\", filesContainerWidth - buttonsWidth - fileSizeWidth);\n    }\n  }, {\n    key: \"_renderFileButtons\",\n    value: function _renderFileButtons(file, $container) {\n      var $cancelButton = this._getCancelButton(file);\n\n      $cancelButton && $container.append($cancelButton);\n\n      var $uploadButton = this._getUploadButton(file);\n\n      $uploadButton && $container.append($uploadButton);\n    }\n  }, {\n    key: \"_getCancelButton\",\n    value: function _getCancelButton(file) {\n      var _this7 = this;\n\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.cancelButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_CANCEL_BUTTON_CLASS), Button, {\n        onClick: function onClick() {\n          return _this7._removeFile(file);\n        },\n        icon: \"close\",\n        visible: this.option(\"allowCanceling\"),\n        disabled: this.option(\"readOnly\"),\n        integrationOptions: {}\n      });\n      return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.cancelButton.$element());\n    }\n  }, {\n    key: \"_getUploadButton\",\n    value: function _getUploadButton(file) {\n      var _this8 = this;\n\n      if (!file.isValid() || \"useButtons\" !== this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.uploadButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_UPLOAD_BUTTON_CLASS), Button, {\n        onClick: function onClick() {\n          return _this8._uploadFile(file);\n        },\n        icon: \"upload\"\n      });\n      file.onLoadStart.add(function () {\n        return file.uploadButton.option({\n          visible: false,\n          disabled: true\n        });\n      });\n      file.onAbort.add(function () {\n        return file.uploadButton.option({\n          visible: true,\n          disabled: false\n        });\n      });\n      return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.uploadButton.$element());\n    }\n  }, {\n    key: \"_removeFile\",\n    value: function _removeFile(file) {\n      var _file$$file;\n\n      null === (_file$$file = file.$file) || void 0 === _file$$file ? void 0 : _file$$file.parent().remove();\n\n      this._files.splice(inArray(file, this._files), 1);\n\n      var value = this.option(\"value\").slice();\n      value.splice(inArray(file.value, value), 1);\n      this._preventRecreatingFiles = true;\n      this.option(\"value\", value);\n      this._preventRecreatingFiles = false;\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._doPreventInputChange = true;\n\n      this._$fileInput.val(\"\");\n\n      this._doPreventInputChange = false;\n    }\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\") || !isDefined(fileData)) {\n        return;\n      }\n\n      var file = this._getFile(fileData);\n\n      if (file) {\n        if (file.uploadStarted) {\n          this._preventFilesUploading([file]);\n        }\n\n        this._removeFile(file);\n      }\n    }\n  }, {\n    key: \"_toggleFileUploaderEmptyClassName\",\n    value: function _toggleFileUploaderEmptyClassName() {\n      this.$element().toggleClass(FILEUPLOADER_EMPTY_CLASS, !this._files.length || this._hasInvalidFile(this._files));\n    }\n  }, {\n    key: \"_hasInvalidFile\",\n    value: function _hasInvalidFile(files) {\n      for (var i = 0; i < files.length; i++) {\n        if (!files[i].isValid()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getFileSize\",\n    value: function _getFileSize(size) {\n      var i = 0;\n      var labels = [messageLocalization.format(\"dxFileUploader-bytes\"), messageLocalization.format(\"dxFileUploader-kb\"), messageLocalization.format(\"dxFileUploader-Mb\"), messageLocalization.format(\"dxFileUploader-Gb\")];\n      var count = labels.length - 1;\n\n      while (i < count && size >= 1024) {\n        size /= 1024;\n        i++;\n      }\n\n      return Math.round(size) + \" \" + labels[i];\n    }\n  }, {\n    key: \"_renderSelectButton\",\n    value: function _renderSelectButton() {\n      var $button = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).appendTo(this._$inputWrapper);\n      this._selectButton = this._createComponent($button, Button, {\n        text: this.option(\"selectButtonText\"),\n        focusStateEnabled: false,\n        integrationOptions: {},\n        disabled: this.option(\"readOnly\")\n      });\n      this._selectFileDialogHandler = this._selectButtonClickHandler.bind(this);\n\n      if (\"desktop\" === devices.real().deviceType) {\n        this._selectButton.option(\"onClick\", this._selectFileDialogHandler);\n      } else {\n        this._attachSelectFileDialogHandler(this._selectButton.$element());\n      }\n\n      this._attachSelectFileDialogHandler(this.option(\"dialogTrigger\"));\n    }\n  }, {\n    key: \"_selectButtonClickHandler\",\n    value: function _selectButtonClickHandler() {\n      if (this.option(\"useNativeInputClick\")) {\n        return;\n      }\n\n      if (this._isInteractionDisabled()) {\n        return false;\n      }\n\n      this._isCustomClickEvent = true;\n      eventsEngine.trigger(this._$fileInput, \"click\");\n      this._isCustomClickEvent = false;\n    }\n  }, {\n    key: \"_attachSelectFileDialogHandler\",\n    value: function _attachSelectFileDialogHandler(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      this._detachSelectFileDialogHandler(target);\n\n      eventsEngine.on($(target), \"click\", this._selectFileDialogHandler);\n    }\n  }, {\n    key: \"_detachSelectFileDialogHandler\",\n    value: function _detachSelectFileDialogHandler(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      eventsEngine.off($(target), \"click\", this._selectFileDialogHandler);\n    }\n  }, {\n    key: \"_renderUploadButton\",\n    value: function _renderUploadButton() {\n      if (\"useButtons\" !== this.option(\"uploadMode\")) {\n        return;\n      }\n\n      var $uploadButton = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).addClass(FILEUPLOADER_UPLOAD_BUTTON_CLASS).appendTo(this._$content);\n      this._uploadButton = this._createComponent($uploadButton, Button, {\n        text: this.option(\"uploadButtonText\"),\n        onClick: this._uploadButtonClickHandler.bind(this),\n        type: this.option(\"_uploadButtonType\"),\n        integrationOptions: {}\n      });\n    }\n  }, {\n    key: \"_uploadButtonClickHandler\",\n    value: function _uploadButtonClickHandler() {\n      this._uploadFiles();\n    }\n  }, {\n    key: \"_shouldDragOverBeRendered\",\n    value: function _shouldDragOverBeRendered() {\n      return !this.option(\"readOnly\") && (\"useForm\" !== this.option(\"uploadMode\") || this.option(\"nativeDropSupported\"));\n    }\n  }, {\n    key: \"_isInteractionDisabled\",\n    value: function _isInteractionDisabled() {\n      return this.option(\"readOnly\") || this.option(\"disabled\");\n    }\n  }, {\n    key: \"_renderInputContainer\",\n    value: function _renderInputContainer() {\n      this._$inputContainer = $(\"<div>\").addClass(FILEUPLOADER_INPUT_CONTAINER_CLASS).appendTo(this._$inputWrapper);\n\n      this._$fileInput.addClass(FILEUPLOADER_INPUT_CLASS);\n\n      this._renderInput();\n\n      var labelId = \"dx-fileuploader-input-label-\".concat(new Guid());\n\n      this._$inputLabel.attr(\"id\", labelId).addClass(FILEUPLOADER_INPUT_LABEL_CLASS).appendTo(this._$inputContainer);\n\n      this.setAria(\"labelledby\", labelId, this._$fileInput);\n    }\n  }, {\n    key: \"_renderInput\",\n    value: function _renderInput() {\n      if (this.option(\"useNativeInputClick\")) {\n        this._selectButton.option(\"template\", this._selectButtonInputTemplate.bind(this));\n      } else {\n        this._$fileInput.appendTo(this._$inputContainer);\n\n        this._selectButton.option(\"template\", \"content\");\n      }\n\n      this._applyInputAttributes(this.option(\"inputAttr\"));\n    }\n  }, {\n    key: \"_selectButtonInputTemplate\",\n    value: function _selectButtonInputTemplate(data, content) {\n      var $content = $(content);\n      var $text = $(\"<span>\").addClass(\"dx-button-text\").text(data.text);\n      $content.append($text).append(this._$fileInput);\n      return $content;\n    }\n  }, {\n    key: \"_renderInputWrapper\",\n    value: function _renderInputWrapper() {\n      this._$inputWrapper = $(\"<div>\").addClass(FILEUPLOADER_INPUT_WRAPPER_CLASS).appendTo(this._$content);\n    }\n  }, {\n    key: \"_detachDragEventHandlers\",\n    value: function _detachDragEventHandlers(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      eventsEngine.off($(target), addNamespace(\"\", this.NAME));\n    }\n  }, {\n    key: \"_attachDragEventHandlers\",\n    value: function _attachDragEventHandlers(target) {\n      var isCustomTarget = target !== this._$inputWrapper;\n\n      if (!isDefined(target) || !this._shouldDragOverBeRendered()) {\n        return;\n      }\n\n      this._detachDragEventHandlers(target);\n\n      target = $(target);\n      this._dragEventsTargets = [];\n      eventsEngine.on(target, addNamespace(\"dragenter\", this.NAME), this._dragEnterHandler.bind(this, isCustomTarget));\n      eventsEngine.on(target, addNamespace(\"dragover\", this.NAME), this._dragOverHandler.bind(this));\n      eventsEngine.on(target, addNamespace(\"dragleave\", this.NAME), this._dragLeaveHandler.bind(this, isCustomTarget));\n      eventsEngine.on(target, addNamespace(\"drop\", this.NAME), this._dropHandler.bind(this, isCustomTarget));\n    }\n  }, {\n    key: \"_applyInputAttributes\",\n    value: function _applyInputAttributes(customAttributes) {\n      this._$fileInput.attr(customAttributes);\n    }\n  }, {\n    key: \"_useInputForDrop\",\n    value: function _useInputForDrop() {\n      return this.option(\"nativeDropSupported\") && \"useForm\" === this.option(\"uploadMode\");\n    }\n  }, {\n    key: \"_dragEnterHandler\",\n    value: function _dragEnterHandler(isCustomTarget, e) {\n      if (this.option(\"disabled\")) {\n        return false;\n      }\n\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      this._tryToggleDropZoneActive(true, isCustomTarget, e);\n\n      this._updateEventTargets(e);\n    }\n  }, {\n    key: \"_dragOverHandler\",\n    value: function _dragOverHandler(e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      e.originalEvent.dataTransfer.dropEffect = \"copy\";\n    }\n  }, {\n    key: \"_dragLeaveHandler\",\n    value: function _dragLeaveHandler(isCustomTarget, e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      this._updateEventTargets(e);\n\n      this._tryToggleDropZoneActive(false, isCustomTarget, e);\n    }\n  }, {\n    key: \"_updateEventTargets\",\n    value: function _updateEventTargets(e) {\n      var targetIndex = this._dragEventsTargets.indexOf(e.target);\n\n      var isTargetExists = -1 !== targetIndex;\n\n      if (\"dragenter\" === e.type) {\n        !isTargetExists && this._dragEventsTargets.push(e.target);\n      } else {\n        isTargetExists && this._dragEventsTargets.splice(targetIndex, 1);\n      }\n    }\n  }, {\n    key: \"_tryToggleDropZoneActive\",\n    value: function _tryToggleDropZoneActive(active, isCustom, event) {\n      var classAction = active ? \"addClass\" : \"removeClass\";\n      var mouseAction = active ? \"_dropZoneEnterAction\" : \"_dropZoneLeaveAction\";\n\n      if (!this._dragEventsTargets.length) {\n        this[mouseAction]({\n          event: event,\n          dropZoneElement: event.currentTarget\n        });\n\n        if (!isCustom) {\n          this.$element()[classAction](FILEUPLOADER_DRAGOVER_CLASS);\n        }\n      }\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function _dropHandler(isCustomTarget, e) {\n      this._dragEventsTargets = [];\n\n      if (!isCustomTarget) {\n        this.$element().removeClass(FILEUPLOADER_DRAGOVER_CLASS);\n      }\n\n      if (this._useInputForDrop() || isCustomTarget && this._isInteractionDisabled()) {\n        return;\n      }\n\n      e.preventDefault();\n      var fileList = e.originalEvent.dataTransfer.files;\n\n      var files = this._getFiles(fileList);\n\n      if (!this.option(\"multiple\") && files.length > 1) {\n        return;\n      }\n\n      this._changeValue(this._filterFiles(files));\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_handleAllFilesUploaded\",\n    value: function _handleAllFilesUploaded() {\n      var areAllFilesLoaded = this._files.every(function (file) {\n        return !file.isValid() || file._isError || file._isLoaded || file.isAborted;\n      });\n\n      if (areAllFilesLoaded) {\n        this._filesUploadedAction();\n      }\n    }\n  }, {\n    key: \"_filterFiles\",\n    value: function _filterFiles(files) {\n      if (!files.length) {\n        return files;\n      }\n\n      var accept = this.option(\"accept\");\n\n      if (!accept.length) {\n        return files;\n      }\n\n      var result = [];\n\n      var allowedTypes = this._getAllowedFileTypes(accept);\n\n      for (var i = 0, n = files.length; i < n; i++) {\n        if (this._isFileTypeAllowed(files[i], allowedTypes)) {\n          result.push(files[i]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getAllowedFileTypes\",\n    value: function _getAllowedFileTypes(acceptSting) {\n      if (!acceptSting.length) {\n        return [];\n      }\n\n      return acceptSting.split(\",\").map(function (item) {\n        return item.trim();\n      });\n    }\n  }, {\n    key: \"_isFileTypeAllowed\",\n    value: function _isFileTypeAllowed(file, allowedTypes) {\n      for (var i = 0, n = allowedTypes.length; i < n; i++) {\n        var allowedType = allowedTypes[i];\n\n        if (\".\" === allowedType[0]) {\n          allowedType = allowedType.replace(\".\", \"\\\\.\");\n\n          if (file.name.match(new RegExp(allowedType + \"$\", \"i\"))) {\n            return true;\n          }\n        } else {\n          allowedType = allowedType.replace(new RegExp(\"\\\\*\", \"g\"), \"\");\n\n          if (file.type.match(new RegExp(allowedType, \"i\"))) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_renderWrapper\",\n    value: function _renderWrapper() {\n      var $wrapper = $(\"<div>\").addClass(FILEUPLOADER_WRAPPER_CLASS).appendTo(this.$element());\n      var $container = $(\"<div>\").addClass(FILEUPLOADER_CONTAINER_CLASS).appendTo($wrapper);\n      this._$content = $(\"<div>\").addClass(FILEUPLOADER_CONTENT_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._$fileInput.detach();\n\n      delete this._$filesContainer;\n\n      if (this._files) {\n        this._files.forEach(function (file) {\n          file.$file = null;\n          file.$statusMessage = null;\n        });\n      }\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"abortUpload\",\n    value: function abortUpload(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return;\n      }\n\n      if (isDefined(fileData)) {\n        var file = this._getFile(fileData);\n\n        if (file) {\n          this._preventFilesUploading([file]);\n        }\n      } else {\n        this._preventFilesUploading(this._files);\n      }\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return;\n      }\n\n      if (isDefined(fileData)) {\n        var file = this._getFile(fileData);\n\n        if (file && isFormDataSupported()) {\n          this._uploadFile(file);\n        }\n      } else {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_uploadFiles\",\n    value: function _uploadFiles() {\n      var _this9 = this;\n\n      if (isFormDataSupported()) {\n        each(this._files, function (_, file) {\n          return _this9._uploadFile(file);\n        });\n      }\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      this._uploadStrategy.upload(file);\n    }\n  }, {\n    key: \"_updateProgressBar\",\n    value: function _updateProgressBar(file, loadedFileData) {\n      file.progressBar && file.progressBar.option({\n        value: loadedFileData.loaded,\n        showStatus: true\n      });\n\n      this._progressAction({\n        file: file.value,\n        segmentSize: loadedFileData.currentSegmentSize,\n        bytesLoaded: loadedFileData.loaded,\n        bytesTotal: loadedFileData.total,\n        event: loadedFileData.event,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_updateTotalProgress\",\n    value: function _updateTotalProgress(totalFilesSize, totalLoadedFilesSize) {\n      var progress = totalFilesSize ? this._getProgressValue(totalLoadedFilesSize / totalFilesSize) : 0;\n      this.option(\"progress\", progress);\n\n      this._setLoadedSize(totalLoadedFilesSize);\n    }\n  }, {\n    key: \"_getProgressValue\",\n    value: function _getProgressValue(ratio) {\n      return Math.floor(100 * ratio);\n    }\n  }, {\n    key: \"_initStatusMessage\",\n    value: function _initStatusMessage(file) {\n      file.$statusMessage.css(\"display\", \"none\");\n    }\n  }, {\n    key: \"_ensureCancelButtonInitialized\",\n    value: function _ensureCancelButtonInitialized(file) {\n      var _this10 = this;\n\n      if (file.isInitialized) {\n        return;\n      }\n\n      file.cancelButton.option(\"onClick\", function () {\n        _this10._preventFilesUploading([file]);\n\n        _this10._removeFile(file);\n      });\n\n      var hideCancelButton = function hideCancelButton() {\n        setTimeout(function () {\n          file.cancelButton.option({\n            visible: false\n          });\n        }, FILEUPLOADER_AFTER_LOAD_DELAY);\n      };\n\n      file.onLoad.add(hideCancelButton);\n      file.onError.add(hideCancelButton);\n    }\n  }, {\n    key: \"_createProgressBar\",\n    value: function _createProgressBar(fileSize) {\n      var _this11 = this;\n\n      return this._createComponent($(\"<div>\"), ProgressBar, {\n        value: void 0,\n        min: 0,\n        max: fileSize,\n        statusFormat: function statusFormat(ratio) {\n          return _this11._getProgressValue(ratio) + \"%\";\n        },\n        showStatus: false,\n        statusPosition: \"right\"\n      });\n    }\n  }, {\n    key: \"_getTotalFilesSize\",\n    value: function _getTotalFilesSize() {\n      var _this12 = this;\n\n      if (!this._totalFilesSize) {\n        this._totalFilesSize = 0;\n        each(this._files, function (_, file) {\n          _this12._totalFilesSize += file.value.size;\n        });\n      }\n\n      return this._totalFilesSize;\n    }\n  }, {\n    key: \"_getTotalLoadedFilesSize\",\n    value: function _getTotalLoadedFilesSize() {\n      var _this13 = this;\n\n      if (!this._totalLoadedFilesSize) {\n        this._totalLoadedFilesSize = 0;\n        each(this._files, function (_, file) {\n          _this13._totalLoadedFilesSize += file.loadedSize;\n        });\n      }\n\n      return this._totalLoadedFilesSize;\n    }\n  }, {\n    key: \"_setLoadedSize\",\n    value: function _setLoadedSize(value) {\n      this._totalLoadedFilesSize = value;\n    }\n  }, {\n    key: \"_recalculateProgress\",\n    value: function _recalculateProgress() {\n      this._totalFilesSize = 0;\n      this._totalLoadedFilesSize = 0;\n\n      this._updateTotalProgress(this._getTotalFilesSize(), this._getTotalLoadedFilesSize());\n    }\n  }, {\n    key: \"_updateReadOnlyState\",\n    value: function _updateReadOnlyState() {\n      var readOnly = this.option(\"readOnly\");\n\n      this._selectButton.option(\"disabled\", readOnly);\n\n      this._files.forEach(function (file) {\n        var _file$cancelButton;\n\n        return null === (_file$cancelButton = file.cancelButton) || void 0 === _file$cancelButton ? void 0 : _file$cancelButton.option(\"disabled\", readOnly);\n      });\n\n      this._updateInputLabelText();\n\n      this._attachDragEventHandlers(this._$inputWrapper);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name,\n          value = args.value,\n          previousValue = args.previousValue;\n\n      switch (name) {\n        case \"height\":\n        case \"width\":\n          this._updateFileNameMaxWidth();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"value\":\n          !value.length && this._$fileInput.val(\"\");\n\n          if (!this._preventRecreatingFiles) {\n            this._createFiles();\n\n            this._renderFiles();\n          }\n\n          this._recalculateProgress();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"name\":\n          this._initFileInput();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"accept\":\n          this._initFileInput();\n\n          break;\n\n        case \"multiple\":\n          this._initFileInput();\n\n          if (!args.value) {\n            this.reset();\n          }\n\n          break;\n\n        case \"readOnly\":\n          this._updateReadOnlyState();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"selectButtonText\":\n          this._selectButton.option(\"text\", value);\n\n          break;\n\n        case \"uploadButtonText\":\n          this._uploadButton && this._uploadButton.option(\"text\", value);\n          break;\n\n        case \"_uploadButtonType\":\n          this._uploadButton && this._uploadButton.option(\"type\", value);\n          break;\n\n        case \"dialogTrigger\":\n          this._detachSelectFileDialogHandler(previousValue);\n\n          this._attachSelectFileDialogHandler(value);\n\n          break;\n\n        case \"dropZone\":\n          this._detachDragEventHandlers(previousValue);\n\n          this._attachDragEventHandlers(value);\n\n          break;\n\n        case \"maxFileSize\":\n        case \"minFileSize\":\n        case \"allowedFileExtensions\":\n        case \"invalidFileExtensionMessage\":\n        case \"invalidMaxFileSizeMessage\":\n        case \"invalidMinFileSizeMessage\":\n        case \"readyToUploadMessage\":\n        case \"uploadedMessage\":\n        case \"uploadFailedMessage\":\n        case \"uploadAbortedMessage\":\n          this._invalidate();\n\n          break;\n\n        case \"labelText\":\n          this._updateInputLabelText();\n\n          break;\n\n        case \"showFileList\":\n          if (!this._preventRecreatingFiles) {\n            this._renderFiles();\n          }\n\n          break;\n\n        case \"uploadFile\":\n        case \"uploadChunk\":\n        case \"chunkSize\":\n          this._setUploadStrategy();\n\n          break;\n\n        case \"abortUpload\":\n        case \"uploadUrl\":\n        case \"progress\":\n        case \"uploadMethod\":\n        case \"uploadHeaders\":\n        case \"uploadCustomData\":\n        case \"extendSelection\":\n          break;\n\n        case \"allowCanceling\":\n        case \"uploadMode\":\n          this.reset();\n\n          this._invalidate();\n\n          break;\n\n        case \"onBeforeSend\":\n          this._createBeforeSendAction();\n\n          break;\n\n        case \"onUploadStarted\":\n          this._createUploadStartedAction();\n\n          break;\n\n        case \"onUploaded\":\n          this._createUploadedAction();\n\n          break;\n\n        case \"onFilesUploaded\":\n          this._createFilesUploadedAction();\n\n          break;\n\n        case \"onProgress\":\n          this._createProgressAction();\n\n          break;\n\n        case \"onUploadError\":\n          this._createUploadErrorAction();\n\n          break;\n\n        case \"onUploadAborted\":\n          this._createUploadAbortedAction();\n\n          break;\n\n        case \"onDropZoneEnter\":\n          this._createDropZoneEnterAction();\n\n          break;\n\n        case \"onDropZoneLeave\":\n          this._createDropZoneLeaveAction();\n\n          break;\n\n        case \"useNativeInputClick\":\n          this._renderInput();\n\n          break;\n\n        case \"useDragOver\":\n          this._attachDragEventHandlers(this._$inputWrapper);\n\n          break;\n\n        case \"nativeDropSupported\":\n          this._invalidate();\n\n          break;\n\n        case \"inputAttr\":\n          this._applyInputAttributes(this.option(name));\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.option(\"value\", []);\n    }\n  }]);\n\n  return FileUploader;\n}(Editor);\n\nvar FileBlobReader = /*#__PURE__*/function () {\n  function FileBlobReader(file, chunkSize) {\n    _classCallCheck(this, FileBlobReader);\n\n    this.file = file;\n    this.chunkSize = chunkSize;\n    this.index = 0;\n  }\n\n  _createClass(FileBlobReader, [{\n    key: \"read\",\n    value: function read() {\n      if (!this.file) {\n        return null;\n      }\n\n      var result = this.createBlobResult(this.file, this.index, this.chunkSize);\n\n      if (result.isCompleted) {\n        this.file = null;\n      }\n\n      this.index++;\n      return result;\n    }\n  }, {\n    key: \"createBlobResult\",\n    value: function createBlobResult(file, index, chunkSize) {\n      var currentPosition = index * chunkSize;\n      return {\n        blob: this.sliceFile(file, currentPosition, chunkSize),\n        index: index,\n        isCompleted: currentPosition + chunkSize >= file.size\n      };\n    }\n  }, {\n    key: \"sliceFile\",\n    value: function sliceFile(file, startPos, length) {\n      if (file.slice) {\n        return file.slice(startPos, startPos + length);\n      }\n\n      if (file.webkitSlice) {\n        return file.webkitSlice(startPos, startPos + length);\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBlobReader;\n}();\n\nvar FileUploadStrategyBase = /*#__PURE__*/function () {\n  function FileUploadStrategyBase(fileUploader) {\n    _classCallCheck(this, FileUploadStrategyBase);\n\n    this.fileUploader = fileUploader;\n  }\n\n  _createClass(FileUploadStrategyBase, [{\n    key: \"upload\",\n    value: function upload(file) {\n      if (file.isInitialized && file.isAborted) {\n        this.fileUploader._resetFileState(file);\n      }\n\n      if (file.isValid() && !file.uploadStarted) {\n        this._prepareFileBeforeUpload(file);\n\n        this._uploadCore(file);\n      }\n    }\n  }, {\n    key: \"abortUpload\",\n    value: function abortUpload(file) {\n      var _this14 = this;\n\n      if (file._isError || file._isLoaded || file.isAborted || !file.uploadStarted) {\n        return;\n      }\n\n      file.isAborted = true;\n      file.request && file.request.abort();\n\n      if (this._isCustomCallback(\"abortUpload\")) {\n        var abortUpload = this.fileUploader.option(\"abortUpload\");\n\n        var arg = this._createUploadArgument(file);\n\n        var deferred = null;\n\n        try {\n          var result = abortUpload(file.value, arg);\n          deferred = fromPromise(result);\n        } catch (error) {\n          deferred = new Deferred().reject(error).promise();\n        }\n\n        deferred.done(function () {\n          return file.onAbort.fire();\n        }).fail(function (error) {\n          return _this14._handleFileError(file, error);\n        });\n      }\n    }\n  }, {\n    key: \"_beforeSend\",\n    value: function _beforeSend(xhr, file) {\n      var arg = this._createUploadArgument(file);\n\n      this.fileUploader._beforeSendAction({\n        request: xhr,\n        file: file.value,\n        uploadInfo: arg\n      });\n\n      file.request = xhr;\n    }\n  }, {\n    key: \"_createUploadArgument\",\n    value: function _createUploadArgument(file) {}\n  }, {\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {}\n  }, {\n    key: \"_isCustomCallback\",\n    value: function _isCustomCallback(name) {\n      var callback = this.fileUploader.option(name);\n      return callback && isFunction(callback);\n    }\n  }, {\n    key: \"_handleFileError\",\n    value: function _handleFileError(file, error) {\n      file._isError = true;\n      file.onError.fire(error);\n    }\n  }, {\n    key: \"_prepareFileBeforeUpload\",\n    value: function _prepareFileBeforeUpload(file) {\n      if (file.$file) {\n        var _file$progressBar;\n\n        null === (_file$progressBar = file.progressBar) || void 0 === _file$progressBar ? void 0 : _file$progressBar.dispose();\n\n        this.fileUploader._createFileProgressBar(file);\n      }\n\n      if (file.isInitialized) {\n        return;\n      }\n\n      file.onLoadStart.add(this._onUploadStarted.bind(this, file));\n      file.onLoad.add(this._onLoadedHandler.bind(this, file));\n      file.onError.add(this._onErrorHandler.bind(this, file));\n      file.onAbort.add(this._onAbortHandler.bind(this, file));\n      file.onProgress.add(this._onProgressHandler.bind(this, file));\n      file.isInitialized = true;\n    }\n  }, {\n    key: \"_isStatusError\",\n    value: function _isStatusError(status) {\n      return 400 <= status && status < 500 || 500 <= status && status < 600;\n    }\n  }, {\n    key: \"_onUploadStarted\",\n    value: function _onUploadStarted(file, e) {\n      file.uploadStarted = true;\n\n      this.fileUploader._uploadStartedAction({\n        file: file.value,\n        event: e,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_onAbortHandler\",\n    value: function _onAbortHandler(file, e) {\n      var args = {\n        file: file.value,\n        event: e,\n        request: file.request,\n        message: this.fileUploader._getUploadAbortedStatusMessage()\n      };\n\n      this.fileUploader._uploadAbortedAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onErrorHandler\",\n    value: function _onErrorHandler(file, error) {\n      var args = {\n        file: file.value,\n        event: void 0,\n        request: file.request,\n        error: error,\n        message: this.fileUploader.option(\"uploadFailedMessage\")\n      };\n\n      this.fileUploader._uploadErrorAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onLoadedHandler\",\n    value: function _onLoadedHandler(file, e) {\n      var args = {\n        file: file.value,\n        event: e,\n        request: file.request,\n        message: this.fileUploader.option(\"uploadedMessage\")\n      };\n      file._isLoaded = true;\n\n      this.fileUploader._uploadedAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onProgressHandler\",\n    value: function _onProgressHandler(file, e) {\n      if (file) {\n        var totalFilesSize = this.fileUploader._getTotalFilesSize();\n\n        var totalLoadedFilesSize = this.fileUploader._getTotalLoadedFilesSize();\n\n        var loadedSize = Math.min(e.loaded, file.value.size);\n        var segmentSize = loadedSize - file.loadedSize;\n        file.loadedSize = loadedSize;\n\n        this.fileUploader._updateTotalProgress(totalFilesSize, totalLoadedFilesSize + segmentSize);\n\n        this.fileUploader._updateProgressBar(file, this._getLoadedData(loadedSize, e.total, segmentSize, e));\n      }\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function _getLoadedData(loaded, total, currentSegmentSize, event) {\n      return {\n        loaded: loaded,\n        total: total,\n        currentSegmentSize: currentSegmentSize\n      };\n    }\n  }, {\n    key: \"_extendFormData\",\n    value: function _extendFormData(formData) {\n      var formDataEntries = this.fileUploader.option(\"uploadCustomData\");\n\n      for (var entryName in formDataEntries) {\n        if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {\n          formData.append(entryName, formDataEntries[entryName]);\n        }\n      }\n    }\n  }]);\n\n  return FileUploadStrategyBase;\n}();\n\nvar ChunksFileUploadStrategyBase = /*#__PURE__*/function (_FileUploadStrategyBa) {\n  _inherits(ChunksFileUploadStrategyBase, _FileUploadStrategyBa);\n\n  var _super2 = _createSuper(ChunksFileUploadStrategyBase);\n\n  function ChunksFileUploadStrategyBase(fileUploader) {\n    var _this15;\n\n    _classCallCheck(this, ChunksFileUploadStrategyBase);\n\n    _this15 = _super2.call(this, fileUploader);\n    _this15.chunkSize = _this15.fileUploader.option(\"chunkSize\");\n    return _this15;\n  }\n\n  _createClass(ChunksFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {\n      var realFile = file.value;\n      var chunksData = {\n        name: realFile.name,\n        loadedBytes: 0,\n        type: realFile.type,\n        blobReader: new FileBlobReader(realFile, this.chunkSize),\n        guid: new Guid(),\n        fileSize: realFile.size,\n        count: Math.ceil(realFile.size / this.chunkSize),\n        customData: {}\n      };\n      file.chunksData = chunksData;\n\n      this._sendChunk(file, chunksData);\n    }\n  }, {\n    key: \"_sendChunk\",\n    value: function _sendChunk(file, chunksData) {\n      var _this16 = this;\n\n      var chunk = chunksData.blobReader.read();\n      chunksData.currentChunk = chunk;\n\n      if (chunk) {\n        this._sendChunkCore(file, chunksData, chunk).done(function () {\n          if (file.isAborted) {\n            return;\n          }\n\n          chunksData.loadedBytes += chunk.blob.size;\n          file.onProgress.fire({\n            loaded: chunksData.loadedBytes,\n            total: file.value.size\n          });\n\n          if (chunk.isCompleted) {\n            file.onLoad.fire();\n          }\n\n          setTimeout(function () {\n            return _this16._sendChunk(file, chunksData);\n          });\n        }).fail(function (error) {\n          if (_this16._shouldHandleError(error)) {\n            _this16._handleFileError(file, error);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData, chunk) {}\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(error) {}\n  }, {\n    key: \"_tryRaiseStartLoad\",\n    value: function _tryRaiseStartLoad(file) {\n      if (!file.isStartLoad) {\n        file.isStartLoad = true;\n        file.onLoadStart.fire();\n      }\n    }\n  }, {\n    key: \"_getEvent\",\n    value: function _getEvent(e) {\n      return null;\n    }\n  }, {\n    key: \"_createUploadArgument\",\n    value: function _createUploadArgument(file) {\n      return this._createChunksInfo(file.chunksData);\n    }\n  }, {\n    key: \"_createChunksInfo\",\n    value: function _createChunksInfo(chunksData) {\n      return {\n        bytesUploaded: chunksData.loadedBytes,\n        chunkCount: chunksData.count,\n        customData: chunksData.customData,\n        chunkBlob: chunksData.currentChunk.blob,\n        chunkIndex: chunksData.currentChunk.index\n      };\n    }\n  }]);\n\n  return ChunksFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultChunksFileUploadStrategy = /*#__PURE__*/function (_ChunksFileUploadStra) {\n  _inherits(DefaultChunksFileUploadStrategy, _ChunksFileUploadStra);\n\n  var _super3 = _createSuper(DefaultChunksFileUploadStrategy);\n\n  function DefaultChunksFileUploadStrategy() {\n    _classCallCheck(this, DefaultChunksFileUploadStrategy);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(DefaultChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData, chunk) {\n      var _this17 = this;\n\n      return ajax.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function beforeSend(xhr) {\n          return _this17._beforeSend(xhr, file);\n        },\n        upload: {\n          onloadstart: function onloadstart() {\n            return _this17._tryRaiseStartLoad(file);\n          },\n          onabort: function onabort() {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData({\n          fileName: chunksData.name,\n          blobName: this.fileUploader.option(\"name\"),\n          blob: chunk.blob,\n          index: chunk.index,\n          count: chunksData.count,\n          type: chunksData.type,\n          guid: chunksData.guid,\n          size: chunksData.fileSize\n        })\n      });\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(e) {\n      return this._isStatusError(e.status);\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function _createFormData(options) {\n      var formData = new window.FormData();\n      formData.append(options.blobName, options.blob);\n      formData.append(FILEUPLOADER_CHUNK_META_DATA_NAME, JSON.stringify({\n        FileName: options.fileName,\n        Index: options.index,\n        TotalCount: options.count,\n        FileSize: options.size,\n        FileType: options.type,\n        FileGuid: options.guid\n      }));\n\n      this._extendFormData(formData);\n\n      return formData;\n    }\n  }]);\n\n  return DefaultChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar CustomChunksFileUploadStrategy = /*#__PURE__*/function (_ChunksFileUploadStra2) {\n  _inherits(CustomChunksFileUploadStrategy, _ChunksFileUploadStra2);\n\n  var _super4 = _createSuper(CustomChunksFileUploadStrategy);\n\n  function CustomChunksFileUploadStrategy() {\n    _classCallCheck(this, CustomChunksFileUploadStrategy);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(CustomChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData) {\n      this._tryRaiseStartLoad(file);\n\n      var chunksInfo = this._createChunksInfo(chunksData);\n\n      var uploadChunk = this.fileUploader.option(\"uploadChunk\");\n\n      try {\n        var result = uploadChunk(file.value, chunksInfo);\n        return fromPromise(result);\n      } catch (error) {\n        return new Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(e) {\n      return true;\n    }\n  }]);\n\n  return CustomChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar WholeFileUploadStrategyBase = /*#__PURE__*/function (_FileUploadStrategyBa2) {\n  _inherits(WholeFileUploadStrategyBase, _FileUploadStrategyBa2);\n\n  var _super5 = _createSuper(WholeFileUploadStrategyBase);\n\n  function WholeFileUploadStrategyBase() {\n    _classCallCheck(this, WholeFileUploadStrategyBase);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(WholeFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {\n      var _this18 = this;\n\n      file.loadedSize = 0;\n\n      this._uploadFile(file).done(function () {\n        if (!file.isAborted) {\n          file.onLoad.fire();\n        }\n      }).fail(function (error) {\n        if (_this18._shouldHandleError(file, error)) {\n          _this18._handleFileError(file, error);\n        }\n      });\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {}\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, e) {}\n  }, {\n    key: \"_handleProgress\",\n    value: function _handleProgress(file, e) {\n      if (file._isError) {\n        return;\n      }\n\n      file._isProgressStarted = true;\n      file.onProgress.fire(e);\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function _getLoadedData(loaded, total, segmentSize, event) {\n      var result = _get(_getPrototypeOf(WholeFileUploadStrategyBase.prototype), \"_getLoadedData\", this).call(this, loaded, total, segmentSize, event);\n\n      result.event = event;\n      return result;\n    }\n  }]);\n\n  return WholeFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultWholeFileUploadStrategy = /*#__PURE__*/function (_WholeFileUploadStrat) {\n  _inherits(DefaultWholeFileUploadStrategy, _WholeFileUploadStrat);\n\n  var _super6 = _createSuper(DefaultWholeFileUploadStrategy);\n\n  function DefaultWholeFileUploadStrategy() {\n    _classCallCheck(this, DefaultWholeFileUploadStrategy);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(DefaultWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      var _this19 = this;\n\n      return ajax.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function beforeSend(xhr) {\n          return _this19._beforeSend(xhr, file);\n        },\n        upload: {\n          onprogress: function onprogress(e) {\n            return _this19._handleProgress(file, e);\n          },\n          onloadstart: function onloadstart() {\n            return file.onLoadStart.fire();\n          },\n          onabort: function onabort() {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData(this.fileUploader.option(\"name\"), file.value)\n      });\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, e) {\n      return (this._isStatusError(e.status) || !file._isProgressStarted) && !file.isAborted;\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function _createFormData(fieldName, fieldValue) {\n      var formData = new window.FormData();\n      formData.append(fieldName, fieldValue, fieldValue.name);\n\n      this._extendFormData(formData);\n\n      return formData;\n    }\n  }]);\n\n  return DefaultWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\nvar CustomWholeFileUploadStrategy = /*#__PURE__*/function (_WholeFileUploadStrat2) {\n  _inherits(CustomWholeFileUploadStrategy, _WholeFileUploadStrat2);\n\n  var _super7 = _createSuper(CustomWholeFileUploadStrategy);\n\n  function CustomWholeFileUploadStrategy() {\n    _classCallCheck(this, CustomWholeFileUploadStrategy);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(CustomWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      var _this20 = this;\n\n      file.onLoadStart.fire();\n      var uploadFile = this.fileUploader.option(\"uploadFile\");\n\n      try {\n        var result = uploadFile(file.value, function (loadedBytes) {\n          var arg = {\n            loaded: loadedBytes,\n            total: file.size\n          };\n\n          _this20._handleProgress(file, arg);\n        });\n        return fromPromise(result);\n      } catch (error) {\n        return new Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, e) {\n      return true;\n    }\n  }]);\n\n  return CustomWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\nregisterComponent(\"dxFileUploader\", FileUploader);\nexport default FileUploader;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_uploader.js"],"names":["$","Guid","getWindow","eventsEngine","registerComponent","Callbacks","isDefined","isFunction","isNumeric","each","extend","inArray","Deferred","fromPromise","ajax","Editor","Button","ProgressBar","browser","devices","addNamespace","name","clickEventName","messageLocalization","isMaterial","window","FILEUPLOADER_CLASS","FILEUPLOADER_EMPTY_CLASS","FILEUPLOADER_SHOW_FILE_LIST_CLASS","FILEUPLOADER_DRAGOVER_CLASS","FILEUPLOADER_WRAPPER_CLASS","FILEUPLOADER_CONTAINER_CLASS","FILEUPLOADER_CONTENT_CLASS","FILEUPLOADER_INPUT_WRAPPER_CLASS","FILEUPLOADER_INPUT_CONTAINER_CLASS","FILEUPLOADER_INPUT_LABEL_CLASS","FILEUPLOADER_INPUT_CLASS","FILEUPLOADER_FILES_CONTAINER_CLASS","FILEUPLOADER_FILE_CONTAINER_CLASS","FILEUPLOADER_FILE_INFO_CLASS","FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS","FILEUPLOADER_FILE_CLASS","FILEUPLOADER_FILE_NAME_CLASS","FILEUPLOADER_FILE_SIZE_CLASS","FILEUPLOADER_BUTTON_CLASS","FILEUPLOADER_BUTTON_CONTAINER_CLASS","FILEUPLOADER_CANCEL_BUTTON_CLASS","FILEUPLOADER_UPLOAD_BUTTON_CLASS","FILEUPLOADER_INVALID_CLASS","FILEUPLOADER_AFTER_LOAD_DELAY","FILEUPLOADER_CHUNK_META_DATA_NAME","renderFileUploaderInput","attr","isFormDataSupported","FormData","FileUploader","click","e","preventDefault","$selectButton","_selectButton","$element","trigger","space","enter","_optionsByReference","value","chunkSize","selectButtonText","format","uploadButtonText","labelText","multiple","accept","uploadUrl","allowCanceling","showFileList","progress","dialogTrigger","dropZone","readyToUploadMessage","uploadedMessage","uploadFailedMessage","uploadAbortedMessage","uploadMode","uploadMethod","uploadHeaders","uploadCustomData","onBeforeSend","onUploadStarted","onUploaded","onFilesUploaded","onProgress","onUploadError","onUploadAborted","onDropZoneEnter","onDropZoneLeave","allowedFileExtensions","maxFileSize","minFileSize","inputAttr","invalidFileExtensionMessage","invalidMaxFileSizeMessage","invalidMinFileSizeMessage","extendSelection","validationMessageMode","uploadFile","uploadChunk","abortUpload","validationMessageOffset","h","v","useNativeInputClick","useDragOver","nativeDropSupported","_uploadButtonType","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","platform","msie","isLabelTextDefined","_shouldDragOverBeRendered","option","_initFileInput","_initLabel","_setUploadStrategy","_createFiles","_createBeforeSendAction","_createUploadStartedAction","_createUploadedAction","_createFilesUploadedAction","_createProgressAction","_createUploadErrorAction","_createUploadAbortedAction","_createDropZoneEnterAction","_createDropZoneLeaveAction","strategy","CustomChunksFileUploadStrategy","DefaultChunksFileUploadStrategy","CustomWholeFileUploadStrategy","DefaultWholeFileUploadStrategy","_uploadStrategy","_isCustomClickEvent","_$fileInput","on","_inputChangeHandler","bind","stopPropagation","prop","tabIndex","_doPreventInputChange","fileName","val","replace","files","length","_getFiles","_changeValue","_uploadFiles","result","i","_isFileInArray","push","file","item","size","_shouldFileListBeExtended","slice","_removeDuplicates","fileList","values","_","fileData","targetFileValue","_files","filter","_$inputLabel","_updateInputLabelText","correctedValue","_isInteractionDisabled","text","find","addClass","_renderWrapper","_renderInputWrapper","_renderSelectButton","_renderInputContainer","_renderUploadButton","_preventRecreatingFiles","_attachDragEventHandlers","_$inputWrapper","_renderFiles","progressBar","_createProgressBar","appendTo","$file","_initStatusMessage","_ensureCancelButtonInitialized","message","setTimeout","$statusMessage","css","remove","_preventFilesUploading","_createFile","_validateFile","forEach","isValidFileExtension","_validateFileExtension","isValidMinSize","_validateMinFileSize","isValidMaxSize","_validateMaxFileSize","allowedExtensions","fileExtension","substring","lastIndexOf","toLowerCase","fileSize","_beforeSendAction","_createActionByOption","excludeValidators","_uploadStartedAction","_uploadedAction","_filesUploadedAction","_progressAction","_uploadAbortedAction","_uploadErrorAction","_dropZoneEnterAction","_dropZoneLeaveAction","loadedSize","onAbort","onLoad","onError","onLoadStart","isValid","isInitialized","isAborted","uploadStarted","isStartLoad","chunksData","request","_this$_validationMess","_$filesContainer","_$content","empty","_renderFile","toggleClass","_toggleFileUploaderEmptyClassName","_updateFileNameMaxWidth","_validationMessage","repaint","$fileContainer","_renderFileButtons","$fileInfo","_getFileSize","append","_createValidationElement","key","cancelButtonsCount","uploadButtonsCount","filesContainerWidth","first","width","$buttonContainer","eq","buttonsWidth","$fileSize","prevFileSize","fileSizeWidth","$container","$cancelButton","_getCancelButton","$uploadButton","_getUploadButton","cancelButton","_createComponent","onClick","_removeFile","icon","visible","disabled","integrationOptions","uploadButton","_uploadFile","add","_file$$file","parent","splice","_getFile","_hasInvalidFile","labels","count","Math","round","$button","_selectFileDialogHandler","_selectButtonClickHandler","_attachSelectFileDialogHandler","target","_detachSelectFileDialogHandler","off","_uploadButton","_uploadButtonClickHandler","type","_$inputContainer","_renderInput","labelId","setAria","_selectButtonInputTemplate","_applyInputAttributes","data","content","$content","$text","NAME","isCustomTarget","_detachDragEventHandlers","_dragEventsTargets","_dragEnterHandler","_dragOverHandler","_dragLeaveHandler","_dropHandler","customAttributes","_useInputForDrop","_tryToggleDropZoneActive","_updateEventTargets","originalEvent","dataTransfer","dropEffect","targetIndex","indexOf","isTargetExists","active","isCustom","event","classAction","mouseAction","dropZoneElement","currentTarget","removeClass","_filterFiles","areAllFilesLoaded","every","_isError","_isLoaded","allowedTypes","_getAllowedFileTypes","n","_isFileTypeAllowed","acceptSting","split","map","trim","allowedType","match","RegExp","$wrapper","detach","upload","loadedFileData","loaded","showStatus","segmentSize","currentSegmentSize","bytesLoaded","bytesTotal","total","totalFilesSize","totalLoadedFilesSize","_getProgressValue","_setLoadedSize","ratio","floor","hideCancelButton","min","max","statusFormat","statusPosition","_totalFilesSize","_totalLoadedFilesSize","_updateTotalProgress","_getTotalFilesSize","_getTotalLoadedFilesSize","readOnly","_file$cancelButton","args","previousValue","_recalculateProgress","reset","_updateReadOnlyState","_invalidate","FileBlobReader","index","createBlobResult","isCompleted","currentPosition","blob","sliceFile","startPos","webkitSlice","FileUploadStrategyBase","fileUploader","_resetFileState","_prepareFileBeforeUpload","_uploadCore","abort","_isCustomCallback","arg","_createUploadArgument","deferred","error","reject","promise","done","fire","fail","_handleFileError","xhr","uploadInfo","callback","_file$progressBar","dispose","_createFileProgressBar","_onUploadStarted","_onLoadedHandler","_onErrorHandler","_onAbortHandler","_onProgressHandler","status","_getUploadAbortedStatusMessage","_setStatusMessage","_handleAllFilesUploaded","_updateProgressBar","_getLoadedData","formData","formDataEntries","entryName","Object","prototype","hasOwnProperty","call","ChunksFileUploadStrategyBase","realFile","loadedBytes","blobReader","guid","ceil","customData","_sendChunk","chunk","read","currentChunk","_sendChunkCore","_shouldHandleError","_createChunksInfo","bytesUploaded","chunkCount","chunkBlob","chunkIndex","sendRequest","url","method","headers","beforeSend","_beforeSend","onloadstart","_tryRaiseStartLoad","onabort","_createFormData","blobName","_isStatusError","JSON","stringify","FileName","Index","TotalCount","FileSize","FileType","FileGuid","_extendFormData","chunksInfo","WholeFileUploadStrategyBase","_isProgressStarted","onprogress","_handleProgress","fieldName","fieldValue"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_uploader.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../core/renderer\";\r\nimport Guid from \"../core/guid\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport eventsEngine from \"../events/core/events_engine\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport Callbacks from \"../core/utils/callbacks\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isNumeric\r\n} from \"../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    inArray\r\n} from \"../core/utils/array\";\r\nimport {\r\n    Deferred,\r\n    fromPromise\r\n} from \"../core/utils/deferred\";\r\nimport ajax from \"../core/utils/ajax\";\r\nimport Editor from \"./editor/editor\";\r\nimport Button from \"./button\";\r\nimport ProgressBar from \"./progress_bar\";\r\nimport browser from \"../core/utils/browser\";\r\nimport devices from \"../core/devices\";\r\nimport {\r\n    addNamespace\r\n} from \"../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../events/click\";\r\nimport messageLocalization from \"../localization/message\";\r\nimport {\r\n    isMaterial\r\n} from \"./themes\";\r\nvar window = getWindow();\r\nvar FILEUPLOADER_CLASS = \"dx-fileuploader\";\r\nvar FILEUPLOADER_EMPTY_CLASS = \"dx-fileuploader-empty\";\r\nvar FILEUPLOADER_SHOW_FILE_LIST_CLASS = \"dx-fileuploader-show-file-list\";\r\nvar FILEUPLOADER_DRAGOVER_CLASS = \"dx-fileuploader-dragover\";\r\nvar FILEUPLOADER_WRAPPER_CLASS = \"dx-fileuploader-wrapper\";\r\nvar FILEUPLOADER_CONTAINER_CLASS = \"dx-fileuploader-container\";\r\nvar FILEUPLOADER_CONTENT_CLASS = \"dx-fileuploader-content\";\r\nvar FILEUPLOADER_INPUT_WRAPPER_CLASS = \"dx-fileuploader-input-wrapper\";\r\nvar FILEUPLOADER_INPUT_CONTAINER_CLASS = \"dx-fileuploader-input-container\";\r\nvar FILEUPLOADER_INPUT_LABEL_CLASS = \"dx-fileuploader-input-label\";\r\nvar FILEUPLOADER_INPUT_CLASS = \"dx-fileuploader-input\";\r\nvar FILEUPLOADER_FILES_CONTAINER_CLASS = \"dx-fileuploader-files-container\";\r\nvar FILEUPLOADER_FILE_CONTAINER_CLASS = \"dx-fileuploader-file-container\";\r\nvar FILEUPLOADER_FILE_INFO_CLASS = \"dx-fileuploader-file-info\";\r\nvar FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS = \"dx-fileuploader-file-status-message\";\r\nvar FILEUPLOADER_FILE_CLASS = \"dx-fileuploader-file\";\r\nvar FILEUPLOADER_FILE_NAME_CLASS = \"dx-fileuploader-file-name\";\r\nvar FILEUPLOADER_FILE_SIZE_CLASS = \"dx-fileuploader-file-size\";\r\nvar FILEUPLOADER_BUTTON_CLASS = \"dx-fileuploader-button\";\r\nvar FILEUPLOADER_BUTTON_CONTAINER_CLASS = \"dx-fileuploader-button-container\";\r\nvar FILEUPLOADER_CANCEL_BUTTON_CLASS = \"dx-fileuploader-cancel-button\";\r\nvar FILEUPLOADER_UPLOAD_BUTTON_CLASS = \"dx-fileuploader-upload-button\";\r\nvar FILEUPLOADER_INVALID_CLASS = \"dx-fileuploader-invalid\";\r\nvar FILEUPLOADER_AFTER_LOAD_DELAY = 400;\r\nvar FILEUPLOADER_CHUNK_META_DATA_NAME = \"chunkMetadata\";\r\nvar renderFileUploaderInput = () => $(\"<input>\").attr(\"type\", \"file\");\r\nvar isFormDataSupported = () => !!window.FormData;\r\nclass FileUploader extends Editor {\r\n    _supportedKeys() {\r\n        var click = e => {\r\n            e.preventDefault();\r\n            var $selectButton = this._selectButton.$element();\r\n            eventsEngine.trigger($selectButton, clickEventName)\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            space: click,\r\n            enter: click\r\n        })\r\n    }\r\n    _setOptionsByReference() {\r\n        super._setOptionsByReference();\r\n        extend(this._optionsByReference, {\r\n            value: true\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            chunkSize: 0,\r\n            value: [],\r\n            selectButtonText: messageLocalization.format(\"dxFileUploader-selectFile\"),\r\n            uploadButtonText: messageLocalization.format(\"dxFileUploader-upload\"),\r\n            labelText: messageLocalization.format(\"dxFileUploader-dropFile\"),\r\n            name: \"files[]\",\r\n            multiple: false,\r\n            accept: \"\",\r\n            uploadUrl: \"/\",\r\n            allowCanceling: true,\r\n            showFileList: true,\r\n            progress: 0,\r\n            dialogTrigger: void 0,\r\n            dropZone: void 0,\r\n            readyToUploadMessage: messageLocalization.format(\"dxFileUploader-readyToUpload\"),\r\n            uploadedMessage: messageLocalization.format(\"dxFileUploader-uploaded\"),\r\n            uploadFailedMessage: messageLocalization.format(\"dxFileUploader-uploadFailedMessage\"),\r\n            uploadAbortedMessage: messageLocalization.format(\"dxFileUploader-uploadAbortedMessage\"),\r\n            uploadMode: \"instantly\",\r\n            uploadMethod: \"POST\",\r\n            uploadHeaders: {},\r\n            uploadCustomData: {},\r\n            onBeforeSend: null,\r\n            onUploadStarted: null,\r\n            onUploaded: null,\r\n            onFilesUploaded: null,\r\n            onProgress: null,\r\n            onUploadError: null,\r\n            onUploadAborted: null,\r\n            onDropZoneEnter: null,\r\n            onDropZoneLeave: null,\r\n            allowedFileExtensions: [],\r\n            maxFileSize: 0,\r\n            minFileSize: 0,\r\n            inputAttr: {},\r\n            invalidFileExtensionMessage: messageLocalization.format(\"dxFileUploader-invalidFileExtension\"),\r\n            invalidMaxFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMaxFileSize\"),\r\n            invalidMinFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMinFileSize\"),\r\n            extendSelection: true,\r\n            validationMessageMode: \"always\",\r\n            uploadFile: null,\r\n            uploadChunk: null,\r\n            abortUpload: null,\r\n            validationMessageOffset: {\r\n                h: 0,\r\n                v: 0\r\n            },\r\n            useNativeInputClick: false,\r\n            useDragOver: true,\r\n            nativeDropSupported: true,\r\n            _uploadButtonType: \"normal\"\r\n        })\r\n    }\r\n    _defaultOptionsRules() {\r\n        return super._defaultOptionsRules().concat([{\r\n            device: () => \"desktop\" === devices.real().deviceType && !devices.isSimulator(),\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }, {\r\n            device: [{\r\n                platform: \"android\"\r\n            }],\r\n            options: {\r\n                validationMessageOffset: {\r\n                    v: 0\r\n                }\r\n            }\r\n        }, {\r\n            device: () => \"desktop\" !== devices.real().deviceType,\r\n            options: {\r\n                useDragOver: false\r\n            }\r\n        }, {\r\n            device: () => !isFormDataSupported(),\r\n            options: {\r\n                uploadMode: \"useForm\"\r\n            }\r\n        }, {\r\n            device: () => browser.msie || \"desktop\" !== devices.real().deviceType,\r\n            options: {\r\n                nativeDropSupported: false\r\n            }\r\n        }, {\r\n            device: () => isMaterial(),\r\n            options: {\r\n                _uploadButtonType: \"default\"\r\n            }\r\n        }])\r\n    }\r\n    _initOptions(options) {\r\n        var isLabelTextDefined = \"labelText\" in options;\r\n        super._initOptions(options);\r\n        if (!isLabelTextDefined && !this._shouldDragOverBeRendered()) {\r\n            this.option(\"labelText\", \"\")\r\n        }\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._initFileInput();\r\n        this._initLabel();\r\n        this._setUploadStrategy();\r\n        this._createFiles();\r\n        this._createBeforeSendAction();\r\n        this._createUploadStartedAction();\r\n        this._createUploadedAction();\r\n        this._createFilesUploadedAction();\r\n        this._createProgressAction();\r\n        this._createUploadErrorAction();\r\n        this._createUploadAbortedAction();\r\n        this._createDropZoneEnterAction();\r\n        this._createDropZoneLeaveAction()\r\n    }\r\n    _setUploadStrategy() {\r\n        var strategy = null;\r\n        if (this.option(\"chunkSize\") > 0) {\r\n            var uploadChunk = this.option(\"uploadChunk\");\r\n            strategy = uploadChunk && isFunction(uploadChunk) ? new CustomChunksFileUploadStrategy(this) : new DefaultChunksFileUploadStrategy(this)\r\n        } else {\r\n            var uploadFile = this.option(\"uploadFile\");\r\n            strategy = uploadFile && isFunction(uploadFile) ? new CustomWholeFileUploadStrategy(this) : new DefaultWholeFileUploadStrategy(this)\r\n        }\r\n        this._uploadStrategy = strategy\r\n    }\r\n    _initFileInput() {\r\n        this._isCustomClickEvent = false;\r\n        if (!this._$fileInput) {\r\n            this._$fileInput = renderFileUploaderInput();\r\n            eventsEngine.on(this._$fileInput, \"change\", this._inputChangeHandler.bind(this));\r\n            eventsEngine.on(this._$fileInput, \"click\", e => {\r\n                e.stopPropagation();\r\n                return this.option(\"useNativeInputClick\") || this._isCustomClickEvent\r\n            })\r\n        }\r\n        this._$fileInput.prop({\r\n            multiple: this.option(\"multiple\"),\r\n            accept: this.option(\"accept\"),\r\n            tabIndex: -1\r\n        })\r\n    }\r\n    _inputChangeHandler() {\r\n        if (this._doPreventInputChange) {\r\n            return\r\n        }\r\n        var fileName = this._$fileInput.val().replace(/^.*\\\\/, \"\");\r\n        var files = this._$fileInput.prop(\"files\");\r\n        if (files && !files.length && \"useForm\" !== this.option(\"uploadMode\")) {\r\n            return\r\n        }\r\n        var value = files ? this._getFiles(files) : [{\r\n            name: fileName\r\n        }];\r\n        this._changeValue(value);\r\n        if (\"instantly\" === this.option(\"uploadMode\")) {\r\n            this._uploadFiles()\r\n        }\r\n    }\r\n    _shouldFileListBeExtended() {\r\n        return \"useForm\" !== this.option(\"uploadMode\") && this.option(\"extendSelection\") && this.option(\"multiple\")\r\n    }\r\n    _removeDuplicates(files, value) {\r\n        var result = [];\r\n        for (var i = 0; i < value.length; i++) {\r\n            if (!this._isFileInArray(files, value[i])) {\r\n                result.push(value[i])\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _isFileInArray(files, file) {\r\n        for (var i = 0; i < files.length; i++) {\r\n            var item = files[i];\r\n            if (item.size === file.size && item.name === file.name) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _changeValue(value) {\r\n        var files = this._shouldFileListBeExtended() ? this.option(\"value\").slice() : [];\r\n        if (\"instantly\" !== this.option(\"uploadMode\")) {\r\n            value = this._removeDuplicates(files, value)\r\n        }\r\n        this.option(\"value\", files.concat(value))\r\n    }\r\n    _getFiles(fileList) {\r\n        var values = [];\r\n        each(fileList, (_, value) => values.push(value));\r\n        return values\r\n    }\r\n    _getFile(fileData) {\r\n        var targetFileValue = isNumeric(fileData) ? this.option(\"value\")[fileData] : fileData;\r\n        return this._files.filter(file => file.value === targetFileValue)[0]\r\n    }\r\n    _initLabel() {\r\n        if (!this._$inputLabel) {\r\n            this._$inputLabel = $(\"<div>\")\r\n        }\r\n        this._updateInputLabelText()\r\n    }\r\n    _updateInputLabelText() {\r\n        var correctedValue = this._isInteractionDisabled() ? \"\" : this.option(\"labelText\");\r\n        this._$inputLabel.text(correctedValue)\r\n    }\r\n    _focusTarget() {\r\n        return this.$element().find(\".\" + FILEUPLOADER_BUTTON_CLASS)\r\n    }\r\n    _getSubmitElement() {\r\n        return this._$fileInput\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this.$element().addClass(FILEUPLOADER_CLASS);\r\n        this._renderWrapper();\r\n        this._renderInputWrapper();\r\n        this._renderSelectButton();\r\n        this._renderInputContainer();\r\n        this._renderUploadButton();\r\n        this._preventRecreatingFiles = true\r\n    }\r\n    _render() {\r\n        this._preventRecreatingFiles = false;\r\n        this._attachDragEventHandlers(this._$inputWrapper);\r\n        this._attachDragEventHandlers(this.option(\"dropZone\"));\r\n        this._renderFiles();\r\n        super._render()\r\n    }\r\n    _createFileProgressBar(file) {\r\n        file.progressBar = this._createProgressBar(file.value.size);\r\n        file.progressBar.$element().appendTo(file.$file);\r\n        this._initStatusMessage(file);\r\n        this._ensureCancelButtonInitialized(file)\r\n    }\r\n    _setStatusMessage(file, message) {\r\n        setTimeout(() => {\r\n            if (this.option(\"showFileList\")) {\r\n                if (file.$statusMessage) {\r\n                    file.$statusMessage.text(message);\r\n                    file.$statusMessage.css(\"display\", \"\");\r\n                    file.progressBar.$element().remove()\r\n                }\r\n            }\r\n        }, FILEUPLOADER_AFTER_LOAD_DELAY)\r\n    }\r\n    _getUploadAbortedStatusMessage() {\r\n        return \"instantly\" === this.option(\"uploadMode\") ? this.option(\"uploadAbortedMessage\") : this.option(\"readyToUploadMessage\")\r\n    }\r\n    _createFiles() {\r\n        var value = this.option(\"value\");\r\n        if (this._files && (0 === value.length || !this._shouldFileListBeExtended())) {\r\n            this._preventFilesUploading(this._files);\r\n            this._files = null\r\n        }\r\n        if (!this._files) {\r\n            this._files = []\r\n        }\r\n        each(value.slice(this._files.length), (_, value) => {\r\n            var file = this._createFile(value);\r\n            this._validateFile(file);\r\n            this._files.push(file)\r\n        })\r\n    }\r\n    _preventFilesUploading(files) {\r\n        files.forEach(file => this._uploadStrategy.abortUpload(file))\r\n    }\r\n    _validateFile(file) {\r\n        file.isValidFileExtension = this._validateFileExtension(file);\r\n        file.isValidMinSize = this._validateMinFileSize(file);\r\n        file.isValidMaxSize = this._validateMaxFileSize(file)\r\n    }\r\n    _validateFileExtension(file) {\r\n        var allowedExtensions = this.option(\"allowedFileExtensions\");\r\n        var fileExtension = file.value.name.substring(file.value.name.lastIndexOf(\".\")).toLowerCase();\r\n        if (0 === allowedExtensions.length) {\r\n            return true\r\n        }\r\n        for (var i = 0; i < allowedExtensions.length; i++) {\r\n            if (fileExtension === allowedExtensions[i].toLowerCase()) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _validateMaxFileSize(file) {\r\n        var fileSize = file.value.size;\r\n        var maxFileSize = this.option(\"maxFileSize\");\r\n        return maxFileSize > 0 ? fileSize <= maxFileSize : true\r\n    }\r\n    _validateMinFileSize(file) {\r\n        var fileSize = file.value.size;\r\n        var minFileSize = this.option(\"minFileSize\");\r\n        return minFileSize > 0 ? fileSize >= minFileSize : true\r\n    }\r\n    _createBeforeSendAction() {\r\n        this._beforeSendAction = this._createActionByOption(\"onBeforeSend\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createUploadStartedAction() {\r\n        this._uploadStartedAction = this._createActionByOption(\"onUploadStarted\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createUploadedAction() {\r\n        this._uploadedAction = this._createActionByOption(\"onUploaded\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createFilesUploadedAction() {\r\n        this._filesUploadedAction = this._createActionByOption(\"onFilesUploaded\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createProgressAction() {\r\n        this._progressAction = this._createActionByOption(\"onProgress\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createUploadAbortedAction() {\r\n        this._uploadAbortedAction = this._createActionByOption(\"onUploadAborted\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createUploadErrorAction() {\r\n        this._uploadErrorAction = this._createActionByOption(\"onUploadError\", {\r\n            excludeValidators: [\"readOnly\"]\r\n        })\r\n    }\r\n    _createDropZoneEnterAction() {\r\n        this._dropZoneEnterAction = this._createActionByOption(\"onDropZoneEnter\")\r\n    }\r\n    _createDropZoneLeaveAction() {\r\n        this._dropZoneLeaveAction = this._createActionByOption(\"onDropZoneLeave\")\r\n    }\r\n    _createFile(value) {\r\n        return {\r\n            value: value,\r\n            loadedSize: 0,\r\n            onProgress: Callbacks(),\r\n            onAbort: Callbacks(),\r\n            onLoad: Callbacks(),\r\n            onError: Callbacks(),\r\n            onLoadStart: Callbacks(),\r\n            isValidFileExtension: true,\r\n            isValidMaxSize: true,\r\n            isValidMinSize: true,\r\n            isValid() {\r\n                return this.isValidFileExtension && this.isValidMaxSize && this.isValidMinSize\r\n            },\r\n            isInitialized: false\r\n        }\r\n    }\r\n    _resetFileState(file) {\r\n        file.isAborted = false;\r\n        file.uploadStarted = false;\r\n        file.isStartLoad = false;\r\n        file.loadedSize = 0;\r\n        file.chunksData = void 0;\r\n        file.request = void 0\r\n    }\r\n    _renderFiles() {\r\n        var _this$_validationMess;\r\n        var value = this.option(\"value\");\r\n        if (!this._$filesContainer) {\r\n            this._$filesContainer = $(\"<div>\").addClass(FILEUPLOADER_FILES_CONTAINER_CLASS).appendTo(this._$content)\r\n        } else if (!this._shouldFileListBeExtended() || 0 === value.length) {\r\n            this._$filesContainer.empty()\r\n        }\r\n        var showFileList = this.option(\"showFileList\");\r\n        if (showFileList) {\r\n            each(this._files, (_, file) => {\r\n                if (!file.$file) {\r\n                    this._renderFile(file)\r\n                }\r\n            })\r\n        }\r\n        this.$element().toggleClass(FILEUPLOADER_SHOW_FILE_LIST_CLASS, showFileList);\r\n        this._toggleFileUploaderEmptyClassName();\r\n        this._updateFileNameMaxWidth();\r\n        null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.repaint()\r\n    }\r\n    _renderFile(file) {\r\n        var value = file.value;\r\n        var $fileContainer = $(\"<div>\").addClass(FILEUPLOADER_FILE_CONTAINER_CLASS).appendTo(this._$filesContainer);\r\n        this._renderFileButtons(file, $fileContainer);\r\n        file.$file = $(\"<div>\").addClass(FILEUPLOADER_FILE_CLASS).appendTo($fileContainer);\r\n        var $fileInfo = $(\"<div>\").addClass(FILEUPLOADER_FILE_INFO_CLASS).appendTo(file.$file);\r\n        file.$statusMessage = $(\"<div>\").addClass(FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS).appendTo(file.$file);\r\n        $(\"<div>\").addClass(FILEUPLOADER_FILE_NAME_CLASS).text(value.name).appendTo($fileInfo);\r\n        if (isDefined(value.size)) {\r\n            $(\"<div>\").addClass(FILEUPLOADER_FILE_SIZE_CLASS).text(this._getFileSize(value.size)).appendTo($fileInfo)\r\n        }\r\n        if (file.isValid()) {\r\n            file.$statusMessage.text(this.option(\"readyToUploadMessage\"))\r\n        } else {\r\n            if (!file.isValidFileExtension) {\r\n                file.$statusMessage.append(this._createValidationElement(\"invalidFileExtensionMessage\"))\r\n            }\r\n            if (!file.isValidMaxSize) {\r\n                file.$statusMessage.append(this._createValidationElement(\"invalidMaxFileSizeMessage\"))\r\n            }\r\n            if (!file.isValidMinSize) {\r\n                file.$statusMessage.append(this._createValidationElement(\"invalidMinFileSizeMessage\"))\r\n            }\r\n            $fileContainer.addClass(FILEUPLOADER_INVALID_CLASS)\r\n        }\r\n    }\r\n    _createValidationElement(key) {\r\n        return $(\"<span>\").text(this.option(key))\r\n    }\r\n    _updateFileNameMaxWidth() {\r\n        var cancelButtonsCount = this.option(\"allowCanceling\") && \"useForm\" !== this.option(\"uploadMode\") ? 1 : 0;\r\n        var uploadButtonsCount = \"useButtons\" === this.option(\"uploadMode\") ? 1 : 0;\r\n        var filesContainerWidth = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_CONTAINER_CLASS).first().width() || this._$filesContainer.width();\r\n        var $buttonContainer = this._$filesContainer.find(\".\" + FILEUPLOADER_BUTTON_CONTAINER_CLASS).eq(0);\r\n        var buttonsWidth = $buttonContainer.width() * (cancelButtonsCount + uploadButtonsCount);\r\n        var $fileSize = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_SIZE_CLASS).eq(0);\r\n        var prevFileSize = $fileSize.text();\r\n        $fileSize.text(\"1000 Mb\");\r\n        var fileSizeWidth = $fileSize.width();\r\n        $fileSize.text(prevFileSize);\r\n        this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_NAME_CLASS).css(\"maxWidth\", filesContainerWidth - buttonsWidth - fileSizeWidth)\r\n    }\r\n    _renderFileButtons(file, $container) {\r\n        var $cancelButton = this._getCancelButton(file);\r\n        $cancelButton && $container.append($cancelButton);\r\n        var $uploadButton = this._getUploadButton(file);\r\n        $uploadButton && $container.append($uploadButton)\r\n    }\r\n    _getCancelButton(file) {\r\n        if (\"useForm\" === this.option(\"uploadMode\")) {\r\n            return null\r\n        }\r\n        file.cancelButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_CANCEL_BUTTON_CLASS), Button, {\r\n            onClick: () => this._removeFile(file),\r\n            icon: \"close\",\r\n            visible: this.option(\"allowCanceling\"),\r\n            disabled: this.option(\"readOnly\"),\r\n            integrationOptions: {}\r\n        });\r\n        return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.cancelButton.$element())\r\n    }\r\n    _getUploadButton(file) {\r\n        if (!file.isValid() || \"useButtons\" !== this.option(\"uploadMode\")) {\r\n            return null\r\n        }\r\n        file.uploadButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_UPLOAD_BUTTON_CLASS), Button, {\r\n            onClick: () => this._uploadFile(file),\r\n            icon: \"upload\"\r\n        });\r\n        file.onLoadStart.add(() => file.uploadButton.option({\r\n            visible: false,\r\n            disabled: true\r\n        }));\r\n        file.onAbort.add(() => file.uploadButton.option({\r\n            visible: true,\r\n            disabled: false\r\n        }));\r\n        return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.uploadButton.$element())\r\n    }\r\n    _removeFile(file) {\r\n        var _file$$file;\r\n        null === (_file$$file = file.$file) || void 0 === _file$$file ? void 0 : _file$$file.parent().remove();\r\n        this._files.splice(inArray(file, this._files), 1);\r\n        var value = this.option(\"value\").slice();\r\n        value.splice(inArray(file.value, value), 1);\r\n        this._preventRecreatingFiles = true;\r\n        this.option(\"value\", value);\r\n        this._preventRecreatingFiles = false;\r\n        this._toggleFileUploaderEmptyClassName();\r\n        this._doPreventInputChange = true;\r\n        this._$fileInput.val(\"\");\r\n        this._doPreventInputChange = false\r\n    }\r\n    removeFile(fileData) {\r\n        if (\"useForm\" === this.option(\"uploadMode\") || !isDefined(fileData)) {\r\n            return\r\n        }\r\n        var file = this._getFile(fileData);\r\n        if (file) {\r\n            if (file.uploadStarted) {\r\n                this._preventFilesUploading([file])\r\n            }\r\n            this._removeFile(file)\r\n        }\r\n    }\r\n    _toggleFileUploaderEmptyClassName() {\r\n        this.$element().toggleClass(FILEUPLOADER_EMPTY_CLASS, !this._files.length || this._hasInvalidFile(this._files))\r\n    }\r\n    _hasInvalidFile(files) {\r\n        for (var i = 0; i < files.length; i++) {\r\n            if (!files[i].isValid()) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getFileSize(size) {\r\n        var i = 0;\r\n        var labels = [messageLocalization.format(\"dxFileUploader-bytes\"), messageLocalization.format(\"dxFileUploader-kb\"), messageLocalization.format(\"dxFileUploader-Mb\"), messageLocalization.format(\"dxFileUploader-Gb\")];\r\n        var count = labels.length - 1;\r\n        while (i < count && size >= 1024) {\r\n            size /= 1024;\r\n            i++\r\n        }\r\n        return Math.round(size) + \" \" + labels[i]\r\n    }\r\n    _renderSelectButton() {\r\n        var $button = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).appendTo(this._$inputWrapper);\r\n        this._selectButton = this._createComponent($button, Button, {\r\n            text: this.option(\"selectButtonText\"),\r\n            focusStateEnabled: false,\r\n            integrationOptions: {},\r\n            disabled: this.option(\"readOnly\")\r\n        });\r\n        this._selectFileDialogHandler = this._selectButtonClickHandler.bind(this);\r\n        if (\"desktop\" === devices.real().deviceType) {\r\n            this._selectButton.option(\"onClick\", this._selectFileDialogHandler)\r\n        } else {\r\n            this._attachSelectFileDialogHandler(this._selectButton.$element())\r\n        }\r\n        this._attachSelectFileDialogHandler(this.option(\"dialogTrigger\"))\r\n    }\r\n    _selectButtonClickHandler() {\r\n        if (this.option(\"useNativeInputClick\")) {\r\n            return\r\n        }\r\n        if (this._isInteractionDisabled()) {\r\n            return false\r\n        }\r\n        this._isCustomClickEvent = true;\r\n        eventsEngine.trigger(this._$fileInput, \"click\");\r\n        this._isCustomClickEvent = false\r\n    }\r\n    _attachSelectFileDialogHandler(target) {\r\n        if (!isDefined(target)) {\r\n            return\r\n        }\r\n        this._detachSelectFileDialogHandler(target);\r\n        eventsEngine.on($(target), \"click\", this._selectFileDialogHandler)\r\n    }\r\n    _detachSelectFileDialogHandler(target) {\r\n        if (!isDefined(target)) {\r\n            return\r\n        }\r\n        eventsEngine.off($(target), \"click\", this._selectFileDialogHandler)\r\n    }\r\n    _renderUploadButton() {\r\n        if (\"useButtons\" !== this.option(\"uploadMode\")) {\r\n            return\r\n        }\r\n        var $uploadButton = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).addClass(FILEUPLOADER_UPLOAD_BUTTON_CLASS).appendTo(this._$content);\r\n        this._uploadButton = this._createComponent($uploadButton, Button, {\r\n            text: this.option(\"uploadButtonText\"),\r\n            onClick: this._uploadButtonClickHandler.bind(this),\r\n            type: this.option(\"_uploadButtonType\"),\r\n            integrationOptions: {}\r\n        })\r\n    }\r\n    _uploadButtonClickHandler() {\r\n        this._uploadFiles()\r\n    }\r\n    _shouldDragOverBeRendered() {\r\n        return !this.option(\"readOnly\") && (\"useForm\" !== this.option(\"uploadMode\") || this.option(\"nativeDropSupported\"))\r\n    }\r\n    _isInteractionDisabled() {\r\n        return this.option(\"readOnly\") || this.option(\"disabled\")\r\n    }\r\n    _renderInputContainer() {\r\n        this._$inputContainer = $(\"<div>\").addClass(FILEUPLOADER_INPUT_CONTAINER_CLASS).appendTo(this._$inputWrapper);\r\n        this._$fileInput.addClass(FILEUPLOADER_INPUT_CLASS);\r\n        this._renderInput();\r\n        var labelId = \"dx-fileuploader-input-label-\".concat(new Guid);\r\n        this._$inputLabel.attr(\"id\", labelId).addClass(FILEUPLOADER_INPUT_LABEL_CLASS).appendTo(this._$inputContainer);\r\n        this.setAria(\"labelledby\", labelId, this._$fileInput)\r\n    }\r\n    _renderInput() {\r\n        if (this.option(\"useNativeInputClick\")) {\r\n            this._selectButton.option(\"template\", this._selectButtonInputTemplate.bind(this))\r\n        } else {\r\n            this._$fileInput.appendTo(this._$inputContainer);\r\n            this._selectButton.option(\"template\", \"content\")\r\n        }\r\n        this._applyInputAttributes(this.option(\"inputAttr\"))\r\n    }\r\n    _selectButtonInputTemplate(data, content) {\r\n        var $content = $(content);\r\n        var $text = $(\"<span>\").addClass(\"dx-button-text\").text(data.text);\r\n        $content.append($text).append(this._$fileInput);\r\n        return $content\r\n    }\r\n    _renderInputWrapper() {\r\n        this._$inputWrapper = $(\"<div>\").addClass(FILEUPLOADER_INPUT_WRAPPER_CLASS).appendTo(this._$content)\r\n    }\r\n    _detachDragEventHandlers(target) {\r\n        if (!isDefined(target)) {\r\n            return\r\n        }\r\n        eventsEngine.off($(target), addNamespace(\"\", this.NAME))\r\n    }\r\n    _attachDragEventHandlers(target) {\r\n        var isCustomTarget = target !== this._$inputWrapper;\r\n        if (!isDefined(target) || !this._shouldDragOverBeRendered()) {\r\n            return\r\n        }\r\n        this._detachDragEventHandlers(target);\r\n        target = $(target);\r\n        this._dragEventsTargets = [];\r\n        eventsEngine.on(target, addNamespace(\"dragenter\", this.NAME), this._dragEnterHandler.bind(this, isCustomTarget));\r\n        eventsEngine.on(target, addNamespace(\"dragover\", this.NAME), this._dragOverHandler.bind(this));\r\n        eventsEngine.on(target, addNamespace(\"dragleave\", this.NAME), this._dragLeaveHandler.bind(this, isCustomTarget));\r\n        eventsEngine.on(target, addNamespace(\"drop\", this.NAME), this._dropHandler.bind(this, isCustomTarget))\r\n    }\r\n    _applyInputAttributes(customAttributes) {\r\n        this._$fileInput.attr(customAttributes)\r\n    }\r\n    _useInputForDrop() {\r\n        return this.option(\"nativeDropSupported\") && \"useForm\" === this.option(\"uploadMode\")\r\n    }\r\n    _dragEnterHandler(isCustomTarget, e) {\r\n        if (this.option(\"disabled\")) {\r\n            return false\r\n        }\r\n        if (!this._useInputForDrop()) {\r\n            e.preventDefault()\r\n        }\r\n        this._tryToggleDropZoneActive(true, isCustomTarget, e);\r\n        this._updateEventTargets(e)\r\n    }\r\n    _dragOverHandler(e) {\r\n        if (!this._useInputForDrop()) {\r\n            e.preventDefault()\r\n        }\r\n        e.originalEvent.dataTransfer.dropEffect = \"copy\"\r\n    }\r\n    _dragLeaveHandler(isCustomTarget, e) {\r\n        if (!this._useInputForDrop()) {\r\n            e.preventDefault()\r\n        }\r\n        this._updateEventTargets(e);\r\n        this._tryToggleDropZoneActive(false, isCustomTarget, e)\r\n    }\r\n    _updateEventTargets(e) {\r\n        var targetIndex = this._dragEventsTargets.indexOf(e.target);\r\n        var isTargetExists = -1 !== targetIndex;\r\n        if (\"dragenter\" === e.type) {\r\n            !isTargetExists && this._dragEventsTargets.push(e.target)\r\n        } else {\r\n            isTargetExists && this._dragEventsTargets.splice(targetIndex, 1)\r\n        }\r\n    }\r\n    _tryToggleDropZoneActive(active, isCustom, event) {\r\n        var classAction = active ? \"addClass\" : \"removeClass\";\r\n        var mouseAction = active ? \"_dropZoneEnterAction\" : \"_dropZoneLeaveAction\";\r\n        if (!this._dragEventsTargets.length) {\r\n            this[mouseAction]({\r\n                event: event,\r\n                dropZoneElement: event.currentTarget\r\n            });\r\n            if (!isCustom) {\r\n                this.$element()[classAction](FILEUPLOADER_DRAGOVER_CLASS)\r\n            }\r\n        }\r\n    }\r\n    _dropHandler(isCustomTarget, e) {\r\n        this._dragEventsTargets = [];\r\n        if (!isCustomTarget) {\r\n            this.$element().removeClass(FILEUPLOADER_DRAGOVER_CLASS)\r\n        }\r\n        if (this._useInputForDrop() || isCustomTarget && this._isInteractionDisabled()) {\r\n            return\r\n        }\r\n        e.preventDefault();\r\n        var fileList = e.originalEvent.dataTransfer.files;\r\n        var files = this._getFiles(fileList);\r\n        if (!this.option(\"multiple\") && files.length > 1) {\r\n            return\r\n        }\r\n        this._changeValue(this._filterFiles(files));\r\n        if (\"instantly\" === this.option(\"uploadMode\")) {\r\n            this._uploadFiles()\r\n        }\r\n    }\r\n    _handleAllFilesUploaded() {\r\n        var areAllFilesLoaded = this._files.every(file => !file.isValid() || file._isError || file._isLoaded || file.isAborted);\r\n        if (areAllFilesLoaded) {\r\n            this._filesUploadedAction()\r\n        }\r\n    }\r\n    _filterFiles(files) {\r\n        if (!files.length) {\r\n            return files\r\n        }\r\n        var accept = this.option(\"accept\");\r\n        if (!accept.length) {\r\n            return files\r\n        }\r\n        var result = [];\r\n        var allowedTypes = this._getAllowedFileTypes(accept);\r\n        for (var i = 0, n = files.length; i < n; i++) {\r\n            if (this._isFileTypeAllowed(files[i], allowedTypes)) {\r\n                result.push(files[i])\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getAllowedFileTypes(acceptSting) {\r\n        if (!acceptSting.length) {\r\n            return []\r\n        }\r\n        return acceptSting.split(\",\").map(item => item.trim())\r\n    }\r\n    _isFileTypeAllowed(file, allowedTypes) {\r\n        for (var i = 0, n = allowedTypes.length; i < n; i++) {\r\n            var allowedType = allowedTypes[i];\r\n            if (\".\" === allowedType[0]) {\r\n                allowedType = allowedType.replace(\".\", \"\\\\.\");\r\n                if (file.name.match(new RegExp(allowedType + \"$\", \"i\"))) {\r\n                    return true\r\n                }\r\n            } else {\r\n                allowedType = allowedType.replace(new RegExp(\"\\\\*\", \"g\"), \"\");\r\n                if (file.type.match(new RegExp(allowedType, \"i\"))) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _renderWrapper() {\r\n        var $wrapper = $(\"<div>\").addClass(FILEUPLOADER_WRAPPER_CLASS).appendTo(this.$element());\r\n        var $container = $(\"<div>\").addClass(FILEUPLOADER_CONTAINER_CLASS).appendTo($wrapper);\r\n        this._$content = $(\"<div>\").addClass(FILEUPLOADER_CONTENT_CLASS).appendTo($container)\r\n    }\r\n    _clean() {\r\n        this._$fileInput.detach();\r\n        delete this._$filesContainer;\r\n        if (this._files) {\r\n            this._files.forEach(file => {\r\n                file.$file = null;\r\n                file.$statusMessage = null\r\n            })\r\n        }\r\n        super._clean()\r\n    }\r\n    abortUpload(fileData) {\r\n        if (\"useForm\" === this.option(\"uploadMode\")) {\r\n            return\r\n        }\r\n        if (isDefined(fileData)) {\r\n            var file = this._getFile(fileData);\r\n            if (file) {\r\n                this._preventFilesUploading([file])\r\n            }\r\n        } else {\r\n            this._preventFilesUploading(this._files)\r\n        }\r\n    }\r\n    upload(fileData) {\r\n        if (\"useForm\" === this.option(\"uploadMode\")) {\r\n            return\r\n        }\r\n        if (isDefined(fileData)) {\r\n            var file = this._getFile(fileData);\r\n            if (file && isFormDataSupported()) {\r\n                this._uploadFile(file)\r\n            }\r\n        } else {\r\n            this._uploadFiles()\r\n        }\r\n    }\r\n    _uploadFiles() {\r\n        if (isFormDataSupported()) {\r\n            each(this._files, (_, file) => this._uploadFile(file))\r\n        }\r\n    }\r\n    _uploadFile(file) {\r\n        this._uploadStrategy.upload(file)\r\n    }\r\n    _updateProgressBar(file, loadedFileData) {\r\n        file.progressBar && file.progressBar.option({\r\n            value: loadedFileData.loaded,\r\n            showStatus: true\r\n        });\r\n        this._progressAction({\r\n            file: file.value,\r\n            segmentSize: loadedFileData.currentSegmentSize,\r\n            bytesLoaded: loadedFileData.loaded,\r\n            bytesTotal: loadedFileData.total,\r\n            event: loadedFileData.event,\r\n            request: file.request\r\n        })\r\n    }\r\n    _updateTotalProgress(totalFilesSize, totalLoadedFilesSize) {\r\n        var progress = totalFilesSize ? this._getProgressValue(totalLoadedFilesSize / totalFilesSize) : 0;\r\n        this.option(\"progress\", progress);\r\n        this._setLoadedSize(totalLoadedFilesSize)\r\n    }\r\n    _getProgressValue(ratio) {\r\n        return Math.floor(100 * ratio)\r\n    }\r\n    _initStatusMessage(file) {\r\n        file.$statusMessage.css(\"display\", \"none\")\r\n    }\r\n    _ensureCancelButtonInitialized(file) {\r\n        if (file.isInitialized) {\r\n            return\r\n        }\r\n        file.cancelButton.option(\"onClick\", () => {\r\n            this._preventFilesUploading([file]);\r\n            this._removeFile(file)\r\n        });\r\n        var hideCancelButton = () => {\r\n            setTimeout(() => {\r\n                file.cancelButton.option({\r\n                    visible: false\r\n                })\r\n            }, FILEUPLOADER_AFTER_LOAD_DELAY)\r\n        };\r\n        file.onLoad.add(hideCancelButton);\r\n        file.onError.add(hideCancelButton)\r\n    }\r\n    _createProgressBar(fileSize) {\r\n        return this._createComponent($(\"<div>\"), ProgressBar, {\r\n            value: void 0,\r\n            min: 0,\r\n            max: fileSize,\r\n            statusFormat: ratio => this._getProgressValue(ratio) + \"%\",\r\n            showStatus: false,\r\n            statusPosition: \"right\"\r\n        })\r\n    }\r\n    _getTotalFilesSize() {\r\n        if (!this._totalFilesSize) {\r\n            this._totalFilesSize = 0;\r\n            each(this._files, (_, file) => {\r\n                this._totalFilesSize += file.value.size\r\n            })\r\n        }\r\n        return this._totalFilesSize\r\n    }\r\n    _getTotalLoadedFilesSize() {\r\n        if (!this._totalLoadedFilesSize) {\r\n            this._totalLoadedFilesSize = 0;\r\n            each(this._files, (_, file) => {\r\n                this._totalLoadedFilesSize += file.loadedSize\r\n            })\r\n        }\r\n        return this._totalLoadedFilesSize\r\n    }\r\n    _setLoadedSize(value) {\r\n        this._totalLoadedFilesSize = value\r\n    }\r\n    _recalculateProgress() {\r\n        this._totalFilesSize = 0;\r\n        this._totalLoadedFilesSize = 0;\r\n        this._updateTotalProgress(this._getTotalFilesSize(), this._getTotalLoadedFilesSize())\r\n    }\r\n    _updateReadOnlyState() {\r\n        var readOnly = this.option(\"readOnly\");\r\n        this._selectButton.option(\"disabled\", readOnly);\r\n        this._files.forEach(file => {\r\n            var _file$cancelButton;\r\n            return null === (_file$cancelButton = file.cancelButton) || void 0 === _file$cancelButton ? void 0 : _file$cancelButton.option(\"disabled\", readOnly)\r\n        });\r\n        this._updateInputLabelText();\r\n        this._attachDragEventHandlers(this._$inputWrapper)\r\n    }\r\n    _optionChanged(args) {\r\n        var {\r\n            name: name,\r\n            value: value,\r\n            previousValue: previousValue\r\n        } = args;\r\n        switch (name) {\r\n            case \"height\":\r\n            case \"width\":\r\n                this._updateFileNameMaxWidth();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"value\":\r\n                !value.length && this._$fileInput.val(\"\");\r\n                if (!this._preventRecreatingFiles) {\r\n                    this._createFiles();\r\n                    this._renderFiles()\r\n                }\r\n                this._recalculateProgress();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"name\":\r\n                this._initFileInput();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"accept\":\r\n                this._initFileInput();\r\n                break;\r\n            case \"multiple\":\r\n                this._initFileInput();\r\n                if (!args.value) {\r\n                    this.reset()\r\n                }\r\n                break;\r\n            case \"readOnly\":\r\n                this._updateReadOnlyState();\r\n                super._optionChanged(args);\r\n                break;\r\n            case \"selectButtonText\":\r\n                this._selectButton.option(\"text\", value);\r\n                break;\r\n            case \"uploadButtonText\":\r\n                this._uploadButton && this._uploadButton.option(\"text\", value);\r\n                break;\r\n            case \"_uploadButtonType\":\r\n                this._uploadButton && this._uploadButton.option(\"type\", value);\r\n                break;\r\n            case \"dialogTrigger\":\r\n                this._detachSelectFileDialogHandler(previousValue);\r\n                this._attachSelectFileDialogHandler(value);\r\n                break;\r\n            case \"dropZone\":\r\n                this._detachDragEventHandlers(previousValue);\r\n                this._attachDragEventHandlers(value);\r\n                break;\r\n            case \"maxFileSize\":\r\n            case \"minFileSize\":\r\n            case \"allowedFileExtensions\":\r\n            case \"invalidFileExtensionMessage\":\r\n            case \"invalidMaxFileSizeMessage\":\r\n            case \"invalidMinFileSizeMessage\":\r\n            case \"readyToUploadMessage\":\r\n            case \"uploadedMessage\":\r\n            case \"uploadFailedMessage\":\r\n            case \"uploadAbortedMessage\":\r\n                this._invalidate();\r\n                break;\r\n            case \"labelText\":\r\n                this._updateInputLabelText();\r\n                break;\r\n            case \"showFileList\":\r\n                if (!this._preventRecreatingFiles) {\r\n                    this._renderFiles()\r\n                }\r\n                break;\r\n            case \"uploadFile\":\r\n            case \"uploadChunk\":\r\n            case \"chunkSize\":\r\n                this._setUploadStrategy();\r\n                break;\r\n            case \"abortUpload\":\r\n            case \"uploadUrl\":\r\n            case \"progress\":\r\n            case \"uploadMethod\":\r\n            case \"uploadHeaders\":\r\n            case \"uploadCustomData\":\r\n            case \"extendSelection\":\r\n                break;\r\n            case \"allowCanceling\":\r\n            case \"uploadMode\":\r\n                this.reset();\r\n                this._invalidate();\r\n                break;\r\n            case \"onBeforeSend\":\r\n                this._createBeforeSendAction();\r\n                break;\r\n            case \"onUploadStarted\":\r\n                this._createUploadStartedAction();\r\n                break;\r\n            case \"onUploaded\":\r\n                this._createUploadedAction();\r\n                break;\r\n            case \"onFilesUploaded\":\r\n                this._createFilesUploadedAction();\r\n                break;\r\n            case \"onProgress\":\r\n                this._createProgressAction();\r\n                break;\r\n            case \"onUploadError\":\r\n                this._createUploadErrorAction();\r\n                break;\r\n            case \"onUploadAborted\":\r\n                this._createUploadAbortedAction();\r\n                break;\r\n            case \"onDropZoneEnter\":\r\n                this._createDropZoneEnterAction();\r\n                break;\r\n            case \"onDropZoneLeave\":\r\n                this._createDropZoneLeaveAction();\r\n                break;\r\n            case \"useNativeInputClick\":\r\n                this._renderInput();\r\n                break;\r\n            case \"useDragOver\":\r\n                this._attachDragEventHandlers(this._$inputWrapper);\r\n                break;\r\n            case \"nativeDropSupported\":\r\n                this._invalidate();\r\n                break;\r\n            case \"inputAttr\":\r\n                this._applyInputAttributes(this.option(name));\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    reset() {\r\n        this.option(\"value\", [])\r\n    }\r\n}\r\nclass FileBlobReader {\r\n    constructor(file, chunkSize) {\r\n        this.file = file;\r\n        this.chunkSize = chunkSize;\r\n        this.index = 0\r\n    }\r\n    read() {\r\n        if (!this.file) {\r\n            return null\r\n        }\r\n        var result = this.createBlobResult(this.file, this.index, this.chunkSize);\r\n        if (result.isCompleted) {\r\n            this.file = null\r\n        }\r\n        this.index++;\r\n        return result\r\n    }\r\n    createBlobResult(file, index, chunkSize) {\r\n        var currentPosition = index * chunkSize;\r\n        return {\r\n            blob: this.sliceFile(file, currentPosition, chunkSize),\r\n            index: index,\r\n            isCompleted: currentPosition + chunkSize >= file.size\r\n        }\r\n    }\r\n    sliceFile(file, startPos, length) {\r\n        if (file.slice) {\r\n            return file.slice(startPos, startPos + length)\r\n        }\r\n        if (file.webkitSlice) {\r\n            return file.webkitSlice(startPos, startPos + length)\r\n        }\r\n        return null\r\n    }\r\n}\r\nclass FileUploadStrategyBase {\r\n    constructor(fileUploader) {\r\n        this.fileUploader = fileUploader\r\n    }\r\n    upload(file) {\r\n        if (file.isInitialized && file.isAborted) {\r\n            this.fileUploader._resetFileState(file)\r\n        }\r\n        if (file.isValid() && !file.uploadStarted) {\r\n            this._prepareFileBeforeUpload(file);\r\n            this._uploadCore(file)\r\n        }\r\n    }\r\n    abortUpload(file) {\r\n        if (file._isError || file._isLoaded || file.isAborted || !file.uploadStarted) {\r\n            return\r\n        }\r\n        file.isAborted = true;\r\n        file.request && file.request.abort();\r\n        if (this._isCustomCallback(\"abortUpload\")) {\r\n            var abortUpload = this.fileUploader.option(\"abortUpload\");\r\n            var arg = this._createUploadArgument(file);\r\n            var deferred = null;\r\n            try {\r\n                var result = abortUpload(file.value, arg);\r\n                deferred = fromPromise(result)\r\n            } catch (error) {\r\n                deferred = (new Deferred).reject(error).promise()\r\n            }\r\n            deferred.done(() => file.onAbort.fire()).fail(error => this._handleFileError(file, error))\r\n        }\r\n    }\r\n    _beforeSend(xhr, file) {\r\n        var arg = this._createUploadArgument(file);\r\n        this.fileUploader._beforeSendAction({\r\n            request: xhr,\r\n            file: file.value,\r\n            uploadInfo: arg\r\n        });\r\n        file.request = xhr\r\n    }\r\n    _createUploadArgument(file) {}\r\n    _uploadCore(file) {}\r\n    _isCustomCallback(name) {\r\n        var callback = this.fileUploader.option(name);\r\n        return callback && isFunction(callback)\r\n    }\r\n    _handleFileError(file, error) {\r\n        file._isError = true;\r\n        file.onError.fire(error)\r\n    }\r\n    _prepareFileBeforeUpload(file) {\r\n        if (file.$file) {\r\n            var _file$progressBar;\r\n            null === (_file$progressBar = file.progressBar) || void 0 === _file$progressBar ? void 0 : _file$progressBar.dispose();\r\n            this.fileUploader._createFileProgressBar(file)\r\n        }\r\n        if (file.isInitialized) {\r\n            return\r\n        }\r\n        file.onLoadStart.add(this._onUploadStarted.bind(this, file));\r\n        file.onLoad.add(this._onLoadedHandler.bind(this, file));\r\n        file.onError.add(this._onErrorHandler.bind(this, file));\r\n        file.onAbort.add(this._onAbortHandler.bind(this, file));\r\n        file.onProgress.add(this._onProgressHandler.bind(this, file));\r\n        file.isInitialized = true\r\n    }\r\n    _isStatusError(status) {\r\n        return 400 <= status && status < 500 || 500 <= status && status < 600\r\n    }\r\n    _onUploadStarted(file, e) {\r\n        file.uploadStarted = true;\r\n        this.fileUploader._uploadStartedAction({\r\n            file: file.value,\r\n            event: e,\r\n            request: file.request\r\n        })\r\n    }\r\n    _onAbortHandler(file, e) {\r\n        var args = {\r\n            file: file.value,\r\n            event: e,\r\n            request: file.request,\r\n            message: this.fileUploader._getUploadAbortedStatusMessage()\r\n        };\r\n        this.fileUploader._uploadAbortedAction(args);\r\n        this.fileUploader._setStatusMessage(file, args.message);\r\n        this.fileUploader._handleAllFilesUploaded()\r\n    }\r\n    _onErrorHandler(file, error) {\r\n        var args = {\r\n            file: file.value,\r\n            event: void 0,\r\n            request: file.request,\r\n            error: error,\r\n            message: this.fileUploader.option(\"uploadFailedMessage\")\r\n        };\r\n        this.fileUploader._uploadErrorAction(args);\r\n        this.fileUploader._setStatusMessage(file, args.message);\r\n        this.fileUploader._handleAllFilesUploaded()\r\n    }\r\n    _onLoadedHandler(file, e) {\r\n        var args = {\r\n            file: file.value,\r\n            event: e,\r\n            request: file.request,\r\n            message: this.fileUploader.option(\"uploadedMessage\")\r\n        };\r\n        file._isLoaded = true;\r\n        this.fileUploader._uploadedAction(args);\r\n        this.fileUploader._setStatusMessage(file, args.message);\r\n        this.fileUploader._handleAllFilesUploaded()\r\n    }\r\n    _onProgressHandler(file, e) {\r\n        if (file) {\r\n            var totalFilesSize = this.fileUploader._getTotalFilesSize();\r\n            var totalLoadedFilesSize = this.fileUploader._getTotalLoadedFilesSize();\r\n            var loadedSize = Math.min(e.loaded, file.value.size);\r\n            var segmentSize = loadedSize - file.loadedSize;\r\n            file.loadedSize = loadedSize;\r\n            this.fileUploader._updateTotalProgress(totalFilesSize, totalLoadedFilesSize + segmentSize);\r\n            this.fileUploader._updateProgressBar(file, this._getLoadedData(loadedSize, e.total, segmentSize, e))\r\n        }\r\n    }\r\n    _getLoadedData(loaded, total, currentSegmentSize, event) {\r\n        return {\r\n            loaded: loaded,\r\n            total: total,\r\n            currentSegmentSize: currentSegmentSize\r\n        }\r\n    }\r\n    _extendFormData(formData) {\r\n        var formDataEntries = this.fileUploader.option(\"uploadCustomData\");\r\n        for (var entryName in formDataEntries) {\r\n            if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {\r\n                formData.append(entryName, formDataEntries[entryName])\r\n            }\r\n        }\r\n    }\r\n}\r\nclass ChunksFileUploadStrategyBase extends FileUploadStrategyBase {\r\n    constructor(fileUploader) {\r\n        super(fileUploader);\r\n        this.chunkSize = this.fileUploader.option(\"chunkSize\")\r\n    }\r\n    _uploadCore(file) {\r\n        var realFile = file.value;\r\n        var chunksData = {\r\n            name: realFile.name,\r\n            loadedBytes: 0,\r\n            type: realFile.type,\r\n            blobReader: new FileBlobReader(realFile, this.chunkSize),\r\n            guid: new Guid,\r\n            fileSize: realFile.size,\r\n            count: Math.ceil(realFile.size / this.chunkSize),\r\n            customData: {}\r\n        };\r\n        file.chunksData = chunksData;\r\n        this._sendChunk(file, chunksData)\r\n    }\r\n    _sendChunk(file, chunksData) {\r\n        var chunk = chunksData.blobReader.read();\r\n        chunksData.currentChunk = chunk;\r\n        if (chunk) {\r\n            this._sendChunkCore(file, chunksData, chunk).done(() => {\r\n                if (file.isAborted) {\r\n                    return\r\n                }\r\n                chunksData.loadedBytes += chunk.blob.size;\r\n                file.onProgress.fire({\r\n                    loaded: chunksData.loadedBytes,\r\n                    total: file.value.size\r\n                });\r\n                if (chunk.isCompleted) {\r\n                    file.onLoad.fire()\r\n                }\r\n                setTimeout(() => this._sendChunk(file, chunksData))\r\n            }).fail(error => {\r\n                if (this._shouldHandleError(error)) {\r\n                    this._handleFileError(file, error)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    _sendChunkCore(file, chunksData, chunk) {}\r\n    _shouldHandleError(error) {}\r\n    _tryRaiseStartLoad(file) {\r\n        if (!file.isStartLoad) {\r\n            file.isStartLoad = true;\r\n            file.onLoadStart.fire()\r\n        }\r\n    }\r\n    _getEvent(e) {\r\n        return null\r\n    }\r\n    _createUploadArgument(file) {\r\n        return this._createChunksInfo(file.chunksData)\r\n    }\r\n    _createChunksInfo(chunksData) {\r\n        return {\r\n            bytesUploaded: chunksData.loadedBytes,\r\n            chunkCount: chunksData.count,\r\n            customData: chunksData.customData,\r\n            chunkBlob: chunksData.currentChunk.blob,\r\n            chunkIndex: chunksData.currentChunk.index\r\n        }\r\n    }\r\n}\r\nclass DefaultChunksFileUploadStrategy extends ChunksFileUploadStrategyBase {\r\n    _sendChunkCore(file, chunksData, chunk) {\r\n        return ajax.sendRequest({\r\n            url: this.fileUploader.option(\"uploadUrl\"),\r\n            method: this.fileUploader.option(\"uploadMethod\"),\r\n            headers: this.fileUploader.option(\"uploadHeaders\"),\r\n            beforeSend: xhr => this._beforeSend(xhr, file),\r\n            upload: {\r\n                onloadstart: () => this._tryRaiseStartLoad(file),\r\n                onabort: () => file.onAbort.fire()\r\n            },\r\n            data: this._createFormData({\r\n                fileName: chunksData.name,\r\n                blobName: this.fileUploader.option(\"name\"),\r\n                blob: chunk.blob,\r\n                index: chunk.index,\r\n                count: chunksData.count,\r\n                type: chunksData.type,\r\n                guid: chunksData.guid,\r\n                size: chunksData.fileSize\r\n            })\r\n        })\r\n    }\r\n    _shouldHandleError(e) {\r\n        return this._isStatusError(e.status)\r\n    }\r\n    _createFormData(options) {\r\n        var formData = new window.FormData;\r\n        formData.append(options.blobName, options.blob);\r\n        formData.append(FILEUPLOADER_CHUNK_META_DATA_NAME, JSON.stringify({\r\n            FileName: options.fileName,\r\n            Index: options.index,\r\n            TotalCount: options.count,\r\n            FileSize: options.size,\r\n            FileType: options.type,\r\n            FileGuid: options.guid\r\n        }));\r\n        this._extendFormData(formData);\r\n        return formData\r\n    }\r\n}\r\nclass CustomChunksFileUploadStrategy extends ChunksFileUploadStrategyBase {\r\n    _sendChunkCore(file, chunksData) {\r\n        this._tryRaiseStartLoad(file);\r\n        var chunksInfo = this._createChunksInfo(chunksData);\r\n        var uploadChunk = this.fileUploader.option(\"uploadChunk\");\r\n        try {\r\n            var result = uploadChunk(file.value, chunksInfo);\r\n            return fromPromise(result)\r\n        } catch (error) {\r\n            return (new Deferred).reject(error).promise()\r\n        }\r\n    }\r\n    _shouldHandleError(e) {\r\n        return true\r\n    }\r\n}\r\nclass WholeFileUploadStrategyBase extends FileUploadStrategyBase {\r\n    _uploadCore(file) {\r\n        file.loadedSize = 0;\r\n        this._uploadFile(file).done(() => {\r\n            if (!file.isAborted) {\r\n                file.onLoad.fire()\r\n            }\r\n        }).fail(error => {\r\n            if (this._shouldHandleError(file, error)) {\r\n                this._handleFileError(file, error)\r\n            }\r\n        })\r\n    }\r\n    _uploadFile(file) {}\r\n    _shouldHandleError(file, e) {}\r\n    _handleProgress(file, e) {\r\n        if (file._isError) {\r\n            return\r\n        }\r\n        file._isProgressStarted = true;\r\n        file.onProgress.fire(e)\r\n    }\r\n    _getLoadedData(loaded, total, segmentSize, event) {\r\n        var result = super._getLoadedData(loaded, total, segmentSize, event);\r\n        result.event = event;\r\n        return result\r\n    }\r\n}\r\nclass DefaultWholeFileUploadStrategy extends WholeFileUploadStrategyBase {\r\n    _uploadFile(file) {\r\n        return ajax.sendRequest({\r\n            url: this.fileUploader.option(\"uploadUrl\"),\r\n            method: this.fileUploader.option(\"uploadMethod\"),\r\n            headers: this.fileUploader.option(\"uploadHeaders\"),\r\n            beforeSend: xhr => this._beforeSend(xhr, file),\r\n            upload: {\r\n                onprogress: e => this._handleProgress(file, e),\r\n                onloadstart: () => file.onLoadStart.fire(),\r\n                onabort: () => file.onAbort.fire()\r\n            },\r\n            data: this._createFormData(this.fileUploader.option(\"name\"), file.value)\r\n        })\r\n    }\r\n    _shouldHandleError(file, e) {\r\n        return (this._isStatusError(e.status) || !file._isProgressStarted) && !file.isAborted\r\n    }\r\n    _createFormData(fieldName, fieldValue) {\r\n        var formData = new window.FormData;\r\n        formData.append(fieldName, fieldValue, fieldValue.name);\r\n        this._extendFormData(formData);\r\n        return formData\r\n    }\r\n}\r\nclass CustomWholeFileUploadStrategy extends WholeFileUploadStrategyBase {\r\n    _uploadFile(file) {\r\n        file.onLoadStart.fire();\r\n        var uploadFile = this.fileUploader.option(\"uploadFile\");\r\n        try {\r\n            var result = uploadFile(file.value, loadedBytes => {\r\n                var arg = {\r\n                    loaded: loadedBytes,\r\n                    total: file.size\r\n                };\r\n                this._handleProgress(file, arg)\r\n            });\r\n            return fromPromise(result)\r\n        } catch (error) {\r\n            return (new Deferred).reject(error).promise()\r\n        }\r\n    }\r\n    _shouldHandleError(file, e) {\r\n        return true\r\n    }\r\n}\r\nregisterComponent(\"dxFileUploader\", FileUploader);\r\nexport default FileUploader;\r\n"]},"metadata":{},"sourceType":"module"}