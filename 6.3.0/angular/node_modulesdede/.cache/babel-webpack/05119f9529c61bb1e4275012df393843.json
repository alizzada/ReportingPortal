{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.export_helper.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWindow } from \"../../core/utils/window\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { isDate, isDefined, isNumeric } from \"../../core/utils/type\";\nimport dateLocalization from \"../../localization/date\";\nimport numberLocalization from \"../../localization/number\";\nvar window = getWindow();\nvar TREELIST_EMPTY_SPACE = \"dx-treelist-empty-space\";\nvar TREELIST_TABLE = \"dx-treelist-table\";\nexport var GanttExportHelper = /*#__PURE__*/function () {\n  function GanttExportHelper(gantt) {\n    _classCallCheck(this, GanttExportHelper);\n\n    this._gantt = gantt;\n    this._treeList = gantt._treeList;\n    this._cache = {};\n  }\n\n  _createClass(GanttExportHelper, [{\n    key: \"reset\",\n    value: function reset() {\n      this._cache = {};\n    }\n  }, {\n    key: \"getTreeListTableStyle\",\n    value: function getTreeListTableStyle() {\n      var table = this._getTreeListTable();\n\n      var style = window.getComputedStyle(table);\n      return {\n        color: style.color,\n        backgroundColor: style.backgroundColor,\n        fontSize: style.fontSize,\n        fontFamily: style.fontFamily,\n        fontWeight: style.fontWeight,\n        fontStyle: style.fontStyle,\n        textAlign: \"left\",\n        verticalAlign: \"middle\"\n      };\n    }\n  }, {\n    key: \"getTreeListColCount\",\n    value: function getTreeListColCount() {\n      var headerView = this._getHeaderView();\n\n      var widths = headerView.getColumnWidths().filter(function (w) {\n        return w > 0;\n      });\n      return widths.length;\n    }\n  }, {\n    key: \"getTreeListHeaderInfo\",\n    value: function getTreeListHeaderInfo(colIndex) {\n      var element = this._getHeaderElement(colIndex);\n\n      if (!element) {\n        return null;\n      }\n\n      var style = window.getComputedStyle(element);\n      var styleForExport = {\n        color: style.color,\n        padding: style.padding,\n        paddingLeft: style.paddingLeft,\n        paddingTop: style.paddingTop,\n        paddingRight: style.paddingRight,\n        paddingBottom: style.paddingBottom,\n        verticalAlign: style.verticalAlign,\n        width: this._getColumnWidth(colIndex)\n      };\n      return {\n        content: element.textContent,\n        styles: styleForExport\n      };\n    }\n  }, {\n    key: \"getTreeListCellInfo\",\n    value: function getTreeListCellInfo(rowIndex, colIndex) {\n      var _cell$textContent;\n\n      var cell = this._getDataCell(rowIndex, colIndex);\n\n      var node = this._getNodeByRowIndex(rowIndex);\n\n      var style = cell ? window.getComputedStyle(cell) : this._getColumnCellStyle(colIndex);\n      var styleForExport = {\n        color: style.color,\n        padding: style.padding,\n        paddingLeft: style.paddingLeft,\n        paddingTop: style.paddingTop,\n        paddingRight: style.paddingRight,\n        paddingBottom: style.paddingBottom,\n        width: this._getColumnWidth(colIndex)\n      };\n\n      if (0 === colIndex) {\n        styleForExport.extraLeftPadding = this._getEmptySpaceWidth(node.level);\n      }\n\n      return {\n        content: null !== (_cell$textContent = null === cell || void 0 === cell ? void 0 : cell.textContent) && void 0 !== _cell$textContent ? _cell$textContent : this._getDisplayText(rowIndex, colIndex),\n        styles: styleForExport\n      };\n    }\n  }, {\n    key: \"_ensureColumnWidthCache\",\n    value: function _ensureColumnWidthCache(colIndex) {\n      var _this$_cache, _this$_cache$_columnW;\n\n      null !== (_this$_cache$_columnW = (_this$_cache = this._cache)[\"columnWidths\"]) && void 0 !== _this$_cache$_columnW ? _this$_cache$_columnW : _this$_cache.columnWidths = {};\n\n      if (!this._cache.columnWidths[colIndex]) {\n        var _header$clientWidth;\n\n        var header = this._getHeaderElement(colIndex);\n\n        this._cache.columnWidths[colIndex] = null !== (_header$clientWidth = null === header || void 0 === header ? void 0 : header.clientWidth) && void 0 !== _header$clientWidth ? _header$clientWidth : 0;\n      }\n    }\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(colIndex) {\n      this._ensureColumnWidthCache(colIndex);\n\n      var widths = this._cache.columnWidths;\n      return widths && widths[colIndex];\n    }\n  }, {\n    key: \"_getEmptySpaceWidth\",\n    value: function _getEmptySpaceWidth(level) {\n      if (!this._cache.emptyWidth) {\n        var _this$_cache2, _this$_cache2$_emptyW, _element$offsetWidth;\n\n        var element = this._getTreeListElement(TREELIST_EMPTY_SPACE);\n\n        null !== (_this$_cache2$_emptyW = (_this$_cache2 = this._cache)[\"emptyWidth\"]) && void 0 !== _this$_cache2$_emptyW ? _this$_cache2$_emptyW : _this$_cache2.emptyWidth = null !== (_element$offsetWidth = element.offsetWidth) && void 0 !== _element$offsetWidth ? _element$offsetWidth : 0;\n      }\n\n      return this._cache.emptyWidth * (level + 1);\n    }\n  }, {\n    key: \"_getColumnCellStyle\",\n    value: function _getColumnCellStyle(colIndex) {\n      this._ensureColumnCellStyleCache(colIndex);\n\n      return this._cache.columnStyles[colIndex];\n    }\n  }, {\n    key: \"_ensureColumnCellStyleCache\",\n    value: function _ensureColumnCellStyleCache(colIndex) {\n      var _this$_cache3, _this$_cache3$_column;\n\n      null !== (_this$_cache3$_column = (_this$_cache3 = this._cache)[\"columnStyles\"]) && void 0 !== _this$_cache3$_column ? _this$_cache3$_column : _this$_cache3.columnStyles = {};\n\n      if (!this._cache.columnStyles[colIndex]) {\n        var cell = this._getDataCell(0, colIndex);\n\n        this._cache.columnStyles[colIndex] = window.getComputedStyle(cell);\n      }\n    }\n  }, {\n    key: \"_getTreeListTable\",\n    value: function _getTreeListTable() {\n      return this._getTreeListElement(TREELIST_TABLE);\n    }\n  }, {\n    key: \"_getTreeListElement\",\n    value: function _getTreeListElement(className) {\n      return this._treeList._$element.find(\".\" + className).get(0);\n    }\n  }, {\n    key: \"_getDataCell\",\n    value: function _getDataCell(rowIndex, colIndex) {\n      var treeList = this._treeList;\n      var cellElement = treeList.getCellElement(rowIndex, colIndex);\n      return cellElement && cellElement.length ? cellElement[0] : cellElement;\n    }\n  }, {\n    key: \"_getHeaderElement\",\n    value: function _getHeaderElement(index) {\n      return this._getHeaderView().getHeaderElement(index).get(0);\n    }\n  }, {\n    key: \"_getHeaderView\",\n    value: function _getHeaderView() {\n      return this._treeList._views.columnHeadersView;\n    }\n  }, {\n    key: \"_getNodeByRowIndex\",\n    value: function _getNodeByRowIndex(rowIndex) {\n      var _treeList$getKeyByRow;\n\n      var treeList = this._treeList;\n      var nodeKey = null !== (_treeList$getKeyByRow = treeList.getKeyByRowIndex(rowIndex)) && void 0 !== _treeList$getKeyByRow ? _treeList$getKeyByRow : this._findTaskKeyByRowIndex(rowIndex);\n      return treeList.getNodeByKey(nodeKey);\n    }\n  }, {\n    key: \"_findTaskKeyByRowIndex\",\n    value: function _findTaskKeyByRowIndex(rowIndex) {\n      var tasks = this._getGanttTasks();\n\n      var keyGetter = this._gantt._getTaskKeyGetter();\n\n      var task = tasks[rowIndex];\n      return keyGetter(task);\n    }\n  }, {\n    key: \"_getGanttTasks\",\n    value: function _getGanttTasks() {\n      var _this$_gantt$_tasksOp;\n\n      return null === (_this$_gantt$_tasksOp = this._gantt._tasksOption) || void 0 === _this$_gantt$_tasksOp ? void 0 : _this$_gantt$_tasksOp._getItems();\n    }\n  }, {\n    key: \"_getDisplayText\",\n    value: function _getDisplayText(rowIndex, colIndex) {\n      var tasks = this._getGanttTasks();\n\n      var task = tasks[rowIndex];\n      return task && this._getGridDisplayText(colIndex, task);\n    }\n  }, {\n    key: \"_getGridDisplayText\",\n    value: function _getGridDisplayText(colIndex, data) {\n      var columns = this._treeList.getController(\"columns\").getColumns();\n\n      var column = columns[colIndex];\n      var field = null === column || void 0 === column ? void 0 : column.dataField;\n      var format = null === column || void 0 === column ? void 0 : column.format;\n      var value = gridCoreUtils.getDisplayValue(column, data[field], data, \"data\");\n\n      if (isDefined(format)) {\n        if (isDate(value)) {\n          return dateLocalization.format(value, format);\n        }\n\n        if (isNumeric(value)) {\n          return numberLocalization.format(value, format);\n        }\n      }\n\n      return value;\n    }\n  }]);\n\n  return GanttExportHelper;\n}();","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/gantt/ui.gantt.export_helper.js"],"names":["getWindow","gridCoreUtils","isDate","isDefined","isNumeric","dateLocalization","numberLocalization","window","TREELIST_EMPTY_SPACE","TREELIST_TABLE","GanttExportHelper","gantt","_gantt","_treeList","_cache","table","_getTreeListTable","style","getComputedStyle","color","backgroundColor","fontSize","fontFamily","fontWeight","fontStyle","textAlign","verticalAlign","headerView","_getHeaderView","widths","getColumnWidths","filter","w","length","colIndex","element","_getHeaderElement","styleForExport","padding","paddingLeft","paddingTop","paddingRight","paddingBottom","width","_getColumnWidth","content","textContent","styles","rowIndex","_cell$textContent","cell","_getDataCell","node","_getNodeByRowIndex","_getColumnCellStyle","extraLeftPadding","_getEmptySpaceWidth","level","_getDisplayText","_this$_cache","_this$_cache$_columnW","columnWidths","_header$clientWidth","header","clientWidth","_ensureColumnWidthCache","emptyWidth","_this$_cache2","_this$_cache2$_emptyW","_element$offsetWidth","_getTreeListElement","offsetWidth","_ensureColumnCellStyleCache","columnStyles","_this$_cache3","_this$_cache3$_column","className","_$element","find","get","treeList","cellElement","getCellElement","index","getHeaderElement","_views","columnHeadersView","_treeList$getKeyByRow","nodeKey","getKeyByRowIndex","_findTaskKeyByRowIndex","getNodeByKey","tasks","_getGanttTasks","keyGetter","_getTaskKeyGetter","task","_this$_gantt$_tasksOp","_tasksOption","_getItems","_getGridDisplayText","data","columns","getController","getColumns","column","field","dataField","format","value","getDisplayValue"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.export_helper.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\r\nimport {\r\n    isDate,\r\n    isDefined,\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport numberLocalization from \"../../localization/number\";\r\nvar window = getWindow();\r\nvar TREELIST_EMPTY_SPACE = \"dx-treelist-empty-space\";\r\nvar TREELIST_TABLE = \"dx-treelist-table\";\r\nexport class GanttExportHelper {\r\n    constructor(gantt) {\r\n        this._gantt = gantt;\r\n        this._treeList = gantt._treeList;\r\n        this._cache = {}\r\n    }\r\n    reset() {\r\n        this._cache = {}\r\n    }\r\n    getTreeListTableStyle() {\r\n        var table = this._getTreeListTable();\r\n        var style = window.getComputedStyle(table);\r\n        return {\r\n            color: style.color,\r\n            backgroundColor: style.backgroundColor,\r\n            fontSize: style.fontSize,\r\n            fontFamily: style.fontFamily,\r\n            fontWeight: style.fontWeight,\r\n            fontStyle: style.fontStyle,\r\n            textAlign: \"left\",\r\n            verticalAlign: \"middle\"\r\n        }\r\n    }\r\n    getTreeListColCount() {\r\n        var headerView = this._getHeaderView();\r\n        var widths = headerView.getColumnWidths().filter(w => w > 0);\r\n        return widths.length\r\n    }\r\n    getTreeListHeaderInfo(colIndex) {\r\n        var element = this._getHeaderElement(colIndex);\r\n        if (!element) {\r\n            return null\r\n        }\r\n        var style = window.getComputedStyle(element);\r\n        var styleForExport = {\r\n            color: style.color,\r\n            padding: style.padding,\r\n            paddingLeft: style.paddingLeft,\r\n            paddingTop: style.paddingTop,\r\n            paddingRight: style.paddingRight,\r\n            paddingBottom: style.paddingBottom,\r\n            verticalAlign: style.verticalAlign,\r\n            width: this._getColumnWidth(colIndex)\r\n        };\r\n        return {\r\n            content: element.textContent,\r\n            styles: styleForExport\r\n        }\r\n    }\r\n    getTreeListCellInfo(rowIndex, colIndex) {\r\n        var _cell$textContent;\r\n        var cell = this._getDataCell(rowIndex, colIndex);\r\n        var node = this._getNodeByRowIndex(rowIndex);\r\n        var style = cell ? window.getComputedStyle(cell) : this._getColumnCellStyle(colIndex);\r\n        var styleForExport = {\r\n            color: style.color,\r\n            padding: style.padding,\r\n            paddingLeft: style.paddingLeft,\r\n            paddingTop: style.paddingTop,\r\n            paddingRight: style.paddingRight,\r\n            paddingBottom: style.paddingBottom,\r\n            width: this._getColumnWidth(colIndex)\r\n        };\r\n        if (0 === colIndex) {\r\n            styleForExport.extraLeftPadding = this._getEmptySpaceWidth(node.level)\r\n        }\r\n        return {\r\n            content: null !== (_cell$textContent = null === cell || void 0 === cell ? void 0 : cell.textContent) && void 0 !== _cell$textContent ? _cell$textContent : this._getDisplayText(rowIndex, colIndex),\r\n            styles: styleForExport\r\n        }\r\n    }\r\n    _ensureColumnWidthCache(colIndex) {\r\n        var _this$_cache, _this$_cache$_columnW;\r\n        null !== (_this$_cache$_columnW = (_this$_cache = this._cache)[\"columnWidths\"]) && void 0 !== _this$_cache$_columnW ? _this$_cache$_columnW : _this$_cache.columnWidths = {};\r\n        if (!this._cache.columnWidths[colIndex]) {\r\n            var _header$clientWidth;\r\n            var header = this._getHeaderElement(colIndex);\r\n            this._cache.columnWidths[colIndex] = null !== (_header$clientWidth = null === header || void 0 === header ? void 0 : header.clientWidth) && void 0 !== _header$clientWidth ? _header$clientWidth : 0\r\n        }\r\n    }\r\n    _getColumnWidth(colIndex) {\r\n        this._ensureColumnWidthCache(colIndex);\r\n        var widths = this._cache.columnWidths;\r\n        return widths && widths[colIndex]\r\n    }\r\n    _getEmptySpaceWidth(level) {\r\n        if (!this._cache.emptyWidth) {\r\n            var _this$_cache2, _this$_cache2$_emptyW, _element$offsetWidth;\r\n            var element = this._getTreeListElement(TREELIST_EMPTY_SPACE);\r\n            null !== (_this$_cache2$_emptyW = (_this$_cache2 = this._cache)[\"emptyWidth\"]) && void 0 !== _this$_cache2$_emptyW ? _this$_cache2$_emptyW : _this$_cache2.emptyWidth = null !== (_element$offsetWidth = element.offsetWidth) && void 0 !== _element$offsetWidth ? _element$offsetWidth : 0\r\n        }\r\n        return this._cache.emptyWidth * (level + 1)\r\n    }\r\n    _getColumnCellStyle(colIndex) {\r\n        this._ensureColumnCellStyleCache(colIndex);\r\n        return this._cache.columnStyles[colIndex]\r\n    }\r\n    _ensureColumnCellStyleCache(colIndex) {\r\n        var _this$_cache3, _this$_cache3$_column;\r\n        null !== (_this$_cache3$_column = (_this$_cache3 = this._cache)[\"columnStyles\"]) && void 0 !== _this$_cache3$_column ? _this$_cache3$_column : _this$_cache3.columnStyles = {};\r\n        if (!this._cache.columnStyles[colIndex]) {\r\n            var cell = this._getDataCell(0, colIndex);\r\n            this._cache.columnStyles[colIndex] = window.getComputedStyle(cell)\r\n        }\r\n    }\r\n    _getTreeListTable() {\r\n        return this._getTreeListElement(TREELIST_TABLE)\r\n    }\r\n    _getTreeListElement(className) {\r\n        return this._treeList._$element.find(\".\" + className).get(0)\r\n    }\r\n    _getDataCell(rowIndex, colIndex) {\r\n        var treeList = this._treeList;\r\n        var cellElement = treeList.getCellElement(rowIndex, colIndex);\r\n        return cellElement && cellElement.length ? cellElement[0] : cellElement\r\n    }\r\n    _getHeaderElement(index) {\r\n        return this._getHeaderView().getHeaderElement(index).get(0)\r\n    }\r\n    _getHeaderView() {\r\n        return this._treeList._views.columnHeadersView\r\n    }\r\n    _getNodeByRowIndex(rowIndex) {\r\n        var _treeList$getKeyByRow;\r\n        var treeList = this._treeList;\r\n        var nodeKey = null !== (_treeList$getKeyByRow = treeList.getKeyByRowIndex(rowIndex)) && void 0 !== _treeList$getKeyByRow ? _treeList$getKeyByRow : this._findTaskKeyByRowIndex(rowIndex);\r\n        return treeList.getNodeByKey(nodeKey)\r\n    }\r\n    _findTaskKeyByRowIndex(rowIndex) {\r\n        var tasks = this._getGanttTasks();\r\n        var keyGetter = this._gantt._getTaskKeyGetter();\r\n        var task = tasks[rowIndex];\r\n        return keyGetter(task)\r\n    }\r\n    _getGanttTasks() {\r\n        var _this$_gantt$_tasksOp;\r\n        return null === (_this$_gantt$_tasksOp = this._gantt._tasksOption) || void 0 === _this$_gantt$_tasksOp ? void 0 : _this$_gantt$_tasksOp._getItems()\r\n    }\r\n    _getDisplayText(rowIndex, colIndex) {\r\n        var tasks = this._getGanttTasks();\r\n        var task = tasks[rowIndex];\r\n        return task && this._getGridDisplayText(colIndex, task)\r\n    }\r\n    _getGridDisplayText(colIndex, data) {\r\n        var columns = this._treeList.getController(\"columns\").getColumns();\r\n        var column = columns[colIndex];\r\n        var field = null === column || void 0 === column ? void 0 : column.dataField;\r\n        var format = null === column || void 0 === column ? void 0 : column.format;\r\n        var value = gridCoreUtils.getDisplayValue(column, data[field], data, \"data\");\r\n        if (isDefined(format)) {\r\n            if (isDate(value)) {\r\n                return dateLocalization.format(value, format)\r\n            }\r\n            if (isNumeric(value)) {\r\n                return numberLocalization.format(value, format)\r\n            }\r\n        }\r\n        return value\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}