{"ast":null,"code":"import _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { isDefined } from \"../../../core/utils/type\";\nvar DEFAULT_CELL_HEIGHT = 50;\nvar MIN_CELL_WIDTH = 1;\nvar MIN_SCROLL_OFFSET = 10;\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\nvar scrollingOrientations = {\n  vertical: \"vertical\",\n  horizontal: \"horizontal\",\n  both: \"both\"\n};\nvar DefaultScrollingOrientation = scrollingOrientations.both;\n\nvar VirtualScrollingDispatcher = /*#__PURE__*/function () {\n  function VirtualScrollingDispatcher(workspace) {\n    _classCallCheck(this, VirtualScrollingDispatcher);\n\n    this._workspace = workspace;\n    this._rowHeight = this.getCellHeight();\n    this._cellWidth = this.getCellWidth();\n    this._renderer = new Renderer(this.workspace);\n\n    this._createVirtualScrolling();\n\n    this._attachScrollableEvents();\n  }\n\n  _createClass(VirtualScrollingDispatcher, [{\n    key: \"workspace\",\n    get: function get() {\n      return this._workspace;\n    }\n  }, {\n    key: \"isRTL\",\n    get: function get() {\n      return this.workspace._isRTL();\n    }\n  }, {\n    key: \"renderer\",\n    get: function get() {\n      return this._renderer;\n    }\n  }, {\n    key: \"isVirtualScrolling\",\n    get: function get() {\n      return this.workspace.isVirtualScrolling();\n    }\n  }, {\n    key: \"verticalVirtualScrolling\",\n    get: function get() {\n      return this._verticalVirtualScrolling;\n    },\n    set: function set(value) {\n      this._verticalVirtualScrolling = value;\n    }\n  }, {\n    key: \"horizontalVirtualScrolling\",\n    get: function get() {\n      return this._horizontalVirtualScrolling;\n    },\n    set: function set(value) {\n      this._horizontalVirtualScrolling = value;\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return domAdapter.getDocument();\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.workspace.invoke(\"getOption\", \"height\");\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.workspace.invoke(\"getOption\", \"width\");\n    }\n  }, {\n    key: \"rowHeight\",\n    get: function get() {\n      return this._rowHeight;\n    },\n    set: function set(value) {\n      this._rowHeight = value;\n    }\n  }, {\n    key: \"viewportHeight\",\n    get: function get() {\n      return this.height ? this.workspace.$element().height() : getWindow().innerHeight;\n    }\n  }, {\n    key: \"cellWidth\",\n    get: function get() {\n      return this._cellWidth;\n    },\n    set: function set(value) {\n      this._cellWidth = value;\n    }\n  }, {\n    key: \"viewportWidth\",\n    get: function get() {\n      return this.width ? this.workspace.$element().width() : getWindow().innerWidth;\n    }\n  }, {\n    key: \"topVirtualRowsCount\",\n    get: function get() {\n      var _this$verticalScrolli;\n\n      return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) > 0 ? 1 : 0;\n    }\n  }, {\n    key: \"leftVirtualCellsCount\",\n    get: function get() {\n      var _this$horizontalScrol, _this$horizontalScrol2;\n\n      var virtualItemsCount = !this.isRTL ? null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore : null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter;\n      return virtualItemsCount > 0 ? 1 : 0;\n    }\n  }, {\n    key: \"virtualRowOffset\",\n    get: function get() {\n      var _this$verticalScrolli2;\n\n      return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0;\n    }\n  }, {\n    key: \"virtualCellOffset\",\n    get: function get() {\n      var _this$horizontalScrol3;\n\n      return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0;\n    }\n  }, {\n    key: \"scrollingState\",\n    get: function get() {\n      var _this$verticalVirtual, _this$horizontalVirtu;\n\n      return {\n        vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\n        horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\n      };\n    }\n  }, {\n    key: \"verticalScrollingState\",\n    get: function get() {\n      return this.scrollingState.vertical;\n    }\n  }, {\n    key: \"horizontalScrollingState\",\n    get: function get() {\n      return this.scrollingState.horizontal;\n    }\n  }, {\n    key: \"scrollingOrientation\",\n    get: function get() {\n      return this.workspace.option(\"scrolling.orientation\") || DefaultScrollingOrientation;\n    }\n  }, {\n    key: \"verticalScrollingAllowed\",\n    get: function get() {\n      return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both;\n    }\n  }, {\n    key: \"horizontalScrollingAllowed\",\n    get: function get() {\n      return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both;\n    }\n  }, {\n    key: \"getRenderState\",\n    value: function getRenderState() {\n      var _this$verticalVirtual2, _this$horizontalVirtu2;\n\n      var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\n      var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\n      return _extends({}, verticalRenderState, horizontalRenderState);\n    }\n  }, {\n    key: \"getCellHeight\",\n    value: function getCellHeight() {\n      var cellHeight = this.workspace.getCellHeight(false);\n      var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\n      return Math.floor(result);\n    }\n  }, {\n    key: \"getCellWidth\",\n    value: function getCellWidth() {\n      var cellWidth = this.workspace.getCellWidth();\n      var minCellWidth = this.workspace.getCellMinWidth();\n\n      if (!cellWidth || cellWidth < minCellWidth) {\n        cellWidth = minCellWidth;\n      }\n\n      var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\n      return Math.floor(result);\n    }\n  }, {\n    key: \"calculateCoordinatesByDataAndPosition\",\n    value: function calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\n      var workSpace = this._workspace;\n      var rowIndex = position.rowIndex,\n          columnIndex = position.columnIndex;\n      var startDate = cellData.startDate,\n          endDate = cellData.endDate,\n          allDay = cellData.allDay;\n      var timeToScroll = date.getTime();\n      var cellStartTime = startDate.getTime();\n      var cellEndTime = endDate.getTime();\n      var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\n      var cellWidth = this.getCellWidth();\n      var rowHeight = this.getCellHeight();\n      var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\n      var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\n\n      if (workSpace.option(\"rtlEnabled\")) {\n        left = workSpace.getScrollableOuterWidth() - left;\n      }\n\n      return {\n        top: top,\n        left: left\n      };\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._onScrollHandler) {\n        eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n      }\n    }\n  }, {\n    key: \"_createVirtualScrolling\",\n    value: function _createVirtualScrolling() {\n      if (this.verticalScrollingAllowed) {\n        this.verticalVirtualScrolling = new VerticalVirtualScrolling({\n          workspace: this.workspace,\n          viewportHeight: this.viewportHeight,\n          rowHeight: this.rowHeight\n        });\n      }\n\n      if (this.horizontalScrollingAllowed) {\n        this.horizontalVirtualScrolling = new HorizontalVirtualScrolling({\n          workspace: this.workspace,\n          viewportWidth: this.viewportWidth,\n          cellWidth: this.cellWidth\n        });\n      }\n    }\n  }, {\n    key: \"_attachScrollableEvents\",\n    value: function _attachScrollableEvents() {\n      if (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) {\n        if (this.height || this.horizontalScrollingAllowed) {\n          this._attachScrollableScroll();\n        }\n\n        if (!this.height) {\n          this._attachWindowScroll();\n        }\n      }\n    }\n  }, {\n    key: \"_attachScrollableScroll\",\n    value: function _attachScrollableScroll() {\n      var _this = this;\n\n      var scrollable = this.workspace.getScrollable();\n      var currentOnScroll = scrollable.option(\"onScroll\");\n      scrollable.option(\"onScroll\", function (e) {\n        null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll.apply(scrollable, [e]);\n\n        _this._process(null === e || void 0 === e ? void 0 : e.scrollOffset);\n      });\n    }\n  }, {\n    key: \"_attachWindowScroll\",\n    value: function _attachWindowScroll() {\n      var _this2 = this;\n\n      var window = getWindow();\n      this._onScrollHandler = this.workspace._createAction(function () {\n        var scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\n          _this2._process({\n            left: scrollX,\n            top: scrollY\n          });\n        }\n      });\n      eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n    }\n  }, {\n    key: \"_process\",\n    value: function _process(scrollPosition) {\n      if (scrollPosition) {\n        var _this$verticalVirtual3, _this$horizontalVirtu3;\n\n        var left = scrollPosition.left,\n            top = scrollPosition.top;\n        var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\n        var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\n\n        if (verticalStateChanged || horizontalStateChanged) {\n          this.renderer.updateRender();\n        }\n      }\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions(isForce) {\n      var cellHeight = this.getCellHeight(false);\n      var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\n\n      if (needUpdateVertical || isForce) {\n        var _this$verticalVirtual4;\n\n        this.rowHeight = cellHeight;\n        null === (_this$verticalVirtual4 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual4 ? void 0 : _this$verticalVirtual4.reinitState(cellHeight, isForce);\n      }\n\n      var cellWidth = this.getCellWidth();\n      var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\n\n      if (needUpdateHorizontal || isForce) {\n        var _this$horizontalVirtu4;\n\n        this.cellWidth = cellWidth;\n        null === (_this$horizontalVirtu4 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu4 ? void 0 : _this$horizontalVirtu4.reinitState(cellWidth, isForce);\n      }\n\n      if (needUpdateVertical || needUpdateHorizontal) {\n        this.renderer._renderGrid();\n      }\n    }\n  }]);\n\n  return VirtualScrollingDispatcher;\n}();\n\nexport { VirtualScrollingDispatcher as default };\n\nvar VirtualScrollingBase = /*#__PURE__*/function () {\n  function VirtualScrollingBase(options) {\n    _classCallCheck(this, VirtualScrollingBase);\n\n    this._workspace = options.workspace;\n    this._state = this.defaultState;\n    this._viewportSize = options.viewportSize;\n    this._itemSize = options.itemSize;\n    this._position = -1;\n    this._itemSizeChanged = false;\n    this.updateState(0);\n  }\n\n  _createClass(VirtualScrollingBase, [{\n    key: \"viewportSize\",\n    get: function get() {\n      return this._viewportSize;\n    }\n  }, {\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    },\n    set: function set(value) {\n      this._itemSizeChanged = this._itemSize !== value;\n      this._itemSize = value;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    },\n    set: function set(value) {\n      this._state = value;\n    }\n  }, {\n    key: \"startIndex\",\n    get: function get() {\n      return this.state.startIndex;\n    }\n  }, {\n    key: \"pageSize\",\n    get: function get() {\n      return Math.ceil(this.viewportSize / this.itemSize);\n    }\n  }, {\n    key: \"outlineCount\",\n    get: function get() {\n      return Math.floor(this.pageSize / 2);\n    }\n  }, {\n    key: \"workspace\",\n    get: function get() {\n      return this._workspace;\n    }\n  }, {\n    key: \"groupCount\",\n    get: function get() {\n      return this.workspace._getGroupCount();\n    }\n  }, {\n    key: \"isVerticalGrouping\",\n    get: function get() {\n      return this.workspace._isVerticalGroupedWorkSpace();\n    }\n  }, {\n    key: \"defaultState\",\n    get: function get() {\n      return {\n        prevPosition: 0,\n        startIndex: -1,\n        itemCount: 0,\n        virtualItemCountBefore: 0,\n        virtualItemCountAfter: 0,\n        outlineCountBefore: 0,\n        outlineCountAfter: 0,\n        virtualItemSizeBefore: 0,\n        virtualItemSizeAfter: 0,\n        outlineSizeBefore: 0,\n        outlineSizeAfter: 0\n      };\n    }\n  }, {\n    key: \"maxScrollPosition\",\n    get: function get() {\n      return this.getTotalItemCount() * this.itemSize - this.viewportSize;\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    },\n    set: function set(value) {\n      this._position = value;\n    }\n  }, {\n    key: \"needUpdateState\",\n    value: function needUpdateState(position) {\n      var _this$state = this.state,\n          prevPosition = _this$state.prevPosition,\n          startIndex = _this$state.startIndex;\n      var isFirstInitialization = startIndex < 0;\n\n      if (isFirstInitialization) {\n        return true;\n      }\n\n      var isStartIndexChanged = false;\n\n      if (this._validateAndSavePosition(position)) {\n        if (0 === position || position === this.maxScrollPosition) {\n          return true;\n        }\n\n        var currentPosition = prevPosition;\n        var currentItemsCount = Math.floor(currentPosition / this.itemSize);\n        var itemsCount = Math.floor(position / this.itemSize);\n        isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount;\n      }\n\n      return isStartIndexChanged;\n    }\n  }, {\n    key: \"_validateAndSavePosition\",\n    value: function _validateAndSavePosition(position) {\n      if (!isDefined(position)) {\n        return false;\n      }\n\n      var result = this.position !== position;\n      this.position = position;\n      return result;\n    }\n  }, {\n    key: \"_correctPosition\",\n    value: function _correctPosition(position) {\n      return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(position, isForce) {\n      position = this._correctPosition(position);\n\n      if (!this.needUpdateState(position) && !isForce) {\n        return false;\n      }\n\n      var itemsInfoBefore = this._calcItemInfoBefore(position);\n\n      var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\n\n      var _this$_calcItemInfoAf = this._calcItemInfoAfter(itemsDeltaBefore),\n          outlineCountAfter = _this$_calcItemInfoAf.outlineCountAfter,\n          virtualItemCountAfter = _this$_calcItemInfoAf.virtualItemCountAfter,\n          itemCountWithAfter = _this$_calcItemInfoAf.itemCountWithAfter;\n\n      var virtualItemCountBefore = itemsInfoBefore.virtualItemCountBefore,\n          outlineCountBefore = itemsInfoBefore.outlineCountBefore;\n      var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\n      var itemCountBefore = Math.floor(position / this.itemSize);\n      this.state.prevPosition = itemCountBefore * this.itemSize;\n      this.state.startIndex = itemCountBefore - outlineCountBefore;\n      this.state.virtualItemCountBefore = virtualItemCountBefore;\n      this.state.outlineCountBefore = outlineCountBefore;\n      this.state.itemCount = itemCount;\n      this.state.outlineCountAfter = outlineCountAfter;\n      this.state.virtualItemCountAfter = virtualItemCountAfter;\n\n      this._updateStateCore();\n\n      return true;\n    }\n  }, {\n    key: \"reinitState\",\n    value: function reinitState(itemSize, isForceUpdate) {\n      var position = this.position;\n      this.itemSize = itemSize;\n      this.updateState(0, isForceUpdate);\n\n      if (position > 0) {\n        this.updateState(position, isForceUpdate);\n      }\n    }\n  }, {\n    key: \"_calcItemInfoBefore\",\n    value: function _calcItemInfoBefore(position) {\n      var virtualItemCountBefore = Math.floor(position / this.itemSize);\n      var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\n      virtualItemCountBefore -= outlineCountBefore;\n      return {\n        virtualItemCountBefore: virtualItemCountBefore,\n        outlineCountBefore: outlineCountBefore\n      };\n    }\n  }, {\n    key: \"_calcItemDeltaBefore\",\n    value: function _calcItemDeltaBefore(itemInfoBefore) {\n      var virtualItemCountBefore = itemInfoBefore.virtualItemCountBefore,\n          outlineCountBefore = itemInfoBefore.outlineCountBefore;\n      var totalItemCount = this.getTotalItemCount();\n      return totalItemCount - virtualItemCountBefore - outlineCountBefore;\n    }\n  }, {\n    key: \"getTotalItemCount\",\n    value: function getTotalItemCount() {\n      throw \"getTotalItemCount method should be implemented\";\n    }\n  }, {\n    key: \"getRenderState\",\n    value: function getRenderState() {\n      throw \"getRenderState method should be implemented\";\n    }\n  }, {\n    key: \"_calcItemInfoAfter\",\n    value: function _calcItemInfoAfter(itemsDeltaBefore) {\n      var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\n      var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\n      var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\n\n      if (virtualItemCountAfter > 0) {\n        virtualItemCountAfter -= outlineCountAfter;\n      }\n\n      return {\n        virtualItemCountAfter: virtualItemCountAfter,\n        outlineCountAfter: outlineCountAfter,\n        itemCountWithAfter: itemCountWithAfter\n      };\n    }\n  }, {\n    key: \"_updateStateCore\",\n    value: function _updateStateCore() {\n      var state = this.state;\n      var virtualItemCountBefore = state.virtualItemCountBefore;\n      var virtualItemCountAfter = state.virtualItemCountAfter;\n      var outlineCountBefore = state.outlineCountBefore;\n      var outlineCountAfter = state.outlineCountAfter;\n      var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\n      var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\n      var prevOutlineSizeBefore = state.outlineSizeBefore;\n      var prevOutlineSizeAfter = state.outlineSizeAfter;\n      var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\n      var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\n      var outlineSizeBefore = this.itemSize * outlineCountBefore;\n      var outlineSizeAfter = this.itemSize * outlineCountAfter;\n      var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\n      var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\n      var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\n      var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\n      var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\n      var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\n      var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\n\n      if (needAddItems) {\n        this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n      }\n    }\n  }, {\n    key: \"_updateStateVirtualItems\",\n    value: function _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n      var state = this.state;\n      state.virtualItemSizeBefore = virtualItemSizeBefore;\n      state.virtualItemSizeAfter = virtualItemSizeAfter;\n    }\n  }]);\n\n  return VirtualScrollingBase;\n}();\n\nvar VerticalVirtualScrolling = /*#__PURE__*/function (_VirtualScrollingBase) {\n  _inherits(VerticalVirtualScrolling, _VirtualScrollingBase);\n\n  var _super = _createSuper(VerticalVirtualScrolling);\n\n  function VerticalVirtualScrolling(options) {\n    _classCallCheck(this, VerticalVirtualScrolling);\n\n    return _super.call(this, {\n      workspace: options.workspace,\n      viewportSize: options.viewportHeight,\n      itemSize: options.rowHeight\n    });\n  }\n\n  _createClass(VerticalVirtualScrolling, [{\n    key: \"prevTopPosition\",\n    get: function get() {\n      return this.state.prevPosition;\n    }\n  }, {\n    key: \"rowCount\",\n    get: function get() {\n      return this.state.itemCount;\n    }\n  }, {\n    key: \"topVirtualRowCount\",\n    get: function get() {\n      return this.state.virtualItemCountBefore;\n    }\n  }, {\n    key: \"bottomVirtualRowCount\",\n    get: function get() {\n      return this.state.virtualItemCountAfter;\n    }\n  }, {\n    key: \"getTotalItemCount\",\n    value: function getTotalItemCount() {\n      return this.workspace._getTotalRowCount(this.groupCount, this.isVerticalGrouping);\n    }\n  }, {\n    key: \"getRenderState\",\n    value: function getRenderState() {\n      return {\n        topVirtualRowHeight: this.state.virtualItemSizeBefore,\n        bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\n        startRowIndex: this.state.startIndex,\n        rowCount: this.state.itemCount,\n        startIndex: this.state.startIndex\n      };\n    }\n  }]);\n\n  return VerticalVirtualScrolling;\n}(VirtualScrollingBase);\n\nvar HorizontalVirtualScrolling = /*#__PURE__*/function (_VirtualScrollingBase2) {\n  _inherits(HorizontalVirtualScrolling, _VirtualScrollingBase2);\n\n  var _super2 = _createSuper(HorizontalVirtualScrolling);\n\n  function HorizontalVirtualScrolling(options) {\n    _classCallCheck(this, HorizontalVirtualScrolling);\n\n    return _super2.call(this, {\n      workspace: options.workspace,\n      viewportSize: options.viewportWidth,\n      itemSize: options.cellWidth\n    });\n  }\n\n  _createClass(HorizontalVirtualScrolling, [{\n    key: \"isRTL\",\n    get: function get() {\n      return this.workspace._isRTL();\n    }\n  }, {\n    key: \"getTotalItemCount\",\n    value: function getTotalItemCount() {\n      return this.workspace._getTotalCellCount(this.groupCount, this.isVerticalGrouping);\n    }\n  }, {\n    key: \"getRenderState\",\n    value: function getRenderState() {\n      return {\n        leftVirtualCellWidth: this.state.virtualItemSizeBefore,\n        rightVirtualCellWidth: this.state.virtualItemSizeAfter,\n        startCellIndex: this.state.startIndex,\n        cellCount: this.state.itemCount,\n        cellWidth: this.itemSize\n      };\n    }\n  }, {\n    key: \"_updateStateVirtualItems\",\n    value: function _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n      if (!this.isRTL) {\n        _get(_getPrototypeOf(HorizontalVirtualScrolling.prototype), \"_updateStateVirtualItems\", this).call(this, virtualItemSizeBefore, virtualItemSizeAfter);\n      } else {\n        var state = this.state;\n        state.virtualItemSizeAfter = virtualItemSizeBefore;\n        state.virtualItemSizeBefore = virtualItemSizeAfter;\n        state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount;\n      }\n    }\n  }]);\n\n  return HorizontalVirtualScrolling;\n}(VirtualScrollingBase);\n\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer(workspace) {\n    _classCallCheck(this, Renderer);\n\n    this._workspace = workspace;\n    this._renderAppointmentTimeout = null;\n  }\n\n  _createClass(Renderer, [{\n    key: \"getRenderTimeout\",\n    value: function getRenderTimeout() {\n      return VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT;\n    }\n  }, {\n    key: \"workspace\",\n    get: function get() {\n      return this._workspace;\n    }\n  }, {\n    key: \"updateRender\",\n    value: function updateRender() {\n      this._renderGrid();\n\n      this._renderAppointments();\n    }\n  }, {\n    key: \"_renderGrid\",\n    value: function _renderGrid() {\n      this.workspace.renderRWorkspace(false);\n    }\n  }, {\n    key: \"_renderAppointments\",\n    value: function _renderAppointments() {\n      var _this3 = this;\n\n      var renderTimeout = this.getRenderTimeout();\n\n      if (renderTimeout >= 0) {\n        clearTimeout(this._renderAppointmentTimeout);\n        this._renderAppointmentTimeout = setTimeout(function () {\n          return _this3.workspace.updateAppointments();\n        }, renderTimeout);\n      } else {\n        this.workspace.updateAppointments();\n      }\n    }\n  }]);\n\n  return Renderer;\n}();","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js"],"names":["_extends","domAdapter","eventsEngine","getWindow","addNamespace","isDefined","DEFAULT_CELL_HEIGHT","MIN_CELL_WIDTH","MIN_SCROLL_OFFSET","VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT","DOCUMENT_SCROLL_EVENT_NAMESPACE","scrollingOrientations","vertical","horizontal","both","DefaultScrollingOrientation","VirtualScrollingDispatcher","workspace","_workspace","_rowHeight","getCellHeight","_cellWidth","getCellWidth","_renderer","Renderer","_createVirtualScrolling","_attachScrollableEvents","_isRTL","isVirtualScrolling","_verticalVirtualScrolling","value","_horizontalVirtualScrolling","getDocument","invoke","height","$element","innerHeight","width","innerWidth","_this$verticalScrolli","verticalScrollingState","virtualItemCountBefore","_this$horizontalScrol","_this$horizontalScrol2","virtualItemsCount","isRTL","horizontalScrollingState","virtualItemCountAfter","_this$verticalScrolli2","virtualItemSizeBefore","_this$horizontalScrol3","_this$verticalVirtual","_this$horizontalVirtu","verticalVirtualScrolling","state","horizontalVirtualScrolling","scrollingState","option","scrollingOrientation","_this$verticalVirtual2","_this$horizontalVirtu2","verticalRenderState","getRenderState","horizontalRenderState","cellHeight","result","Math","floor","cellWidth","minCellWidth","getCellMinWidth","cellData","position","date","isCalculateTime","isVerticalDirectionView","workSpace","rowIndex","columnIndex","startDate","endDate","allDay","timeToScroll","getTime","cellStartTime","cellEndTime","scrollInCell","rowHeight","top","left","getScrollableOuterWidth","_onScrollHandler","off","document","verticalScrollingAllowed","VerticalVirtualScrolling","viewportHeight","horizontalScrollingAllowed","HorizontalVirtualScrolling","viewportWidth","_attachScrollableScroll","_attachWindowScroll","scrollable","getScrollable","currentOnScroll","e","apply","_process","scrollOffset","window","_createAction","scrollX","scrollY","on","scrollPosition","_this$verticalVirtual3","_this$horizontalVirtu3","verticalStateChanged","updateState","horizontalStateChanged","renderer","updateRender","isForce","needUpdateVertical","_this$verticalVirtual4","reinitState","needUpdateHorizontal","_this$horizontalVirtu4","_renderGrid","VirtualScrollingBase","options","_state","defaultState","_viewportSize","viewportSize","_itemSize","itemSize","_position","_itemSizeChanged","startIndex","ceil","pageSize","_getGroupCount","_isVerticalGroupedWorkSpace","prevPosition","itemCount","outlineCountBefore","outlineCountAfter","virtualItemSizeAfter","outlineSizeBefore","outlineSizeAfter","getTotalItemCount","isFirstInitialization","isStartIndexChanged","_validateAndSavePosition","maxScrollPosition","currentPosition","currentItemsCount","itemsCount","abs","outlineCount","min","_correctPosition","needUpdateState","itemsInfoBefore","_calcItemInfoBefore","itemsDeltaBefore","_calcItemDeltaBefore","_calcItemInfoAfter","itemCountWithAfter","itemCountBefore","_updateStateCore","isForceUpdate","itemInfoBefore","totalItemCount","prevVirtualItemSizeBefore","prevVirtualItemSizeAfter","prevOutlineSizeBefore","prevOutlineSizeAfter","prevVirtualSizeBefore","virtualSizeBefore","prevVirtualSizeAfter","virtualSizeAfter","isAppend","isPrepend","needAddItems","_updateStateVirtualItems","_getTotalRowCount","groupCount","isVerticalGrouping","topVirtualRowHeight","bottomVirtualRowHeight","startRowIndex","rowCount","_getTotalCellCount","leftVirtualCellWidth","rightVirtualCellWidth","startCellIndex","cellCount","_renderAppointmentTimeout","_renderAppointments","renderRWorkspace","renderTimeout","getRenderTimeout","clearTimeout","setTimeout","updateAppointments"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nvar DEFAULT_CELL_HEIGHT = 50;\r\nvar MIN_CELL_WIDTH = 1;\r\nvar MIN_SCROLL_OFFSET = 10;\r\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\r\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\r\nvar scrollingOrientations = {\r\n    vertical: \"vertical\",\r\n    horizontal: \"horizontal\",\r\n    both: \"both\"\r\n};\r\nvar DefaultScrollingOrientation = scrollingOrientations.both;\r\nexport default class VirtualScrollingDispatcher {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._rowHeight = this.getCellHeight();\r\n        this._cellWidth = this.getCellWidth();\r\n        this._renderer = new Renderer(this.workspace);\r\n        this._createVirtualScrolling();\r\n        this._attachScrollableEvents()\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    get isRTL() {\r\n        return this.workspace._isRTL()\r\n    }\r\n    get renderer() {\r\n        return this._renderer\r\n    }\r\n    get isVirtualScrolling() {\r\n        return this.workspace.isVirtualScrolling()\r\n    }\r\n    get verticalVirtualScrolling() {\r\n        return this._verticalVirtualScrolling\r\n    }\r\n    set verticalVirtualScrolling(value) {\r\n        this._verticalVirtualScrolling = value\r\n    }\r\n    get horizontalVirtualScrolling() {\r\n        return this._horizontalVirtualScrolling\r\n    }\r\n    set horizontalVirtualScrolling(value) {\r\n        this._horizontalVirtualScrolling = value\r\n    }\r\n    get document() {\r\n        return domAdapter.getDocument()\r\n    }\r\n    get height() {\r\n        return this.workspace.invoke(\"getOption\", \"height\")\r\n    }\r\n    get width() {\r\n        return this.workspace.invoke(\"getOption\", \"width\")\r\n    }\r\n    get rowHeight() {\r\n        return this._rowHeight\r\n    }\r\n    set rowHeight(value) {\r\n        this._rowHeight = value\r\n    }\r\n    get viewportHeight() {\r\n        return this.height ? this.workspace.$element().height() : getWindow().innerHeight\r\n    }\r\n    get cellWidth() {\r\n        return this._cellWidth\r\n    }\r\n    set cellWidth(value) {\r\n        this._cellWidth = value\r\n    }\r\n    get viewportWidth() {\r\n        return this.width ? this.workspace.$element().width() : getWindow().innerWidth\r\n    }\r\n    get topVirtualRowsCount() {\r\n        var _this$verticalScrolli;\r\n        return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) > 0 ? 1 : 0\r\n    }\r\n    get leftVirtualCellsCount() {\r\n        var _this$horizontalScrol, _this$horizontalScrol2;\r\n        var virtualItemsCount = !this.isRTL ? null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore : null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter;\r\n        return virtualItemsCount > 0 ? 1 : 0\r\n    }\r\n    get virtualRowOffset() {\r\n        var _this$verticalScrolli2;\r\n        return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0\r\n    }\r\n    get virtualCellOffset() {\r\n        var _this$horizontalScrol3;\r\n        return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0\r\n    }\r\n    get scrollingState() {\r\n        var _this$verticalVirtual, _this$horizontalVirtu;\r\n        return {\r\n            vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\r\n            horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\r\n        }\r\n    }\r\n    get verticalScrollingState() {\r\n        return this.scrollingState.vertical\r\n    }\r\n    get horizontalScrollingState() {\r\n        return this.scrollingState.horizontal\r\n    }\r\n    get scrollingOrientation() {\r\n        return this.workspace.option(\"scrolling.orientation\") || DefaultScrollingOrientation\r\n    }\r\n    get verticalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    get horizontalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    getRenderState() {\r\n        var _this$verticalVirtual2, _this$horizontalVirtu2;\r\n        var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\r\n        var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\r\n        return _extends({}, verticalRenderState, horizontalRenderState)\r\n    }\r\n    getCellHeight() {\r\n        var cellHeight = this.workspace.getCellHeight(false);\r\n        var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\r\n        return Math.floor(result)\r\n    }\r\n    getCellWidth() {\r\n        var cellWidth = this.workspace.getCellWidth();\r\n        var minCellWidth = this.workspace.getCellMinWidth();\r\n        if (!cellWidth || cellWidth < minCellWidth) {\r\n            cellWidth = minCellWidth\r\n        }\r\n        var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\r\n        return Math.floor(result)\r\n    }\r\n    calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\r\n        var {\r\n            _workspace: workSpace\r\n        } = this;\r\n        var {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        } = position;\r\n        var {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        } = cellData;\r\n        var timeToScroll = date.getTime();\r\n        var cellStartTime = startDate.getTime();\r\n        var cellEndTime = endDate.getTime();\r\n        var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\r\n        var cellWidth = this.getCellWidth();\r\n        var rowHeight = this.getCellHeight();\r\n        var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\r\n        var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\r\n        if (workSpace.option(\"rtlEnabled\")) {\r\n            left = workSpace.getScrollableOuterWidth() - left\r\n        }\r\n        return {\r\n            top: top,\r\n            left: left\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._onScrollHandler) {\r\n            eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n        }\r\n    }\r\n    _createVirtualScrolling() {\r\n        if (this.verticalScrollingAllowed) {\r\n            this.verticalVirtualScrolling = new VerticalVirtualScrolling({\r\n                workspace: this.workspace,\r\n                viewportHeight: this.viewportHeight,\r\n                rowHeight: this.rowHeight\r\n            })\r\n        }\r\n        if (this.horizontalScrollingAllowed) {\r\n            this.horizontalVirtualScrolling = new HorizontalVirtualScrolling({\r\n                workspace: this.workspace,\r\n                viewportWidth: this.viewportWidth,\r\n                cellWidth: this.cellWidth\r\n            })\r\n        }\r\n    }\r\n    _attachScrollableEvents() {\r\n        if (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) {\r\n            if (this.height || this.horizontalScrollingAllowed) {\r\n                this._attachScrollableScroll()\r\n            }\r\n            if (!this.height) {\r\n                this._attachWindowScroll()\r\n            }\r\n        }\r\n    }\r\n    _attachScrollableScroll() {\r\n        var scrollable = this.workspace.getScrollable();\r\n        var currentOnScroll = scrollable.option(\"onScroll\");\r\n        scrollable.option(\"onScroll\", e => {\r\n            null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll.apply(scrollable, [e]);\r\n            this._process(null === e || void 0 === e ? void 0 : e.scrollOffset)\r\n        })\r\n    }\r\n    _attachWindowScroll() {\r\n        var window = getWindow();\r\n        this._onScrollHandler = this.workspace._createAction(() => {\r\n            var {\r\n                scrollX: scrollX,\r\n                scrollY: scrollY\r\n            } = window;\r\n            if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\r\n                this._process({\r\n                    left: scrollX,\r\n                    top: scrollY\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n    }\r\n    _process(scrollPosition) {\r\n        if (scrollPosition) {\r\n            var _this$verticalVirtual3, _this$horizontalVirtu3;\r\n            var {\r\n                left: left,\r\n                top: top\r\n            } = scrollPosition;\r\n            var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\r\n            var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\r\n            if (verticalStateChanged || horizontalStateChanged) {\r\n                this.renderer.updateRender()\r\n            }\r\n        }\r\n    }\r\n    updateDimensions(isForce) {\r\n        var cellHeight = this.getCellHeight(false);\r\n        var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\r\n        if (needUpdateVertical || isForce) {\r\n            var _this$verticalVirtual4;\r\n            this.rowHeight = cellHeight;\r\n            null === (_this$verticalVirtual4 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual4 ? void 0 : _this$verticalVirtual4.reinitState(cellHeight, isForce)\r\n        }\r\n        var cellWidth = this.getCellWidth();\r\n        var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\r\n        if (needUpdateHorizontal || isForce) {\r\n            var _this$horizontalVirtu4;\r\n            this.cellWidth = cellWidth;\r\n            null === (_this$horizontalVirtu4 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu4 ? void 0 : _this$horizontalVirtu4.reinitState(cellWidth, isForce)\r\n        }\r\n        if (needUpdateVertical || needUpdateHorizontal) {\r\n            this.renderer._renderGrid()\r\n        }\r\n    }\r\n}\r\nclass VirtualScrollingBase {\r\n    constructor(options) {\r\n        this._workspace = options.workspace;\r\n        this._state = this.defaultState;\r\n        this._viewportSize = options.viewportSize;\r\n        this._itemSize = options.itemSize;\r\n        this._position = -1;\r\n        this._itemSizeChanged = false;\r\n        this.updateState(0)\r\n    }\r\n    get viewportSize() {\r\n        return this._viewportSize\r\n    }\r\n    get itemSize() {\r\n        return this._itemSize\r\n    }\r\n    set itemSize(value) {\r\n        this._itemSizeChanged = this._itemSize !== value;\r\n        this._itemSize = value\r\n    }\r\n    get state() {\r\n        return this._state\r\n    }\r\n    set state(value) {\r\n        this._state = value\r\n    }\r\n    get startIndex() {\r\n        return this.state.startIndex\r\n    }\r\n    get pageSize() {\r\n        return Math.ceil(this.viewportSize / this.itemSize)\r\n    }\r\n    get outlineCount() {\r\n        return Math.floor(this.pageSize / 2)\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    get groupCount() {\r\n        return this.workspace._getGroupCount()\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.workspace._isVerticalGroupedWorkSpace()\r\n    }\r\n    get defaultState() {\r\n        return {\r\n            prevPosition: 0,\r\n            startIndex: -1,\r\n            itemCount: 0,\r\n            virtualItemCountBefore: 0,\r\n            virtualItemCountAfter: 0,\r\n            outlineCountBefore: 0,\r\n            outlineCountAfter: 0,\r\n            virtualItemSizeBefore: 0,\r\n            virtualItemSizeAfter: 0,\r\n            outlineSizeBefore: 0,\r\n            outlineSizeAfter: 0\r\n        }\r\n    }\r\n    get maxScrollPosition() {\r\n        return this.getTotalItemCount() * this.itemSize - this.viewportSize\r\n    }\r\n    get position() {\r\n        return this._position\r\n    }\r\n    set position(value) {\r\n        this._position = value\r\n    }\r\n    needUpdateState(position) {\r\n        var {\r\n            prevPosition: prevPosition,\r\n            startIndex: startIndex\r\n        } = this.state;\r\n        var isFirstInitialization = startIndex < 0;\r\n        if (isFirstInitialization) {\r\n            return true\r\n        }\r\n        var isStartIndexChanged = false;\r\n        if (this._validateAndSavePosition(position)) {\r\n            if (0 === position || position === this.maxScrollPosition) {\r\n                return true\r\n            }\r\n            var currentPosition = prevPosition;\r\n            var currentItemsCount = Math.floor(currentPosition / this.itemSize);\r\n            var itemsCount = Math.floor(position / this.itemSize);\r\n            isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount\r\n        }\r\n        return isStartIndexChanged\r\n    }\r\n    _validateAndSavePosition(position) {\r\n        if (!isDefined(position)) {\r\n            return false\r\n        }\r\n        var result = this.position !== position;\r\n        this.position = position;\r\n        return result\r\n    }\r\n    _correctPosition(position) {\r\n        return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1\r\n    }\r\n    updateState(position, isForce) {\r\n        position = this._correctPosition(position);\r\n        if (!this.needUpdateState(position) && !isForce) {\r\n            return false\r\n        }\r\n        var itemsInfoBefore = this._calcItemInfoBefore(position);\r\n        var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\r\n        var {\r\n            outlineCountAfter: outlineCountAfter,\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        } = this._calcItemInfoAfter(itemsDeltaBefore);\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemsInfoBefore;\r\n        var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\r\n        var itemCountBefore = Math.floor(position / this.itemSize);\r\n        this.state.prevPosition = itemCountBefore * this.itemSize;\r\n        this.state.startIndex = itemCountBefore - outlineCountBefore;\r\n        this.state.virtualItemCountBefore = virtualItemCountBefore;\r\n        this.state.outlineCountBefore = outlineCountBefore;\r\n        this.state.itemCount = itemCount;\r\n        this.state.outlineCountAfter = outlineCountAfter;\r\n        this.state.virtualItemCountAfter = virtualItemCountAfter;\r\n        this._updateStateCore();\r\n        return true\r\n    }\r\n    reinitState(itemSize, isForceUpdate) {\r\n        var {\r\n            position: position\r\n        } = this;\r\n        this.itemSize = itemSize;\r\n        this.updateState(0, isForceUpdate);\r\n        if (position > 0) {\r\n            this.updateState(position, isForceUpdate)\r\n        }\r\n    }\r\n    _calcItemInfoBefore(position) {\r\n        var virtualItemCountBefore = Math.floor(position / this.itemSize);\r\n        var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\r\n        virtualItemCountBefore -= outlineCountBefore;\r\n        return {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        }\r\n    }\r\n    _calcItemDeltaBefore(itemInfoBefore) {\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemInfoBefore;\r\n        var totalItemCount = this.getTotalItemCount();\r\n        return totalItemCount - virtualItemCountBefore - outlineCountBefore\r\n    }\r\n    getTotalItemCount() {\r\n        throw \"getTotalItemCount method should be implemented\"\r\n    }\r\n    getRenderState() {\r\n        throw \"getRenderState method should be implemented\"\r\n    }\r\n    _calcItemInfoAfter(itemsDeltaBefore) {\r\n        var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\r\n        var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\r\n        var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\r\n        if (virtualItemCountAfter > 0) {\r\n            virtualItemCountAfter -= outlineCountAfter\r\n        }\r\n        return {\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            outlineCountAfter: outlineCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        }\r\n    }\r\n    _updateStateCore() {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        var virtualItemCountBefore = state.virtualItemCountBefore;\r\n        var virtualItemCountAfter = state.virtualItemCountAfter;\r\n        var outlineCountBefore = state.outlineCountBefore;\r\n        var outlineCountAfter = state.outlineCountAfter;\r\n        var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\r\n        var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\r\n        var prevOutlineSizeBefore = state.outlineSizeBefore;\r\n        var prevOutlineSizeAfter = state.outlineSizeAfter;\r\n        var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\r\n        var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\r\n        var outlineSizeBefore = this.itemSize * outlineCountBefore;\r\n        var outlineSizeAfter = this.itemSize * outlineCountAfter;\r\n        var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\r\n        var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\r\n        var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\r\n        var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\r\n        var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\r\n        var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\r\n        var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\r\n        if (needAddItems) {\r\n            this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        state.virtualItemSizeBefore = virtualItemSizeBefore;\r\n        state.virtualItemSizeAfter = virtualItemSizeAfter\r\n    }\r\n}\r\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super({\r\n            workspace: options.workspace,\r\n            viewportSize: options.viewportHeight,\r\n            itemSize: options.rowHeight\r\n        })\r\n    }\r\n    get prevTopPosition() {\r\n        return this.state.prevPosition\r\n    }\r\n    get rowCount() {\r\n        return this.state.itemCount\r\n    }\r\n    get topVirtualRowCount() {\r\n        return this.state.virtualItemCountBefore\r\n    }\r\n    get bottomVirtualRowCount() {\r\n        return this.state.virtualItemCountAfter\r\n    }\r\n    getTotalItemCount() {\r\n        return this.workspace._getTotalRowCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            topVirtualRowHeight: this.state.virtualItemSizeBefore,\r\n            bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\r\n            startRowIndex: this.state.startIndex,\r\n            rowCount: this.state.itemCount,\r\n            startIndex: this.state.startIndex\r\n        }\r\n    }\r\n}\r\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super({\r\n            workspace: options.workspace,\r\n            viewportSize: options.viewportWidth,\r\n            itemSize: options.cellWidth\r\n        })\r\n    }\r\n    get isRTL() {\r\n        return this.workspace._isRTL()\r\n    }\r\n    getTotalItemCount() {\r\n        return this.workspace._getTotalCellCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            leftVirtualCellWidth: this.state.virtualItemSizeBefore,\r\n            rightVirtualCellWidth: this.state.virtualItemSizeAfter,\r\n            startCellIndex: this.state.startIndex,\r\n            cellCount: this.state.itemCount,\r\n            cellWidth: this.itemSize\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        if (!this.isRTL) {\r\n            super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        } else {\r\n            var {\r\n                state: state\r\n            } = this;\r\n            state.virtualItemSizeAfter = virtualItemSizeBefore;\r\n            state.virtualItemSizeBefore = virtualItemSizeAfter;\r\n            state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount\r\n        }\r\n    }\r\n}\r\nclass Renderer {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._renderAppointmentTimeout = null\r\n    }\r\n    getRenderTimeout() {\r\n        return VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    updateRender() {\r\n        this._renderGrid();\r\n        this._renderAppointments()\r\n    }\r\n    _renderGrid() {\r\n        this.workspace.renderRWorkspace(false)\r\n    }\r\n    _renderAppointments() {\r\n        var renderTimeout = this.getRenderTimeout();\r\n        if (renderTimeout >= 0) {\r\n            clearTimeout(this._renderAppointmentTimeout);\r\n            this._renderAppointmentTimeout = setTimeout(() => this.workspace.updateAppointments(), renderTimeout)\r\n        } else {\r\n            this.workspace.updateAppointments()\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}