{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport Toolbar from \"../../toolbar\";\nimport \"../../select_box\";\nimport \"../../color_box/color_view\";\nimport \"../../number_box\";\nimport errors from \"../../widget/ui.errors\";\nimport WidgetCollector from \"./widget_collector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject, isDefined, isEmptyObject, isBoolean } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport localizationMessage from \"../../../localization/message\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nvar ToolbarModule = BaseModule;\n\nif (Quill) {\n  var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\n  var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\n  var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\n  var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\n  var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  var BOX_ITEM_CONTENT_CLASS = \"dx-box-item-content\";\n  var ICON_CLASS = \"dx-icon\";\n  var SELECTION_CHANGE_EVENT = \"selection-change\";\n  var DIALOG_COLOR_CAPTION = \"dxHtmlEditor-dialogColorCaption\";\n  var DIALOG_BACKGROUND_CAPTION = \"dxHtmlEditor-dialogBackgroundCaption\";\n  var DIALOG_LINK_CAPTION = \"dxHtmlEditor-dialogLinkCaption\";\n  var DIALOG_LINK_FIELD_URL = \"dxHtmlEditor-dialogLinkUrlField\";\n  var DIALOG_LINK_FIELD_TEXT = \"dxHtmlEditor-dialogLinkTextField\";\n  var DIALOG_LINK_FIELD_TARGET = \"dxHtmlEditor-dialogLinkTargetField\";\n  var DIALOG_LINK_FIELD_TARGET_CLASS = \"dx-formdialog-field-target\";\n  var DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\n  var DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\n  var DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\n  var DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\n  var DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\n  var DIALOG_TABLE_FIELD_COLUMNS = \"dxHtmlEditor-dialogInsertTableRowsField\";\n  var DIALOG_TABLE_FIELD_ROWS = \"dxHtmlEditor-dialogInsertTableColumnsField\";\n  var DIALOG_TABLE_CAPTION = \"dxHtmlEditor-dialogInsertTableCaption\";\n  var TABLE_OPERATIONS = [\"insertTable\", \"insertRowAbove\", \"insertRowBelow\", \"insertColumnLeft\", \"insertColumnRight\", \"deleteColumn\", \"deleteRow\", \"deleteTable\"];\n  var USER_ACTION = \"user\";\n  var SILENT_ACTION = \"silent\";\n\n  var localize = function localize(name) {\n    return localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n  };\n\n  var localizeValue = function localizeValue(value, name) {\n    if (\"header\" === name) {\n      var isHeaderValue = isDefined(value) && false !== value;\n      return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\");\n    }\n\n    return localize(value) || value;\n  };\n\n  ToolbarModule = /*#__PURE__*/function (_BaseModule) {\n    _inherits(ToolbarModule, _BaseModule);\n\n    var _super = _createSuper(ToolbarModule);\n\n    function ToolbarModule(quill, options) {\n      var _this;\n\n      _classCallCheck(this, ToolbarModule);\n\n      _this = _super.call(this, quill, options);\n      _this._toolbarWidgets = new WidgetCollector();\n      _this._formatHandlers = _this._getFormatHandlers();\n\n      if (isDefined(options.items)) {\n        _this._addCallbacks();\n\n        _this._renderToolbar();\n\n        _this.quill.on(\"editor-change\", function (eventName) {\n          var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\n\n          _this._updateToolbar(isSelectionChanged);\n        });\n      }\n\n      return _this;\n    }\n\n    _createClass(ToolbarModule, [{\n      key: \"_applyFormat\",\n      value: function _applyFormat(formatArgs, event) {\n        var _this$quill;\n\n        this.saveValueChangeEvent(event);\n\n        (_this$quill = this.quill).format.apply(_this$quill, _toConsumableArray(formatArgs));\n      }\n    }, {\n      key: \"_addCallbacks\",\n      value: function _addCallbacks() {\n        this.addCleanCallback(this.clean.bind(this));\n        this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this));\n      }\n    }, {\n      key: \"_updateToolbar\",\n      value: function _updateToolbar(isSelectionChanged) {\n        this.updateFormatWidgets(isSelectionChanged);\n        this.updateHistoryWidgets();\n        this.updateTableWidgets();\n      }\n    }, {\n      key: \"_getDefaultClickHandler\",\n      value: function _getDefaultClickHandler(name) {\n        var _this2 = this;\n\n        return function (_ref) {\n          var event = _ref.event;\n\n          var formats = _this2.quill.getFormat();\n\n          var value = formats[name];\n          var newValue = !(isBoolean(value) ? value : isDefined(value));\n\n          _this2._applyFormat([name, newValue, USER_ACTION], event);\n\n          _this2._updateFormatWidget(name, newValue, formats);\n        };\n      }\n    }, {\n      key: \"_updateFormatWidget\",\n      value: function _updateFormatWidget(name, isApplied, formats) {\n        var widget = this._toolbarWidgets.getByName(name);\n\n        if (!widget) {\n          return;\n        }\n\n        if (isApplied) {\n          this._markActiveFormatWidget(name, widget, formats);\n        } else {\n          this._resetFormatWidget(name, widget);\n\n          if (Object.prototype.hasOwnProperty.call(name)) {\n            delete formats[name];\n          }\n        }\n\n        this._toggleClearFormatting(isApplied || !isEmptyObject(formats));\n      }\n    }, {\n      key: \"_getFormatHandlers\",\n      value: function _getFormatHandlers() {\n        var _this3 = this;\n\n        return {\n          clear: function clear(_ref2) {\n            var event = _ref2.event;\n\n            var range = _this3.quill.getSelection();\n\n            if (range) {\n              _this3.saveValueChangeEvent(event);\n\n              _this3.quill.removeFormat(range);\n\n              _this3.updateFormatWidgets();\n            }\n          },\n          link: this._prepareLinkHandler(),\n          image: this._prepareImageHandler(),\n          color: this._prepareColorClickHandler(\"color\"),\n          background: this._prepareColorClickHandler(\"background\"),\n          orderedList: this._prepareShortcutHandler(\"list\", \"ordered\"),\n          bulletList: this._prepareShortcutHandler(\"list\", \"bullet\"),\n          alignLeft: this._prepareShortcutHandler(\"align\", \"left\"),\n          alignCenter: this._prepareShortcutHandler(\"align\", \"center\"),\n          alignRight: this._prepareShortcutHandler(\"align\", \"right\"),\n          alignJustify: this._prepareShortcutHandler(\"align\", \"justify\"),\n          codeBlock: this._getDefaultClickHandler(\"code-block\"),\n          undo: function undo(_ref3) {\n            var event = _ref3.event;\n\n            _this3.saveValueChangeEvent(event);\n\n            _this3.quill.history.undo();\n          },\n          redo: function redo(_ref4) {\n            var event = _ref4.event;\n\n            _this3.saveValueChangeEvent(event);\n\n            _this3.quill.history.redo();\n          },\n          increaseIndent: function increaseIndent(_ref5) {\n            var event = _ref5.event;\n\n            _this3._applyFormat([\"indent\", \"+1\", USER_ACTION], event);\n          },\n          decreaseIndent: function decreaseIndent(_ref6) {\n            var event = _ref6.event;\n\n            _this3._applyFormat([\"indent\", \"-1\", USER_ACTION], event);\n          },\n          superscript: this._prepareShortcutHandler(\"script\", \"super\"),\n          subscript: this._prepareShortcutHandler(\"script\", \"sub\"),\n          insertTable: this._prepareInsertTableHandler(),\n          insertRowAbove: this._getTableOperationHandler(\"insertRowAbove\"),\n          insertRowBelow: this._getTableOperationHandler(\"insertRowBelow\"),\n          insertColumnLeft: this._getTableOperationHandler(\"insertColumnLeft\"),\n          insertColumnRight: this._getTableOperationHandler(\"insertColumnRight\"),\n          deleteColumn: this._getTableOperationHandler(\"deleteColumn\"),\n          deleteRow: this._getTableOperationHandler(\"deleteRow\"),\n          deleteTable: this._getTableOperationHandler(\"deleteTable\")\n        };\n      }\n    }, {\n      key: \"_prepareShortcutHandler\",\n      value: function _prepareShortcutHandler(name, shortcutValue) {\n        var _this4 = this;\n\n        return function (_ref7) {\n          var event = _ref7.event;\n\n          var formats = _this4.quill.getFormat();\n\n          var value = formats[name] === shortcutValue ? false : shortcutValue;\n\n          _this4._applyFormat([name, value, USER_ACTION], event);\n\n          _this4.updateFormatWidgets(true);\n        };\n      }\n    }, {\n      key: \"_prepareLinkHandler\",\n      value: function _prepareLinkHandler() {\n        var _this5 = this;\n\n        return function () {\n          _this5.quill.focus();\n\n          var selection = _this5.quill.getSelection();\n\n          var hasEmbedContent = _this5._hasEmbedContent(selection);\n\n          var formats = selection ? _this5.quill.getFormat() : {};\n          var formData = {\n            href: formats.link || \"\",\n            text: selection && !hasEmbedContent ? _this5.quill.getText(selection) : \"\",\n            target: Object.prototype.hasOwnProperty.call(formats, \"target\") ? !!formats.target : true\n          };\n\n          _this5.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_LINK_CAPTION));\n\n          var promise = _this5.editorInstance.showFormDialog({\n            formData: formData,\n            items: _this5._getLinkFormItems(selection)\n          });\n\n          promise.done(function (formData, event) {\n            if (selection && !hasEmbedContent) {\n              var text = formData.text || formData.href;\n              var index = selection.index,\n                  length = selection.length;\n              formData.text = void 0;\n\n              _this5.saveValueChangeEvent(event);\n\n              length && _this5.quill.deleteText(index, length, SILENT_ACTION);\n\n              _this5.quill.insertText(index, text, \"link\", formData, USER_ACTION);\n\n              _this5.quill.setSelection(index + text.length, 0, USER_ACTION);\n            } else {\n              formData.text = !selection && !formData.text ? formData.href : formData.text;\n\n              _this5._applyFormat([\"link\", formData, USER_ACTION], event);\n            }\n          });\n          promise.fail(function () {\n            _this5.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_hasEmbedContent\",\n      value: function _hasEmbedContent(selection) {\n        return !!selection && this.quill.getText(selection).trim().length < selection.length;\n      }\n    }, {\n      key: \"_getLinkFormItems\",\n      value: function _getLinkFormItems(selection) {\n        return [{\n          dataField: \"href\",\n          label: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_URL)\n          }\n        }, {\n          dataField: \"text\",\n          label: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_TEXT)\n          },\n          visible: !this._hasEmbedContent(selection)\n        }, {\n          dataField: \"target\",\n          editorType: \"dxCheckBox\",\n          editorOptions: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_TARGET)\n          },\n          cssClass: DIALOG_LINK_FIELD_TARGET_CLASS,\n          label: {\n            visible: false\n          }\n        }];\n      }\n    }, {\n      key: \"_prepareImageHandler\",\n      value: function _prepareImageHandler() {\n        var _this6 = this;\n\n        return function () {\n          var formData = _this6.quill.getFormat();\n\n          var isUpdateDialog = Object.prototype.hasOwnProperty.call(formData, \"imageSrc\");\n          var defaultIndex = _this6._defaultPasteIndex;\n\n          if (isUpdateDialog) {\n            var _this6$quill$getForma = _this6.quill.getFormat(defaultIndex - 1, 1),\n                imageSrc = _this6$quill$getForma.imageSrc;\n\n            formData.src = formData.imageSrc;\n            delete formData.imageSrc;\n\n            if (!imageSrc || 0 === defaultIndex) {\n              _this6.quill.setSelection(defaultIndex + 1, 0, SILENT_ACTION);\n            }\n          }\n\n          var formatIndex = _this6._embedFormatIndex;\n\n          _this6.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_IMAGE_CAPTION));\n\n          var promise = _this6.editorInstance.showFormDialog({\n            formData: formData,\n            items: _this6._imageFormItems\n          });\n\n          promise.done(function (formData, event) {\n            var index = defaultIndex;\n\n            _this6.saveValueChangeEvent(event);\n\n            if (isUpdateDialog) {\n              index = formatIndex;\n\n              _this6.quill.deleteText(index, 1, SILENT_ACTION);\n            }\n\n            _this6.quill.insertEmbed(index, \"extendedImage\", formData, USER_ACTION);\n\n            _this6.quill.setSelection(index + 1, 0, USER_ACTION);\n          }).always(function () {\n            _this6.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_insertTableFormItems\",\n      get: function get() {\n        return [{\n          dataField: \"columns\",\n          editorType: \"dxNumberBox\",\n          editorOptions: {\n            min: 1\n          },\n          label: {\n            text: localizationMessage.format(DIALOG_TABLE_FIELD_COLUMNS)\n          }\n        }, {\n          dataField: \"rows\",\n          editorType: \"dxNumberBox\",\n          editorOptions: {\n            min: 1\n          },\n          label: {\n            text: localizationMessage.format(DIALOG_TABLE_FIELD_ROWS)\n          }\n        }];\n      }\n    }, {\n      key: \"_prepareInsertTableHandler\",\n      value: function _prepareInsertTableHandler() {\n        var _this7 = this;\n\n        return function () {\n          var formats = _this7.quill.getFormat();\n\n          var isTableFocused = Object.prototype.hasOwnProperty.call(formats, \"table\");\n\n          if (isTableFocused) {\n            _this7.quill.focus();\n\n            return;\n          }\n\n          _this7.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_TABLE_CAPTION));\n\n          var promise = _this7.editorInstance.showFormDialog({\n            formData: {\n              rows: 1,\n              columns: 1\n            },\n            items: _this7._insertTableFormItems\n          });\n\n          promise.done(function (formData, event) {\n            _this7.quill.focus();\n\n            var table = _this7.quill.getModule(\"table\");\n\n            if (table) {\n              _this7.saveValueChangeEvent(event);\n\n              var columns = formData.columns,\n                  rows = formData.rows;\n              table.insertTable(columns, rows);\n            }\n          }).always(function () {\n            _this7.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_getTableOperationHandler\",\n      value: function _getTableOperationHandler(operationName) {\n        var _this8 = this;\n\n        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          rest[_key - 1] = arguments[_key];\n        }\n\n        return function () {\n          var table = _this8.quill.getModule(\"table\");\n\n          if (!table) {\n            return;\n          }\n\n          _this8.quill.focus();\n\n          return table[operationName].apply(table, rest);\n        };\n      }\n    }, {\n      key: \"_embedFormatIndex\",\n      get: function get() {\n        var selection = this.quill.getSelection();\n\n        if (selection) {\n          if (selection.length) {\n            return selection.index;\n          } else {\n            return selection.index - 1;\n          }\n        } else {\n          return this.quill.getLength();\n        }\n      }\n    }, {\n      key: \"_defaultPasteIndex\",\n      get: function get() {\n        var _selection$index;\n\n        var selection = this.quill.getSelection();\n        return null !== (_selection$index = null === selection || void 0 === selection ? void 0 : selection.index) && void 0 !== _selection$index ? _selection$index : this.quill.getLength();\n      }\n    }, {\n      key: \"_imageFormItems\",\n      get: function get() {\n        return [{\n          dataField: \"src\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_URL)\n          }\n        }, {\n          dataField: \"width\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_WIDTH)\n          }\n        }, {\n          dataField: \"height\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_HEIGHT)\n          }\n        }, {\n          dataField: \"alt\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_ALT)\n          }\n        }];\n      }\n    }, {\n      key: \"_renderToolbar\",\n      value: function _renderToolbar() {\n        var _this9 = this;\n\n        var container = this.options.container || this._getContainer();\n\n        this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\n        this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\n        eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), function (e) {\n          e.preventDefault();\n        });\n        this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\n        this.editorInstance.on(\"optionChanged\", function (_ref8) {\n          var name = _ref8.name;\n\n          if (\"readOnly\" === name || \"disabled\" === name) {\n            _this9.toolbarInstance.option(\"disabled\", _this9.isInteractionDisabled);\n          }\n        });\n      }\n    }, {\n      key: \"toolbarConfig\",\n      get: function get() {\n        return {\n          dataSource: this._prepareToolbarItems(),\n          disabled: this.isInteractionDisabled,\n          menuContainer: this._$toolbarContainer,\n          multiline: this.isMultilineMode()\n        };\n      }\n    }, {\n      key: \"isInteractionDisabled\",\n      get: function get() {\n        return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\");\n      }\n    }, {\n      key: \"isMultilineMode\",\n      value: function isMultilineMode() {\n        var _this$options$multili;\n\n        return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true;\n      }\n    }, {\n      key: \"clean\",\n      value: function clean() {\n        this._toolbarWidgets.clear();\n\n        if (this._$toolbarContainer) {\n          this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS);\n        }\n      }\n    }, {\n      key: \"repaint\",\n      value: function repaint() {\n        this.toolbarInstance && this.toolbarInstance.repaint();\n      }\n    }, {\n      key: \"_getContainer\",\n      value: function _getContainer() {\n        var $container = $(\"<div>\");\n        this.editorInstance.$element().prepend($container);\n        return $container;\n      }\n    }, {\n      key: \"_detectRenamedOptions\",\n      value: function _detectRenamedOptions(item) {\n        if (isObject(item)) {\n          each([{\n            newName: \"name\",\n            oldName: \"formatName\"\n          }, {\n            newName: \"acceptedValues\",\n            oldName: \"formatValues\"\n          }], function (index, optionName) {\n            if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\n              errors.log(\"W1016\", optionName.oldName, optionName.newName);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"_prepareToolbarItems\",\n      value: function _prepareToolbarItems() {\n        var _this10 = this;\n\n        var resultItems = [];\n        each(this.options.items, function (index, item) {\n          var newItem;\n\n          _this10._detectRenamedOptions(item);\n\n          if (isObject(item)) {\n            newItem = _this10._handleObjectItem(item);\n          } else if (isString(item)) {\n            var buttonItemConfig = _this10._prepareButtonItemConfig(item);\n\n            newItem = _this10._getToolbarItem(buttonItemConfig);\n          }\n\n          if (newItem) {\n            resultItems.push(newItem);\n          }\n        });\n        return resultItems;\n      }\n    }, {\n      key: \"_handleObjectItem\",\n      value: function _handleObjectItem(item) {\n        if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\n          var selectItemConfig = this._prepareSelectItemConfig(item);\n\n          return this._getToolbarItem(selectItemConfig);\n        } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n          var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\n\n          var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n          return this._getToolbarItem(buttonItemConfig);\n        } else {\n          return this._getToolbarItem(item);\n        }\n      }\n    }, {\n      key: \"_isAcceptableItem\",\n      value: function _isAcceptableItem(widget, acceptableWidgetName) {\n        return !widget || widget === acceptableWidgetName;\n      }\n    }, {\n      key: \"_prepareButtonItemConfig\",\n      value: function _prepareButtonItemConfig(name) {\n        var iconName = \"clear\" === name ? \"clearformat\" : name;\n        var buttonText = titleize(name);\n        return {\n          widget: \"dxButton\",\n          name: name,\n          options: {\n            hint: localize(buttonText),\n            text: localize(buttonText),\n            icon: iconName.toLowerCase(),\n            onClick: this._formatHandlers[name] || this._getDefaultClickHandler(name),\n            stylingMode: \"text\"\n          },\n          showText: \"inMenu\"\n        };\n      }\n    }, {\n      key: \"_prepareSelectItemConfig\",\n      value: function _prepareSelectItemConfig(item) {\n        var _this11 = this;\n\n        var name = item.name,\n            acceptedValues = item.acceptedValues;\n        return extend(true, {\n          widget: \"dxSelectBox\",\n          name: name,\n          options: {\n            stylingMode: \"filled\",\n            dataSource: acceptedValues,\n            displayExpr: function displayExpr(value) {\n              return localizeValue(value, name);\n            },\n            placeholder: localize(name),\n            onValueChanged: function onValueChanged(e) {\n              if (!_this11._isReset) {\n                _this11._applyFormat([name, e.value, USER_ACTION], e.event);\n\n                _this11._setValueSilent(e.component, e.value);\n              }\n            }\n          }\n        }, item);\n      }\n    }, {\n      key: \"_prepareColorClickHandler\",\n      value: function _prepareColorClickHandler(name) {\n        var _this12 = this;\n\n        return function () {\n          var formData = _this12.quill.getFormat();\n\n          var caption = \"color\" === name ? DIALOG_COLOR_CAPTION : DIALOG_BACKGROUND_CAPTION;\n\n          _this12.editorInstance.formDialogOption(\"title\", localizationMessage.format(caption));\n\n          var promise = _this12.editorInstance.showFormDialog({\n            formData: formData,\n            items: [{\n              dataField: name,\n              editorType: \"dxColorView\",\n              editorOptions: {\n                onContentReady: function onContentReady(e) {\n                  $(e.element).closest(\".\".concat(BOX_ITEM_CONTENT_CLASS)).css(\"flexBasis\", \"auto\");\n                },\n                focusStateEnabled: false\n              },\n              label: {\n                visible: false\n              }\n            }]\n          });\n\n          promise.done(function (formData, event) {\n            _this12._applyFormat([name, formData[name], USER_ACTION], event);\n          });\n          promise.fail(function () {\n            _this12.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_getToolbarItem\",\n      value: function _getToolbarItem(item) {\n        var _this13 = this;\n\n        var baseItem = {\n          options: {\n            onInitialized: function onInitialized(e) {\n              if (item.name) {\n                e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\n                e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\n\n                _this13._toolbarWidgets.add(item.name, e.component);\n              }\n            }\n          }\n        };\n        var multilineItem = this.isMultilineMode() ? {\n          location: \"before\",\n          locateInMenu: \"never\"\n        } : {};\n        return extend(true, {\n          location: \"before\",\n          locateInMenu: \"auto\"\n        }, this._getDefaultConfig(item.name), item, baseItem, multilineItem);\n      }\n    }, {\n      key: \"_getDefaultItemsConfig\",\n      value: function _getDefaultItemsConfig() {\n        return {\n          clear: {\n            options: {\n              disabled: true\n            }\n          },\n          undo: {\n            options: {\n              disabled: true\n            }\n          },\n          redo: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowAbove: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowBelow: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnLeft: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnRight: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteRow: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteColumn: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteTable: {\n            options: {\n              disabled: true\n            }\n          },\n          separator: {\n            template: function template(data, index, element) {\n              $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n            },\n            menuItemTemplate: function menuItemTemplate(data, index, element) {\n              $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"_getDefaultConfig\",\n      value: function _getDefaultConfig(name) {\n        return this._getDefaultItemsConfig()[name];\n      }\n    }, {\n      key: \"updateHistoryWidgets\",\n      value: function updateHistoryWidgets() {\n        var historyModule = this.quill.history;\n\n        if (!historyModule) {\n          return;\n        }\n\n        var _historyModule$stack = historyModule.stack,\n            undoOps = _historyModule$stack.undo,\n            redoOps = _historyModule$stack.redo;\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length));\n      }\n    }, {\n      key: \"updateTableWidgets\",\n      value: function updateTableWidgets() {\n        var _this14 = this;\n\n        var _this$quill$getFormat;\n\n        var table = this.quill.getModule(\"table\");\n\n        if (!table) {\n          return;\n        }\n\n        var selection = this.quill.getSelection();\n        var isTableOperationsEnabled = selection && Boolean(null === (_this$quill$getFormat = this.quill.getFormat(selection)) || void 0 === _this$quill$getFormat ? void 0 : _this$quill$getFormat.table);\n        TABLE_OPERATIONS.forEach(function (operationName) {\n          var isInsertTable = \"insertTable\" === operationName;\n\n          var widget = _this14._toolbarWidgets.getByName(operationName);\n\n          _this14._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled);\n        });\n      }\n    }, {\n      key: \"_updateManipulationWidget\",\n      value: function _updateManipulationWidget(widget, isOperationEnabled) {\n        if (!widget) {\n          return;\n        }\n\n        widget.option(\"disabled\", !isOperationEnabled);\n      }\n    }, {\n      key: \"updateFormatWidgets\",\n      value: function updateFormatWidgets(isResetRequired) {\n        var selection = this.quill.getSelection();\n\n        if (!selection) {\n          return;\n        }\n\n        var formats = this.quill.getFormat(selection);\n        var hasFormats = !isEmptyObject(formats);\n\n        if (!hasFormats || isResetRequired) {\n          this._resetFormatWidgets();\n        }\n\n        for (var formatName in formats) {\n          var widgetName = this._getFormatWidgetName(formatName, formats);\n\n          var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\n\n          if (!formatWidget) {\n            continue;\n          }\n\n          this._markActiveFormatWidget(formatName, formatWidget, formats);\n        }\n\n        this._toggleClearFormatting(hasFormats || selection.length > 1);\n      }\n    }, {\n      key: \"_markActiveFormatWidget\",\n      value: function _markActiveFormatWidget(name, widget, formats) {\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name, formats[name]);\n        }\n\n        if (\"value\" in widget.option()) {\n          this._setValueSilent(widget, formats[name]);\n        } else {\n          widget.$element().addClass(ACTIVE_FORMAT_CLASS);\n        }\n      }\n    }, {\n      key: \"_toggleClearFormatting\",\n      value: function _toggleClearFormatting(hasFormats) {\n        var clearWidget = this._toolbarWidgets.getByName(\"clear\");\n\n        if (clearWidget) {\n          clearWidget.option(\"disabled\", !hasFormats);\n        }\n      }\n    }, {\n      key: \"_isColorFormat\",\n      value: function _isColorFormat(name) {\n        return \"color\" === name || \"background\" === name;\n      }\n    }, {\n      key: \"_updateColorWidget\",\n      value: function _updateColorWidget(name, color) {\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (!formatWidget) {\n          return;\n        }\n\n        formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\");\n      }\n    }, {\n      key: \"_getFormatWidgetName\",\n      value: function _getFormatWidgetName(name, formats) {\n        var widgetName;\n\n        switch (name) {\n          case \"align\":\n            widgetName = name + titleize(formats[name]);\n            break;\n\n          case \"list\":\n            widgetName = formats[name] + titleize(name);\n            break;\n\n          case \"code-block\":\n            widgetName = \"codeBlock\";\n            break;\n\n          case \"script\":\n            widgetName = formats[name] + name;\n            break;\n\n          case \"imageSrc\":\n            widgetName = \"image\";\n            break;\n\n          default:\n            widgetName = name;\n        }\n\n        return widgetName;\n      }\n    }, {\n      key: \"_setValueSilent\",\n      value: function _setValueSilent(widget, value) {\n        this._isReset = true;\n        widget.option(\"value\", value);\n        this._isReset = false;\n      }\n    }, {\n      key: \"_resetFormatWidgets\",\n      value: function _resetFormatWidgets() {\n        var _this15 = this;\n\n        this._toolbarWidgets.each(function (name, widget) {\n          _this15._resetFormatWidget(name, widget);\n        });\n      }\n    }, {\n      key: \"_resetFormatWidget\",\n      value: function _resetFormatWidget(name, widget) {\n        widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\n\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name);\n        }\n\n        if (\"clear\" === name) {\n          widget.option(\"disabled\", true);\n        }\n\n        if (\"dxSelectBox\" === widget.NAME) {\n          this._setValueSilent(widget, null);\n        }\n      }\n    }, {\n      key: \"addClickHandler\",\n      value: function addClickHandler(name, handler) {\n        this._formatHandlers[name] = handler;\n\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (formatWidget && \"dxButton\" === formatWidget.NAME) {\n          formatWidget.option(\"onClick\", handler);\n        }\n      }\n    }]);\n\n    return ToolbarModule;\n  }(BaseModule);\n}\n\nexport default ToolbarModule;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js"],"names":["Quill","$","BaseModule","Toolbar","errors","WidgetCollector","each","isString","isObject","isDefined","isEmptyObject","isBoolean","extend","localizationMessage","titleize","camelize","eventsEngine","addNamespace","ToolbarModule","TOOLBAR_WRAPPER_CLASS","TOOLBAR_CLASS","TOOLBAR_FORMAT_WIDGET_CLASS","TOOLBAR_SEPARATOR_CLASS","TOOLBAR_MENU_SEPARATOR_CLASS","ACTIVE_FORMAT_CLASS","BOX_ITEM_CONTENT_CLASS","ICON_CLASS","SELECTION_CHANGE_EVENT","DIALOG_COLOR_CAPTION","DIALOG_BACKGROUND_CAPTION","DIALOG_LINK_CAPTION","DIALOG_LINK_FIELD_URL","DIALOG_LINK_FIELD_TEXT","DIALOG_LINK_FIELD_TARGET","DIALOG_LINK_FIELD_TARGET_CLASS","DIALOG_IMAGE_CAPTION","DIALOG_IMAGE_FIELD_URL","DIALOG_IMAGE_FIELD_ALT","DIALOG_IMAGE_FIELD_WIDTH","DIALOG_IMAGE_FIELD_HEIGHT","DIALOG_TABLE_FIELD_COLUMNS","DIALOG_TABLE_FIELD_ROWS","DIALOG_TABLE_CAPTION","TABLE_OPERATIONS","USER_ACTION","SILENT_ACTION","localize","name","format","concat","localizeValue","value","isHeaderValue","quill","options","_toolbarWidgets","_formatHandlers","_getFormatHandlers","items","_addCallbacks","_renderToolbar","on","eventName","isSelectionChanged","_updateToolbar","formatArgs","event","saveValueChangeEvent","addCleanCallback","clean","bind","editorInstance","addContentInitializedCallback","updateHistoryWidgets","updateFormatWidgets","updateTableWidgets","_ref","formats","getFormat","newValue","_applyFormat","_updateFormatWidget","isApplied","widget","getByName","_markActiveFormatWidget","_resetFormatWidget","Object","prototype","hasOwnProperty","call","_toggleClearFormatting","clear","_ref2","range","getSelection","removeFormat","link","_prepareLinkHandler","image","_prepareImageHandler","color","_prepareColorClickHandler","background","orderedList","_prepareShortcutHandler","bulletList","alignLeft","alignCenter","alignRight","alignJustify","codeBlock","_getDefaultClickHandler","undo","_ref3","history","redo","_ref4","increaseIndent","_ref5","decreaseIndent","_ref6","superscript","subscript","insertTable","_prepareInsertTableHandler","insertRowAbove","_getTableOperationHandler","insertRowBelow","insertColumnLeft","insertColumnRight","deleteColumn","deleteRow","deleteTable","shortcutValue","_ref7","focus","selection","hasEmbedContent","_hasEmbedContent","formData","href","text","getText","target","formDialogOption","promise","showFormDialog","_getLinkFormItems","done","index","length","deleteText","insertText","setSelection","fail","trim","dataField","label","visible","editorType","editorOptions","cssClass","isUpdateDialog","defaultIndex","_defaultPasteIndex","imageSrc","src","formatIndex","_embedFormatIndex","_imageFormItems","insertEmbed","always","min","isTableFocused","rows","columns","_insertTableFormItems","table","getModule","operationName","_len","arguments","rest","Array","_key","getLength","_selection$index","container","_getContainer","_$toolbar","addClass","appendTo","_$toolbarContainer","NAME","e","preventDefault","toolbarInstance","_createComponent","toolbarConfig","_ref8","option","isInteractionDisabled","dataSource","_prepareToolbarItems","disabled","menuContainer","multiline","isMultilineMode","_this$options$multili","empty","removeClass","repaint","$container","$element","prepend","item","newName","oldName","optionName","log","resultItems","newItem","_detectRenamedOptions","_handleObjectItem","buttonItemConfig","_prepareButtonItemConfig","_getToolbarItem","push","acceptedValues","_isAcceptableItem","selectItemConfig","_prepareSelectItemConfig","defaultButtonItemConfig","acceptableWidgetName","iconName","buttonText","hint","icon","toLowerCase","onClick","stylingMode","showText","displayExpr","placeholder","onValueChanged","_isReset","_setValueSilent","component","caption","onContentReady","element","closest","css","focusStateEnabled","baseItem","onInitialized","toggleClass","add","multilineItem","location","locateInMenu","_getDefaultConfig","separator","template","data","menuItemTemplate","_getDefaultItemsConfig","historyModule","stack","undoOps","redoOps","_updateManipulationWidget","Boolean","_this$quill$getFormat","isTableOperationsEnabled","forEach","isInsertTable","isOperationEnabled","isResetRequired","hasFormats","_resetFormatWidgets","formatName","widgetName","_getFormatWidgetName","formatWidget","_isColorFormat","_updateColorWidget","clearWidget","find","handler"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Quill from \"devextreme-quill\";\r\nimport $ from \"../../../core/renderer\";\r\nimport BaseModule from \"./base\";\r\nimport Toolbar from \"../../toolbar\";\r\nimport \"../../select_box\";\r\nimport \"../../color_box/color_view\";\r\nimport \"../../number_box\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport WidgetCollector from \"./widget_collector\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isString,\r\n    isObject,\r\n    isDefined,\r\n    isEmptyObject,\r\n    isBoolean\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport localizationMessage from \"../../../localization/message\";\r\nimport {\r\n    titleize,\r\n    camelize\r\n} from \"../../../core/utils/inflector\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nvar ToolbarModule = BaseModule;\r\nif (Quill) {\r\n    var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\r\n    var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\r\n    var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\r\n    var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\r\n    var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\r\n    var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\n    var BOX_ITEM_CONTENT_CLASS = \"dx-box-item-content\";\r\n    var ICON_CLASS = \"dx-icon\";\r\n    var SELECTION_CHANGE_EVENT = \"selection-change\";\r\n    var DIALOG_COLOR_CAPTION = \"dxHtmlEditor-dialogColorCaption\";\r\n    var DIALOG_BACKGROUND_CAPTION = \"dxHtmlEditor-dialogBackgroundCaption\";\r\n    var DIALOG_LINK_CAPTION = \"dxHtmlEditor-dialogLinkCaption\";\r\n    var DIALOG_LINK_FIELD_URL = \"dxHtmlEditor-dialogLinkUrlField\";\r\n    var DIALOG_LINK_FIELD_TEXT = \"dxHtmlEditor-dialogLinkTextField\";\r\n    var DIALOG_LINK_FIELD_TARGET = \"dxHtmlEditor-dialogLinkTargetField\";\r\n    var DIALOG_LINK_FIELD_TARGET_CLASS = \"dx-formdialog-field-target\";\r\n    var DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\r\n    var DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\r\n    var DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\r\n    var DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\r\n    var DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\r\n    var DIALOG_TABLE_FIELD_COLUMNS = \"dxHtmlEditor-dialogInsertTableRowsField\";\r\n    var DIALOG_TABLE_FIELD_ROWS = \"dxHtmlEditor-dialogInsertTableColumnsField\";\r\n    var DIALOG_TABLE_CAPTION = \"dxHtmlEditor-dialogInsertTableCaption\";\r\n    var TABLE_OPERATIONS = [\"insertTable\", \"insertRowAbove\", \"insertRowBelow\", \"insertColumnLeft\", \"insertColumnRight\", \"deleteColumn\", \"deleteRow\", \"deleteTable\"];\r\n    var USER_ACTION = \"user\";\r\n    var SILENT_ACTION = \"silent\";\r\n    var localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\r\n    var localizeValue = (value, name) => {\r\n        if (\"header\" === name) {\r\n            var isHeaderValue = isDefined(value) && false !== value;\r\n            return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\")\r\n        }\r\n        return localize(value) || value\r\n    };\r\n    ToolbarModule = class extends BaseModule {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this._toolbarWidgets = new WidgetCollector;\r\n            this._formatHandlers = this._getFormatHandlers();\r\n            if (isDefined(options.items)) {\r\n                this._addCallbacks();\r\n                this._renderToolbar();\r\n                this.quill.on(\"editor-change\", eventName => {\r\n                    var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\r\n                    this._updateToolbar(isSelectionChanged)\r\n                })\r\n            }\r\n        }\r\n        _applyFormat(formatArgs, event) {\r\n            this.saveValueChangeEvent(event);\r\n            this.quill.format(...formatArgs)\r\n        }\r\n        _addCallbacks() {\r\n            this.addCleanCallback(this.clean.bind(this));\r\n            this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this))\r\n        }\r\n        _updateToolbar(isSelectionChanged) {\r\n            this.updateFormatWidgets(isSelectionChanged);\r\n            this.updateHistoryWidgets();\r\n            this.updateTableWidgets()\r\n        }\r\n        _getDefaultClickHandler(name) {\r\n            return _ref => {\r\n                var {\r\n                    event: event\r\n                } = _ref;\r\n                var formats = this.quill.getFormat();\r\n                var value = formats[name];\r\n                var newValue = !(isBoolean(value) ? value : isDefined(value));\r\n                this._applyFormat([name, newValue, USER_ACTION], event);\r\n                this._updateFormatWidget(name, newValue, formats)\r\n            }\r\n        }\r\n        _updateFormatWidget(name, isApplied, formats) {\r\n            var widget = this._toolbarWidgets.getByName(name);\r\n            if (!widget) {\r\n                return\r\n            }\r\n            if (isApplied) {\r\n                this._markActiveFormatWidget(name, widget, formats)\r\n            } else {\r\n                this._resetFormatWidget(name, widget);\r\n                if (Object.prototype.hasOwnProperty.call(name)) {\r\n                    delete formats[name]\r\n                }\r\n            }\r\n            this._toggleClearFormatting(isApplied || !isEmptyObject(formats))\r\n        }\r\n        _getFormatHandlers() {\r\n            return {\r\n                clear: _ref2 => {\r\n                    var {\r\n                        event: event\r\n                    } = _ref2;\r\n                    var range = this.quill.getSelection();\r\n                    if (range) {\r\n                        this.saveValueChangeEvent(event);\r\n                        this.quill.removeFormat(range);\r\n                        this.updateFormatWidgets()\r\n                    }\r\n                },\r\n                link: this._prepareLinkHandler(),\r\n                image: this._prepareImageHandler(),\r\n                color: this._prepareColorClickHandler(\"color\"),\r\n                background: this._prepareColorClickHandler(\"background\"),\r\n                orderedList: this._prepareShortcutHandler(\"list\", \"ordered\"),\r\n                bulletList: this._prepareShortcutHandler(\"list\", \"bullet\"),\r\n                alignLeft: this._prepareShortcutHandler(\"align\", \"left\"),\r\n                alignCenter: this._prepareShortcutHandler(\"align\", \"center\"),\r\n                alignRight: this._prepareShortcutHandler(\"align\", \"right\"),\r\n                alignJustify: this._prepareShortcutHandler(\"align\", \"justify\"),\r\n                codeBlock: this._getDefaultClickHandler(\"code-block\"),\r\n                undo: _ref3 => {\r\n                    var {\r\n                        event: event\r\n                    } = _ref3;\r\n                    this.saveValueChangeEvent(event);\r\n                    this.quill.history.undo()\r\n                },\r\n                redo: _ref4 => {\r\n                    var {\r\n                        event: event\r\n                    } = _ref4;\r\n                    this.saveValueChangeEvent(event);\r\n                    this.quill.history.redo()\r\n                },\r\n                increaseIndent: _ref5 => {\r\n                    var {\r\n                        event: event\r\n                    } = _ref5;\r\n                    this._applyFormat([\"indent\", \"+1\", USER_ACTION], event)\r\n                },\r\n                decreaseIndent: _ref6 => {\r\n                    var {\r\n                        event: event\r\n                    } = _ref6;\r\n                    this._applyFormat([\"indent\", \"-1\", USER_ACTION], event)\r\n                },\r\n                superscript: this._prepareShortcutHandler(\"script\", \"super\"),\r\n                subscript: this._prepareShortcutHandler(\"script\", \"sub\"),\r\n                insertTable: this._prepareInsertTableHandler(),\r\n                insertRowAbove: this._getTableOperationHandler(\"insertRowAbove\"),\r\n                insertRowBelow: this._getTableOperationHandler(\"insertRowBelow\"),\r\n                insertColumnLeft: this._getTableOperationHandler(\"insertColumnLeft\"),\r\n                insertColumnRight: this._getTableOperationHandler(\"insertColumnRight\"),\r\n                deleteColumn: this._getTableOperationHandler(\"deleteColumn\"),\r\n                deleteRow: this._getTableOperationHandler(\"deleteRow\"),\r\n                deleteTable: this._getTableOperationHandler(\"deleteTable\")\r\n            }\r\n        }\r\n        _prepareShortcutHandler(name, shortcutValue) {\r\n            return _ref7 => {\r\n                var {\r\n                    event: event\r\n                } = _ref7;\r\n                var formats = this.quill.getFormat();\r\n                var value = formats[name] === shortcutValue ? false : shortcutValue;\r\n                this._applyFormat([name, value, USER_ACTION], event);\r\n                this.updateFormatWidgets(true)\r\n            }\r\n        }\r\n        _prepareLinkHandler() {\r\n            return () => {\r\n                this.quill.focus();\r\n                var selection = this.quill.getSelection();\r\n                var hasEmbedContent = this._hasEmbedContent(selection);\r\n                var formats = selection ? this.quill.getFormat() : {};\r\n                var formData = {\r\n                    href: formats.link || \"\",\r\n                    text: selection && !hasEmbedContent ? this.quill.getText(selection) : \"\",\r\n                    target: Object.prototype.hasOwnProperty.call(formats, \"target\") ? !!formats.target : true\r\n                };\r\n                this.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_LINK_CAPTION));\r\n                var promise = this.editorInstance.showFormDialog({\r\n                    formData: formData,\r\n                    items: this._getLinkFormItems(selection)\r\n                });\r\n                promise.done((formData, event) => {\r\n                    if (selection && !hasEmbedContent) {\r\n                        var text = formData.text || formData.href;\r\n                        var {\r\n                            index: index,\r\n                            length: length\r\n                        } = selection;\r\n                        formData.text = void 0;\r\n                        this.saveValueChangeEvent(event);\r\n                        length && this.quill.deleteText(index, length, SILENT_ACTION);\r\n                        this.quill.insertText(index, text, \"link\", formData, USER_ACTION);\r\n                        this.quill.setSelection(index + text.length, 0, USER_ACTION)\r\n                    } else {\r\n                        formData.text = !selection && !formData.text ? formData.href : formData.text;\r\n                        this._applyFormat([\"link\", formData, USER_ACTION], event)\r\n                    }\r\n                });\r\n                promise.fail(() => {\r\n                    this.quill.focus()\r\n                })\r\n            }\r\n        }\r\n        _hasEmbedContent(selection) {\r\n            return !!selection && this.quill.getText(selection).trim().length < selection.length\r\n        }\r\n        _getLinkFormItems(selection) {\r\n            return [{\r\n                dataField: \"href\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_LINK_FIELD_URL)\r\n                }\r\n            }, {\r\n                dataField: \"text\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_LINK_FIELD_TEXT)\r\n                },\r\n                visible: !this._hasEmbedContent(selection)\r\n            }, {\r\n                dataField: \"target\",\r\n                editorType: \"dxCheckBox\",\r\n                editorOptions: {\r\n                    text: localizationMessage.format(DIALOG_LINK_FIELD_TARGET)\r\n                },\r\n                cssClass: DIALOG_LINK_FIELD_TARGET_CLASS,\r\n                label: {\r\n                    visible: false\r\n                }\r\n            }]\r\n        }\r\n        _prepareImageHandler() {\r\n            return () => {\r\n                var formData = this.quill.getFormat();\r\n                var isUpdateDialog = Object.prototype.hasOwnProperty.call(formData, \"imageSrc\");\r\n                var defaultIndex = this._defaultPasteIndex;\r\n                if (isUpdateDialog) {\r\n                    var {\r\n                        imageSrc: imageSrc\r\n                    } = this.quill.getFormat(defaultIndex - 1, 1);\r\n                    formData.src = formData.imageSrc;\r\n                    delete formData.imageSrc;\r\n                    if (!imageSrc || 0 === defaultIndex) {\r\n                        this.quill.setSelection(defaultIndex + 1, 0, SILENT_ACTION)\r\n                    }\r\n                }\r\n                var formatIndex = this._embedFormatIndex;\r\n                this.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_IMAGE_CAPTION));\r\n                var promise = this.editorInstance.showFormDialog({\r\n                    formData: formData,\r\n                    items: this._imageFormItems\r\n                });\r\n                promise.done((formData, event) => {\r\n                    var index = defaultIndex;\r\n                    this.saveValueChangeEvent(event);\r\n                    if (isUpdateDialog) {\r\n                        index = formatIndex;\r\n                        this.quill.deleteText(index, 1, SILENT_ACTION)\r\n                    }\r\n                    this.quill.insertEmbed(index, \"extendedImage\", formData, USER_ACTION);\r\n                    this.quill.setSelection(index + 1, 0, USER_ACTION)\r\n                }).always(() => {\r\n                    this.quill.focus()\r\n                })\r\n            }\r\n        }\r\n        get _insertTableFormItems() {\r\n            return [{\r\n                dataField: \"columns\",\r\n                editorType: \"dxNumberBox\",\r\n                editorOptions: {\r\n                    min: 1\r\n                },\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_TABLE_FIELD_COLUMNS)\r\n                }\r\n            }, {\r\n                dataField: \"rows\",\r\n                editorType: \"dxNumberBox\",\r\n                editorOptions: {\r\n                    min: 1\r\n                },\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_TABLE_FIELD_ROWS)\r\n                }\r\n            }]\r\n        }\r\n        _prepareInsertTableHandler() {\r\n            return () => {\r\n                var formats = this.quill.getFormat();\r\n                var isTableFocused = Object.prototype.hasOwnProperty.call(formats, \"table\");\r\n                if (isTableFocused) {\r\n                    this.quill.focus();\r\n                    return\r\n                }\r\n                this.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_TABLE_CAPTION));\r\n                var promise = this.editorInstance.showFormDialog({\r\n                    formData: {\r\n                        rows: 1,\r\n                        columns: 1\r\n                    },\r\n                    items: this._insertTableFormItems\r\n                });\r\n                promise.done((formData, event) => {\r\n                    this.quill.focus();\r\n                    var table = this.quill.getModule(\"table\");\r\n                    if (table) {\r\n                        this.saveValueChangeEvent(event);\r\n                        var {\r\n                            columns: columns,\r\n                            rows: rows\r\n                        } = formData;\r\n                        table.insertTable(columns, rows)\r\n                    }\r\n                }).always(() => {\r\n                    this.quill.focus()\r\n                })\r\n            }\r\n        }\r\n        _getTableOperationHandler(operationName) {\r\n            for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n                rest[_key - 1] = arguments[_key]\r\n            }\r\n            return () => {\r\n                var table = this.quill.getModule(\"table\");\r\n                if (!table) {\r\n                    return\r\n                }\r\n                this.quill.focus();\r\n                return table[operationName](...rest)\r\n            }\r\n        }\r\n        get _embedFormatIndex() {\r\n            var selection = this.quill.getSelection();\r\n            if (selection) {\r\n                if (selection.length) {\r\n                    return selection.index\r\n                } else {\r\n                    return selection.index - 1\r\n                }\r\n            } else {\r\n                return this.quill.getLength()\r\n            }\r\n        }\r\n        get _defaultPasteIndex() {\r\n            var _selection$index;\r\n            var selection = this.quill.getSelection();\r\n            return null !== (_selection$index = null === selection || void 0 === selection ? void 0 : selection.index) && void 0 !== _selection$index ? _selection$index : this.quill.getLength()\r\n        }\r\n        get _imageFormItems() {\r\n            return [{\r\n                dataField: \"src\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_IMAGE_FIELD_URL)\r\n                }\r\n            }, {\r\n                dataField: \"width\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_IMAGE_FIELD_WIDTH)\r\n                }\r\n            }, {\r\n                dataField: \"height\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_IMAGE_FIELD_HEIGHT)\r\n                }\r\n            }, {\r\n                dataField: \"alt\",\r\n                label: {\r\n                    text: localizationMessage.format(DIALOG_IMAGE_FIELD_ALT)\r\n                }\r\n            }]\r\n        }\r\n        _renderToolbar() {\r\n            var container = this.options.container || this._getContainer();\r\n            this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\r\n            this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\r\n            eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), e => {\r\n                e.preventDefault()\r\n            });\r\n            this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\r\n            this.editorInstance.on(\"optionChanged\", _ref8 => {\r\n                var {\r\n                    name: name\r\n                } = _ref8;\r\n                if (\"readOnly\" === name || \"disabled\" === name) {\r\n                    this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled)\r\n                }\r\n            })\r\n        }\r\n        get toolbarConfig() {\r\n            return {\r\n                dataSource: this._prepareToolbarItems(),\r\n                disabled: this.isInteractionDisabled,\r\n                menuContainer: this._$toolbarContainer,\r\n                multiline: this.isMultilineMode()\r\n            }\r\n        }\r\n        get isInteractionDisabled() {\r\n            return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\")\r\n        }\r\n        isMultilineMode() {\r\n            var _this$options$multili;\r\n            return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true\r\n        }\r\n        clean() {\r\n            this._toolbarWidgets.clear();\r\n            if (this._$toolbarContainer) {\r\n                this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS)\r\n            }\r\n        }\r\n        repaint() {\r\n            this.toolbarInstance && this.toolbarInstance.repaint()\r\n        }\r\n        _getContainer() {\r\n            var $container = $(\"<div>\");\r\n            this.editorInstance.$element().prepend($container);\r\n            return $container\r\n        }\r\n        _detectRenamedOptions(item) {\r\n            if (isObject(item)) {\r\n                each([{\r\n                    newName: \"name\",\r\n                    oldName: \"formatName\"\r\n                }, {\r\n                    newName: \"acceptedValues\",\r\n                    oldName: \"formatValues\"\r\n                }], (index, optionName) => {\r\n                    if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\r\n                        errors.log(\"W1016\", optionName.oldName, optionName.newName)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _prepareToolbarItems() {\r\n            var resultItems = [];\r\n            each(this.options.items, (index, item) => {\r\n                var newItem;\r\n                this._detectRenamedOptions(item);\r\n                if (isObject(item)) {\r\n                    newItem = this._handleObjectItem(item)\r\n                } else if (isString(item)) {\r\n                    var buttonItemConfig = this._prepareButtonItemConfig(item);\r\n                    newItem = this._getToolbarItem(buttonItemConfig)\r\n                }\r\n                if (newItem) {\r\n                    resultItems.push(newItem)\r\n                }\r\n            });\r\n            return resultItems\r\n        }\r\n        _handleObjectItem(item) {\r\n            if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\r\n                var selectItemConfig = this._prepareSelectItemConfig(item);\r\n                return this._getToolbarItem(selectItemConfig)\r\n            } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\r\n                var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\r\n                var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\r\n                return this._getToolbarItem(buttonItemConfig)\r\n            } else {\r\n                return this._getToolbarItem(item)\r\n            }\r\n        }\r\n        _isAcceptableItem(widget, acceptableWidgetName) {\r\n            return !widget || widget === acceptableWidgetName\r\n        }\r\n        _prepareButtonItemConfig(name) {\r\n            var iconName = \"clear\" === name ? \"clearformat\" : name;\r\n            var buttonText = titleize(name);\r\n            return {\r\n                widget: \"dxButton\",\r\n                name: name,\r\n                options: {\r\n                    hint: localize(buttonText),\r\n                    text: localize(buttonText),\r\n                    icon: iconName.toLowerCase(),\r\n                    onClick: this._formatHandlers[name] || this._getDefaultClickHandler(name),\r\n                    stylingMode: \"text\"\r\n                },\r\n                showText: \"inMenu\"\r\n            }\r\n        }\r\n        _prepareSelectItemConfig(item) {\r\n            var {\r\n                name: name,\r\n                acceptedValues: acceptedValues\r\n            } = item;\r\n            return extend(true, {\r\n                widget: \"dxSelectBox\",\r\n                name: name,\r\n                options: {\r\n                    stylingMode: \"filled\",\r\n                    dataSource: acceptedValues,\r\n                    displayExpr: value => localizeValue(value, name),\r\n                    placeholder: localize(name),\r\n                    onValueChanged: e => {\r\n                        if (!this._isReset) {\r\n                            this._applyFormat([name, e.value, USER_ACTION], e.event);\r\n                            this._setValueSilent(e.component, e.value)\r\n                        }\r\n                    }\r\n                }\r\n            }, item)\r\n        }\r\n        _prepareColorClickHandler(name) {\r\n            return () => {\r\n                var formData = this.quill.getFormat();\r\n                var caption = \"color\" === name ? DIALOG_COLOR_CAPTION : DIALOG_BACKGROUND_CAPTION;\r\n                this.editorInstance.formDialogOption(\"title\", localizationMessage.format(caption));\r\n                var promise = this.editorInstance.showFormDialog({\r\n                    formData: formData,\r\n                    items: [{\r\n                        dataField: name,\r\n                        editorType: \"dxColorView\",\r\n                        editorOptions: {\r\n                            onContentReady: e => {\r\n                                $(e.element).closest(\".\".concat(BOX_ITEM_CONTENT_CLASS)).css(\"flexBasis\", \"auto\")\r\n                            },\r\n                            focusStateEnabled: false\r\n                        },\r\n                        label: {\r\n                            visible: false\r\n                        }\r\n                    }]\r\n                });\r\n                promise.done((formData, event) => {\r\n                    this._applyFormat([name, formData[name], USER_ACTION], event)\r\n                });\r\n                promise.fail(() => {\r\n                    this.quill.focus()\r\n                })\r\n            }\r\n        }\r\n        _getToolbarItem(item) {\r\n            var baseItem = {\r\n                options: {\r\n                    onInitialized: e => {\r\n                        if (item.name) {\r\n                            e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\r\n                            e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\r\n                            this._toolbarWidgets.add(item.name, e.component)\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var multilineItem = this.isMultilineMode() ? {\r\n                location: \"before\",\r\n                locateInMenu: \"never\"\r\n            } : {};\r\n            return extend(true, {\r\n                location: \"before\",\r\n                locateInMenu: \"auto\"\r\n            }, this._getDefaultConfig(item.name), item, baseItem, multilineItem)\r\n        }\r\n        _getDefaultItemsConfig() {\r\n            return {\r\n                clear: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                undo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                redo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowAbove: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowBelow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnLeft: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnRight: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteColumn: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteTable: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                separator: {\r\n                    template: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_SEPARATOR_CLASS)\r\n                    },\r\n                    menuItemTemplate: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _getDefaultConfig(name) {\r\n            return this._getDefaultItemsConfig()[name]\r\n        }\r\n        updateHistoryWidgets() {\r\n            var historyModule = this.quill.history;\r\n            if (!historyModule) {\r\n                return\r\n            }\r\n            var {\r\n                undo: undoOps,\r\n                redo: redoOps\r\n            } = historyModule.stack;\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length))\r\n        }\r\n        updateTableWidgets() {\r\n            var _this$quill$getFormat;\r\n            var table = this.quill.getModule(\"table\");\r\n            if (!table) {\r\n                return\r\n            }\r\n            var selection = this.quill.getSelection();\r\n            var isTableOperationsEnabled = selection && Boolean(null === (_this$quill$getFormat = this.quill.getFormat(selection)) || void 0 === _this$quill$getFormat ? void 0 : _this$quill$getFormat.table);\r\n            TABLE_OPERATIONS.forEach(operationName => {\r\n                var isInsertTable = \"insertTable\" === operationName;\r\n                var widget = this._toolbarWidgets.getByName(operationName);\r\n                this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled)\r\n            })\r\n        }\r\n        _updateManipulationWidget(widget, isOperationEnabled) {\r\n            if (!widget) {\r\n                return\r\n            }\r\n            widget.option(\"disabled\", !isOperationEnabled)\r\n        }\r\n        updateFormatWidgets(isResetRequired) {\r\n            var selection = this.quill.getSelection();\r\n            if (!selection) {\r\n                return\r\n            }\r\n            var formats = this.quill.getFormat(selection);\r\n            var hasFormats = !isEmptyObject(formats);\r\n            if (!hasFormats || isResetRequired) {\r\n                this._resetFormatWidgets()\r\n            }\r\n            for (var formatName in formats) {\r\n                var widgetName = this._getFormatWidgetName(formatName, formats);\r\n                var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\r\n                if (!formatWidget) {\r\n                    continue\r\n                }\r\n                this._markActiveFormatWidget(formatName, formatWidget, formats)\r\n            }\r\n            this._toggleClearFormatting(hasFormats || selection.length > 1)\r\n        }\r\n        _markActiveFormatWidget(name, widget, formats) {\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name, formats[name])\r\n            }\r\n            if (\"value\" in widget.option()) {\r\n                this._setValueSilent(widget, formats[name])\r\n            } else {\r\n                widget.$element().addClass(ACTIVE_FORMAT_CLASS)\r\n            }\r\n        }\r\n        _toggleClearFormatting(hasFormats) {\r\n            var clearWidget = this._toolbarWidgets.getByName(\"clear\");\r\n            if (clearWidget) {\r\n                clearWidget.option(\"disabled\", !hasFormats)\r\n            }\r\n        }\r\n        _isColorFormat(name) {\r\n            return \"color\" === name || \"background\" === name\r\n        }\r\n        _updateColorWidget(name, color) {\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (!formatWidget) {\r\n                return\r\n            }\r\n            formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\")\r\n        }\r\n        _getFormatWidgetName(name, formats) {\r\n            var widgetName;\r\n            switch (name) {\r\n                case \"align\":\r\n                    widgetName = name + titleize(formats[name]);\r\n                    break;\r\n                case \"list\":\r\n                    widgetName = formats[name] + titleize(name);\r\n                    break;\r\n                case \"code-block\":\r\n                    widgetName = \"codeBlock\";\r\n                    break;\r\n                case \"script\":\r\n                    widgetName = formats[name] + name;\r\n                    break;\r\n                case \"imageSrc\":\r\n                    widgetName = \"image\";\r\n                    break;\r\n                default:\r\n                    widgetName = name\r\n            }\r\n            return widgetName\r\n        }\r\n        _setValueSilent(widget, value) {\r\n            this._isReset = true;\r\n            widget.option(\"value\", value);\r\n            this._isReset = false\r\n        }\r\n        _resetFormatWidgets() {\r\n            this._toolbarWidgets.each((name, widget) => {\r\n                this._resetFormatWidget(name, widget)\r\n            })\r\n        }\r\n        _resetFormatWidget(name, widget) {\r\n            widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name)\r\n            }\r\n            if (\"clear\" === name) {\r\n                widget.option(\"disabled\", true)\r\n            }\r\n            if (\"dxSelectBox\" === widget.NAME) {\r\n                this._setValueSilent(widget, null)\r\n            }\r\n        }\r\n        addClickHandler(name, handler) {\r\n            this._formatHandlers[name] = handler;\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (formatWidget && \"dxButton\" === formatWidget.NAME) {\r\n                formatWidget.option(\"onClick\", handler)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default ToolbarModule;\r\n"]},"metadata":{},"sourceType":"module"}