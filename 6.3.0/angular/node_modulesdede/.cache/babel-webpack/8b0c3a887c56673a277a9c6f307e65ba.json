{"ast":null,"code":"import _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointmentFilter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar HOUR_MS = toMs(\"hour\");\n\nvar AppointmentFilter = /*#__PURE__*/function () {\n  function AppointmentFilter(scheduler) {\n    _classCallCheck(this, AppointmentFilter);\n\n    this.scheduler = scheduler;\n  }\n\n  _createClass(AppointmentFilter, [{\n    key: \"filterStrategy\",\n    get: function get() {\n      return this.scheduler.isVirtualScrolling() ? new AppointmentFilterVirtualStrategy(this.scheduler) : new AppointmentFilterBaseStrategy(this.scheduler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      return this.filterStrategy.filter();\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments(appointments) {\n      return this.filterStrategy.hasAllDayAppointments(appointments);\n    }\n  }]);\n\n  return AppointmentFilter;\n}();\n\nexport { AppointmentFilter as default };\n\nvar AppointmentFilterBaseStrategy = /*#__PURE__*/function () {\n  function AppointmentFilterBaseStrategy(scheduler) {\n    _classCallCheck(this, AppointmentFilterBaseStrategy);\n\n    this.scheduler = scheduler;\n  }\n\n  _createClass(AppointmentFilterBaseStrategy, [{\n    key: \"workspace\",\n    get: function get() {\n      return this.scheduler.getWorkSpace();\n    }\n  }, {\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this.workspace.viewDataProvider;\n    }\n  }, {\n    key: \"resourcesManager\",\n    get: function get() {\n      return this.scheduler._resourcesManager;\n    }\n  }, {\n    key: \"appointmentModel\",\n    get: function get() {\n      return this.scheduler.getAppointmentModel();\n    }\n  }, {\n    key: \"timeZoneCalculator\",\n    get: function get() {\n      return this.scheduler.timeZoneCalculator;\n    }\n  }, {\n    key: \"viewStartDayHour\",\n    get: function get() {\n      return this.scheduler._getCurrentViewOption(\"startDayHour\");\n    }\n  }, {\n    key: \"viewEndDayHour\",\n    get: function get() {\n      return this.scheduler._getCurrentViewOption(\"endDayHour\");\n    }\n  }, {\n    key: \"firstDayOfWeek\",\n    get: function get() {\n      return this.scheduler.getFirstDayOfWeek();\n    }\n  }, {\n    key: \"recurrenceExceptionGenerator\",\n    get: function get() {\n      return this.scheduler._getRecurrenceException.bind(this.scheduler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      var dateRange = this.workspace.getDateRange();\n      var resources = this.resourcesManager.getResourcesData();\n      var allDay;\n\n      if (!this.scheduler.option(\"showAllDayPanel\") && this.workspace.supportAllDayRow()) {\n        allDay = false;\n      }\n\n      return this.appointmentModel.filterLoadedAppointments({\n        startDayHour: this.viewStartDayHour,\n        endDayHour: this.viewEndDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: dateRange[0],\n        max: dateRange[1],\n        resources: resources,\n        allDay: allDay,\n        firstDayOfWeek: this.firstDayOfWeek,\n        recurrenceException: this.recurrenceExceptionGenerator\n      }, this.timeZoneCalculator);\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments(appointments) {\n      return this.appointmentModel.hasAllDayAppointments(appointments, this.viewStartDayHour, this.viewEndDayHour);\n    }\n  }]);\n\n  return AppointmentFilterBaseStrategy;\n}();\n\nvar AppointmentFilterVirtualStrategy = /*#__PURE__*/function (_AppointmentFilterBas) {\n  _inherits(AppointmentFilterVirtualStrategy, _AppointmentFilterBas);\n\n  var _super = _createSuper(AppointmentFilterVirtualStrategy);\n\n  function AppointmentFilterVirtualStrategy(scheduler) {\n    _classCallCheck(this, AppointmentFilterVirtualStrategy);\n\n    return _super.call(this, scheduler);\n  }\n\n  _createClass(AppointmentFilterVirtualStrategy, [{\n    key: \"filter\",\n    value: function filter() {\n      var _this = this;\n\n      var isCalculateStartAndEndDayHour = this.workspace.isDateAndTimeView;\n      var checkIntersectViewport = this.workspace.isDateAndTimeView && \"horizontal\" === this.workspace.viewDirection;\n      var isAllDayWorkspace = !this.workspace.supportAllDayRow();\n      var showAllDayAppointments = this.scheduler.option(\"showAllDayPanel\") || isAllDayWorkspace;\n      var endViewDate = this.workspace.getEndViewDateByEndDayHour();\n      var filterOptions = [];\n      var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n      groupsInfo.forEach(function (item) {\n        var groupIndex = item.groupIndex;\n        var groupStartDate = item.startDate;\n        var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n        var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : _this.viewStartDayHour;\n        var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / HOUR_MS : _this.viewEndDayHour;\n\n        var resources = _this._getPrerenderFilterResources(groupIndex);\n\n        var allDayPanel = _this.viewDataProvider.getAllDayPanel(groupIndex);\n\n        var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\n        filterOptions.push({\n          isVirtualScrolling: true,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: _this.viewStartDayHour,\n          viewEndDayHour: _this.viewEndDayHour,\n          min: groupStartDate,\n          max: groupEndDate,\n          allDay: supportAllDayAppointment,\n          resources: resources,\n          firstDayOfWeek: _this.firstDayOfWeek,\n          recurrenceException: _this.recurrenceExceptionGenerator,\n          checkIntersectViewport: checkIntersectViewport\n        });\n      });\n      return this.appointmentModel.filterLoadedVirtualAppointments(filterOptions, this.timeZoneCalculator, this.workspace._getGroupCount());\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments() {\n      return this.appointmentModel.filterAllDayAppointments({\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour\n      }).length > 0;\n    }\n  }, {\n    key: \"_getPrerenderFilterResources\",\n    value: function _getPrerenderFilterResources(groupIndex) {\n      var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n      return this.resourcesManager.getResourcesDataByGroups([cellGroup]);\n    }\n  }]);\n\n  return AppointmentFilterVirtualStrategy;\n}(AppointmentFilterBaseStrategy);","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/appointments/appointmentFilter.js"],"names":["dateUtils","toMs","dateToMilliseconds","HOUR_MS","AppointmentFilter","scheduler","isVirtualScrolling","AppointmentFilterVirtualStrategy","AppointmentFilterBaseStrategy","filterStrategy","filter","appointments","hasAllDayAppointments","getWorkSpace","workspace","viewDataProvider","_resourcesManager","getAppointmentModel","timeZoneCalculator","_getCurrentViewOption","getFirstDayOfWeek","_getRecurrenceException","bind","dateRange","getDateRange","resources","resourcesManager","getResourcesData","allDay","option","supportAllDayRow","appointmentModel","filterLoadedAppointments","startDayHour","viewStartDayHour","endDayHour","viewEndDayHour","min","max","firstDayOfWeek","recurrenceException","recurrenceExceptionGenerator","isCalculateStartAndEndDayHour","isDateAndTimeView","checkIntersectViewport","viewDirection","isAllDayWorkspace","showAllDayAppointments","endViewDate","getEndViewDateByEndDayHour","filterOptions","groupsInfo","getCompletedGroupsInfo","forEach","item","groupIndex","groupStartDate","startDate","groupEndDate","Date","Math","endDate","getHours","getMinutes","_getPrerenderFilterResources","allDayPanel","getAllDayPanel","supportAllDayAppointment","length","push","filterLoadedVirtualAppointments","_getGroupCount","filterAllDayAppointments","cellGroup","getCellsGroup","getResourcesDataByGroups"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointmentFilter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar HOUR_MS = toMs(\"hour\");\r\nexport default class AppointmentFilter {\r\n    constructor(scheduler) {\r\n        this.scheduler = scheduler\r\n    }\r\n    get filterStrategy() {\r\n        return this.scheduler.isVirtualScrolling() ? new AppointmentFilterVirtualStrategy(this.scheduler) : new AppointmentFilterBaseStrategy(this.scheduler)\r\n    }\r\n    filter() {\r\n        return this.filterStrategy.filter()\r\n    }\r\n    hasAllDayAppointments(appointments) {\r\n        return this.filterStrategy.hasAllDayAppointments(appointments)\r\n    }\r\n}\r\nclass AppointmentFilterBaseStrategy {\r\n    constructor(scheduler) {\r\n        this.scheduler = scheduler\r\n    }\r\n    get workspace() {\r\n        return this.scheduler.getWorkSpace()\r\n    }\r\n    get viewDataProvider() {\r\n        return this.workspace.viewDataProvider\r\n    }\r\n    get resourcesManager() {\r\n        return this.scheduler._resourcesManager\r\n    }\r\n    get appointmentModel() {\r\n        return this.scheduler.getAppointmentModel()\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.scheduler.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.scheduler._getCurrentViewOption(\"startDayHour\")\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.scheduler._getCurrentViewOption(\"endDayHour\")\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.scheduler.getFirstDayOfWeek()\r\n    }\r\n    get recurrenceExceptionGenerator() {\r\n        return this.scheduler._getRecurrenceException.bind(this.scheduler)\r\n    }\r\n    filter() {\r\n        var dateRange = this.workspace.getDateRange();\r\n        var resources = this.resourcesManager.getResourcesData();\r\n        var allDay;\r\n        if (!this.scheduler.option(\"showAllDayPanel\") && this.workspace.supportAllDayRow()) {\r\n            allDay = false\r\n        }\r\n        return this.appointmentModel.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: resources,\r\n            allDay: allDay,\r\n            firstDayOfWeek: this.firstDayOfWeek,\r\n            recurrenceException: this.recurrenceExceptionGenerator\r\n        }, this.timeZoneCalculator)\r\n    }\r\n    hasAllDayAppointments(appointments) {\r\n        return this.appointmentModel.hasAllDayAppointments(appointments, this.viewStartDayHour, this.viewEndDayHour)\r\n    }\r\n}\r\nclass AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    constructor(scheduler) {\r\n        super(scheduler)\r\n    }\r\n    filter() {\r\n        var isCalculateStartAndEndDayHour = this.workspace.isDateAndTimeView;\r\n        var checkIntersectViewport = this.workspace.isDateAndTimeView && \"horizontal\" === this.workspace.viewDirection;\r\n        var isAllDayWorkspace = !this.workspace.supportAllDayRow();\r\n        var showAllDayAppointments = this.scheduler.option(\"showAllDayPanel\") || isAllDayWorkspace;\r\n        var endViewDate = this.workspace.getEndViewDateByEndDayHour();\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var groupIndex = item.groupIndex;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / HOUR_MS : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var allDayPanel = this.viewDataProvider.getAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                recurrenceException: this.recurrenceExceptionGenerator,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.appointmentModel.filterLoadedVirtualAppointments(filterOptions, this.timeZoneCalculator, this.workspace._getGroupCount())\r\n    }\r\n    hasAllDayAppointments() {\r\n        return this.appointmentModel.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return this.resourcesManager.getResourcesDataByGroups([cellGroup])\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}