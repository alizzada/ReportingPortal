{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\nimport { cache } from \"./cache\";\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\n\nvar VerticalGroupedStrategy = /*#__PURE__*/function (_GroupedStrategy) {\n  _inherits(VerticalGroupedStrategy, _GroupedStrategy);\n\n  var _super = _createSuper(VerticalGroupedStrategy);\n\n  function VerticalGroupedStrategy() {\n    _classCallCheck(this, VerticalGroupedStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VerticalGroupedStrategy, [{\n    key: \"prepareCellIndexes\",\n    value: function prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n      var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        rowIndex += groupIndex;\n\n        if (!inAllDayRow) {\n          rowIndex += 1;\n        }\n      }\n\n      return {\n        rowIndex: rowIndex,\n        cellIndex: cellCoordinates.cellIndex\n      };\n    }\n  }, {\n    key: \"calculateCellIndex\",\n    value: function calculateCellIndex(rowIndex, cellIndex) {\n      rowIndex %= this._workSpace._getRowCount();\n      return this._workSpace._getRowCount() * cellIndex + rowIndex;\n    }\n  }, {\n    key: \"getGroupIndex\",\n    value: function getGroupIndex(rowIndex) {\n      return Math.floor(rowIndex / this._workSpace._getRowCount());\n    }\n  }, {\n    key: \"calculateHeaderCellRepeatCount\",\n    value: function calculateHeaderCellRepeatCount() {\n      return 1;\n    }\n  }, {\n    key: \"insertAllDayRowsIntoDateTable\",\n    value: function insertAllDayRowsIntoDateTable() {\n      return this._workSpace.option(\"showAllDayPanel\");\n    }\n  }, {\n    key: \"getTotalCellCount\",\n    value: function getTotalCellCount() {\n      return this._workSpace._getCellCount();\n    }\n  }, {\n    key: \"getTotalRowCount\",\n    value: function getTotalRowCount() {\n      return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n    }\n  }, {\n    key: \"addAdditionalGroupCellClasses\",\n    value: function addAdditionalGroupCellClasses(cellClass, index, i, j) {\n      cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n      return this._addFirstGroupCellClass(cellClass, i + 1);\n    }\n  }, {\n    key: \"_addLastGroupCellClass\",\n    value: function _addLastGroupCellClass(cellClass, index) {\n      if (index % this._workSpace._getRowCount() === 0) {\n        return cellClass + \" \" + this.getLastGroupCellClass();\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"_addFirstGroupCellClass\",\n    value: function _addFirstGroupCellClass(cellClass, index) {\n      if ((index - 1) % this._workSpace._getRowCount() === 0) {\n        return cellClass + \" \" + this.getFirstGroupCellClass();\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"getHorizontalMax\",\n    value: function getHorizontalMax(groupIndex) {\n      if (this._workSpace.isRenovatedRender()) {\n        return this._workSpace.getMaxAllowedPosition(groupIndex);\n      }\n\n      return this._workSpace.getMaxAllowedPosition(0);\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(groupIndex) {\n      var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition(groupIndex);\n\n      maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\n      return maxAllowedPosition;\n    }\n  }, {\n    key: \"_getOffsetByAllDayPanel\",\n    value: function _getOffsetByAllDayPanel(groupIndex) {\n      var result = 0;\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        result = this._workSpace.getAllDayHeight() * (groupIndex + 1);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getGroupTop\",\n    value: function _getGroupTop(groupIndex) {\n      var workspace = this._workSpace;\n      var rowCount = workspace.isVirtualScrolling() ? workspace.viewDataProvider.getRowCountInGroup(groupIndex) : workspace._getRowCount();\n      return workspace.getMaxAllowedVerticalPosition(groupIndex) - workspace.getCellHeight() * rowCount;\n    }\n  }, {\n    key: \"calculateTimeCellRepeatCount\",\n    value: function calculateTimeCellRepeatCount() {\n      return this._workSpace._getGroupCount() || 1;\n    }\n  }, {\n    key: \"getWorkSpaceMinWidth\",\n    value: function getWorkSpaceMinWidth() {\n      var minWidth = this._workSpace._getWorkSpaceWidth();\n\n      var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n      if (minWidth < workspaceContainerWidth) {\n        minWidth = workspaceContainerWidth;\n      }\n\n      return minWidth;\n    }\n  }, {\n    key: \"getAllDayOffset\",\n    value: function getAllDayOffset() {\n      return 0;\n    }\n  }, {\n    key: \"getAllDayTableHeight\",\n    value: function getAllDayTableHeight() {\n      return 0;\n    }\n  }, {\n    key: \"getGroupCountAttr\",\n    value: function getGroupCountAttr(groups) {\n      return {\n        attr: VERTICAL_GROUPED_ATTR,\n        count: null === groups || void 0 === groups ? void 0 : groups.length\n      };\n    }\n  }, {\n    key: \"getLeftOffset\",\n    value: function getLeftOffset() {\n      return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n    }\n  }, {\n    key: \"getGroupBoundsOffset\",\n    value: function getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n      var _this = this;\n\n      return cache.get(\"groupBoundsOffset\", function () {\n        var groupIndex = coordinates.groupIndex;\n        var startOffset = $cells.eq(0).offset().left;\n        var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\n\n        var dayHeight = _this._workSpace._calculateDayDuration() / _this._workSpace.option(\"hoursInterval\") * _this._workSpace.getCellHeight();\n\n        var scrollTop = _this.getScrollableScrollTop();\n\n        var topOffset = groupIndex * dayHeight + getBoundingRect(_this._workSpace._$thead.get(0)).height + _this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\n\n        if (_this._workSpace.option(\"showAllDayPanel\") && _this._workSpace.supportAllDayRow()) {\n          topOffset += _this._workSpace.getCellHeight() * (groupIndex + 1);\n        }\n\n        var bottomOffset = topOffset + dayHeight;\n        return _this._groupBoundsOffset = {\n          left: startOffset,\n          right: endOffset,\n          top: topOffset,\n          bottom: bottomOffset\n        };\n      });\n    }\n  }, {\n    key: \"getVirtualScrollingGroupBoundsOffset\",\n    value: function getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n      return this.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates);\n    }\n  }, {\n    key: \"shiftIndicator\",\n    value: function shiftIndicator($indicator, height, rtlOffset, i) {\n      var offset = this._workSpace.getIndicatorOffset(0);\n\n      var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n      var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n      var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n      }\n\n      $indicator.css(\"left\", horizontalOffset + tableOffset);\n      $indicator.css(\"top\", height + verticalOffset);\n    }\n  }, {\n    key: \"getShaderOffset\",\n    value: function getShaderOffset(i, width) {\n      var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n      return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n    }\n  }, {\n    key: \"getShaderTopOffset\",\n    value: function getShaderTopOffset(i) {\n      return 0;\n    }\n  }, {\n    key: \"getShaderHeight\",\n    value: function getShaderHeight() {\n      var height = this._workSpace.getIndicationHeight();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        height += this._workSpace.getCellHeight();\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getShaderMaxHeight\",\n    value: function getShaderMaxHeight() {\n      var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        height += this._workSpace.getCellHeight();\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getShaderWidth\",\n    value: function getShaderWidth() {\n      return this._workSpace.getIndicationWidth(0);\n    }\n  }, {\n    key: \"getScrollableScrollTop\",\n    value: function getScrollableScrollTop() {\n      return this._workSpace.getScrollable().scrollTop();\n    }\n  }, {\n    key: \"getGroupIndexByCell\",\n    value: function getGroupIndexByCell($cell) {\n      var rowIndex = $cell.parent().index();\n\n      var rowCount = this._workSpace._getRowCountWithAllDayRows();\n\n      return Math.ceil((rowIndex + 1) / rowCount);\n    }\n  }]);\n\n  return VerticalGroupedStrategy;\n}(GroupedStrategy);\n\nexport default VerticalGroupedStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js"],"names":["getBoundingRect","GroupedStrategy","cache","VERTICAL_GROUPED_ATTR","DATE_HEADER_OFFSET","WORK_SPACE_BORDER","VerticalGroupedStrategy","cellCoordinates","groupIndex","inAllDayRow","rowIndex","_workSpace","_getRowCount","supportAllDayRow","option","cellIndex","Math","floor","_getCellCount","_getGroupCount","cellClass","index","i","j","_addLastGroupCellClass","_addFirstGroupCellClass","getLastGroupCellClass","getFirstGroupCellClass","isRenovatedRender","getMaxAllowedPosition","maxAllowedPosition","getMaxAllowedVerticalPosition","_getOffsetByAllDayPanel","result","getAllDayHeight","workspace","rowCount","isVirtualScrolling","viewDataProvider","getRowCountInGroup","getCellHeight","minWidth","_getWorkSpaceWidth","workspaceContainerWidth","$element","get","width","getTimePanelWidth","getGroupTableWidth","groups","attr","count","length","cellCount","$cells","cellWidth","coordinates","startOffset","eq","offset","left","endOffset","dayHeight","_calculateDayDuration","scrollTop","getScrollableScrollTop","topOffset","_$thead","height","invoke","bottomOffset","_groupBoundsOffset","right","top","bottom","getGroupBoundsOffset","$indicator","rtlOffset","getIndicatorOffset","tableOffset","horizontalOffset","verticalOffset","css","_$container","getWorkSpaceLeftOffset","getIndicationHeight","getIndicationWidth","getScrollable","$cell","parent","_getRowCountWithAllDayRows","ceil"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\r\nimport {\r\n    cache\r\n} from \"./cache\";\r\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\r\nvar DATE_HEADER_OFFSET = 10;\r\nvar WORK_SPACE_BORDER = 1;\r\nclass VerticalGroupedStrategy extends GroupedStrategy {\r\n    prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            rowIndex += groupIndex;\r\n            if (!inAllDayRow) {\r\n                rowIndex += 1\r\n            }\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellCoordinates.cellIndex\r\n        }\r\n    }\r\n    calculateCellIndex(rowIndex, cellIndex) {\r\n        rowIndex %= this._workSpace._getRowCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    }\r\n    getGroupIndex(rowIndex) {\r\n        return Math.floor(rowIndex / this._workSpace._getRowCount())\r\n    }\r\n    calculateHeaderCellRepeatCount() {\r\n        return 1\r\n    }\r\n    insertAllDayRowsIntoDateTable() {\r\n        return this._workSpace.option(\"showAllDayPanel\")\r\n    }\r\n    getTotalCellCount() {\r\n        return this._workSpace._getCellCount()\r\n    }\r\n    getTotalRowCount() {\r\n        return this._workSpace._getRowCount() * this._workSpace._getGroupCount()\r\n    }\r\n    addAdditionalGroupCellClasses(cellClass, index, i, j) {\r\n        cellClass = this._addLastGroupCellClass(cellClass, i + 1);\r\n        return this._addFirstGroupCellClass(cellClass, i + 1)\r\n    }\r\n    _addLastGroupCellClass(cellClass, index) {\r\n        if (index % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getLastGroupCellClass()\r\n        }\r\n        return cellClass\r\n    }\r\n    _addFirstGroupCellClass(cellClass, index) {\r\n        if ((index - 1) % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getFirstGroupCellClass()\r\n        }\r\n        return cellClass\r\n    }\r\n    getHorizontalMax(groupIndex) {\r\n        if (this._workSpace.isRenovatedRender()) {\r\n            return this._workSpace.getMaxAllowedPosition(groupIndex)\r\n        }\r\n        return this._workSpace.getMaxAllowedPosition(0)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition(groupIndex);\r\n        maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\r\n        return maxAllowedPosition\r\n    }\r\n    _getOffsetByAllDayPanel(groupIndex) {\r\n        var result = 0;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            result = this._workSpace.getAllDayHeight() * (groupIndex + 1)\r\n        }\r\n        return result\r\n    }\r\n    _getGroupTop(groupIndex) {\r\n        var workspace = this._workSpace;\r\n        var rowCount = workspace.isVirtualScrolling() ? workspace.viewDataProvider.getRowCountInGroup(groupIndex) : workspace._getRowCount();\r\n        return workspace.getMaxAllowedVerticalPosition(groupIndex) - workspace.getCellHeight() * rowCount\r\n    }\r\n    calculateTimeCellRepeatCount() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        var minWidth = this._workSpace._getWorkSpaceWidth();\r\n        var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\r\n        if (minWidth < workspaceContainerWidth) {\r\n            minWidth = workspaceContainerWidth\r\n        }\r\n        return minWidth\r\n    }\r\n    getAllDayOffset() {\r\n        return 0\r\n    }\r\n    getAllDayTableHeight() {\r\n        return 0\r\n    }\r\n    getGroupCountAttr(groups) {\r\n        return {\r\n            attr: VERTICAL_GROUPED_ATTR,\r\n            count: null === groups || void 0 === groups ? void 0 : groups.length\r\n        }\r\n    }\r\n    getLeftOffset() {\r\n        return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth()\r\n    }\r\n    getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        return cache.get(\"groupBoundsOffset\", () => {\r\n            var groupIndex = coordinates.groupIndex;\r\n            var startOffset = $cells.eq(0).offset().left;\r\n            var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\r\n            var dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight();\r\n            var scrollTop = this.getScrollableScrollTop();\r\n            var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\r\n            if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\r\n                topOffset += this._workSpace.getCellHeight() * (groupIndex + 1)\r\n            }\r\n            var bottomOffset = topOffset + dayHeight;\r\n            return this._groupBoundsOffset = {\r\n                left: startOffset,\r\n                right: endOffset,\r\n                top: topOffset,\r\n                bottom: bottomOffset\r\n            }\r\n        })\r\n    }\r\n    getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        return this.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates)\r\n    }\r\n    shiftIndicator($indicator, height, rtlOffset, i) {\r\n        var offset = this._workSpace.getIndicatorOffset(0);\r\n        var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            verticalOffset += this._workSpace.getAllDayHeight() * (i + 1)\r\n        }\r\n        $indicator.css(\"left\", horizontalOffset + tableOffset);\r\n        $indicator.css(\"top\", height + verticalOffset)\r\n    }\r\n    getShaderOffset(i, width) {\r\n        var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset\r\n    }\r\n    getShaderTopOffset(i) {\r\n        return 0\r\n    }\r\n    getShaderHeight() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderMaxHeight() {\r\n        var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderWidth() {\r\n        return this._workSpace.getIndicationWidth(0)\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._workSpace.getScrollable().scrollTop()\r\n    }\r\n    getGroupIndexByCell($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        var rowCount = this._workSpace._getRowCountWithAllDayRows();\r\n        return Math.ceil((rowIndex + 1) / rowCount)\r\n    }\r\n}\r\nexport default VerticalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"module"}