{"ast":null,"code":"import _defineProperty from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { data as elementData } from \"../../../core/element_data\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getBoundingRect, getElementsFromPoint } from \"../../../core/utils/position\";\nimport messageLocalization from \"../../../localization/message\";\nimport dateLocalization from \"../../../localization/date\";\nimport { noop } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace, isMouseEvent } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport errors from \"../../widget/ui.errors\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { name as contextMenuEventName } from \"../../../events/contextmenu\";\nimport { enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../../events/drag\";\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\nimport tableCreatorModule from \"../table_creator\";\nvar tableCreator = tableCreatorModule.tableCreator;\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\nimport { APPOINTMENT_SETTINGS_KEY, FIXED_CONTAINER_CLASS, VIRTUAL_CELL_CLASS } from \"../constants\";\nimport timeZoneUtils from \"../utils.timeZone\";\nimport WidgetObserver from \"../base/widgetObserver\";\nimport { resetPosition, locate } from \"../../../animation/translator\";\nimport VirtualScrollingDispatcher from \"./ui.scheduler.virtual_scrolling\";\nimport ViewDataProvider from \"./view_data_provider\";\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport VirtualSelectionState from \"./virtual_selection_state\";\nimport { cache } from \"./cache\";\nvar abstract = WidgetObserver.abstract;\nvar toMs = dateUtils.dateToMilliseconds;\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\nvar TIME_PANEL_CLASS = \"dx-scheduler-time-panel\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\nvar ALL_DAY_TITLE_HIDDEN_CLASS = \"dx-scheduler-all-day-title-hidden\";\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar GROUP_ROW_CLASS = \"dx-scheduler-group-row\";\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\nvar GROUP_HEADER_CONTENT_CLASS = \"dx-scheduler-group-header-content\";\nvar DATE_TABLE_CLASS = \"dx-scheduler-date-table\";\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\nvar DATE_TABLE_ROW_CLASS = \"dx-scheduler-date-table-row\";\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\nvar DragEventNames = {\n  ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\n  DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\n  LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\n};\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\nvar CELL_DATA = \"dxCellData\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\nvar DAY_MS = toMs(\"day\");\nvar HOUR_MS = toMs(\"hour\");\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\n\nvar ScrollSemaphore = /*#__PURE__*/function () {\n  function ScrollSemaphore() {\n    _classCallCheck(this, ScrollSemaphore);\n\n    this.counter = 0;\n  }\n\n  _createClass(ScrollSemaphore, [{\n    key: \"isFree\",\n    value: function isFree() {\n      return 0 === this.counter;\n    }\n  }, {\n    key: \"take\",\n    value: function take() {\n      this.counter++;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      this.counter--;\n\n      if (this.counter < 0) {\n        this.counter = 0;\n      }\n    }\n  }]);\n\n  return ScrollSemaphore;\n}();\n\nvar formatWeekday = function formatWeekday(date) {\n  return dateLocalization.getDayNames(\"abbreviated\")[date.getDay()];\n};\n\nvar SchedulerWorkSpace = /*#__PURE__*/function (_WidgetObserver) {\n  _inherits(SchedulerWorkSpace, _WidgetObserver);\n\n  var _super = _createSuper(SchedulerWorkSpace);\n\n  function SchedulerWorkSpace() {\n    _classCallCheck(this, SchedulerWorkSpace);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpace, [{\n    key: \"viewDataProvider\",\n    get: function get() {\n      if (!this._viewDataProvider) {\n        this._viewDataProvider = new ViewDataProvider(this);\n      }\n\n      return this._viewDataProvider;\n    }\n  }, {\n    key: \"cache\",\n    get: function get() {\n      return cache;\n    }\n  }, {\n    key: \"virtualSelectionState\",\n    get: function get() {\n      if (!this._virtualSelectionState) {\n        this._virtualSelectionState = new VirtualSelectionState(this.viewDataProvider);\n      }\n\n      return this._virtualSelectionState;\n    }\n  }, {\n    key: \"isAllDayPanelVisible\",\n    get: function get() {\n      return this._isShowAllDayPanel() && this.supportAllDayRow();\n    }\n  }, {\n    key: \"isDateAndTimeView\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"verticalGroupTableClass\",\n    get: function get() {\n      return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS;\n    }\n  }, {\n    key: \"viewDirection\",\n    get: function get() {\n      return \"vertical\";\n    }\n  }, {\n    key: \"renovatedHeaderPanelComponent\",\n    get: function get() {\n      return dxrDateHeader;\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var clickHandler = function clickHandler(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (this._selectedCells && this._selectedCells.length) {\n          var $itemElement = $(this.option(\"focusedElement\"));\n          var $cellElement = $($itemElement.length ? $itemElement : this._selectedCells);\n          e.target = this._selectedCells;\n          this._showPopup = true;\n\n          this._cellClickAction({\n            event: e,\n            cellElement: $(this._selectedCells),\n            cellData: this.getCellData($cellElement)\n          });\n        }\n      };\n\n      var arrowPressHandler = function arrowPressHandler(e, cell) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._moveToCell(cell, e.shiftKey);\n      };\n\n      return extend(_get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_supportedKeys\", this).call(this), {\n        enter: clickHandler,\n        space: clickHandler,\n        downArrow: function downArrow(e) {\n          var $cell = this._getCellFromNextRow(\"next\", e.shiftKey);\n\n          arrowPressHandler.call(this, e, $cell);\n        },\n        upArrow: function upArrow(e) {\n          var $cell = this._getCellFromNextRow(\"prev\", e.shiftKey);\n\n          arrowPressHandler.call(this, e, $cell);\n        },\n        rightArrow: function rightArrow(e) {\n          var $rightCell = this._getCellFromNextColumn(\"next\", e.shiftKey);\n\n          arrowPressHandler.call(this, e, $rightCell);\n        },\n        leftArrow: function leftArrow(e) {\n          var $leftCell = this._getCellFromNextColumn(\"prev\", e.shiftKey);\n\n          arrowPressHandler.call(this, e, $leftCell);\n        }\n      });\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      var _this$virtualScrollin;\n\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_dispose\", this).call(this);\n\n      null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.dispose();\n    }\n  }, {\n    key: \"_isRTL\",\n    value: function _isRTL() {\n      return this.option(\"rtlEnabled\");\n    }\n  }, {\n    key: \"_getFocusedCell\",\n    value: function _getFocusedCell() {\n      return this._$focusedCell || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0);\n    }\n  }, {\n    key: \"_getAllFocusedCells\",\n    value: function _getAllFocusedCells() {\n      return this._selectedCells || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0);\n    }\n  }, {\n    key: \"_getCellFromNextRow\",\n    value: function _getCellFromNextRow(direction) {\n      var $currentCell = this._$focusedCell;\n\n      if (isDefined($currentCell)) {\n        var cellIndex = $currentCell.index();\n        var $row = $currentCell.parent();\n        var $cell = $row[direction]().children().eq(cellIndex);\n        $cell = this._checkForViewBounds($cell);\n        return $cell;\n      }\n    }\n  }, {\n    key: \"_checkForViewBounds\",\n    value: function _checkForViewBounds($item) {\n      if (!$item.length) {\n        $item = this._$focusedCell;\n      }\n\n      return $item;\n    }\n  }, {\n    key: \"_getCellFromNextColumn\",\n    value: function _getCellFromNextColumn(direction, isMultiSelection) {\n      var $focusedCell = this._$focusedCell;\n\n      if (!isDefined($focusedCell)) {\n        return;\n      }\n\n      var $nextCell;\n      var $row = $focusedCell.parent();\n      var nextColumnDirection = direction;\n      var isDirectionNext = \"next\" === direction;\n      var previousColumnDirection = isDirectionNext ? \"prev\" : \"next\";\n\n      var isRTL = this._isRTL();\n\n      var groupCount = this._getGroupCount();\n\n      var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\n\n      var isGroupedByDate = this.isGroupedByDate();\n\n      var totalCellCount = this._getTotalCellCount(groupCount);\n\n      var rowCellCount = isMultiSelection && !isGroupedByDate ? this._getCellCount() : totalCellCount;\n      var lastIndexInRow = rowCellCount - 1;\n      var currentIndex = $focusedCell.index();\n      var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\n\n      var isEdgeCell = this._isEdgeCell(isHorizontalGrouping ? totalCellCount - 1 : lastIndexInRow, currentIndex, step, direction);\n\n      var sign = isRTL ? 1 : -1;\n      var directionSign = isDirectionNext ? 1 : -1;\n      var resultingSign = sign * directionSign;\n\n      if (isEdgeCell || isMultiSelection && this._isGroupEndCell($focusedCell, direction)) {\n        var nextIndex = currentIndex - resultingSign * step + resultingSign * rowCellCount;\n        var rowDirection = isRTL ? previousColumnDirection : nextColumnDirection;\n        $nextCell = $row[rowDirection]().children().eq(nextIndex);\n        $nextCell = this._checkForViewBounds($nextCell);\n      } else {\n        $nextCell = $row.children().eq(currentIndex - resultingSign * step);\n      }\n\n      return $nextCell;\n    }\n  }, {\n    key: \"_isEdgeCell\",\n    value: function _isEdgeCell(lastIndexInRow, cellIndex, step, direction) {\n      var isRTL = this._isRTL();\n\n      var isDirectionNext = \"next\" === direction;\n      var rightEdgeCellIndex = isRTL ? 0 : lastIndexInRow;\n      var leftEdgeCellIndex = isRTL ? lastIndexInRow : 0;\n      var edgeCellIndex = isDirectionNext ? rightEdgeCellIndex : leftEdgeCellIndex;\n      var isNextCellGreaterThanEdge = cellIndex + step > edgeCellIndex;\n      var isNextCellLessThanEdge = cellIndex - step < edgeCellIndex;\n      var isRightEdgeCell = isRTL ? isNextCellLessThanEdge : isNextCellGreaterThanEdge;\n      var isLeftEdgeCell = isRTL ? isNextCellGreaterThanEdge : isNextCellLessThanEdge;\n      return isDirectionNext ? isRightEdgeCell : isLeftEdgeCell;\n    }\n  }, {\n    key: \"_isGroupEndCell\",\n    value: function _isGroupEndCell($cell, direction) {\n      if (this.isGroupedByDate()) {\n        return false;\n      }\n\n      var isDirectionNext = \"next\" === direction;\n\n      var cellsInRow = this._getCellCount();\n\n      var currentCellIndex = $cell.index();\n      var result = currentCellIndex % cellsInRow;\n      var endCell = isDirectionNext ? cellsInRow - 1 : 0;\n      var startCell = isDirectionNext ? 0 : cellsInRow - 1;\n      return this._isRTL() ? result === startCell : result === endCell;\n    }\n  }, {\n    key: \"_moveToCell\",\n    value: function _moveToCell($cell, isMultiSelection) {\n      isMultiSelection = isMultiSelection && this.option(\"allowMultipleCellSelection\");\n\n      this._setSelectedAndFocusedCells($cell, isMultiSelection);\n\n      this._dateTableScrollable.scrollToElement($cell);\n    }\n  }, {\n    key: \"_setSelectedAndFocusedCells\",\n    value: function _setSelectedAndFocusedCells($cell, isMultiSelection) {\n      if (!isDefined($cell) || !$cell.length) {\n        return;\n      }\n\n      var updateViewData = this.isVirtualScrolling();\n      var $correctedCell = $cell;\n\n      if (isMultiSelection) {\n        $correctedCell = this._correctCellForGroup($cell);\n      }\n\n      if ($correctedCell.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n        return;\n      }\n\n      this._setSelectedCells($correctedCell, isMultiSelection);\n\n      this._setFocusedCell($correctedCell, updateViewData);\n    }\n  }, {\n    key: \"_setFocusedCell\",\n    value: function _setFocusedCell($cell) {\n      var updateViewData = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n\n      this._releaseFocusedCell();\n\n      var $correctedCell = $cell;\n\n      if (updateViewData) {\n        var _this$_getCoordinates = this._getCoordinatesByCell($cell),\n            rowIndex = _this$_getCoordinates.rowIndex,\n            columnIndex = _this$_getCoordinates.columnIndex;\n\n        var isAllDayCell = this._hasAllDayClass($cell);\n\n        this.virtualSelectionState.setFocusedCell(rowIndex, columnIndex, isAllDayCell);\n        var focusedCell = this.virtualSelectionState.getFocusedCell();\n        var cellData = focusedCell.cellData,\n            coordinates = focusedCell.coordinates;\n        var allDay = cellData.allDay;\n        $correctedCell = allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\n      }\n\n      this._toggleFocusedCellClass(true, $correctedCell);\n\n      this._$focusedCell = $correctedCell;\n    }\n  }, {\n    key: \"_setSelectedCells\",\n    value: function _setSelectedCells($firstCell, isMultiSelection) {\n      this._releaseSelectedCells();\n\n      this._selectedCells = [];\n\n      if (this.isVirtualScrolling()) {\n        this._setSelectedCellsInVirtualMode($firstCell, isMultiSelection);\n      } else {\n        this._setSelectedCellsInStandardMode($firstCell, isMultiSelection);\n      }\n\n      var $selectedCells = $(this._selectedCells);\n\n      this._toggleFocusClass(true, $selectedCells);\n\n      this.setAria(\"label\", \"Add appointment\", $selectedCells);\n      var selectedCellData = this.getSelectedCellData().map(function (_ref) {\n        var startDate = _ref.startDate,\n            endDate = _ref.endDate,\n            allDay = _ref.allDay,\n            groups = _ref.groups,\n            groupIndex = _ref.groupIndex;\n        return {\n          startDate: startDate,\n          endDate: endDate,\n          allDay: allDay,\n          groups: groups,\n          groupIndex: groupIndex || 0\n        };\n      });\n      this.option(\"selectedCellData\", selectedCellData);\n\n      this._selectionChangedAction({\n        selectedCellData: selectedCellData\n      });\n    }\n  }, {\n    key: \"_setSelectedCellsInStandardMode\",\n    value: function _setSelectedCellsInStandardMode($firstCell, isMultiSelection) {\n      if (isMultiSelection) {\n        var $previousCell = this._$prevCell;\n        var orientation = \"day\" === this.option(\"type\") && (!this.option(\"groups\").length || \"vertical\" === this.option(\"groupOrientation\")) ? \"vertical\" : \"horizontal\";\n\n        var $targetCells = this._getCellsBetween($firstCell, $previousCell, orientation);\n\n        this._selectedCells = $targetCells.toArray();\n      } else {\n        this._selectedCells = [$firstCell.get(0)];\n        this._$prevCell = $firstCell;\n      }\n    }\n  }, {\n    key: \"_setSelectedCellsInVirtualMode\",\n    value: function _setSelectedCellsInVirtualMode($firstCell, isMultiSelection) {\n      if (isMultiSelection) {\n        var _this$_getCoordinates2 = this._getCoordinatesByCell($firstCell),\n            firstRow = _this$_getCoordinates2.rowIndex,\n            firstColumn = _this$_getCoordinates2.columnIndex;\n\n        var isFirstAllDay = this._hasAllDayClass($firstCell);\n\n        var firstCell = {\n          rowIndex: firstRow,\n          columnIndex: firstColumn,\n          allDay: isFirstAllDay\n        };\n        this.virtualSelectionState.setSelectedCells(firstCell);\n      } else {\n        this._selectedCells = [$firstCell.get(0)];\n        this._$prevCell = $firstCell;\n\n        var _this$_getCoordinates3 = this._getCoordinatesByCell($firstCell),\n            rowIndex = _this$_getCoordinates3.rowIndex,\n            columnIndex = _this$_getCoordinates3.columnIndex;\n\n        var isAllDayCell = this._hasAllDayClass($firstCell);\n\n        var _firstCell = {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          allDay: isAllDayCell\n        };\n        this.virtualSelectionState.setSelectedCells(_firstCell, _firstCell);\n      }\n\n      this._setSelectedCellsByCellData(this.virtualSelectionState.getSelectedCells());\n    }\n  }, {\n    key: \"_correctCellForGroup\",\n    value: function _correctCellForGroup($cell) {\n      if (this.isVirtualScrolling()) {\n        var isVirtualCell = $cell.hasClass(VIRTUAL_CELL_CLASS);\n\n        if (isVirtualCell) {\n          return this._$focusedCell;\n        }\n\n        var cellData = this.getCellData($cell);\n        var isValidFocusedCell = this.virtualSelectionState.isValidFocusedCell(cellData);\n        return isValidFocusedCell ? $cell : this._$focusedCell;\n      }\n\n      var $focusedCell = this._$focusedCell;\n\n      var cellGroupIndex = this._getGroupIndexByCell($cell);\n\n      var focusedCellGroupIndex = this._getGroupIndexByCell($focusedCell);\n\n      var isDifferentTables = this._hasAllDayClass($cell) !== this._hasAllDayClass($focusedCell);\n\n      return focusedCellGroupIndex !== cellGroupIndex || isDifferentTables ? $focusedCell : $cell;\n    }\n  }, {\n    key: \"_getCellsBetween\",\n    value: function _getCellsBetween($first, $last, direction) {\n      var isAllDayTable = this._hasAllDayClass($last);\n\n      var $cells = this._getCells(isAllDayTable, direction);\n\n      var firstIndex = $cells.index($first);\n      var lastIndex = $cells.index($last);\n\n      if (firstIndex > lastIndex) {\n        var buffer = firstIndex;\n        firstIndex = lastIndex;\n        lastIndex = buffer;\n      }\n\n      $cells = $cells.slice(firstIndex, lastIndex + 1);\n\n      if (this._getGroupCount() > 1) {\n        var result = [];\n\n        var focusedGroupIndex = this._getGroupIndexByCell($first);\n\n        each($cells, function (_, cell) {\n          var groupIndex = this._getGroupIndexByCell($(cell));\n\n          if (focusedGroupIndex === groupIndex) {\n            result.push(cell);\n          }\n        }.bind(this));\n        $cells = $(result);\n      }\n\n      return $cells;\n    }\n  }, {\n    key: \"_hasAllDayClass\",\n    value: function _hasAllDayClass($cell) {\n      return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n    }\n  }, {\n    key: \"_getGroupIndexByCell\",\n    value: function _getGroupIndexByCell($cell) {\n      if (this.isVirtualScrolling()) {\n        var _this$_getCoordinates4 = this._getCoordinatesByCell($cell),\n            rowIndex = _this$_getCoordinates4.rowIndex,\n            columnIndex = _this$_getCoordinates4.columnIndex;\n\n        var isAllDayCell = $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n        return this.viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell).groupIndex;\n      }\n\n      return this._groupedStrategy.getGroupIndexByCell($cell);\n    }\n  }, {\n    key: \"_toggleFocusedCellClass\",\n    value: function _toggleFocusedCellClass(isFocused, $element) {\n      var $focusTarget = $element && $element.length ? $element : this._focusTarget();\n      $focusTarget.toggleClass(DATE_TABLE_FOCUSED_CELL_CLASS, isFocused);\n    }\n  }, {\n    key: \"_releaseSelectedAndFocusedCells\",\n    value: function _releaseSelectedAndFocusedCells() {\n      this._releaseFocusedCell();\n\n      this._releaseSelectedCells();\n\n      this.option(\"selectedCellData\", []);\n    }\n  }, {\n    key: \"_releaseFocusedCell\",\n    value: function _releaseFocusedCell() {\n      var $cell = this._$focusedCell;\n\n      if (isDefined($cell) && $cell.length) {\n        this._toggleFocusedCellClass(false, $cell);\n\n        this.setAria(\"label\", void 0, $cell);\n      }\n    }\n  }, {\n    key: \"_releaseSelectedCells\",\n    value: function _releaseSelectedCells() {\n      var $cells = $(this._selectedCells);\n\n      if (isDefined($cells) && $cells.length) {\n        this._toggleFocusClass(false, $cells);\n\n        this.setAria(\"label\", void 0, $cells);\n      }\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function _focusInHandler(e) {\n      if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\n        delete this._isCellClick;\n        delete this._contextMenuHandled;\n\n        _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_focusInHandler\", this).apply(this, arguments);\n\n        var $cell = this._getFocusedCell();\n\n        this._setSelectedAndFocusedCells($cell);\n      }\n    }\n  }, {\n    key: \"_focusOutHandler\",\n    value: function _focusOutHandler() {\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_focusOutHandler\", this).apply(this, arguments);\n\n      if (!this._contextMenuHandled) {\n        var _this$virtualSelectio;\n\n        this._releaseSelectedAndFocusedCells();\n\n        null === (_this$virtualSelectio = this.virtualSelectionState) || void 0 === _this$virtualSelectio ? void 0 : _this$virtualSelectio.releaseSelectedAndFocusedCells();\n      }\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function _focusTarget() {\n      return this.$element();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_getDefaultOptions\", this).call(this), {\n        currentDate: new Date(),\n        intervalCount: 1,\n        startDate: null,\n        firstDayOfWeek: void 0,\n        startDayHour: 0,\n        endDayHour: 24,\n        hoursInterval: .5,\n        activeStateEnabled: true,\n        hoverStateEnabled: true,\n        groups: [],\n        showAllDayPanel: true,\n        allDayExpanded: false,\n        onCellClick: null,\n        crossScrollingEnabled: false,\n        dataCellTemplate: null,\n        timeCellTemplate: null,\n        resourceCellTemplate: null,\n        dateCellTemplate: null,\n        allowMultipleCellSelection: true,\n        indicatorTime: new Date(),\n        indicatorUpdateInterval: 5 * toMs(\"minute\"),\n        shadeUntilCurrentTime: true,\n        groupOrientation: \"horizontal\",\n        selectedCellData: [],\n        groupByDate: false,\n        scrolling: {\n          mode: \"standard\"\n        },\n        renovateRender: true,\n        height: void 0,\n        draggingMode: \"outlook\"\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"startDayHour\":\n        case \"endDayHour\":\n          this.invoke(\"validateDayHours\");\n\n          this._cleanWorkSpace();\n\n          break;\n\n        case \"dateCellTemplate\":\n        case \"resourceCellTemplate\":\n        case \"dataCellTemplate\":\n        case \"timeCellTemplate\":\n        case \"hoursInterval\":\n        case \"firstDayOfWeek\":\n        case \"currentDate\":\n        case \"startDate\":\n          this._cleanWorkSpace();\n\n          break;\n\n        case \"groups\":\n          this._cleanView();\n\n          this._removeAllDayElements();\n\n          this._initGrouping();\n\n          this.repaint();\n          break;\n\n        case \"groupOrientation\":\n          this._initGroupedStrategy();\n\n          this._createAllDayPanelElements();\n\n          this._removeAllDayElements();\n\n          this._cleanWorkSpace();\n\n          this._toggleGroupByDateClass();\n\n          break;\n\n        case \"showAllDayPanel\":\n          if (this._isVerticalGroupedWorkSpace()) {\n            this._cleanView();\n\n            this._removeAllDayElements();\n\n            this._initGrouping();\n\n            this.repaint();\n          } else if (!this.isRenovatedRender()) {\n            this._toggleAllDayVisibility(true);\n          } else {\n            this.renderRWorkspace();\n          }\n\n          break;\n\n        case \"allDayExpanded\":\n          this._changeAllDayVisibility();\n\n          this._attachTablesEvents();\n\n          this.headerPanelOffsetRecalculate();\n\n          this._updateScrollable();\n\n          break;\n\n        case \"onSelectionChanged\":\n          this._createSelectionChangedAction();\n\n          break;\n\n        case \"onCellClick\":\n          this._createCellClickAction();\n\n          break;\n\n        case \"onCellContextMenu\":\n          this._attachContextMenuEvent();\n\n          break;\n\n        case \"intervalCount\":\n          this._cleanWorkSpace();\n\n          this._toggleWorkSpaceCountClass();\n\n          this._toggleFixedScrollableClass();\n\n          break;\n\n        case \"groupByDate\":\n          this._cleanWorkSpace();\n\n          this._toggleGroupByDateClass();\n\n          break;\n\n        case \"crossScrollingEnabled\":\n          this._toggleHorizontalScrollClass();\n\n          this._dateTableScrollable.option(this._dateTableScrollableConfig());\n\n          break;\n\n        case \"width\":\n          _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._dimensionChanged();\n\n          break;\n\n        case \"allowMultipleCellSelection\":\n        case \"selectedCellData\":\n          break;\n\n        case \"scrolling\":\n          if (this._isVirtualModeOn()) {\n            if (!this.option(\"renovateRender\")) {\n              this.option(\"renovateRender\", true);\n            } else {\n              this.repaint();\n            }\n          } else {\n            this.option(\"renovateRender\", false);\n          }\n\n          break;\n\n        case \"renovateRender\":\n          this.repaint();\n          break;\n\n        default:\n          _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_cleanWorkSpace\",\n    value: function _cleanWorkSpace() {\n      var _this$virtualScrollin2;\n\n      this._cleanView();\n\n      this._toggleGroupedClass();\n\n      this._toggleWorkSpaceWithOddCells();\n\n      null === (_this$virtualScrollin2 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin2 ? void 0 : _this$virtualScrollin2.updateDimensions(true);\n\n      this._renderView();\n\n      this.option(\"crossScrollingEnabled\") && this._setTableSizes();\n      this.cache.clear();\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._headerSemaphore = new ScrollSemaphore();\n      this._sideBarSemaphore = new ScrollSemaphore();\n      this._dataTableSemaphore = new ScrollSemaphore();\n      this._viewDataProvider = null;\n      this._virtualSelectionState = null;\n      this._activeStateUnit = CELL_SELECTOR;\n      this._maxAllowedVerticalPosition = [];\n      this._maxAllowedPosition = [];\n\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_init\", this).call(this);\n\n      this._initGrouping();\n\n      this._toggleHorizontalScrollClass();\n\n      this._toggleWorkSpaceCountClass();\n\n      this._toggleGroupByDateClass();\n\n      this._toggleWorkSpaceWithOddCells();\n\n      this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass());\n    }\n  }, {\n    key: \"_initGrouping\",\n    value: function _initGrouping() {\n      this._initGroupedStrategy();\n\n      this._toggleGroupingDirectionClass();\n\n      this._toggleGroupByDateClass();\n    }\n  }, {\n    key: \"_initGroupedStrategy\",\n    value: function _initGroupedStrategy() {\n      var strategyName = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n      var Strategy = \"vertical\" === strategyName ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\n      this._groupedStrategy = new Strategy(this);\n    }\n  }, {\n    key: \"_getDefaultGroupStrategy\",\n    value: function _getDefaultGroupStrategy() {\n      return \"horizontal\";\n    }\n  }, {\n    key: \"_isVerticalGroupedWorkSpace\",\n    value: function _isVerticalGroupedWorkSpace() {\n      return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\");\n    }\n  }, {\n    key: \"_isHorizontalGroupedWorkSpace\",\n    value: function _isHorizontalGroupedWorkSpace() {\n      return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\");\n    }\n  }, {\n    key: \"_toggleHorizontalScrollClass\",\n    value: function _toggleHorizontalScrollClass() {\n      this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"));\n    }\n  }, {\n    key: \"_toggleGroupByDateClass\",\n    value: function _toggleGroupByDateClass() {\n      this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate());\n    }\n  }, {\n    key: \"_toggleWorkSpaceCountClass\",\n    value: function _toggleWorkSpaceCountClass() {\n      this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount());\n    }\n  }, {\n    key: \"_isWorkSpaceWithCount\",\n    value: function _isWorkSpaceWithCount() {\n      return this.option(\"intervalCount\") > 1;\n    }\n  }, {\n    key: \"_toggleWorkSpaceWithOddCells\",\n    value: function _toggleWorkSpaceWithOddCells() {\n      this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells());\n    }\n  }, {\n    key: \"_isWorkspaceWithOddCells\",\n    value: function _isWorkspaceWithOddCells() {\n      return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling();\n    }\n  }, {\n    key: \"_toggleGroupingDirectionClass\",\n    value: function _toggleGroupingDirectionClass() {\n      this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace());\n    }\n  }, {\n    key: \"_getRealGroupOrientation\",\n    value: function _getRealGroupOrientation() {\n      return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\";\n    }\n  }, {\n    key: \"_getTimePanelClass\",\n    value: function _getTimePanelClass() {\n      return TIME_PANEL_CLASS;\n    }\n  }, {\n    key: \"_getDateTableClass\",\n    value: function _getDateTableClass() {\n      return DATE_TABLE_CLASS;\n    }\n  }, {\n    key: \"_getDateTableRowClass\",\n    value: function _getDateTableRowClass() {\n      return DATE_TABLE_ROW_CLASS;\n    }\n  }, {\n    key: \"_getDateTableCellClass\",\n    value: function _getDateTableCellClass(i, j) {\n      var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n      return this._needApplyLastGroupCellClass() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1, i, j) : cellClass;\n    }\n  }, {\n    key: \"_needApplyLastGroupCellClass\",\n    value: function _needApplyLastGroupCellClass() {\n      return true;\n    }\n  }, {\n    key: \"_getGroupRowClass\",\n    value: function _getGroupRowClass() {\n      return GROUP_ROW_CLASS;\n    }\n  }, {\n    key: \"_getGroupHeaderClass\",\n    value: function _getGroupHeaderClass(i) {\n      var cellClass = GROUP_HEADER_CLASS;\n      return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1);\n    }\n  }, {\n    key: \"_getGroupHeaderContentClass\",\n    value: function _getGroupHeaderContentClass() {\n      return GROUP_HEADER_CONTENT_CLASS;\n    }\n  }, {\n    key: \"_initWorkSpaceUnits\",\n    value: function _initWorkSpaceUnits() {\n      this._$headerPanel = $(\"<table>\");\n      this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\n      this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\n      this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\n\n      this._initAllDayPanelElements();\n\n      if (this.isRenovatedRender()) {\n        this.createRAllDayPanelElements();\n      } else {\n        this._createAllDayPanelElements();\n      }\n\n      this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\n      this._$dateTable = $(\"<table>\");\n      this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS);\n    }\n  }, {\n    key: \"_initAllDayPanelElements\",\n    value: function _initAllDayPanelElements() {\n      this._allDayTitles = [];\n      this._allDayTables = [];\n      this._allDayPanels = [];\n    }\n  }, {\n    key: \"createRAllDayPanelElements\",\n    value: function createRAllDayPanelElements() {\n      this._$allDayPanel = $(\"<div>\");\n      this._$allDayTitle = $(\"<div>\").appendTo(this.$element());\n    }\n  }, {\n    key: \"_createAllDayPanelElements\",\n    value: function _createAllDayPanelElements() {\n      var groupCount = this._getGroupCount();\n\n      if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\n        for (var i = 0; i < groupCount; i++) {\n          var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\n\n          this._allDayTitles.push($allDayTitle);\n\n          this._$allDayTable = $(\"<table>\");\n\n          this._allDayTables.push(this._$allDayTable);\n\n          this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n\n          this._allDayPanels.push(this._$allDayPanel);\n        }\n      } else {\n        this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\n        this._$allDayTable = $(\"<table>\");\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n      }\n    }\n  }, {\n    key: \"_initDateTableScrollable\",\n    value: function _initDateTableScrollable() {\n      var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\n      this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\n    }\n  }, {\n    key: \"_dateTableScrollableConfig\",\n    value: function _dateTableScrollableConfig() {\n      var config = {\n        useKeyboard: false,\n        bounceEnabled: false,\n        updateManually: true\n      };\n\n      if (this._needCreateCrossScrolling()) {\n        config = extend(config, this._createCrossScrollingConfig());\n      }\n\n      return config;\n    }\n  }, {\n    key: \"_createCrossScrollingConfig\",\n    value: function _createCrossScrollingConfig() {\n      var _this = this;\n\n      var config = {};\n      config.direction = \"both\";\n\n      config.onScroll = function (e) {\n        _this._dataTableSemaphore.take();\n\n        _this._sideBarSemaphore.isFree() && _this._sidebarScrollable && _this._sidebarScrollable.scrollTo({\n          top: e.scrollOffset.top\n        });\n        _this._headerSemaphore.isFree() && _this._headerScrollable && _this._headerScrollable.scrollTo({\n          left: e.scrollOffset.left\n        });\n\n        _this._dataTableSemaphore.release();\n      };\n\n      config.onEnd = function () {\n        _this.notifyObserver(\"updateResizableArea\", {});\n      };\n\n      return config;\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      if (this.option(\"crossScrollingEnabled\")) {\n        this._createWorkSpaceScrollableElements();\n      } else {\n        this._createWorkSpaceStaticElements();\n      }\n    }\n  }, {\n    key: \"_createWorkSpaceStaticElements\",\n    value: function _createWorkSpaceStaticElements() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this._dateTableScrollable.$content().append(this._$allDayContainer, this._$groupTable, this._$timePanel, this._$dateTable);\n\n        this.$element().append(this._$fixedContainer, this._$headerPanel, this._dateTableScrollable.$element());\n      } else {\n        this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\n\n        this.$element().append(this._$fixedContainer, this._$headerPanel, this._$allDayContainer, this._$allDayPanel, this._dateTableScrollable.$element());\n      }\n    }\n  }, {\n    key: \"_createWorkSpaceScrollableElements\",\n    value: function _createWorkSpaceScrollableElements() {\n      this.$element().append(this._$fixedContainer);\n\n      this._createHeaderScrollable();\n\n      this._createSidebarScrollable();\n\n      this.$element().append(this._dateTableScrollable.$element());\n\n      this._headerScrollable.$content().append(this._$headerPanel);\n\n      this._dateTableScrollable.$content().append(this._$dateTable);\n\n      if (this._isVerticalGroupedWorkSpace()) {\n        this._dateTableScrollable.$content().prepend(this._$allDayContainer);\n\n        this._sidebarScrollable.$content().append(this._$groupTable, this._$timePanel);\n      } else {\n        this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel);\n      }\n\n      this._sidebarScrollable.$content().append(this._$timePanel);\n    }\n  }, {\n    key: \"_createHeaderScrollable\",\n    value: function _createHeaderScrollable() {\n      var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this.$element());\n      this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\n    }\n  }, {\n    key: \"_headerScrollableConfig\",\n    value: function _headerScrollableConfig() {\n      var _this2 = this;\n\n      var config = {\n        useKeyboard: false,\n        showScrollbar: false,\n        direction: \"horizontal\",\n        useNative: false,\n        updateManually: true,\n        bounceEnabled: false,\n        onScroll: function onScroll(e) {\n          _this2._headerSemaphore.take();\n\n          _this2._dataTableSemaphore.isFree() && _this2._dateTableScrollable.scrollTo({\n            left: e.scrollOffset.left\n          });\n\n          _this2._headerSemaphore.release();\n        }\n      };\n      return config;\n    }\n  }, {\n    key: \"_createSidebarScrollable\",\n    value: function _createSidebarScrollable() {\n      var _this3 = this;\n\n      var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this.$element());\n      this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\n        useKeyboard: false,\n        showScrollbar: false,\n        direction: \"vertical\",\n        useNative: false,\n        updateManually: true,\n        bounceEnabled: false,\n        onScroll: function onScroll(e) {\n          _this3._sideBarSemaphore.take();\n\n          _this3._dataTableSemaphore.isFree() && _this3._dateTableScrollable.scrollTo({\n            top: e.scrollOffset.top\n          });\n\n          _this3._sideBarSemaphore.release();\n        }\n      });\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      this.cache.clear();\n\n      if (visible) {\n        this._updateGroupTableHeight();\n      }\n\n      if (visible && this._needCreateCrossScrolling()) {\n        this._setTableSizes();\n      }\n    }\n  }, {\n    key: \"_attachTableClasses\",\n    value: function _attachTableClasses() {\n      this._addTableClass(this._$dateTable, this._getDateTableClass());\n\n      if (this._isVerticalGroupedWorkSpace()) {\n        var groupCount = this._getGroupCount();\n\n        for (var i = 0; i < groupCount; i++) {\n          this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS);\n        }\n      } else {\n        this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS);\n      }\n    }\n  }, {\n    key: \"_attachHeaderTableClasses\",\n    value: function _attachHeaderTableClasses() {\n      this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS);\n    }\n  }, {\n    key: \"_addTableClass\",\n    value: function _addTableClass($el, className) {\n      $el && !$el.hasClass(className) && $el.addClass(className);\n    }\n  }, {\n    key: \"_setTableSizes\",\n    value: function _setTableSizes() {\n      this._attachTableClasses();\n\n      var cellWidth = this.getCellWidth();\n\n      if (cellWidth < this.getCellMinWidth()) {\n        cellWidth = this.getCellMinWidth();\n      }\n\n      var minWidth = this.getWorkSpaceMinWidth();\n\n      var groupCount = this._getGroupCount();\n\n      var totalCellCount = this._getTotalCellCount(groupCount);\n\n      var width = cellWidth * totalCellCount;\n\n      if (width < minWidth) {\n        width = minWidth;\n      }\n\n      this._$headerPanel.width(width);\n\n      this._$dateTable.width(width);\n\n      this._$allDayTable && this._$allDayTable.width(width);\n\n      this._attachHeaderTableClasses();\n\n      this._updateGroupTableHeight();\n    }\n  }, {\n    key: \"getWorkSpaceMinWidth\",\n    value: function getWorkSpaceMinWidth() {\n      return this._groupedStrategy.getWorkSpaceMinWidth();\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged() {\n      if (this.option(\"crossScrollingEnabled\")) {\n        this._setTableSizes();\n      }\n\n      this.headerPanelOffsetRecalculate();\n      this.cache.clear();\n\n      this._cleanAllowedPositions();\n    }\n  }, {\n    key: \"_needCreateCrossScrolling\",\n    value: function _needCreateCrossScrolling() {\n      return this.option(\"crossScrollingEnabled\");\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return noop();\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return noop();\n    }\n  }, {\n    key: \"_getRowCountWithAllDayRows\",\n    value: function _getRowCountWithAllDayRows() {\n      var allDayRowCount = this._isShowAllDayPanel() ? 1 : 0;\n      return this._getRowCount() + allDayRowCount;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return noop();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this.cache.clear();\n\n      this._initWorkSpaceUnits();\n\n      this._initDateTableScrollable();\n\n      this._createWorkSpaceElements();\n\n      this._initVirtualScrolling();\n\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_initMarkup\", this).call(this);\n\n      if (!this.option(\"crossScrollingEnabled\")) {\n        this._attachTableClasses();\n\n        this._attachHeaderTableClasses();\n      }\n\n      this._toggleGroupedClass();\n\n      this._toggleFixedScrollableClass();\n\n      this._renderView();\n\n      this._attachEvents();\n\n      this._setFocusOnCellByOption(this.option(\"selectedCellData\"));\n    }\n  }, {\n    key: \"isRenovatedRender\",\n    value: function isRenovatedRender() {\n      return this.renovatedRenderSupported() && this.option(\"renovateRender\");\n    }\n  }, {\n    key: \"_isVirtualModeOn\",\n    value: function _isVirtualModeOn() {\n      return \"virtual\" === this.option(\"scrolling.mode\");\n    }\n  }, {\n    key: \"isVirtualScrolling\",\n    value: function isVirtualScrolling() {\n      return this.isRenovatedRender() && this._isVirtualModeOn();\n    }\n  }, {\n    key: \"_initVirtualScrolling\",\n    value: function _initVirtualScrolling() {\n      if (this.virtualScrollingDispatcher) {\n        this.virtualScrollingDispatcher.dispose();\n        this.virtualScrollingDispatcher = null;\n      }\n\n      if (this.isVirtualScrolling()) {\n        this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this);\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_render\", this).call(this);\n\n      this._renderDateTimeIndication();\n\n      this._setIndicationUpdateInterval();\n    }\n  }, {\n    key: \"_toggleGroupedClass\",\n    value: function _toggleGroupedClass() {\n      this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0);\n    }\n  }, {\n    key: \"_toggleFixedScrollableClass\",\n    value: function _toggleFixedScrollableClass() {\n      return noop();\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._setFirstViewDate();\n\n      if (this.isRenovatedRender()) {\n        if (this._isVerticalGroupedWorkSpace()) {\n          this.renderRGroupPanel();\n        }\n      } else {\n        this._applyCellTemplates(this._renderGroupHeader());\n      }\n\n      if (this.isRenovatedRender()) {\n        this.renderRWorkspace();\n      } else {\n        this._renderDateHeader();\n\n        this._renderTimePanel();\n\n        this._renderGroupAllDayPanel();\n\n        this._renderDateTable();\n\n        this._renderAllDayPanel();\n      }\n\n      this._updateGroupTableHeight();\n\n      this._shader = new VerticalShader(this);\n    }\n  }, {\n    key: \"onDataSourceChanged\",\n    value: function onDataSourceChanged() {}\n  }, {\n    key: \"preRenderAppointments\",\n    value: function preRenderAppointments(options) {\n      this.option(\"allDayExpanded\", options.allDayExpanded);\n    }\n  }, {\n    key: \"isGroupedAllDayPanel\",\n    value: function isGroupedAllDayPanel() {\n      return this._isShowAllDayPanel() && this._isVerticalGroupedWorkSpace();\n    }\n  }, {\n    key: \"generateRenderOptions\",\n    value: function generateRenderOptions(isProvideVirtualCellsWidth) {\n      var _this$_getToday;\n\n      var groupCount = this._getGroupCount();\n\n      var verticalGroupCount = !this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\n      var horizontalGroupCount = this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\n      var allDayElements = this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0;\n\n      var rowCountInGroup = this._getRowCount();\n\n      var cellCount = this._getTotalCellCount(groupCount);\n\n      var rowCount = this._getTotalRowCount(groupCount, this._isVerticalGroupedWorkSpace());\n\n      var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n      var options = {\n        horizontalGroupCount: horizontalGroupCount,\n        verticalGroupCount: verticalGroupCount,\n        rowCountInGroup: rowCountInGroup,\n        cellCount: cellCount,\n        cellCountInGroupRow: this._getCellCount(),\n        cellDataGetters: [this._getCellData.bind(this)],\n        allDayElements: allDayElements,\n        startRowIndex: 0,\n        startCellIndex: 0,\n        groupOrientation: groupOrientation,\n        rowCount: rowCount,\n        totalRowCount: rowCount,\n        totalCellCount: cellCount,\n        groupCount: groupCount,\n        getDateHeaderText: this._getHeaderText.bind(this),\n        getDateHeaderDate: this._getDateByIndex.bind(this),\n        getTimeCellDate: this._getTimeCellDate.bind(this),\n        today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\n        groupByDate: this.isGroupedByDate(),\n        groupsList: this._getAllGroups(),\n        isHorizontalGrouping: this._isHorizontalGroupedWorkSpace(),\n        isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\n        isProvideVirtualCellsWidth: isProvideVirtualCellsWidth\n      };\n\n      if (this.isVirtualScrolling()) {\n        extend(options, this.virtualScrollingDispatcher.getRenderState());\n      }\n\n      return options;\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return false;\n    }\n  }, {\n    key: \"renderRWorkspace\",\n    value: function renderRWorkspace() {\n      var _this$virtualScrollin3;\n\n      var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n      this._cleanAllowedPositions();\n\n      this.viewDataProvider.update(isGenerateNewViewData);\n      this.renderRHeaderPanel();\n      this.renderRTimeTable();\n      this.renderRDateTable();\n      this.renderRAllDayPanel();\n      this.updateRSelection();\n      null === (_this$virtualScrollin3 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin3 ? void 0 : _this$virtualScrollin3.updateDimensions();\n    }\n  }, {\n    key: \"renderRDateTable\",\n    value: function renderRDateTable() {\n      this.renderRComponent(this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n    }\n  }, {\n    key: \"renderRGroupPanel\",\n    value: function renderRGroupPanel() {\n      var options = {\n        groups: this.option(\"groups\"),\n        groupOrientation: this.option(\"groupOrientation\"),\n        groupByDate: this.isGroupedByDate(),\n        resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n        className: this.verticalGroupTableClass,\n        baseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\n        columnCountPerGroup: this._getCellCount()\n      };\n\n      if (this.option(\"groups\").length) {\n        this._attachGroupCountAttr();\n\n        this.renderRComponent(this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options);\n      } else {\n        this._detachGroupCountAttr();\n      }\n    }\n  }, {\n    key: \"renderRAllDayPanel\",\n    value: function renderRAllDayPanel() {\n      var visible = this._isShowAllDayPanel() && !this.isGroupedAllDayPanel();\n\n      if (this.supportAllDayRow() && !this._isVerticalGroupedWorkSpace()) {\n        this._toggleAllDayVisibility(false);\n\n        var groupCount = this._getGroupCount();\n\n        var cellCount = this._getTotalCellCount(groupCount);\n\n        var options = {\n          viewData: this.viewDataProvider.viewData,\n          visible: visible,\n          dataCellTemplate: this.option(\"dataCellTemplate\"),\n          startCellIndex: 0,\n          cellCount: cellCount\n        };\n\n        if (this.isVirtualScrolling()) {\n          var horizontalVirtualScrolling = this.virtualScrollingDispatcher.horizontalVirtualScrolling;\n          var renderState = null === horizontalVirtualScrolling || void 0 === horizontalVirtualScrolling ? void 0 : horizontalVirtualScrolling.getRenderState();\n          extend(options, _extends({}, renderState));\n        }\n\n        this.renderRComponent(this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\n        this.renderRComponent(this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {\n          visible: visible\n        });\n        this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS));\n      }\n\n      this._toggleAllDayVisibility(true);\n    }\n  }, {\n    key: \"renderRTimeTable\",\n    value: function renderRTimeTable() {\n      this.renderRComponent(this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\n        timePanelData: this.viewDataProvider.timePanelData,\n        timeCellTemplate: this.option(\"timeCellTemplate\"),\n        groupOrientation: this.option(\"groupOrientation\")\n      });\n    }\n  }, {\n    key: \"renderRHeaderPanel\",\n    value: function renderRHeaderPanel() {\n      var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n      if (this.option(\"groups\").length) {\n        this._attachGroupCountAttr();\n      } else {\n        this._detachGroupCountAttr();\n      }\n\n      this.renderRComponent(this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\n        dateHeaderData: this.viewDataProvider.dateHeaderData,\n        dateCellTemplate: this.option(\"dateCellTemplate\"),\n        timeCellTemplate: this.option(\"timeCellTemplate\"),\n        groups: this.option(\"groups\"),\n        groupByDate: this.isGroupedByDate(),\n        groupOrientation: this.option(\"groupOrientation\"),\n        resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n        className: this.verticalGroupTableClass,\n        groupPanelCellBaseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\n        columnCountPerGroup: this._getCellCount(),\n        isRenderDateHeader: isRenderDateHeader\n      });\n    }\n  }, {\n    key: \"renderRComponent\",\n    value: function renderRComponent(parentElement, componentClass, componentName, viewModel) {\n      var component = this[componentName];\n\n      if (!component) {\n        var container = getPublicElement(parentElement);\n        component = this._createComponent(container, componentClass, _extends({}, viewModel, {\n          groupOrientation: this.option(\"groupOrientation\")\n        }));\n        this[componentName] = component;\n      } else {\n        component.option(viewModel);\n      }\n    }\n  }, {\n    key: \"updateRSelection\",\n    value: function updateRSelection() {\n      var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n      var focusedCell = this.virtualSelectionState.getFocusedCell();\n      var selectedCells = this.virtualSelectionState.getSelectedCells();\n\n      if (null !== focusedCell && void 0 !== focusedCell && focusedCell.coordinates) {\n        var coordinates = focusedCell.coordinates,\n            cellData = focusedCell.cellData;\n        var $cell = !isVerticalGrouping && cellData.allDay ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\n        $cell && this._setFocusedCell($cell);\n      }\n\n      selectedCells && this._setSelectedCellsByCellData(selectedCells);\n    }\n  }, {\n    key: \"_updateGroupTableHeight\",\n    value: function _updateGroupTableHeight() {\n      if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\n        this._setHorizontalGroupHeaderCellsHeight();\n      }\n    }\n  }, {\n    key: \"_renderDateTimeIndication\",\n    value: function _renderDateTimeIndication() {\n      return noop();\n    }\n  }, {\n    key: \"_setIndicationUpdateInterval\",\n    value: function _setIndicationUpdateInterval() {\n      return noop();\n    }\n  }, {\n    key: \"_refreshDateTimeIndication\",\n    value: function _refreshDateTimeIndication() {\n      return noop();\n    }\n  }, {\n    key: \"_setFocusOnCellByOption\",\n    value: function _setFocusOnCellByOption(data) {\n      this._releaseSelectedAndFocusedCells();\n\n      this._setSelectedCellsByCellData(data);\n    }\n  }, {\n    key: \"_setSelectedCellsByCellData\",\n    value: function _setSelectedCellsByCellData(data) {\n      var _this4 = this;\n\n      var _data$;\n\n      var cells = [];\n\n      var $cells = this._getAllCells(null === data || void 0 === data ? void 0 : null === (_data$ = data[0]) || void 0 === _data$ ? void 0 : _data$.allDay);\n\n      var cellsInRow = this._getTotalCellCount(this._getGroupCount());\n\n      if (this.isVirtualScrolling()) {\n        var renderState = this.virtualScrollingDispatcher.getRenderState();\n        cellsInRow = renderState.cellCount || cellsInRow;\n      }\n\n      data.forEach(function (cellData) {\n        var groups = cellData.groups,\n            startDate = cellData.startDate,\n            allDay = cellData.allDay,\n            index = cellData.index;\n        var groupIndex = cellData.groupIndex;\n\n        if (!groupIndex) {\n          groupIndex = _this4._isGroupsSpecified(groups) ? _this4._getGroupIndexByResourceId(groups) : 0;\n        }\n\n        var coordinates = _this4.isVirtualScrolling() ? _this4.viewDataProvider.findCellPositionInMap({\n          groupIndex: groupIndex,\n          startDate: startDate,\n          isAllDay: allDay,\n          index: index\n        }) : _this4.getCoordinatesByDate(startDate, groupIndex, allDay);\n\n        if (coordinates) {\n          var rowIndex = coordinates.rowIndex,\n              cellIndex = coordinates.cellIndex;\n\n          var _index = rowIndex * cellsInRow + cellIndex;\n\n          var $cell = $cells[_index];\n\n          if (isDefined($cell)) {\n            _this4._toggleFocusClass(true, $($cell));\n\n            cells.push($cell);\n          }\n        }\n      });\n      this._selectedCells = cells;\n    }\n  }, {\n    key: \"_isGroupsSpecified\",\n    value: function _isGroupsSpecified(resources) {\n      return this.option(\"groups\").length && resources;\n    }\n  }, {\n    key: \"_getGroupIndexByResourceId\",\n    value: function _getGroupIndexByResourceId(id) {\n      var groups = this.option(\"groups\");\n      var resourceTree = this.invoke(\"createResourcesTree\", groups);\n\n      if (!resourceTree.length) {\n        return 0;\n      }\n\n      return this._getGroupIndexRecursively(resourceTree, id);\n    }\n  }, {\n    key: \"_getGroupIndexRecursively\",\n    value: function _getGroupIndexRecursively(resourceTree, id) {\n      var _this5 = this;\n\n      var currentKey = resourceTree[0].name;\n      var currentValue = id[currentKey];\n      return resourceTree.reduce(function (prevIndex, _ref2) {\n        var leafIndex = _ref2.leafIndex,\n            value = _ref2.value,\n            children = _ref2.children;\n        var areValuesEqual = currentValue === value;\n\n        if (areValuesEqual && void 0 !== leafIndex) {\n          return leafIndex;\n        }\n\n        if (areValuesEqual) {\n          return _this5._getGroupIndexRecursively(children, id);\n        }\n\n        return prevIndex;\n      }, 0);\n    }\n  }, {\n    key: \"_getCalculatedFirstDayOfWeek\",\n    value: function _getCalculatedFirstDayOfWeek() {\n      var firstDayOfWeekOption = this._firstDayOfWeek();\n\n      var firstDayOfWeek = isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\n      return firstDayOfWeek;\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n      this._firstViewDate = dateUtils.getFirstWeekDate(this._getViewStartByOptions(), firstDayOfWeek);\n\n      this._setStartDayHour(this._firstViewDate);\n    }\n  }, {\n    key: \"_getViewStartByOptions\",\n    value: function _getViewStartByOptions() {\n      if (!this.option(\"startDate\")) {\n        return this.option(\"currentDate\");\n      } else {\n        var startDate = dateUtils.trimTime(this._getStartViewDate());\n        var currentDate = this.option(\"currentDate\");\n        var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n        var endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\n\n        while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n          startDate = endDate;\n          endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\n        }\n\n        return diff > 0 ? startDate : endDate;\n      }\n    }\n  }, {\n    key: \"_getHeaderDate\",\n    value: function _getHeaderDate() {\n      return this.getStartViewDate();\n    }\n  }, {\n    key: \"_getStartViewDate\",\n    value: function _getStartViewDate() {\n      return this.option(\"startDate\");\n    }\n  }, {\n    key: \"_dateInRange\",\n    value: function _dateInRange(date, startDate, endDate, diff) {\n      return diff > 0 ? dateUtils.dateInRange(date, startDate, new Date(endDate.getTime() - 1)) : dateUtils.dateInRange(date, endDate, startDate, \"date\");\n    }\n  }, {\n    key: \"_getIntervalDuration\",\n    value: function _getIntervalDuration() {\n      return toMs(\"day\") * this.option(\"intervalCount\");\n    }\n  }, {\n    key: \"_setStartDayHour\",\n    value: function _setStartDayHour(date) {\n      var startDayHour = this.option(\"startDayHour\");\n\n      if (isDefined(startDayHour)) {\n        date.setHours(startDayHour, startDayHour % 1 * 60, 0, 0);\n      }\n    }\n  }, {\n    key: \"_firstDayOfWeek\",\n    value: function _firstDayOfWeek() {\n      return this.option(\"firstDayOfWeek\");\n    }\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      this._createSelectionChangedAction();\n\n      this._attachClickEvent();\n\n      this._attachContextMenuEvent();\n    }\n  }, {\n    key: \"_attachClickEvent\",\n    value: function _attachClickEvent() {\n      var that = this;\n\n      var pointerDownAction = this._createAction(function (e) {\n        that._pointerDownHandler(e.event);\n      });\n\n      this._createCellClickAction();\n\n      var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n      var $element = this.$element();\n      eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\n      eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\n      eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, function (e) {\n        if (isMouseEvent(e) && e.which > 1) {\n          e.preventDefault();\n          return;\n        }\n\n        pointerDownAction({\n          event: e\n        });\n      });\n      eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, function (e) {\n        var $cell = $(e.target);\n\n        that._cellClickAction({\n          event: e,\n          cellElement: getPublicElement($cell),\n          cellData: that.getCellData($cell)\n        });\n      });\n    }\n  }, {\n    key: \"_createCellClickAction\",\n    value: function _createCellClickAction() {\n      var _this6 = this;\n\n      this._cellClickAction = this._createActionByOption(\"onCellClick\", {\n        afterExecute: function afterExecute(e) {\n          return _this6._cellClickHandler(e.args[0].event);\n        }\n      });\n    }\n  }, {\n    key: \"_createSelectionChangedAction\",\n    value: function _createSelectionChangedAction() {\n      this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n    }\n  }, {\n    key: \"_cellClickHandler\",\n    value: function _cellClickHandler(e) {\n      var $target = $(e.target);\n\n      if (this._showPopup && this._hasFocusClass($target)) {\n        delete this._showPopup;\n\n        this._showAddAppointmentPopup($target);\n      }\n    }\n  }, {\n    key: \"_pointerDownHandler\",\n    value: function _pointerDownHandler(e) {\n      var $target = $(e.target);\n\n      if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\n        this._isCellClick = false;\n        return;\n      }\n\n      this._isCellClick = true;\n\n      if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n        this._showPopup = true;\n      } else {\n        this._setSelectedAndFocusedCells($target);\n      }\n    }\n  }, {\n    key: \"_showAddAppointmentPopup\",\n    value: function _showAddAppointmentPopup($cell) {\n      var firstCellData = this.getCellData($cell.first());\n      var lastCellData = this.getCellData($cell.last());\n\n      if (this.isVirtualScrolling()) {\n        var selectedCells = this.virtualSelectionState.getSelectedCells();\n        firstCellData = selectedCells[0];\n        lastCellData = selectedCells[selectedCells.length - 1];\n      }\n\n      var result = {\n        startDate: firstCellData.startDate,\n        endDate: lastCellData.endDate\n      };\n\n      if (void 0 !== lastCellData.allDay) {\n        result.allDay = lastCellData.allDay;\n      }\n\n      this.invoke(\"showAddAppointmentPopup\", result, lastCellData.groups);\n    }\n  }, {\n    key: \"_attachContextMenuEvent\",\n    value: function _attachContextMenuEvent() {\n      this._createContextMenuAction();\n\n      var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n      var $element = this.$element();\n      var eventName = addNamespace(contextMenuEventName, this.NAME);\n      eventsEngine.off($element, eventName, cellSelector);\n      eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this));\n    }\n  }, {\n    key: \"_contextMenuHandler\",\n    value: function _contextMenuHandler(e) {\n      var $cell = $(e.target);\n\n      this._contextMenuAction({\n        event: e,\n        cellElement: getPublicElement($cell),\n        cellData: this.getCellData($cell)\n      });\n\n      this._contextMenuHandled = true;\n    }\n  }, {\n    key: \"_createContextMenuAction\",\n    value: function _createContextMenuAction() {\n      this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\");\n    }\n  }, {\n    key: \"_getGroupHeaderContainer\",\n    value: function _getGroupHeaderContainer() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        return this._$groupTable;\n      }\n\n      return this._$thead;\n    }\n  }, {\n    key: \"_getDateHeaderContainer\",\n    value: function _getDateHeaderContainer() {\n      return this._$thead;\n    }\n  }, {\n    key: \"_renderGroupHeader\",\n    value: function _renderGroupHeader() {\n      var $container = this._getGroupHeaderContainer();\n\n      var groupCount = this._getGroupCount();\n\n      var cellTemplates = [];\n\n      if (groupCount) {\n        var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\n\n        this._attachGroupCountAttr();\n\n        $container.append(groupRows.elements);\n        cellTemplates = groupRows.cellTemplates;\n      } else {\n        this._detachGroupCountAttr();\n      }\n\n      return cellTemplates;\n    }\n  }, {\n    key: \"_applyCellTemplates\",\n    value: function _applyCellTemplates(templates) {\n      null === templates || void 0 === templates ? void 0 : templates.forEach(function (template) {\n        template();\n      });\n    }\n  }, {\n    key: \"_detachGroupCountAttr\",\n    value: function _detachGroupCountAttr() {\n      var groupedAttr = this._groupedStrategy.getGroupCountAttr();\n\n      this.$element().removeAttr(groupedAttr.attr);\n    }\n  }, {\n    key: \"_attachGroupCountAttr\",\n    value: function _attachGroupCountAttr() {\n      var groupedAttr = this._groupedStrategy.getGroupCountAttr(this.option(\"groups\"));\n\n      this.$element().attr(groupedAttr.attr, groupedAttr.count);\n    }\n  }, {\n    key: \"headerPanelOffsetRecalculate\",\n    value: function headerPanelOffsetRecalculate() {\n      if (!this.option(\"resourceCellTemplate\") && !this.option(\"dateCellTemplate\")) {\n        return;\n      }\n\n      var headerPanelHeight = this.getHeaderPanelHeight();\n      var headerHeight = this.invoke(\"getHeaderHeight\");\n      var allDayPanelHeight = this.isAllDayPanelVisible ? this._groupedStrategy.getAllDayTableHeight() : 0;\n      headerPanelHeight && this._headerScrollable && this._headerScrollable.$element().height(headerPanelHeight + allDayPanelHeight);\n      headerPanelHeight && this._dateTableScrollable.$element().css({\n        paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\n        marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\n      });\n      headerPanelHeight && this._sidebarScrollable && this._sidebarScrollable.$element().css({\n        paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\n        marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\n      });\n      this._$allDayTitle && this._$allDayTitle.css(\"top\", headerHeight + headerPanelHeight + \"px\");\n    }\n  }, {\n    key: \"_makeGroupRows\",\n    value: function _makeGroupRows(groups, groupByDate) {\n      var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n      return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n        groupHeaderRowClass: this._getGroupRowClass(),\n        groupRowClass: this._getGroupRowClass(),\n        groupHeaderClass: this._getGroupHeaderClass.bind(this),\n        groupHeaderContentClass: this._getGroupHeaderContentClass()\n      }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate);\n    }\n  }, {\n    key: \"_getDateHeaderTemplate\",\n    value: function _getDateHeaderTemplate() {\n      return this.option(\"dateCellTemplate\");\n    }\n  }, {\n    key: \"_renderDateHeader\",\n    value: function _renderDateHeader() {\n      var container = this._getDateHeaderContainer();\n\n      var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\n\n      var count = this._getCellCount();\n\n      var cellTemplate = this._getDateHeaderTemplate();\n\n      var repeatCount = this._getCalculateHeaderCellRepeatCount();\n\n      var templateCallbacks = [];\n      var groupByDate = this.isGroupedByDate();\n\n      if (!groupByDate) {\n        for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\n          for (var cellIndex = 0; cellIndex < count; cellIndex++) {\n            var templateIndex = rowIndex * count + cellIndex;\n\n            this._renderDateHeaderTemplate($headerRow, cellIndex, templateIndex, cellTemplate, templateCallbacks);\n          }\n        }\n\n        container.append($headerRow);\n      } else {\n        var colSpan = groupByDate ? this._getGroupCount() : 1;\n\n        for (var _cellIndex = 0; _cellIndex < count; _cellIndex++) {\n          var _templateIndex = _cellIndex * repeatCount;\n\n          var cellElement = this._renderDateHeaderTemplate($headerRow, _cellIndex, _templateIndex, cellTemplate, templateCallbacks);\n\n          cellElement.attr(\"colSpan\", colSpan);\n        }\n\n        container.prepend($headerRow);\n      }\n\n      this._applyCellTemplates(templateCallbacks);\n\n      return $headerRow;\n    }\n  }, {\n    key: \"_renderDateHeaderTemplate\",\n    value: function _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\n      var text = this._getHeaderText(panelCellIndex);\n\n      var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\n\n      if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\n        templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\n          model: _extends({\n            text: text,\n            date: this._getDateByIndex(panelCellIndex)\n          }, this._getGroupsForDateHeaderTemplate(templateIndex)),\n          index: templateIndex,\n          container: getPublicElement($cell)\n        }));\n      } else {\n        $cell.text(text);\n      }\n\n      container.append($cell);\n      return $cell;\n    }\n  }, {\n    key: \"_getGroupsForDateHeaderTemplate\",\n    value: function _getGroupsForDateHeaderTemplate(templateIndex) {\n      var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n      var groupIndex;\n      var groups;\n\n      if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\n        groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\n\n        var groupsArray = this._getCellGroups(groupIndex);\n\n        groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n      }\n\n      return {\n        groups: groups,\n        groupIndex: groupIndex\n      };\n    }\n  }, {\n    key: \"_getHeaderPanelCellClass\",\n    value: function _getHeaderPanelCellClass(i) {\n      var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n      return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate());\n    }\n  }, {\n    key: \"_getCalculateHeaderCellRepeatCount\",\n    value: function _getCalculateHeaderCellRepeatCount() {\n      return this._groupedStrategy.calculateHeaderCellRepeatCount();\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel(index) {\n      var cellCount = this._getCellCount();\n\n      if (!this._isVerticalGroupedWorkSpace()) {\n        cellCount *= this._getGroupCount() || 1;\n      }\n\n      var cellTemplates = this._renderTableBody({\n        container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\n        rowCount: 1,\n        cellCount: cellCount,\n        cellClass: this._getAllDayPanelCellClass.bind(this),\n        rowClass: ALL_DAY_TABLE_ROW_CLASS,\n        cellTemplate: this.option(\"dataCellTemplate\"),\n        getCellData: this._getAllDayCellData.bind(this),\n        groupIndex: index\n      }, true);\n\n      this._toggleAllDayVisibility(true);\n\n      this._applyCellTemplates(cellTemplates);\n    }\n  }, {\n    key: \"_renderGroupAllDayPanel\",\n    value: function _renderGroupAllDayPanel() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        var groupCount = this._getGroupCount();\n\n        for (var i = 0; i < groupCount; i++) {\n          this._renderAllDayPanel(i);\n        }\n      }\n    }\n  }, {\n    key: \"_getAllDayPanelCellClass\",\n    value: function _getAllDayPanelCellClass(i, j) {\n      var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n      return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1);\n    }\n  }, {\n    key: \"_getAllDayCellData\",\n    value: function _getAllDayCellData(cell, rowIndex, cellIndex, groupIndex) {\n      var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\n\n      var cellGroupIndex = groupIndex || this._getGroupIndex(rowIndex, cellIndex);\n\n      startDate = dateUtils.trimTime(startDate);\n      var data = {\n        startDate: startDate,\n        endDate: startDate,\n        allDay: true,\n        groupIndex: cellGroupIndex\n      };\n\n      var groupsArray = this._getCellGroups(cellGroupIndex);\n\n      if (groupsArray.length) {\n        data.groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n      }\n\n      return {\n        key: CELL_DATA,\n        value: data\n      };\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility(isUpdateScrollable) {\n      var showAllDayPanel = this._isShowAllDayPanel();\n\n      this._$allDayPanel.toggle(showAllDayPanel);\n\n      this._$allDayTitle && this._$allDayTitle.toggleClass(ALL_DAY_TITLE_HIDDEN_CLASS, !showAllDayPanel);\n      this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\n\n      this._changeAllDayVisibility();\n\n      isUpdateScrollable && this._updateScrollable();\n    }\n  }, {\n    key: \"_changeAllDayVisibility\",\n    value: function _changeAllDayVisibility() {\n      this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel());\n    }\n  }, {\n    key: \"_updateScrollable\",\n    value: function _updateScrollable() {\n      this._dateTableScrollable.update();\n\n      this._headerScrollable && this._headerScrollable.update();\n      this._sidebarScrollable && this._sidebarScrollable.update();\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      var _this7 = this;\n\n      var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\n\n      var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\n\n      this._renderTableBody({\n        container: getPublicElement(this._$timePanel),\n        rowCount: this._getTimePanelRowCount() * repeatCount,\n        cellCount: 1,\n        cellClass: this._getTimeCellClass.bind(this),\n        rowClass: TIME_PANEL_ROW_CLASS,\n        cellTemplate: this.option(\"timeCellTemplate\"),\n        getCellText: function (i) {\n          var index = i % _this7._getRowCount();\n\n          if (index % 2 === 0) {\n            return dateLocalization.format(_this7._getTimeCellDateCore(startViewDate, i), \"shorttime\");\n          }\n\n          return \"\";\n        }.bind(this),\n        getCellDate: this._getTimeCellDate.bind(this),\n        groupCount: this._getGroupCount(),\n        allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\n        getTemplateData: function (rowIndex) {\n          if (!_this7._isVerticalGroupedWorkSpace()) {\n            return {};\n          }\n\n          var groupIndex = _this7._getGroupIndex(rowIndex, 0);\n\n          var groupsArray = _this7._getCellGroups(groupIndex);\n\n          var groups = _this7._getGroupsObjectFromGroupsArray(groupsArray);\n\n          return {\n            groupIndex: groupIndex,\n            groups: groups\n          };\n        }.bind(this)\n      });\n    }\n  }, {\n    key: \"_getTimePanelRowCount\",\n    value: function _getTimePanelRowCount() {\n      return this._getCellCountInDay();\n    }\n  }, {\n    key: \"_getCellCountInDay\",\n    value: function _getCellCountInDay(skipRound) {\n      var result = this._calculateDayDuration() / this.option(\"hoursInterval\");\n      return skipRound ? result : Math.ceil(result);\n    }\n  }, {\n    key: \"_calculateDayDuration\",\n    value: function _calculateDayDuration() {\n      return this.option(\"endDayHour\") - this.option(\"startDayHour\");\n    }\n  }, {\n    key: \"_getTimeCellClass\",\n    value: function _getTimeCellClass(i) {\n      var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n      return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass;\n    }\n  }, {\n    key: \"_getTimeCellDate\",\n    value: function _getTimeCellDate(i) {\n      return this._getTimeCellDateCore(this.getStartViewDate(), i);\n    }\n  }, {\n    key: \"_getTimeCellDateCore\",\n    value: function _getTimeCellDateCore(startViewDate, i) {\n      var result = new Date(startViewDate);\n      var timeCellDuration = Math.round(this.getCellDuration());\n\n      var cellCountInDay = this._getCellCountInDay(true);\n\n      result.setMilliseconds(result.getMilliseconds() + timeCellDuration * (i % cellCountInDay) - this._getTimeOffsetForStartViewDate());\n      return result;\n    }\n  }, {\n    key: \"_renderDateTable\",\n    value: function _renderDateTable() {\n      var groupCount = this._getGroupCount();\n\n      this._renderTableBody({\n        container: getPublicElement(this._$dateTable),\n        rowCount: this._getTotalRowCount(groupCount),\n        cellCount: this._getTotalCellCount(groupCount),\n        cellClass: this._getDateTableCellClass.bind(this),\n        rowClass: this._getDateTableRowClass(),\n        cellTemplate: this.option(\"dataCellTemplate\"),\n        getCellData: this._getCellData.bind(this),\n        allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\n        groupCount: groupCount,\n        groupByDate: this.option(\"groupByDate\")\n      });\n    }\n  }, {\n    key: \"_insertAllDayRowsIntoDateTable\",\n    value: function _insertAllDayRowsIntoDateTable() {\n      return this._groupedStrategy.insertAllDayRowsIntoDateTable();\n    }\n  }, {\n    key: \"_getTotalCellCount\",\n    value: function _getTotalCellCount(groupCount) {\n      return this._groupedStrategy.getTotalCellCount(groupCount);\n    }\n  }, {\n    key: \"_getTotalRowCount\",\n    value: function _getTotalRowCount(groupCount, includeAllDayPanelRows) {\n      var result = this._groupedStrategy.getTotalRowCount(groupCount);\n\n      if (includeAllDayPanelRows && groupCount > 1 && this.isAllDayPanelVisible) {\n        result += groupCount;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getCellData\",\n    value: function _getCellData(cell, rowIndex, cellIndex) {\n      var data = this._prepareCellData(rowIndex, cellIndex, cell);\n\n      return {\n        key: CELL_DATA,\n        value: data\n      };\n    }\n  }, {\n    key: \"_prepareCellData\",\n    value: function _prepareCellData(rowIndex, cellIndex) {\n      var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\n\n      var endDate = this.calculateEndDate(startDate);\n\n      var groupIndex = this._getGroupIndex(rowIndex, cellIndex);\n\n      var data = {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: this._getTableAllDay(),\n        groupIndex: groupIndex\n      };\n\n      var groupsArray = this._getCellGroups(groupIndex);\n\n      if (groupsArray.length) {\n        data.groups = this._getGroupsObjectFromGroupsArray(groupsArray);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"_getGroupIndex\",\n    value: function _getGroupIndex(rowIndex, cellIndex) {\n      return this._groupedStrategy.getGroupIndex(rowIndex, cellIndex);\n    }\n  }, {\n    key: \"_getTableAllDay\",\n    value: function _getTableAllDay() {\n      return false;\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate) {\n      var result = new Date(startDate);\n      result.setMilliseconds(result.getMilliseconds() + Math.round(this._getInterval()));\n      return result;\n    }\n  }, {\n    key: \"_getGroupCount\",\n    value: function _getGroupCount() {\n      var groups = this.option(\"groups\");\n      var result = 0;\n\n      for (var i = 0, len = groups.length; i < len; i++) {\n        if (!i) {\n          result = groups[i].items.length;\n        } else {\n          result *= groups[i].items.length;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getPathToLeaf\",\n    value: function _getPathToLeaf(leafIndex) {\n      var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\n\n      var leaf = function findLeafByIndex(data, index) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].leafIndex === index) {\n            return data[i];\n          } else {\n            var _leaf = findLeafByIndex(data[i].children, index);\n\n            if (_leaf) {\n              return _leaf;\n            }\n          }\n        }\n      }(tree, leafIndex);\n\n      return function makeBranch(leaf, result) {\n        result = result || [];\n        result.push(leaf.value);\n\n        if (leaf.parent) {\n          makeBranch(leaf.parent, result);\n        }\n\n        return result;\n      }(leaf).reverse();\n    }\n  }, {\n    key: \"_getAllGroups\",\n    value: function _getAllGroups() {\n      var _this8 = this;\n\n      var groupCount = this._getGroupCount();\n\n      return _toConsumableArray(new Array(groupCount)).map(function (_, groupIndex) {\n        var groupsArray = _this8._getCellGroups(groupIndex);\n\n        return _this8._getGroupsObjectFromGroupsArray(groupsArray);\n      });\n    }\n  }, {\n    key: \"_getCellGroups\",\n    value: function _getCellGroups(groupIndex) {\n      var result = [];\n\n      if (this._getGroupCount()) {\n        var groups = this.option(\"groups\");\n\n        if (groupIndex < 0) {\n          return;\n        }\n\n        var path = this._getPathToLeaf(groupIndex);\n\n        for (var i = 0; i < groups.length; i++) {\n          result.push({\n            name: groups[i].name,\n            id: path[i]\n          });\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getGroupsObjectFromGroupsArray\",\n    value: function _getGroupsObjectFromGroupsArray(groupsArray) {\n      return groupsArray.reduce(function (currentGroups, _ref3) {\n        var name = _ref3.name,\n            id = _ref3.id;\n        return _extends({}, currentGroups, _defineProperty({}, name, id));\n      }, {});\n    }\n  }, {\n    key: \"_attachTablesEvents\",\n    value: function _attachTablesEvents() {\n      var element = this.$element();\n\n      this._attachDragEvents(element);\n\n      this._attachPointerEvents(element);\n    }\n  }, {\n    key: \"_detachDragEvents\",\n    value: function _detachDragEvents(element) {\n      eventsEngine.off(element, DragEventNames.ENTER);\n      eventsEngine.off(element, DragEventNames.LEAVE);\n      eventsEngine.off(element, DragEventNames.DROP);\n    }\n  }, {\n    key: \"_attachDragEvents\",\n    value: function _attachDragEvents(element) {\n      var _this9 = this;\n\n      this._detachDragEvents(element);\n\n      eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\n        checkDropTarget: function checkDropTarget(target, event) {\n          return !_this9._isOutsideScrollable(target, event);\n        }\n      }, function (e) {\n        _this9.removeDroppableCellClass();\n\n        $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      });\n      eventsEngine.on(element, DragEventNames.LEAVE, function () {\n        return _this9.removeDroppableCellClass();\n      });\n      eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, function () {\n        return _this9.removeDroppableCellClass();\n      });\n    }\n  }, {\n    key: \"_attachPointerEvents\",\n    value: function _attachPointerEvents(element) {\n      var _this10 = this;\n\n      var isPointerDown = false;\n      eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\n      eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\n      eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, function (e) {\n        if (isMouseEvent(e) && 1 === e.which) {\n          isPointerDown = true;\n\n          _this10.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n\n          eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n          eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, function () {\n            isPointerDown = false;\n\n            _this10.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n          });\n        }\n      });\n      eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, function (e) {\n        if (isPointerDown && _this10._dateTableScrollable && !_this10._dateTableScrollable.option(\"scrollByContent\")) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          _this10._moveToCell($(e.target), true);\n        }\n      });\n    }\n  }, {\n    key: \"_getDateTables\",\n    value: function _getDateTables() {\n      return this._$dateTable.add(this._$allDayTable);\n    }\n  }, {\n    key: \"_getDateTable\",\n    value: function _getDateTable() {\n      return this._$dateTable;\n    }\n  }, {\n    key: \"_getAllDayTable\",\n    value: function _getAllDayTable() {\n      return this._$allDayTable;\n    }\n  }, {\n    key: \"_getInterval\",\n    value: function _getInterval() {\n      if (void 0 === this._interval) {\n        this._interval = this.option(\"hoursInterval\") * HOUR_MS;\n      }\n\n      return this._interval;\n    }\n  }, {\n    key: \"_getHeaderText\",\n    value: function _getHeaderText(headerIndex) {\n      return dateLocalization.format(this._getDateForHeaderText(headerIndex), this._getFormat());\n    }\n  }, {\n    key: \"_getDateForHeaderText\",\n    value: function _getDateForHeaderText(index) {\n      return this._getDateByIndex(index);\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex() {\n      return abstract();\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return abstract();\n    }\n  }, {\n    key: \"_calculateCellIndex\",\n    value: function _calculateCellIndex(rowIndex, cellIndex) {\n      return this._groupedStrategy.calculateCellIndex(rowIndex, cellIndex);\n    }\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options, delayCellTemplateRendering) {\n      var result = [];\n\n      if (!delayCellTemplateRendering) {\n        this._applyCellTemplates(tableCreator.makeTable(options));\n      } else {\n        result = tableCreator.makeTable(options);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_removeAllDayElements\",\n    value: function _removeAllDayElements() {\n      this._$allDayTable && this._$allDayTable.remove();\n      this._$allDayTitle && this._$allDayTitle.remove();\n    }\n  }, {\n    key: \"_cleanView\",\n    value: function _cleanView() {\n      var _this$virtualSelectio2, _this$_shader;\n\n      this.cache.clear();\n\n      this._cleanTableWidths();\n\n      this._cleanAllowedPositions();\n\n      null === (_this$virtualSelectio2 = this.virtualSelectionState) || void 0 === _this$virtualSelectio2 ? void 0 : _this$virtualSelectio2.releaseSelectedAndFocusedCells();\n\n      if (!this.isRenovatedRender()) {\n        var _this$_$allDayTable, _this$_$sidebarTable;\n\n        this._$thead.empty();\n\n        this._$dateTable.empty();\n\n        this._$timePanel.empty();\n\n        this._$groupTable.empty();\n\n        null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\n        null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty();\n      }\n\n      null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n      delete this._hiddenInterval;\n      delete this._interval;\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n\n      this._disposeRenovatedComponents();\n\n      _get(_getPrototypeOf(SchedulerWorkSpace.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_cleanTableWidths\",\n    value: function _cleanTableWidths() {\n      this._$headerPanel.css(\"width\", \"\");\n\n      this._$dateTable.css(\"width\", \"\");\n\n      this._$allDayTable && this._$allDayTable.css(\"width\", \"\");\n    }\n  }, {\n    key: \"_disposeRenovatedComponents\",\n    value: function _disposeRenovatedComponents() {\n      var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\n\n      null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\n      this.renovatedAllDayPanel = void 0;\n      null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\n      this.renovatedDateTable = void 0;\n      null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\n      this.renovatedTimePanel = void 0;\n      null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\n      this.renovatedGroupPanel = void 0;\n      null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\n      this.renovatedHeaderPanel = void 0;\n    }\n  }, {\n    key: \"getWorkArea\",\n    value: function getWorkArea() {\n      return this._dateTableScrollable.$content();\n    }\n  }, {\n    key: \"getScrollable\",\n    value: function getScrollable() {\n      return this._dateTableScrollable;\n    }\n  }, {\n    key: \"getScrollableScrollTop\",\n    value: function getScrollableScrollTop() {\n      return this._dateTableScrollable.scrollTop();\n    }\n  }, {\n    key: \"getGroupedScrollableScrollTop\",\n    value: function getGroupedScrollableScrollTop(allDay) {\n      return this._groupedStrategy.getScrollableScrollTop(allDay);\n    }\n  }, {\n    key: \"getScrollableScrollLeft\",\n    value: function getScrollableScrollLeft() {\n      return this._dateTableScrollable.scrollLeft();\n    }\n  }, {\n    key: \"getScrollableOuterWidth\",\n    value: function getScrollableOuterWidth() {\n      return this._dateTableScrollable.scrollWidth();\n    }\n  }, {\n    key: \"getScrollableContainer\",\n    value: function getScrollableContainer() {\n      return this._dateTableScrollable._container();\n    }\n  }, {\n    key: \"getHeaderPanelHeight\",\n    value: function getHeaderPanelHeight() {\n      return this._$headerPanel && this._$headerPanel.outerHeight(true);\n    }\n  }, {\n    key: \"getTimePanelWidth\",\n    value: function getTimePanelWidth() {\n      return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width;\n    }\n  }, {\n    key: \"getGroupTableWidth\",\n    value: function getGroupTableWidth() {\n      return this._$groupTable ? this._$groupTable.outerWidth() : 0;\n    }\n  }, {\n    key: \"getWorkSpaceLeftOffset\",\n    value: function getWorkSpaceLeftOffset() {\n      return this._groupedStrategy.getLeftOffset();\n    }\n  }, {\n    key: \"getGroupedStrategy\",\n    value: function getGroupedStrategy() {\n      return this._groupedStrategy;\n    }\n  }, {\n    key: \"_getCellCoordinatesByIndex\",\n    value: function _getCellCoordinatesByIndex(index) {\n      var cellIndex = Math.floor(index / this._getRowCount());\n      var rowIndex = index - this._getRowCount() * cellIndex;\n      return {\n        cellIndex: cellIndex,\n        rowIndex: rowIndex\n      };\n    }\n  }, {\n    key: \"_getDateByCellIndexes\",\n    value: function _getDateByCellIndexes(rowIndex, cellIndex, patchedIndexes) {\n      cellIndex = !patchedIndexes ? this._patchCellIndex(cellIndex) : cellIndex;\n      var firstViewDate = this.getStartViewDate();\n      var firstViewDateTime = firstViewDate.getTime();\n\n      var millisecondsOffset = this._getMillisecondsOffset(rowIndex, cellIndex);\n\n      var offsetByCount = this._getOffsetByCount(cellIndex);\n\n      var startViewDateOffset = this._getTimeOffsetForStartViewDate();\n\n      var currentDate = new Date(firstViewDateTime + millisecondsOffset + offsetByCount - startViewDateOffset);\n      currentDate.setTime(currentDate.getTime() + dateUtils.getTimezonesDifference(firstViewDate, currentDate));\n      return currentDate;\n    }\n  }, {\n    key: \"_patchCellIndex\",\n    value: function _patchCellIndex(cellIndex) {\n      if (this.isGroupedByDate()) {\n        cellIndex = Math.floor(cellIndex / this._getGroupCount());\n      }\n\n      return cellIndex;\n    }\n  }, {\n    key: \"_getOffsetByCount\",\n    value: function _getOffsetByCount() {\n      return 0;\n    }\n  }, {\n    key: \"_getMillisecondsOffset\",\n    value: function _getMillisecondsOffset(rowIndex, cellIndex) {\n      return this._getInterval() * this._calculateCellIndex(rowIndex, cellIndex) + this._calculateHiddenInterval(rowIndex, cellIndex);\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval(rowIndex, cellIndex) {\n      var dayCount = cellIndex % this._getCellCount();\n\n      return dayCount * this._getHiddenInterval();\n    }\n  }, {\n    key: \"_getHiddenInterval\",\n    value: function _getHiddenInterval() {\n      if (void 0 === this._hiddenInterval) {\n        this._hiddenInterval = DAY_MS - this.getVisibleDayDuration();\n      }\n\n      return this._hiddenInterval;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate, allDay) {\n      var firstViewDate = this.getStartViewDate();\n      var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\n\n      var days = this._getDaysOfInterval(fullInterval, startDayTime);\n\n      var weekendsCount = this._getWeekendsCount(days);\n\n      var result = (days - weekendsCount) * DAY_MS;\n\n      if (!allDay) {\n        result = fullInterval - days * this._getHiddenInterval() - weekendsCount * this.getVisibleDayDuration();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getWeekendsCount\",\n    value: function _getWeekendsCount() {\n      return 0;\n    }\n  }, {\n    key: \"_getDaysOfInterval\",\n    value: function _getDaysOfInterval(fullInterval, startDayTime) {\n      return Math.floor((fullInterval + startDayTime) / DAY_MS);\n    }\n  }, {\n    key: \"_getGroupIndexes\",\n    value: function _getGroupIndexes(appointmentResources) {\n      var result = [];\n\n      if (this._isGroupsSpecified(appointmentResources)) {\n        var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\n        result = this.invoke(\"getResourceTreeLeaves\", tree, appointmentResources);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateIndex\",\n    value: function _updateIndex(index) {\n      return index * this._getRowCount();\n    }\n  }, {\n    key: \"_getDroppableCell\",\n    value: function _getDroppableCell() {\n      return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS);\n    }\n  }, {\n    key: \"_getWorkSpaceWidth\",\n    value: function _getWorkSpaceWidth() {\n      var _this11 = this;\n\n      return this.cache.get(\"workspaceWidth\", function () {\n        if (_this11._needCreateCrossScrolling()) {\n          return getBoundingRect(_this11._$dateTable.get(0)).width;\n        }\n\n        return getBoundingRect(_this11.$element().get(0)).width - _this11.getTimePanelWidth();\n      });\n    }\n  }, {\n    key: \"_getCellPositionByIndex\",\n    value: function _getCellPositionByIndex(index, groupIndex, inAllDayRow) {\n      var cellCoordinates = this._getCellCoordinatesByIndex(index);\n\n      var $cell = this._getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow);\n\n      return this._getCellPositionWithCache($cell, cellCoordinates, groupIndex);\n    }\n  }, {\n    key: \"_getCellPositionWithCache\",\n    value: function _getCellPositionWithCache($cell, cellCoordinates, groupIndex) {\n      var result = this._getCellPosition($cell);\n\n      this.setCellDataCache(cellCoordinates, groupIndex, $cell);\n\n      if (result) {\n        result.rowIndex = cellCoordinates.rowIndex;\n        result.cellIndex = cellCoordinates.cellIndex;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getCellPosition\",\n    value: function _getCellPosition($cell) {\n      var position = $cell.position();\n\n      if (this.option(\"rtlEnabled\")) {\n        position.left += getBoundingRect($cell.get(0)).width;\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_getCellByCoordinates\",\n    value: function _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\n      var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\n\n      return this._dom_getDateCell(indexes);\n    }\n  }, {\n    key: \"_dom_getDateCell\",\n    value: function _dom_getDateCell(position) {\n      return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.cellIndex);\n    }\n  }, {\n    key: \"_dom_getAllDayPanelCell\",\n    value: function _dom_getAllDayPanelCell(cellIndex) {\n      return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(cellIndex);\n    }\n  }, {\n    key: \"_getCells\",\n    value: function _getCells(allDay, direction) {\n      var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n\n      if (\"vertical\" === direction) {\n        var result = [];\n\n        for (var i = 1;; i++) {\n          var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\n\n          if (!cells.length) {\n            break;\n          }\n\n          result = result.concat(cells.toArray());\n        }\n\n        return $(result);\n      } else {\n        return this.$element().find(\".\" + cellClass);\n      }\n    }\n  }, {\n    key: \"_getAllCells\",\n    value: function _getAllCells(allDay) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"));\n      }\n\n      var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n      return this.$element().find(\".\" + cellClass);\n    }\n  }, {\n    key: \"_setHorizontalGroupHeaderCellsHeight\",\n    value: function _setHorizontalGroupHeaderCellsHeight() {\n      var height = getBoundingRect(this._$dateTable.get(0)).height;\n\n      this._$groupTable.outerHeight(height);\n    }\n  }, {\n    key: \"_getDateTableBorder\",\n    value: function _getDateTableBorder() {\n      return DATE_TABLE_CELL_BORDER;\n    }\n  }, {\n    key: \"_getDateTableBorderOffset\",\n    value: function _getDateTableBorderOffset() {\n      return 2 * this._getDateTableBorder();\n    }\n  }, {\n    key: \"_getGroupHeaderCellsContent\",\n    value: function _getGroupHeaderCellsContent() {\n      return this.$element().find(\".\" + GROUP_HEADER_CONTENT_CLASS);\n    }\n  }, {\n    key: \"_getGroupHeaderCells\",\n    value: function _getGroupHeaderCells() {\n      return this.$element().find(\".\" + GROUP_HEADER_CLASS);\n    }\n  }, {\n    key: \"_getScrollCoordinates\",\n    value: function _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\n      var currentDate = date || new Date(this.option(\"currentDate\"));\n      var startDayHour = this.option(\"startDayHour\");\n      var endDayHour = this.option(\"endDayHour\");\n\n      if (hours < startDayHour) {\n        hours = startDayHour;\n      }\n\n      if (hours >= endDayHour) {\n        hours = endDayHour - 1;\n      }\n\n      currentDate.setHours(hours, minutes, 0, 0);\n\n      if (!this.isVirtualScrolling()) {\n        return this.getCoordinatesByDate(currentDate, groupIndex, allDay);\n      }\n\n      var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\n      var position = cell.position,\n          cellData = cell.cellData;\n      return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, this.isDateAndTimeView, \"vertical\" === this.viewDirection);\n    }\n  }, {\n    key: \"_isOutsideScrollable\",\n    value: function _isOutsideScrollable(target, event) {\n      var $dateTableScrollableElement = this._dateTableScrollable.$element();\n\n      var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\n      var window = getWindow();\n      var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\n      var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\n      var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\n\n      if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\n        return false;\n      }\n\n      return isOutsideVerticalScrollable || isOutsideHorizontalScrollable;\n    }\n  }, {\n    key: \"setCellDataCache\",\n    value: function setCellDataCache(cellCoordinates, groupIndex, $cell) {\n      var key = JSON.stringify({\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex,\n        groupIndex: groupIndex\n      });\n      this.cache.set(key, this.getCellData($cell));\n    }\n  }, {\n    key: \"setCellDataCacheAlias\",\n    value: function setCellDataCacheAlias(appointment, geometry) {\n      var key = JSON.stringify({\n        rowIndex: appointment.rowIndex,\n        cellIndex: appointment.cellIndex,\n        groupIndex: appointment.groupIndex\n      });\n      var aliasKey = JSON.stringify({\n        top: geometry.top,\n        left: geometry.left\n      });\n      this.cache.set(aliasKey, this.cache.get(key));\n    }\n  }, {\n    key: \"_cleanAllowedPositions\",\n    value: function _cleanAllowedPositions() {\n      this._maxAllowedVerticalPosition = [];\n      this._maxAllowedPosition = [];\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return true;\n    }\n  }, {\n    key: \"keepOriginalHours\",\n    value: function keepOriginalHours() {\n      return false;\n    }\n  }, {\n    key: \"getSelectedCellData\",\n    value: function getSelectedCellData() {\n      if (this.isVirtualScrolling()) {\n        return this.virtualSelectionState.getSelectedCells();\n      }\n\n      var $focusedCells = this._getAllFocusedCells();\n\n      var result = [];\n\n      if ($focusedCells.length > 1) {\n        result = this._getMultipleCellsData($focusedCells);\n      } else {\n        var data = this.getCellData($($focusedCells[0]));\n        data && result.push(data);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getMultipleCellsData\",\n    value: function _getMultipleCellsData($cells) {\n      var data = [];\n\n      for (var i = 0; i < $cells.length; i++) {\n        data.push(this.getCellData($($cells[i])));\n      }\n\n      return data;\n    }\n  }, {\n    key: \"getCellData\",\n    value: function getCellData($cell) {\n      var data;\n      var currentCell = $cell[0];\n\n      if (currentCell) {\n        if (this.isRenovatedRender()) {\n          data = this._getCellDataInRenovatedView($cell);\n        } else {\n          data = elementData(currentCell, CELL_DATA);\n        }\n      }\n\n      return extend(true, {}, data);\n    }\n  }, {\n    key: \"_getVirtualRowOffset\",\n    value: function _getVirtualRowOffset() {\n      var _this$virtualScrollin4;\n\n      return (null === (_this$virtualScrollin4 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin4 ? void 0 : _this$virtualScrollin4.virtualRowOffset) || 0;\n    }\n  }, {\n    key: \"_getVirtualCellOffset\",\n    value: function _getVirtualCellOffset() {\n      var _this$virtualScrollin5;\n\n      return (null === (_this$virtualScrollin5 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin5 ? void 0 : _this$virtualScrollin5.virtualCellOffset) || 0;\n    }\n  }, {\n    key: \"_getCellDataInRenovatedView\",\n    value: function _getCellDataInRenovatedView($cell) {\n      var rowIndex = $cell.parent().index();\n\n      if (this.isVirtualScrolling()) {\n        rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n      }\n\n      var columnIndex = $cell.index();\n\n      if (this.isVirtualScrolling()) {\n        columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount;\n      }\n\n      var viewDataProvider = this.viewDataProvider;\n\n      var isAllDayCell = this._hasAllDayClass($cell);\n\n      var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\n      return cellData ? {\n        startDate: cellData.startDate,\n        endDate: cellData.endDate,\n        groups: cellData.groups,\n        groupIndex: cellData.groupIndex,\n        allDay: cellData.allDay\n      } : void 0;\n    }\n  }, {\n    key: \"_getHorizontalMax\",\n    value: function _getHorizontalMax(groupIndex) {\n      groupIndex = this.isGroupedByDate() ? this._getGroupCount() - 1 : groupIndex;\n      return this._groupedStrategy.getHorizontalMax(groupIndex);\n    }\n  }, {\n    key: \"getCoordinatesByDate\",\n    value: function getCoordinatesByDate(date, groupIndex, inAllDayRow) {\n      groupIndex = groupIndex || 0;\n      var position;\n\n      if (this.isVirtualScrolling()) {\n        var cellInfo = {\n          groupIndex: groupIndex,\n          startDate: date,\n          isAllDay: inAllDayRow\n        };\n        var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\n\n        if (!positionByMap) {\n          return;\n        }\n\n        var $cell = this._dom_getDateCell(positionByMap);\n\n        position = this._getCellPositionWithCache($cell, positionByMap, groupIndex);\n      } else {\n        position = this.calculateCellPositionByView(date, groupIndex, inAllDayRow);\n      }\n\n      var shift = this.getPositionShift(inAllDayRow ? 0 : this.getTimeShift(date), inAllDayRow);\n\n      var horizontalHMax = this._getHorizontalMax(groupIndex, date);\n\n      if (!position) {\n        throw errors.Error(\"E1039\");\n      }\n\n      return {\n        cellPosition: position.left + shift.cellPosition,\n        top: position.top + shift.top,\n        left: position.left + shift.left,\n        rowIndex: position.rowIndex,\n        cellIndex: position.cellIndex,\n        hMax: horizontalHMax,\n        vMax: this.getVerticalMax(groupIndex),\n        groupIndex: groupIndex\n      };\n    }\n  }, {\n    key: \"calculateCellPositionByView\",\n    value: function calculateCellPositionByView(date, groupIndex, inAllDayRow) {\n      var index = this.getCellIndexByDate(date, inAllDayRow);\n      return this._getCellPositionByIndex(index, groupIndex, inAllDayRow);\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(groupIndex) {\n      return this._groupedStrategy.getVerticalMax(groupIndex);\n    }\n  }, {\n    key: \"_getOffsetByAllDayPanel\",\n    value: function _getOffsetByAllDayPanel(groupIndex) {\n      return this._groupedStrategy._getOffsetByAllDayPanel(groupIndex);\n    }\n  }, {\n    key: \"_getGroupTop\",\n    value: function _getGroupTop(groupIndex) {\n      return this._groupedStrategy._getGroupTop(groupIndex);\n    }\n  }, {\n    key: \"isGroupedByDate\",\n    value: function isGroupedByDate() {\n      return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0;\n    }\n  }, {\n    key: \"getCellIndexByDate\",\n    value: function getCellIndexByDate(date, inAllDayRow) {\n      var timeInterval = inAllDayRow ? 864e5 : this._getInterval();\n\n      var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + this._getTimeOffsetForStartViewDate();\n\n      var index = Math.floor(dateTimeStamp / timeInterval);\n\n      if (inAllDayRow) {\n        index = this._updateIndex(index);\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      return index;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift, isAllDay) {\n      return {\n        top: timeShift * this.getCellHeight(),\n        left: 0,\n        cellPosition: 0\n      };\n    }\n  }, {\n    key: \"getTimeShift\",\n    value: function getTimeShift(date) {\n      var currentDayStart = new Date(date);\n      var cellDuration = this.getCellDuration();\n      var currentDayEndHour = new Date(new Date(date).setHours(this.option(\"endDayHour\"), 0, 0));\n\n      if (date.getTime() <= currentDayEndHour.getTime()) {\n        currentDayStart.setHours(this.option(\"startDayHour\"), 0, 0, 0);\n      }\n\n      var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\n      var currentDateTime = date.getTime();\n      var currentDayStartTime = currentDayStart.getTime();\n\n      var minTime = this._firstViewDate.getTime();\n\n      return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % cellDuration / cellDuration : 0;\n    }\n  }, {\n    key: \"_isSkippedData\",\n    value: function _isSkippedData() {\n      return false;\n    }\n  }, {\n    key: \"getCoordinatesByDateInGroup\",\n    value: function getCoordinatesByDateInGroup(startDate, appointmentResources, inAllDayRow, groupIndex) {\n      var _this12 = this;\n\n      var result = [];\n\n      if (this._isSkippedData(startDate)) {\n        return result;\n      }\n\n      var groupIndices = [groupIndex];\n\n      if (!isDefined(groupIndex)) {\n        groupIndices = this._getGroupCount() ? this._getGroupIndexes(appointmentResources) : [0];\n      }\n\n      groupIndices.forEach(function (groupIndex) {\n        var coordinates = _this12.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\n\n        coordinates && result.push(coordinates);\n      });\n      return result;\n    }\n  }, {\n    key: \"getDroppableCellIndex\",\n    value: function getDroppableCellIndex() {\n      var $droppableCell = this._getDroppableCell();\n\n      var $row = $droppableCell.parent();\n      var rowIndex = $row.index();\n      return rowIndex * $row.find(\"td\").length + $droppableCell.index();\n    }\n  }, {\n    key: \"getDataByDroppableCell\",\n    value: function getDataByDroppableCell() {\n      var cellData = this.getCellData($(this._getDroppableCell()));\n      var allDay = cellData.allDay;\n      var startDate = cellData.startDate;\n      var endDate = startDate && this.invoke(\"calculateAppointmentEndDate\", allDay, startDate);\n      return {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groups: cellData.groups\n      };\n    }\n  }, {\n    key: \"getDateRange\",\n    value: function getDateRange() {\n      return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()];\n    }\n  }, {\n    key: \"getCellWidth\",\n    value: function getCellWidth() {\n      var _this13 = this;\n\n      return this.cache.get(\"cellWidth\", function () {\n        var cell = _this13._getCells().first().get(0);\n\n        return cell && getBoundingRect(cell).width;\n      });\n    }\n  }, {\n    key: \"getCellMinWidth\",\n    value: function getCellMinWidth() {\n      return DATE_TABLE_MIN_CELL_WIDTH;\n    }\n  }, {\n    key: \"getRoundedCellWidth\",\n    value: function getRoundedCellWidth(groupIndex, startIndex, cellCount) {\n      if (groupIndex < 0) {\n        return 0;\n      }\n\n      var $row = this.$element().find(\".\" + this._getDateTableRowClass()).eq(0);\n      var width = 0;\n      var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\n      var totalCellCount = this._getCellCount() * groupIndex;\n      cellCount = cellCount || this._getCellCount();\n\n      if (!isDefined(startIndex)) {\n        startIndex = totalCellCount;\n      }\n\n      for (var i = startIndex; i < totalCellCount + cellCount; i++) {\n        width += getBoundingRect($($cells).eq(i).get(0)).width;\n      }\n\n      return width / (totalCellCount + cellCount - startIndex);\n    }\n  }, {\n    key: \"getCellHeight\",\n    value: function getCellHeight() {\n      var _this14 = this;\n\n      var useCache = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n      var callbackResult = function callbackResult() {\n        var cell = _this14._getCells().first().get(0);\n\n        return cell && getBoundingRect(cell).height;\n      };\n\n      return useCache ? this.cache.get(\"cellHeight\", callbackResult) : callbackResult();\n    }\n  }, {\n    key: \"getAllDayHeight\",\n    value: function getAllDayHeight() {\n      var cell = this._getCells(true).first().get(0);\n\n      return this._isShowAllDayPanel() ? cell && getBoundingRect(cell).height || 0 : 0;\n    }\n  }, {\n    key: \"getAllDayOffset\",\n    value: function getAllDayOffset() {\n      return this._groupedStrategy.getAllDayOffset();\n    }\n  }, {\n    key: \"getMaxAllowedPosition\",\n    value: function getMaxAllowedPosition(groupIndex) {\n      var validGroupIndex = groupIndex || 0;\n\n      if (this.isRenovatedRender()) {\n        return this.getRMaxAllowedHorizontalPosition(validGroupIndex);\n      }\n\n      return this.getMaxAllowedHorizontalPosition(validGroupIndex);\n    }\n  }, {\n    key: \"getMaxAllowedHorizontalPosition\",\n    value: function getMaxAllowedHorizontalPosition(groupIndex) {\n      if (0 === this._maxAllowedPosition.length) {\n        var isRtl = this.option(\"rtlEnabled\");\n        this._maxAllowedPosition = [];\n\n        this._$dateTable.find(\"tr\").first().find(\"td:nth-child(\".concat(this._getCellCount(), \"n)\")).each(function (_, cell) {\n          var maxPosition = $(cell).position().left;\n\n          if (!isRtl) {\n            maxPosition += getBoundingRect(cell).width;\n          }\n\n          this._maxAllowedPosition.push(Math.round(maxPosition));\n        }.bind(this));\n      }\n\n      return this._maxAllowedPosition[groupIndex];\n    }\n  }, {\n    key: \"getRMaxAllowedHorizontalPosition\",\n    value: function getRMaxAllowedHorizontalPosition(groupIndex) {\n      var _this15 = this;\n\n      if (!this._maxAllowedPosition[groupIndex]) {\n        var _this$viewDataProvide = this.viewDataProvider.getLasGroupCellPosition(groupIndex),\n            cellIndex = _this$viewDataProvide.cellIndex;\n\n        (function (cellIndex) {\n          var cell = _this15._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).first().find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).get(cellIndex);\n\n          var maxPosition = $(cell).position().left;\n\n          if (!_this15.option(\"rtlEnabled\")) {\n            maxPosition += getBoundingRect(cell).width;\n          }\n\n          _this15._maxAllowedPosition[groupIndex] = Math.round(maxPosition);\n        })(cellIndex);\n      }\n\n      return this._maxAllowedPosition[groupIndex];\n    }\n  }, {\n    key: \"getMaxAllowedVerticalPosition\",\n    value: function getMaxAllowedVerticalPosition(groupIndex) {\n      if (this.isRenovatedRender()) {\n        return this.getRMaxAllowedVerticalPosition(groupIndex);\n      }\n\n      return this.getMaxAllowedVerticalPositionStandard(groupIndex);\n    }\n  }, {\n    key: \"getMaxAllowedVerticalPositionStandard\",\n    value: function getMaxAllowedVerticalPositionStandard(groupIndex) {\n      var _this16 = this;\n\n      if (0 === this._maxAllowedVerticalPosition.length) {\n        var rowCount = this._getRowCount();\n\n        this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \"):nth-child(\").concat(rowCount, \"n)\")).each(function (_, row) {\n          var maxPosition = $(row).position().top + getBoundingRect(row).height;\n\n          _this16._maxAllowedVerticalPosition.push(Math.round(maxPosition));\n        });\n      }\n\n      return this._maxAllowedVerticalPosition[groupIndex];\n    }\n  }, {\n    key: \"getRMaxAllowedVerticalPosition\",\n    value: function getRMaxAllowedVerticalPosition(groupIndex) {\n      var _this17 = this;\n\n      if (!this._maxAllowedVerticalPosition[groupIndex]) {\n        var _this$viewDataProvide2 = this.viewDataProvider.getLasGroupCellPosition(groupIndex),\n            rowIndex = _this$viewDataProvide2.rowIndex;\n\n        (function (rowIndex) {\n          var row = _this17._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).get(rowIndex);\n\n          var maxPosition = $(row).position().top + getBoundingRect(row).height;\n\n          if (_this17.isGroupedAllDayPanel()) {\n            maxPosition -= (groupIndex + 1) * _this17.getAllDayHeight();\n          }\n\n          _this17._maxAllowedVerticalPosition[groupIndex] = Math.round(maxPosition);\n        })(rowIndex);\n      }\n\n      return this._maxAllowedVerticalPosition[groupIndex];\n    }\n  }, {\n    key: \"getFixedContainer\",\n    value: function getFixedContainer() {\n      return this._$fixedContainer;\n    }\n  }, {\n    key: \"getAllDayContainer\",\n    value: function getAllDayContainer() {\n      return this._$allDayContainer;\n    }\n  }, {\n    key: \"getCellIndexByCoordinates\",\n    value: function getCellIndexByCoordinates(coordinates, allDay) {\n      var cellCount = this._getTotalCellCount(this._getGroupCount());\n\n      var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\n      var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\n      var leftOffset = this._isRTL() || this.option(\"crossScrollingEnabled\") ? 0 : this.getWorkSpaceLeftOffset();\n      var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\n      var leftIndex = Math.floor((coordinates.left + 5 - leftOffset) / cellWidth);\n\n      if (this._isRTL()) {\n        leftIndex = cellCount - leftIndex - 1;\n      }\n\n      return cellCount * topIndex + leftIndex;\n    }\n  }, {\n    key: \"getStartViewDate\",\n    value: function getStartViewDate() {\n      return this._firstViewDate;\n    }\n  }, {\n    key: \"getEndViewDate\",\n    value: function getEndViewDate() {\n      var dateOfLastViewCell = this.getDateOfLastViewCell();\n      var endDateOfLastViewCell = this.calculateEndViewDate(dateOfLastViewCell);\n      return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell);\n    }\n  }, {\n    key: \"getEndViewDateByEndDayHour\",\n    value: function getEndViewDateByEndDayHour() {\n      var dateOfLastViewCell = this.getDateOfLastViewCell();\n      var endTime = dateUtils.dateTimeFromDecimal(this.option(\"endDayHour\"));\n      var endDateOfLastViewCell = new Date(dateOfLastViewCell.setHours(endTime.hours, endTime.minutes));\n      return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell);\n    }\n  }, {\n    key: \"calculateEndViewDate\",\n    value: function calculateEndViewDate(dateOfLastViewCell) {\n      return new Date(dateOfLastViewCell.getTime() + this.getCellDuration());\n    }\n  }, {\n    key: \"_adjustEndViewDateByDaylightDiff\",\n    value: function _adjustEndViewDateByDaylightDiff(startDate, endDate) {\n      var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\n      var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\n      return new Date(endDateOfLastViewCell.getTime() - this._getEndViewDateTimeDiff());\n    }\n  }, {\n    key: \"_getEndViewDateTimeDiff\",\n    value: function _getEndViewDateTimeDiff() {\n      return toMs(\"minute\");\n    }\n  }, {\n    key: \"getDateOfLastViewCell\",\n    value: function getDateOfLastViewCell() {\n      var rowIndex = this._getRowCount() - 1;\n\n      var cellIndex = this._getCellCount();\n\n      if (this.isGroupedByDate()) {\n        cellIndex = cellIndex * this._getGroupCount() - 1;\n      } else {\n        cellIndex -= 1;\n      }\n\n      return this._getDateByCellIndexes(rowIndex, cellIndex, true);\n    }\n  }, {\n    key: \"getCellDuration\",\n    value: function getCellDuration() {\n      return 36e5 * this.option(\"hoursInterval\");\n    }\n  }, {\n    key: \"getIntervalDuration\",\n    value: function getIntervalDuration(allDay) {\n      return allDay ? toMs(\"day\") : this.getCellDuration();\n    }\n  }, {\n    key: \"getVisibleDayDuration\",\n    value: function getVisibleDayDuration() {\n      return this.option(\"hoursInterval\") * this._getCellCountInDay() * HOUR_MS;\n    }\n  }, {\n    key: \"getGroupBounds\",\n    value: function getGroupBounds(coordinates) {\n      var cellCount = this._getCellCount();\n\n      var $cells = this._getCells();\n\n      var cellWidth = this.getCellWidth();\n      var result;\n\n      if (this.isVirtualScrolling()) {\n        var groupedDataMap = this.viewDataProvider.groupedDataMap;\n        result = this._groupedStrategy.getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\n      } else {\n        result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates);\n      }\n\n      if (this._isRTL()) {\n        var startOffset = result.left;\n        result.left = result.right - 2 * cellWidth;\n        result.right = startOffset + 2 * cellWidth;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"needRecalculateResizableArea\",\n    value: function needRecalculateResizableArea() {\n      return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop();\n    }\n  }, {\n    key: \"getCellDataByCoordinates\",\n    value: function getCellDataByCoordinates(coordinates, allDay) {\n      var _this18 = this;\n\n      var key = JSON.stringify({\n        top: coordinates.top,\n        left: coordinates.left\n      });\n      return this.cache.get(key, function () {\n        var $cells = _this18._getCells(allDay);\n\n        var cellIndex = _this18.getCellIndexByCoordinates(coordinates, allDay);\n\n        var $cell = $cells.eq(cellIndex);\n        return _this18.getCellData($cell);\n      });\n    }\n  }, {\n    key: \"getVisibleBounds\",\n    value: function getVisibleBounds() {\n      var result = {};\n      var $scrollable = this.getScrollable().$element();\n      var cellHeight = this.getCellHeight();\n      var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\n      var totalCellCount = scrolledCellCount + $scrollable.height() / cellHeight;\n      result.top = {\n        hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n        minutes: scrolledCellCount % 2 ? 30 : 0\n      };\n      result.bottom = {\n        hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n        minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\n      };\n      return result;\n    }\n  }, {\n    key: \"updateScrollPosition\",\n    value: function updateScrollPosition(date, groups) {\n      var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n      var scheduler = this.option(\"observer\");\n      var newDate = scheduler.timeZoneCalculator.createDate(date, {\n        path: \"toGrid\"\n      });\n      var inAllDayRow = allDay && this.isAllDayPanelVisible;\n\n      if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\n        this.scrollTo(newDate, groups, inAllDayRow, false);\n      }\n    }\n  }, {\n    key: \"needUpdateScrollPosition\",\n    value: function needUpdateScrollPosition(date, groups, inAllDayRow) {\n      var _this19 = this;\n\n      var cells = this._getCellsInViewport(inAllDayRow);\n\n      var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n      var time = date.getTime();\n      var trimmedTime = dateUtils.trimTime(date).getTime();\n      return cells.reduce(function (currentResult, cell) {\n        var _this19$getCellData = _this19.getCellData(cell),\n            cellStartDate = _this19$getCellData.startDate,\n            cellEndDate = _this19$getCellData.endDate,\n            cellGroupIndex = _this19$getCellData.groupIndex;\n\n        var cellStartTime = cellStartDate.getTime();\n        var cellEndTime = cellEndDate.getTime();\n\n        if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\n          return false;\n        }\n\n        return currentResult;\n      }, true);\n    }\n  }, {\n    key: \"_getCellsInViewport\",\n    value: function _getCellsInViewport(inAllDayRow) {\n      var $scrollable = this.getScrollable().$element();\n      var cellHeight = this.getCellHeight();\n      var cellWidth = this.getCellWidth();\n\n      var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\n\n      var scrollableScrollTop = this.getScrollableScrollTop();\n      var scrollableScrollLeft = this.getScrollableScrollLeft();\n      var fullScrolledRowCount = scrollableScrollTop / cellHeight;\n\n      if (this.isVirtualScrolling()) {\n        fullScrolledRowCount -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n      }\n\n      var scrolledRowCount = Math.floor(fullScrolledRowCount);\n\n      if (scrollableScrollTop % cellHeight !== 0) {\n        scrolledRowCount += 1;\n      }\n\n      var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\n      var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\n\n      if (scrollableScrollLeft % cellWidth !== 0) {\n        scrolledColumnCount += 1;\n      }\n\n      var rowCount = Math.floor(fullScrolledRowCount + $scrollable.height() / cellHeight);\n      var columnCount = Math.floor(fullScrolledColumnCount + $scrollable.width() / cellWidth);\n\n      var $cells = this._getAllCells(inAllDayRow);\n\n      var result = [];\n      $cells.each(function (index) {\n        var $cell = $(this);\n        var columnIndex = index % totalColumnCount;\n        var rowIndex = index / totalColumnCount;\n\n        if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\n          result.push($cell);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"getGroupWidth\",\n    value: function getGroupWidth(groupIndex) {\n      var result = this._getCellCount() * this.getCellWidth();\n\n      if (this.isVirtualScrolling()) {\n        var groupedData = this.viewDataProvider.groupedDataMap.dateTableGroupedMap;\n        var groupLength = groupedData[groupIndex][0].length;\n        result = groupLength * this.getCellWidth();\n      }\n\n      var position = this.getMaxAllowedPosition(groupIndex);\n      var currentPosition = position[groupIndex];\n\n      if (currentPosition) {\n        if (this._isRTL()) {\n          result = currentPosition - position[groupIndex + 1];\n        } else if (0 === groupIndex) {\n          result = currentPosition;\n        } else {\n          result = currentPosition - position[groupIndex - 1];\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime(hours, minutes, date) {\n      if (!this._isValidScrollDate(date)) {\n        return;\n      }\n\n      var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n      var scrollable = this.getScrollable();\n      scrollable.scrollBy({\n        top: coordinates.top - scrollable.scrollTop(),\n        left: 0\n      });\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(date, groups) {\n      var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n      var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n\n      if (!this._isValidScrollDate(date, throwWarning)) {\n        return;\n      }\n\n      var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\n      var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\n\n      var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\n\n      var scrollable = this.getScrollable();\n      var $scrollable = scrollable.$element();\n      var offset = this.option(\"rtlEnabled\") ? this.getCellWidth() : 0;\n      var scrollableHeight = $scrollable.height();\n      var scrollableWidth = $scrollable.width();\n      var cellWidth = this.getCellWidth();\n      var cellHeight = this.getCellHeight();\n      var xShift = (scrollableWidth - cellWidth) / 2;\n      var yShift = (scrollableHeight - cellHeight) / 2;\n      var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\n      var top = coordinates.top - scrollable.scrollTop() - yShift;\n\n      if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\n        top = 0;\n      }\n\n      if (this.option(\"templatesRenderAsynchronously\")) {\n        setTimeout(function () {\n          scrollable.scrollBy({\n            left: left,\n            top: top\n          });\n        });\n      } else {\n        scrollable.scrollBy({\n          left: left,\n          top: top\n        });\n      }\n    }\n  }, {\n    key: \"_isValidScrollDate\",\n    value: function _isValidScrollDate(date) {\n      var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n      var min = this.getStartViewDate();\n      var max = this.getEndViewDate();\n\n      if (date < min || date > max) {\n        throwWarning && errors.log(\"W1008\", date);\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getDistanceBetweenCells\",\n    value: function getDistanceBetweenCells(startIndex, endIndex) {\n      var result = 0;\n      this.$element().find(\".\" + this._getDateTableRowClass()).first().find(\".\" + DATE_TABLE_CELL_CLASS).each(function (index) {\n        if (index < startIndex || index > endIndex) {\n          return true;\n        }\n\n        result += getBoundingRect(this).width;\n      });\n      return result;\n    }\n  }, {\n    key: \"needApplyCollectorOffset\",\n    value: function needApplyCollectorOffset() {\n      return false;\n    }\n  }, {\n    key: \"initDragBehavior\",\n    value: function initDragBehavior(scheduler) {\n      if (!this.dragBehavior && scheduler) {\n        this.dragBehavior = new AppointmentDragBehavior(scheduler);\n\n        this._createDragBehavior(this.getWorkArea());\n\n        this._createDragBehavior(this.getAllDayContainer());\n\n        this._createDragBehavior(this._$allDayPanel);\n      }\n    }\n  }, {\n    key: \"_createDragBehavior\",\n    value: function _createDragBehavior($element) {\n      this._createDragBehaviorBase($element, function (itemElement, appointments) {\n        return appointments._getItemData(itemElement);\n      }, function ($itemElement) {\n        return $itemElement.data(APPOINTMENT_SETTINGS_KEY);\n      });\n    }\n  }, {\n    key: \"_createDragBehaviorBase\",\n    value: function _createDragBehaviorBase($element, getItemData, getItemSettings) {\n      var _this20 = this;\n\n      var options = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};\n      var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\n      var element = this.$element();\n      var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\n      this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, function () {\n        return _this20._attachDragEvents(element);\n      }, function () {\n        return _this20._detachDragEvents(element);\n      }, function () {\n        return _this20._getDroppableCell();\n      }, function () {\n        return _this20.removeDroppableCellClass();\n      }, function () {\n        return _this20.getCellWidth();\n      }, getItemData, getItemSettings, options));\n    }\n  }, {\n    key: \"_createDragAppointment\",\n    value: function _createDragAppointment(itemData, settings, appointments) {\n      var appointmentIndex = appointments.option(\"items\").length;\n      settings.isCompact = false;\n      settings.virtual = false;\n\n      var items = appointments._renderItem(appointmentIndex, {\n        itemData: itemData,\n        settings: [settings]\n      });\n\n      return items[0];\n    }\n  }, {\n    key: \"_isApplyCompactAppointmentOffset\",\n    value: function _isApplyCompactAppointmentOffset() {\n      return this._supportCompactDropDownAppointments();\n    }\n  }, {\n    key: \"_supportCompactDropDownAppointments\",\n    value: function _supportCompactDropDownAppointments() {\n      return true;\n    }\n  }, {\n    key: \"_formatWeekday\",\n    value: function _formatWeekday(date) {\n      return formatWeekday(date);\n    }\n  }, {\n    key: \"_formatWeekdayAndDay\",\n    value: function _formatWeekdayAndDay(date) {\n      return formatWeekday(date) + \" \" + dateLocalization.format(date, \"day\");\n    }\n  }, {\n    key: \"removeDroppableCellClass\",\n    value: function removeDroppableCellClass($cellElement) {\n      ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n    }\n  }, {\n    key: \"_getCoordinatesByCell\",\n    value: function _getCoordinatesByCell($cell) {\n      var columnIndex = $cell.index();\n      var rowIndex = $cell.parent().index();\n\n      var isAllDayCell = this._hasAllDayClass($cell);\n\n      var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n      if (this.isVirtualScrolling() && !(isAllDayCell && !isVerticalGrouping)) {\n        rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n      }\n\n      if (this.isVirtualScrolling()) {\n        columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount;\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  }, {\n    key: \"_isShowAllDayPanel\",\n    value: function _isShowAllDayPanel() {\n      return this.option(\"showAllDayPanel\");\n    }\n  }, {\n    key: \"updateAppointments\",\n    value: function updateAppointments() {\n      var _this$dragBehavior;\n\n      this.invoke(\"renderAppointments\");\n      null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource();\n    }\n  }, {\n    key: \"_getTimePanelCells\",\n    value: function _getTimePanelCells() {\n      return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS));\n    }\n  }, {\n    key: \"_getRDateTableProps\",\n    value: function _getRDateTableProps() {\n      return {\n        viewData: this.viewDataProvider.viewData,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\n        groupOrientation: this.option(\"groupOrientation\")\n      };\n    }\n  }, {\n    key: \"_getTimeOffsetForStartViewDate\",\n    value: function _getTimeOffsetForStartViewDate() {\n      var startViewDate = this.getStartViewDate();\n      var startDayHour = Math.floor(this.option(\"startDayHour\"));\n      var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\n\n      if (isDSTChange && startDayHour !== startViewDate.getHours()) {\n        return toMs(\"hour\");\n      }\n\n      return 0;\n    }\n  }]);\n\n  return SchedulerWorkSpace;\n}(WidgetObserver);\n\nvar createDragBehaviorConfig = function createDragBehaviorConfig(container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, removeDroppableCellClass, getCellWidth, getItemData, getItemSettings, options) {\n  var state = {\n    dragElement: void 0,\n    itemData: void 0\n  };\n  var cursorOffset = options.isSetCursorOffset ? function () {\n    var $dragElement = $(state.dragElement);\n    return {\n      x: $dragElement.width() / 2,\n      y: $dragElement.height() / 2\n    };\n  } : void 0;\n  return {\n    container: container,\n    dragTemplate: function dragTemplate() {\n      return state.dragElement;\n    },\n    onDragStart: function onDragStart(e) {\n      if (!isDefaultDraggingMode) {\n        detachGeneralEvents();\n      }\n\n      var canceled = e.cancel;\n      var event = e.event;\n      var $itemElement = $(e.itemElement);\n      var appointments = e.component._appointments;\n      state.itemData = getItemData(e.itemElement, appointments);\n      var settings = getItemSettings($itemElement, e);\n\n      if (state.itemData && !state.itemData.disabled) {\n        event.data = event.data || {};\n\n        if (!canceled) {\n          if (!settings.isCompact) {\n            dragBehavior.updateDragSource(state.itemData, settings);\n          }\n\n          state.dragElement = function (itemData, settings, appointments) {\n            var appointmentIndex = appointments.option(\"items\").length;\n            settings.isCompact = false;\n            settings.virtual = false;\n\n            var items = appointments._renderItem(appointmentIndex, {\n              itemData: itemData,\n              settings: [settings]\n            });\n\n            return items[0];\n          }(state.itemData, settings, appointments);\n\n          event.data.itemElement = state.dragElement;\n          event.data.initialPosition = locate($(state.dragElement));\n          event.data.itemData = state.itemData;\n          event.data.itemSettings = settings;\n          dragBehavior.onDragStart(event.data);\n          resetPosition($(state.dragElement));\n        }\n      }\n    },\n    onDragMove: function onDragMove() {\n      if (isDefaultDraggingMode) {\n        return;\n      }\n\n      var appointmentWidth = $(state.dragElement).width();\n      var isWideAppointment = appointmentWidth > getCellWidth();\n      var draggableElement = locate($(state.dragElement).parent());\n      var newX = draggableElement.left + 10;\n      var newY = draggableElement.top + 10;\n      var elements = isWideAppointment ? getElementsFromPoint(newX, newY) : getElementsFromPoint(newX + appointmentWidth / 2, newY);\n      var droppableCell = elements.filter(function (el) {\n        return el.className.indexOf(DATE_TABLE_CELL_CLASS) > -1 || el.className.indexOf(ALL_DAY_TABLE_CELL_CLASS) > -1;\n      })[0];\n\n      if (droppableCell) {\n        var oldDroppableCell = getDroppableCell();\n\n        if (!oldDroppableCell.is(droppableCell)) {\n          removeDroppableCellClass();\n        }\n\n        $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    },\n    onDragEnd: function onDragEnd(e) {\n      var _state$dragElement;\n\n      if (!isDefaultDraggingMode) {\n        attachGeneralEvents();\n      }\n\n      if (state.itemData && !state.itemData.disabled) {\n        dragBehavior.onDragEnd(e);\n      }\n\n      null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\n      removeDroppableCellClass();\n    },\n    cursorOffset: cursorOffset,\n    filter: options.filter\n  };\n};\n\nexport default SchedulerWorkSpace;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.js"],"names":["_extends","$","domAdapter","eventsEngine","data","elementData","dateUtils","getWindow","hasWindow","getPublicElement","extend","each","getBoundingRect","getElementsFromPoint","messageLocalization","dateLocalization","noop","isDefined","addNamespace","isMouseEvent","pointerEvents","errors","name","clickEventName","contextMenuEventName","enter","dragEventEnter","leave","dragEventLeave","drop","dragEventDrop","Scrollable","HorizontalGroupedStrategy","VerticalGroupedStrategy","tableCreatorModule","tableCreator","VerticalShader","AppointmentDragBehavior","APPOINTMENT_SETTINGS_KEY","FIXED_CONTAINER_CLASS","VIRTUAL_CELL_CLASS","timeZoneUtils","WidgetObserver","resetPosition","locate","VirtualScrollingDispatcher","ViewDataProvider","dxrDateTableLayout","dxrAllDayPanelLayout","dxrAllDayPanelTitle","dxrTimePanelTableLayout","dxrGroupPanel","dxrDateHeader","VirtualSelectionState","cache","abstract","toMs","dateToMilliseconds","COMPONENT_CLASS","GROUPED_WORKSPACE_CLASS","VERTICAL_GROUPED_WORKSPACE_CLASS","WORKSPACE_VERTICAL_GROUP_TABLE_CLASS","WORKSPACE_WITH_BOTH_SCROLLS_CLASS","WORKSPACE_WITH_COUNT_CLASS","WORKSPACE_WITH_GROUP_BY_DATE_CLASS","WORKSPACE_WITH_ODD_CELLS_CLASS","TIME_PANEL_CLASS","TIME_PANEL_CELL_CLASS","TIME_PANEL_ROW_CLASS","ALL_DAY_PANEL_CLASS","ALL_DAY_TABLE_CLASS","ALL_DAY_CONTAINER_CLASS","ALL_DAY_TITLE_CLASS","ALL_DAY_TITLE_HIDDEN_CLASS","ALL_DAY_TABLE_CELL_CLASS","ALL_DAY_TABLE_ROW_CLASS","WORKSPACE_WITH_ALL_DAY_CLASS","WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS","WORKSPACE_WITH_MOUSE_SELECTION_CLASS","HORIZONTAL_SIZES_CLASS","VERTICAL_SIZES_CLASS","HEADER_PANEL_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CLASS","GROUP_HEADER_CONTENT_CLASS","DATE_TABLE_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_ROW_CLASS","DATE_TABLE_FOCUSED_CELL_CLASS","VIRTUAL_ROW_CLASS","DATE_TABLE_DROPPABLE_CELL_CLASS","SCHEDULER_HEADER_SCROLLABLE_CLASS","SCHEDULER_SIDEBAR_SCROLLABLE_CLASS","SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS","SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME","down","DragEventNames","ENTER","DROP","LEAVE","SCHEDULER_CELL_DXCLICK_EVENT_NAME","SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME","SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME","up","SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME","move","CELL_DATA","DATE_TABLE_CELL_BORDER","DATE_TABLE_MIN_CELL_WIDTH","DAY_MS","HOUR_MS","DRAG_AND_DROP_SELECTOR","concat","CELL_SELECTOR","ScrollSemaphore","counter","formatWeekday","date","getDayNames","getDay","SchedulerWorkSpace","_viewDataProvider","_virtualSelectionState","viewDataProvider","_isShowAllDayPanel","supportAllDayRow","clickHandler","e","preventDefault","stopPropagation","_selectedCells","length","$itemElement","option","$cellElement","target","_showPopup","_cellClickAction","event","cellElement","cellData","getCellData","arrowPressHandler","cell","_moveToCell","shiftKey","space","downArrow","$cell","_getCellFromNextRow","call","upArrow","rightArrow","$rightCell","_getCellFromNextColumn","leftArrow","$leftCell","_this$virtualScrollin","virtualScrollingDispatcher","dispose","_$focusedCell","_$dateTable","find","eq","direction","$currentCell","cellIndex","index","$row","parent","children","_checkForViewBounds","$item","isMultiSelection","$focusedCell","$nextCell","nextColumnDirection","isDirectionNext","previousColumnDirection","isRTL","_isRTL","groupCount","_getGroupCount","isHorizontalGrouping","_isHorizontalGroupedWorkSpace","isGroupedByDate","totalCellCount","_getTotalCellCount","rowCellCount","_getCellCount","lastIndexInRow","currentIndex","step","isEdgeCell","_isEdgeCell","sign","directionSign","resultingSign","_isGroupEndCell","nextIndex","rowDirection","rightEdgeCellIndex","leftEdgeCellIndex","edgeCellIndex","isNextCellGreaterThanEdge","isNextCellLessThanEdge","isRightEdgeCell","isLeftEdgeCell","cellsInRow","currentCellIndex","result","endCell","startCell","_setSelectedAndFocusedCells","_dateTableScrollable","scrollToElement","updateViewData","isVirtualScrolling","$correctedCell","_correctCellForGroup","hasClass","_setSelectedCells","_setFocusedCell","arguments","_releaseFocusedCell","_getCoordinatesByCell","rowIndex","columnIndex","isAllDayCell","_hasAllDayClass","virtualSelectionState","setFocusedCell","focusedCell","getFocusedCell","coordinates","allDay","_isVerticalGroupedWorkSpace","_dom_getAllDayPanelCell","_dom_getDateCell","_toggleFocusedCellClass","$firstCell","_releaseSelectedCells","_setSelectedCellsInVirtualMode","_setSelectedCellsInStandardMode","$selectedCells","_toggleFocusClass","setAria","selectedCellData","getSelectedCellData","map","_ref","startDate","endDate","groups","groupIndex","_selectionChangedAction","$previousCell","_$prevCell","orientation","$targetCells","_getCellsBetween","toArray","get","firstRow","firstColumn","isFirstAllDay","firstCell","setSelectedCells","_firstCell","_setSelectedCellsByCellData","getSelectedCells","isVirtualCell","isValidFocusedCell","cellGroupIndex","_getGroupIndexByCell","focusedCellGroupIndex","isDifferentTables","$first","$last","isAllDayTable","$cells","_getCells","firstIndex","lastIndex","buffer","slice","focusedGroupIndex","_","push","bind","_groupedStrategy","getGroupIndexByCell","isFocused","$element","$focusTarget","_focusTarget","toggleClass","is","_isCellClick","_contextMenuHandled","apply","_getFocusedCell","_this$virtualSelectio","_releaseSelectedAndFocusedCells","releaseSelectedAndFocusedCells","currentDate","Date","intervalCount","firstDayOfWeek","startDayHour","endDayHour","hoursInterval","activeStateEnabled","hoverStateEnabled","showAllDayPanel","allDayExpanded","onCellClick","crossScrollingEnabled","dataCellTemplate","timeCellTemplate","resourceCellTemplate","dateCellTemplate","allowMultipleCellSelection","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","groupOrientation","groupByDate","scrolling","mode","renovateRender","height","draggingMode","args","invoke","_cleanWorkSpace","_cleanView","_removeAllDayElements","_initGrouping","repaint","_initGroupedStrategy","_createAllDayPanelElements","_toggleGroupByDateClass","isRenovatedRender","_toggleAllDayVisibility","renderRWorkspace","_changeAllDayVisibility","_attachTablesEvents","headerPanelOffsetRecalculate","_updateScrollable","_createSelectionChangedAction","_createCellClickAction","_attachContextMenuEvent","_toggleWorkSpaceCountClass","_toggleFixedScrollableClass","_toggleHorizontalScrollClass","_dateTableScrollableConfig","_dimensionChanged","_isVirtualModeOn","_this$virtualScrollin2","_toggleGroupedClass","_toggleWorkSpaceWithOddCells","updateDimensions","_renderView","_setTableSizes","clear","_headerSemaphore","_sideBarSemaphore","_dataTableSemaphore","_activeStateUnit","_maxAllowedVerticalPosition","_maxAllowedPosition","addClass","_getElementClass","_toggleGroupingDirectionClass","strategyName","_getDefaultGroupStrategy","Strategy","_isWorkSpaceWithCount","_isWorkspaceWithOddCells","i","j","cellClass","_needApplyLastGroupCellClass","addAdditionalGroupCellClasses","_$headerPanel","_$thead","appendTo","_$fixedContainer","_$allDayContainer","_initAllDayPanelElements","createRAllDayPanelElements","_$timePanel","_getTimePanelClass","_$groupTable","_allDayTitles","_allDayTables","_allDayPanels","_$allDayPanel","_$allDayTitle","$allDayTitle","text","format","_$allDayTable","append","$dateTableScrollable","_createComponent","config","useKeyboard","bounceEnabled","updateManually","_needCreateCrossScrolling","_createCrossScrollingConfig","onScroll","take","isFree","_sidebarScrollable","scrollTo","top","scrollOffset","_headerScrollable","left","release","onEnd","notifyObserver","_createWorkSpaceScrollableElements","_createWorkSpaceStaticElements","$content","_createHeaderScrollable","_createSidebarScrollable","prepend","$headerScrollable","_headerScrollableConfig","showScrollbar","useNative","$timePanelScrollable","visible","_updateGroupTableHeight","_addTableClass","_getDateTableClass","$el","className","_attachTableClasses","cellWidth","getCellWidth","getCellMinWidth","minWidth","getWorkSpaceMinWidth","width","_attachHeaderTableClasses","_cleanAllowedPositions","allDayRowCount","_getRowCount","_initWorkSpaceUnits","_initDateTableScrollable","_createWorkSpaceElements","_initVirtualScrolling","_attachEvents","_setFocusOnCellByOption","renovatedRenderSupported","_renderDateTimeIndication","_setIndicationUpdateInterval","_setFirstViewDate","renderRGroupPanel","_applyCellTemplates","_renderGroupHeader","_renderDateHeader","_renderTimePanel","_renderGroupAllDayPanel","_renderDateTable","_renderAllDayPanel","_shader","options","isProvideVirtualCellsWidth","_this$_getToday","verticalGroupCount","horizontalGroupCount","allDayElements","_insertAllDayRowsIntoDateTable","rowCountInGroup","cellCount","rowCount","_getTotalRowCount","cellCountInGroupRow","cellDataGetters","_getCellData","startRowIndex","startCellIndex","totalRowCount","getDateHeaderText","_getHeaderText","getDateHeaderDate","_getDateByIndex","getTimeCellDate","_getTimeCellDate","today","_getToday","groupsList","_getAllGroups","isVerticalGrouping","getRenderState","_this$virtualScrollin3","isGenerateNewViewData","update","renderRHeaderPanel","renderRTimeTable","renderRDateTable","renderRAllDayPanel","updateRSelection","renderRComponent","_getRDateTableProps","verticalGroupTableClass","baseColSpan","columnCountPerGroup","_attachGroupCountAttr","_getGroupHeaderContainer","_detachGroupCountAttr","isGroupedAllDayPanel","viewData","horizontalVirtualScrolling","renderState","renovatedAllDayPanel","timePanelData","isRenderDateHeader","renovatedHeaderPanelComponent","dateHeaderData","groupPanelCellBaseColSpan","parentElement","componentClass","componentName","viewModel","component","container","selectedCells","_setHorizontalGroupHeaderCellsHeight","_data$","cells","_getAllCells","forEach","_isGroupsSpecified","_getGroupIndexByResourceId","findCellPositionInMap","isAllDay","getCoordinatesByDate","_index","resources","id","resourceTree","_getGroupIndexRecursively","currentKey","currentValue","reduce","prevIndex","_ref2","leafIndex","value","areValuesEqual","firstDayOfWeekOption","_firstDayOfWeek","firstDayOfWeekIndex","_getCalculatedFirstDayOfWeek","_firstViewDate","getFirstWeekDate","_getViewStartByOptions","_setStartDayHour","trimTime","_getStartViewDate","diff","getTime","_getIntervalDuration","_dateInRange","getStartViewDate","dateInRange","setHours","_attachClickEvent","that","pointerDownAction","_createAction","_pointerDownHandler","cellSelector","off","on","which","_createActionByOption","afterExecute","_cellClickHandler","$target","_hasFocusClass","_showAddAppointmentPopup","firstCellData","first","lastCellData","last","_createContextMenuAction","eventName","NAME","_contextMenuHandler","_contextMenuAction","$container","cellTemplates","groupRows","_makeGroupRows","elements","templates","template","groupedAttr","getGroupCountAttr","removeAttr","attr","count","headerPanelHeight","getHeaderPanelHeight","headerHeight","allDayPanelHeight","isAllDayPanelVisible","getAllDayTableHeight","css","paddingBottom","marginBottom","parseInt","tableCreatorStrategy","VERTICAL","HORIZONTAL","makeGroupedTable","groupHeaderRowClass","_getGroupRowClass","groupRowClass","groupHeaderClass","_getGroupHeaderClass","groupHeaderContentClass","_getGroupHeaderContentClass","_getDateHeaderContainer","$headerRow","cellTemplate","_getDateHeaderTemplate","repeatCount","_getCalculateHeaderCellRepeatCount","templateCallbacks","templateIndex","_renderDateHeaderTemplate","colSpan","_cellIndex","_templateIndex","panelCellIndex","_getHeaderPanelCellClass","render","model","_getGroupsForDateHeaderTemplate","indexMultiplier","_getGroupIndex","groupsArray","_getCellGroups","_getGroupsObjectFromGroupsArray","calculateHeaderCellRepeatCount","_renderTableBody","_getAllDayPanelCellClass","rowClass","_getAllDayCellData","_getDateByCellIndexes","key","isUpdateScrollable","toggle","calculateTimeCellRepeatCount","startViewDate","getDateWithoutTimezoneChange","_getTimePanelRowCount","_getTimeCellClass","getCellText","_getTimeCellDateCore","getCellDate","getTemplateData","_getCellCountInDay","skipRound","_calculateDayDuration","Math","ceil","timeCellDuration","round","getCellDuration","cellCountInDay","setMilliseconds","getMilliseconds","_getTimeOffsetForStartViewDate","_getDateTableCellClass","_getDateTableRowClass","insertAllDayRowsIntoDateTable","getTotalCellCount","includeAllDayPanelRows","getTotalRowCount","_prepareCellData","calculateEndDate","_getTableAllDay","getGroupIndex","_getInterval","len","items","tree","leaf","findLeafByIndex","_leaf","makeBranch","reverse","Array","path","_getPathToLeaf","currentGroups","_ref3","element","_attachDragEvents","_attachPointerEvents","_detachDragEvents","checkDropTarget","_isOutsideScrollable","removeDroppableCellClass","isPointerDown","getDocument","removeClass","add","_interval","headerIndex","_getDateForHeaderText","_getFormat","calculateCellIndex","delayCellTemplateRendering","makeTable","remove","_this$virtualSelectio2","_this$_shader","_cleanTableWidths","_this$_$allDayTable","_this$_$sidebarTable","empty","_$sidebarTable","clean","_hiddenInterval","_disposeRenovatedComponents","_this$renovatedAllDay","_this$renovatedDateTa","_this$renovatedTimePa","_this$renovatedGroupP","_this$renovatedHeader","renovatedDateTable","renovatedTimePanel","renovatedGroupPanel","renovatedHeaderPanel","scrollTop","getScrollableScrollTop","scrollLeft","scrollWidth","_container","outerHeight","outerWidth","getLeftOffset","floor","patchedIndexes","_patchCellIndex","firstViewDate","firstViewDateTime","millisecondsOffset","_getMillisecondsOffset","offsetByCount","_getOffsetByCount","startViewDateOffset","setTime","getTimezonesDifference","_calculateCellIndex","_calculateHiddenInterval","dayCount","_getHiddenInterval","getVisibleDayDuration","startDayTime","timeZoneOffset","fullInterval","days","_getDaysOfInterval","weekendsCount","_getWeekendsCount","appointmentResources","_getDateTables","getTimePanelWidth","inAllDayRow","cellCoordinates","_getCellCoordinatesByIndex","_getCellByCoordinates","_getCellPositionWithCache","_getCellPosition","setCellDataCache","position","indexes","prepareCellIndexes","_getDateTableBorder","hours","minutes","findGlobalCellPosition","calculateCoordinatesByDataAndPosition","isDateAndTimeView","viewDirection","$dateTableScrollableElement","scrollableSize","window","isTargetInAllDayPanel","closest","isOutsideHorizontalScrollable","pageX","scrollX","isOutsideVerticalScrollable","pageY","scrollY","JSON","stringify","set","appointment","geometry","aliasKey","$focusedCells","_getAllFocusedCells","_getMultipleCellsData","currentCell","_getCellDataInRenovatedView","_this$virtualScrollin4","virtualRowOffset","_this$virtualScrollin5","virtualCellOffset","topVirtualRowsCount","leftVirtualCellsCount","getHorizontalMax","cellInfo","positionByMap","calculateCellPositionByView","shift","getPositionShift","getTimeShift","horizontalHMax","_getHorizontalMax","Error","cellPosition","hMax","vMax","getVerticalMax","getCellIndexByDate","_getCellPositionByIndex","_getOffsetByAllDayPanel","_getGroupTop","timeInterval","dateTimeStamp","_getIntervalBetween","_updateIndex","timeShift","getCellHeight","currentDayStart","cellDuration","currentDayEndHour","timeZoneDifference","currentDateTime","currentDayStartTime","minTime","_isSkippedData","groupIndices","_getGroupIndexes","$droppableCell","_getDroppableCell","getEndViewDateByEndDayHour","startIndex","useCache","callbackResult","getAllDayOffset","validGroupIndex","getRMaxAllowedHorizontalPosition","getMaxAllowedHorizontalPosition","isRtl","maxPosition","getLasGroupCellPosition","getRMaxAllowedVerticalPosition","getMaxAllowedVerticalPositionStandard","row","getAllDayHeight","_getWorkSpaceWidth","cellHeight","leftOffset","getWorkSpaceLeftOffset","topIndex","leftIndex","dateOfLastViewCell","getDateOfLastViewCell","endDateOfLastViewCell","calculateEndViewDate","_adjustEndViewDateByDaylightDiff","endTime","dateTimeFromDecimal","daylightDiff","getDaylightOffsetInMs","_getEndViewDateTimeDiff","groupedDataMap","getVirtualScrollingGroupBoundsOffset","getGroupBoundsOffset","startOffset","right","getScrollable","getCellIndexByCoordinates","$scrollable","scrolledCellCount","bottom","scheduler","newDate","timeZoneCalculator","createDate","needUpdateScrollPosition","_getCellsInViewport","time","trimmedTime","currentResult","cellStartDate","cellEndDate","cellStartTime","cellEndTime","totalColumnCount","scrollableScrollTop","scrollableScrollLeft","getScrollableScrollLeft","fullScrolledRowCount","scrolledRowCount","fullScrolledColumnCount","scrolledColumnCount","columnCount","groupedData","dateTableGroupedMap","groupLength","getMaxAllowedPosition","currentPosition","_isValidScrollDate","_getScrollCoordinates","scrollable","scrollBy","throwWarning","isScrollToAllDay","getHours","getMinutes","offset","scrollableHeight","scrollableWidth","xShift","yShift","setTimeout","min","max","getEndViewDate","log","endIndex","dragBehavior","_createDragBehavior","getWorkArea","getAllDayContainer","_createDragBehaviorBase","itemElement","appointments","_getItemData","getItemData","getItemSettings","isDefaultDraggingMode","addTo","createDragBehaviorConfig","itemData","settings","appointmentIndex","isCompact","virtual","_renderItem","_supportCompactDropDownAppointments","_this$dragBehavior","updateDragSource","addDateTableClass","isDSTChange","isTimezoneChangeInDate","attachGeneralEvents","detachGeneralEvents","getDroppableCell","state","dragElement","cursorOffset","isSetCursorOffset","$dragElement","x","y","dragTemplate","onDragStart","canceled","cancel","_appointments","disabled","initialPosition","itemSettings","onDragMove","appointmentWidth","isWideAppointment","draggableElement","newX","newY","droppableCell","filter","el","indexOf","oldDroppableCell","onDragEnd","_state$dragElement"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    data as elementData\r\n} from \"../../../core/element_data\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getBoundingRect,\r\n    getElementsFromPoint\r\n} from \"../../../core/utils/position\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    isMouseEvent\r\n} from \"../../../events/utils/index\";\r\nimport pointerEvents from \"../../../events/pointer\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../events/click\";\r\nimport {\r\n    name as contextMenuEventName\r\n} from \"../../../events/contextmenu\";\r\nimport {\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    drop as dragEventDrop\r\n} from \"../../../events/drag\";\r\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\r\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\r\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\r\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\r\nimport {\r\n    APPOINTMENT_SETTINGS_KEY,\r\n    FIXED_CONTAINER_CLASS,\r\n    VIRTUAL_CELL_CLASS\r\n} from \"../constants\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nimport WidgetObserver from \"../base/widgetObserver\";\r\nimport {\r\n    resetPosition,\r\n    locate\r\n} from \"../../../animation/translator\";\r\nimport VirtualScrollingDispatcher from \"./ui.scheduler.virtual_scrolling\";\r\nimport ViewDataProvider from \"./view_data_provider\";\r\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\r\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\r\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\r\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\r\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport VirtualSelectionState from \"./virtual_selection_state\";\r\nimport {\r\n    cache\r\n} from \"./cache\";\r\nvar abstract = WidgetObserver.abstract;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\r\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\r\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\r\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\r\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\r\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\r\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\r\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\r\nvar TIME_PANEL_CLASS = \"dx-scheduler-time-panel\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\r\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\r\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\r\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\r\nvar ALL_DAY_TITLE_HIDDEN_CLASS = \"dx-scheduler-all-day-title-hidden\";\r\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\r\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\r\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\r\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\r\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\r\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\r\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\r\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar GROUP_ROW_CLASS = \"dx-scheduler-group-row\";\r\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\r\nvar GROUP_HEADER_CONTENT_CLASS = \"dx-scheduler-group-header-content\";\r\nvar DATE_TABLE_CLASS = \"dx-scheduler-date-table\";\r\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\r\nvar DATE_TABLE_ROW_CLASS = \"dx-scheduler-date-table-row\";\r\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\r\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\r\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\r\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\r\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\r\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\r\nvar DragEventNames = {\r\n    ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\r\n    DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\r\n    LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\r\n};\r\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\r\nvar CELL_DATA = \"dxCellData\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nvar DAY_MS = toMs(\"day\");\r\nvar HOUR_MS = toMs(\"hour\");\r\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\r\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\r\nclass ScrollSemaphore {\r\n    constructor() {\r\n        this.counter = 0\r\n    }\r\n    isFree() {\r\n        return 0 === this.counter\r\n    }\r\n    take() {\r\n        this.counter++\r\n    }\r\n    release() {\r\n        this.counter--;\r\n        if (this.counter < 0) {\r\n            this.counter = 0\r\n        }\r\n    }\r\n}\r\nvar formatWeekday = function(date) {\r\n    return dateLocalization.getDayNames(\"abbreviated\")[date.getDay()]\r\n};\r\nclass SchedulerWorkSpace extends WidgetObserver {\r\n    get viewDataProvider() {\r\n        if (!this._viewDataProvider) {\r\n            this._viewDataProvider = new ViewDataProvider(this)\r\n        }\r\n        return this._viewDataProvider\r\n    }\r\n    get cache() {\r\n        return cache\r\n    }\r\n    get virtualSelectionState() {\r\n        if (!this._virtualSelectionState) {\r\n            this._virtualSelectionState = new VirtualSelectionState(this.viewDataProvider)\r\n        }\r\n        return this._virtualSelectionState\r\n    }\r\n    get isAllDayPanelVisible() {\r\n        return this._isShowAllDayPanel() && this.supportAllDayRow()\r\n    }\r\n    get isDateAndTimeView() {\r\n        return true\r\n    }\r\n    get verticalGroupTableClass() {\r\n        return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"vertical\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    _supportedKeys() {\r\n        var clickHandler = function(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            if (this._selectedCells && this._selectedCells.length) {\r\n                var $itemElement = $(this.option(\"focusedElement\"));\r\n                var $cellElement = $($itemElement.length ? $itemElement : this._selectedCells);\r\n                e.target = this._selectedCells;\r\n                this._showPopup = true;\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    cellElement: $(this._selectedCells),\r\n                    cellData: this.getCellData($cellElement)\r\n                })\r\n            }\r\n        };\r\n        var arrowPressHandler = function(e, cell) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this._moveToCell(cell, e.shiftKey)\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            enter: clickHandler,\r\n            space: clickHandler,\r\n            downArrow: function(e) {\r\n                var $cell = this._getCellFromNextRow(\"next\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $cell)\r\n            },\r\n            upArrow: function(e) {\r\n                var $cell = this._getCellFromNextRow(\"prev\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $cell)\r\n            },\r\n            rightArrow: function(e) {\r\n                var $rightCell = this._getCellFromNextColumn(\"next\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $rightCell)\r\n            },\r\n            leftArrow: function(e) {\r\n                var $leftCell = this._getCellFromNextColumn(\"prev\", e.shiftKey);\r\n                arrowPressHandler.call(this, e, $leftCell)\r\n            }\r\n        })\r\n    }\r\n    _dispose() {\r\n        var _this$virtualScrollin;\r\n        super._dispose();\r\n        null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.dispose()\r\n    }\r\n    _isRTL() {\r\n        return this.option(\"rtlEnabled\")\r\n    }\r\n    _getFocusedCell() {\r\n        return this._$focusedCell || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0)\r\n    }\r\n    _getAllFocusedCells() {\r\n        return this._selectedCells || this._$dateTable.find(\".\" + DATE_TABLE_CELL_CLASS).eq(0)\r\n    }\r\n    _getCellFromNextRow(direction) {\r\n        var $currentCell = this._$focusedCell;\r\n        if (isDefined($currentCell)) {\r\n            var cellIndex = $currentCell.index();\r\n            var $row = $currentCell.parent();\r\n            var $cell = $row[direction]().children().eq(cellIndex);\r\n            $cell = this._checkForViewBounds($cell);\r\n            return $cell\r\n        }\r\n    }\r\n    _checkForViewBounds($item) {\r\n        if (!$item.length) {\r\n            $item = this._$focusedCell\r\n        }\r\n        return $item\r\n    }\r\n    _getCellFromNextColumn(direction, isMultiSelection) {\r\n        var $focusedCell = this._$focusedCell;\r\n        if (!isDefined($focusedCell)) {\r\n            return\r\n        }\r\n        var $nextCell;\r\n        var $row = $focusedCell.parent();\r\n        var nextColumnDirection = direction;\r\n        var isDirectionNext = \"next\" === direction;\r\n        var previousColumnDirection = isDirectionNext ? \"prev\" : \"next\";\r\n        var isRTL = this._isRTL();\r\n        var groupCount = this._getGroupCount();\r\n        var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\r\n        var isGroupedByDate = this.isGroupedByDate();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var rowCellCount = isMultiSelection && !isGroupedByDate ? this._getCellCount() : totalCellCount;\r\n        var lastIndexInRow = rowCellCount - 1;\r\n        var currentIndex = $focusedCell.index();\r\n        var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\r\n        var isEdgeCell = this._isEdgeCell(isHorizontalGrouping ? totalCellCount - 1 : lastIndexInRow, currentIndex, step, direction);\r\n        var sign = isRTL ? 1 : -1;\r\n        var directionSign = isDirectionNext ? 1 : -1;\r\n        var resultingSign = sign * directionSign;\r\n        if (isEdgeCell || isMultiSelection && this._isGroupEndCell($focusedCell, direction)) {\r\n            var nextIndex = currentIndex - resultingSign * step + resultingSign * rowCellCount;\r\n            var rowDirection = isRTL ? previousColumnDirection : nextColumnDirection;\r\n            $nextCell = $row[rowDirection]().children().eq(nextIndex);\r\n            $nextCell = this._checkForViewBounds($nextCell)\r\n        } else {\r\n            $nextCell = $row.children().eq(currentIndex - resultingSign * step)\r\n        }\r\n        return $nextCell\r\n    }\r\n    _isEdgeCell(lastIndexInRow, cellIndex, step, direction) {\r\n        var isRTL = this._isRTL();\r\n        var isDirectionNext = \"next\" === direction;\r\n        var rightEdgeCellIndex = isRTL ? 0 : lastIndexInRow;\r\n        var leftEdgeCellIndex = isRTL ? lastIndexInRow : 0;\r\n        var edgeCellIndex = isDirectionNext ? rightEdgeCellIndex : leftEdgeCellIndex;\r\n        var isNextCellGreaterThanEdge = cellIndex + step > edgeCellIndex;\r\n        var isNextCellLessThanEdge = cellIndex - step < edgeCellIndex;\r\n        var isRightEdgeCell = isRTL ? isNextCellLessThanEdge : isNextCellGreaterThanEdge;\r\n        var isLeftEdgeCell = isRTL ? isNextCellGreaterThanEdge : isNextCellLessThanEdge;\r\n        return isDirectionNext ? isRightEdgeCell : isLeftEdgeCell\r\n    }\r\n    _isGroupEndCell($cell, direction) {\r\n        if (this.isGroupedByDate()) {\r\n            return false\r\n        }\r\n        var isDirectionNext = \"next\" === direction;\r\n        var cellsInRow = this._getCellCount();\r\n        var currentCellIndex = $cell.index();\r\n        var result = currentCellIndex % cellsInRow;\r\n        var endCell = isDirectionNext ? cellsInRow - 1 : 0;\r\n        var startCell = isDirectionNext ? 0 : cellsInRow - 1;\r\n        return this._isRTL() ? result === startCell : result === endCell\r\n    }\r\n    _moveToCell($cell, isMultiSelection) {\r\n        isMultiSelection = isMultiSelection && this.option(\"allowMultipleCellSelection\");\r\n        this._setSelectedAndFocusedCells($cell, isMultiSelection);\r\n        this._dateTableScrollable.scrollToElement($cell)\r\n    }\r\n    _setSelectedAndFocusedCells($cell, isMultiSelection) {\r\n        if (!isDefined($cell) || !$cell.length) {\r\n            return\r\n        }\r\n        var updateViewData = this.isVirtualScrolling();\r\n        var $correctedCell = $cell;\r\n        if (isMultiSelection) {\r\n            $correctedCell = this._correctCellForGroup($cell)\r\n        }\r\n        if ($correctedCell.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            return\r\n        }\r\n        this._setSelectedCells($correctedCell, isMultiSelection);\r\n        this._setFocusedCell($correctedCell, updateViewData)\r\n    }\r\n    _setFocusedCell($cell) {\r\n        var updateViewData = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        this._releaseFocusedCell();\r\n        var $correctedCell = $cell;\r\n        if (updateViewData) {\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($cell);\r\n            var isAllDayCell = this._hasAllDayClass($cell);\r\n            this.virtualSelectionState.setFocusedCell(rowIndex, columnIndex, isAllDayCell);\r\n            var focusedCell = this.virtualSelectionState.getFocusedCell();\r\n            var {\r\n                cellData: cellData,\r\n                coordinates: coordinates\r\n            } = focusedCell;\r\n            var {\r\n                allDay: allDay\r\n            } = cellData;\r\n            $correctedCell = allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates)\r\n        }\r\n        this._toggleFocusedCellClass(true, $correctedCell);\r\n        this._$focusedCell = $correctedCell\r\n    }\r\n    _setSelectedCells($firstCell, isMultiSelection) {\r\n        this._releaseSelectedCells();\r\n        this._selectedCells = [];\r\n        if (this.isVirtualScrolling()) {\r\n            this._setSelectedCellsInVirtualMode($firstCell, isMultiSelection)\r\n        } else {\r\n            this._setSelectedCellsInStandardMode($firstCell, isMultiSelection)\r\n        }\r\n        var $selectedCells = $(this._selectedCells);\r\n        this._toggleFocusClass(true, $selectedCells);\r\n        this.setAria(\"label\", \"Add appointment\", $selectedCells);\r\n        var selectedCellData = this.getSelectedCellData().map(_ref => {\r\n            var {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            } = _ref;\r\n            return {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groups: groups,\r\n                groupIndex: groupIndex || 0\r\n            }\r\n        });\r\n        this.option(\"selectedCellData\", selectedCellData);\r\n        this._selectionChangedAction({\r\n            selectedCellData: selectedCellData\r\n        })\r\n    }\r\n    _setSelectedCellsInStandardMode($firstCell, isMultiSelection) {\r\n        if (isMultiSelection) {\r\n            var $previousCell = this._$prevCell;\r\n            var orientation = \"day\" === this.option(\"type\") && (!this.option(\"groups\").length || \"vertical\" === this.option(\"groupOrientation\")) ? \"vertical\" : \"horizontal\";\r\n            var $targetCells = this._getCellsBetween($firstCell, $previousCell, orientation);\r\n            this._selectedCells = $targetCells.toArray()\r\n        } else {\r\n            this._selectedCells = [$firstCell.get(0)];\r\n            this._$prevCell = $firstCell\r\n        }\r\n    }\r\n    _setSelectedCellsInVirtualMode($firstCell, isMultiSelection) {\r\n        if (isMultiSelection) {\r\n            var {\r\n                rowIndex: firstRow,\r\n                columnIndex: firstColumn\r\n            } = this._getCoordinatesByCell($firstCell);\r\n            var isFirstAllDay = this._hasAllDayClass($firstCell);\r\n            var firstCell = {\r\n                rowIndex: firstRow,\r\n                columnIndex: firstColumn,\r\n                allDay: isFirstAllDay\r\n            };\r\n            this.virtualSelectionState.setSelectedCells(firstCell)\r\n        } else {\r\n            this._selectedCells = [$firstCell.get(0)];\r\n            this._$prevCell = $firstCell;\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($firstCell);\r\n            var isAllDayCell = this._hasAllDayClass($firstCell);\r\n            var _firstCell = {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex,\r\n                allDay: isAllDayCell\r\n            };\r\n            this.virtualSelectionState.setSelectedCells(_firstCell, _firstCell)\r\n        }\r\n        this._setSelectedCellsByCellData(this.virtualSelectionState.getSelectedCells())\r\n    }\r\n    _correctCellForGroup($cell) {\r\n        if (this.isVirtualScrolling()) {\r\n            var isVirtualCell = $cell.hasClass(VIRTUAL_CELL_CLASS);\r\n            if (isVirtualCell) {\r\n                return this._$focusedCell\r\n            }\r\n            var cellData = this.getCellData($cell);\r\n            var isValidFocusedCell = this.virtualSelectionState.isValidFocusedCell(cellData);\r\n            return isValidFocusedCell ? $cell : this._$focusedCell\r\n        }\r\n        var $focusedCell = this._$focusedCell;\r\n        var cellGroupIndex = this._getGroupIndexByCell($cell);\r\n        var focusedCellGroupIndex = this._getGroupIndexByCell($focusedCell);\r\n        var isDifferentTables = this._hasAllDayClass($cell) !== this._hasAllDayClass($focusedCell);\r\n        return focusedCellGroupIndex !== cellGroupIndex || isDifferentTables ? $focusedCell : $cell\r\n    }\r\n    _getCellsBetween($first, $last, direction) {\r\n        var isAllDayTable = this._hasAllDayClass($last);\r\n        var $cells = this._getCells(isAllDayTable, direction);\r\n        var firstIndex = $cells.index($first);\r\n        var lastIndex = $cells.index($last);\r\n        if (firstIndex > lastIndex) {\r\n            var buffer = firstIndex;\r\n            firstIndex = lastIndex;\r\n            lastIndex = buffer\r\n        }\r\n        $cells = $cells.slice(firstIndex, lastIndex + 1);\r\n        if (this._getGroupCount() > 1) {\r\n            var result = [];\r\n            var focusedGroupIndex = this._getGroupIndexByCell($first);\r\n            each($cells, function(_, cell) {\r\n                var groupIndex = this._getGroupIndexByCell($(cell));\r\n                if (focusedGroupIndex === groupIndex) {\r\n                    result.push(cell)\r\n                }\r\n            }.bind(this));\r\n            $cells = $(result)\r\n        }\r\n        return $cells\r\n    }\r\n    _hasAllDayClass($cell) {\r\n        return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS)\r\n    }\r\n    _getGroupIndexByCell($cell) {\r\n        if (this.isVirtualScrolling()) {\r\n            var {\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            } = this._getCoordinatesByCell($cell);\r\n            var isAllDayCell = $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\r\n            return this.viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell).groupIndex\r\n        }\r\n        return this._groupedStrategy.getGroupIndexByCell($cell)\r\n    }\r\n    _toggleFocusedCellClass(isFocused, $element) {\r\n        var $focusTarget = $element && $element.length ? $element : this._focusTarget();\r\n        $focusTarget.toggleClass(DATE_TABLE_FOCUSED_CELL_CLASS, isFocused)\r\n    }\r\n    _releaseSelectedAndFocusedCells() {\r\n        this._releaseFocusedCell();\r\n        this._releaseSelectedCells();\r\n        this.option(\"selectedCellData\", [])\r\n    }\r\n    _releaseFocusedCell() {\r\n        var $cell = this._$focusedCell;\r\n        if (isDefined($cell) && $cell.length) {\r\n            this._toggleFocusedCellClass(false, $cell);\r\n            this.setAria(\"label\", void 0, $cell)\r\n        }\r\n    }\r\n    _releaseSelectedCells() {\r\n        var $cells = $(this._selectedCells);\r\n        if (isDefined($cells) && $cells.length) {\r\n            this._toggleFocusClass(false, $cells);\r\n            this.setAria(\"label\", void 0, $cells)\r\n        }\r\n    }\r\n    _focusInHandler(e) {\r\n        if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\r\n            delete this._isCellClick;\r\n            delete this._contextMenuHandled;\r\n            super._focusInHandler.apply(this, arguments);\r\n            var $cell = this._getFocusedCell();\r\n            this._setSelectedAndFocusedCells($cell)\r\n        }\r\n    }\r\n    _focusOutHandler() {\r\n        super._focusOutHandler.apply(this, arguments);\r\n        if (!this._contextMenuHandled) {\r\n            var _this$virtualSelectio;\r\n            this._releaseSelectedAndFocusedCells();\r\n            null === (_this$virtualSelectio = this.virtualSelectionState) || void 0 === _this$virtualSelectio ? void 0 : _this$virtualSelectio.releaseSelectedAndFocusedCells()\r\n        }\r\n    }\r\n    _focusTarget() {\r\n        return this.$element()\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            currentDate: new Date,\r\n            intervalCount: 1,\r\n            startDate: null,\r\n            firstDayOfWeek: void 0,\r\n            startDayHour: 0,\r\n            endDayHour: 24,\r\n            hoursInterval: .5,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            groups: [],\r\n            showAllDayPanel: true,\r\n            allDayExpanded: false,\r\n            onCellClick: null,\r\n            crossScrollingEnabled: false,\r\n            dataCellTemplate: null,\r\n            timeCellTemplate: null,\r\n            resourceCellTemplate: null,\r\n            dateCellTemplate: null,\r\n            allowMultipleCellSelection: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true,\r\n            groupOrientation: \"horizontal\",\r\n            selectedCellData: [],\r\n            groupByDate: false,\r\n            scrolling: {\r\n                mode: \"standard\"\r\n            },\r\n            renovateRender: true,\r\n            height: void 0,\r\n            draggingMode: \"outlook\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"startDayHour\":\r\n            case \"endDayHour\":\r\n                this.invoke(\"validateDayHours\");\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"dateCellTemplate\":\r\n            case \"resourceCellTemplate\":\r\n            case \"dataCellTemplate\":\r\n            case \"timeCellTemplate\":\r\n            case \"hoursInterval\":\r\n            case \"firstDayOfWeek\":\r\n            case \"currentDate\":\r\n            case \"startDate\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"groups\":\r\n                this._cleanView();\r\n                this._removeAllDayElements();\r\n                this._initGrouping();\r\n                this.repaint();\r\n                break;\r\n            case \"groupOrientation\":\r\n                this._initGroupedStrategy();\r\n                this._createAllDayPanelElements();\r\n                this._removeAllDayElements();\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                if (this._isVerticalGroupedWorkSpace()) {\r\n                    this._cleanView();\r\n                    this._removeAllDayElements();\r\n                    this._initGrouping();\r\n                    this.repaint()\r\n                } else if (!this.isRenovatedRender()) {\r\n                    this._toggleAllDayVisibility(true)\r\n                } else {\r\n                    this.renderRWorkspace()\r\n                }\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this._changeAllDayVisibility();\r\n                this._attachTablesEvents();\r\n                this.headerPanelOffsetRecalculate();\r\n                this._updateScrollable();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellContextMenu\":\r\n                this._attachContextMenuEvent();\r\n                break;\r\n            case \"intervalCount\":\r\n                this._cleanWorkSpace();\r\n                this._toggleWorkSpaceCountClass();\r\n                this._toggleFixedScrollableClass();\r\n                break;\r\n            case \"groupByDate\":\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this._toggleHorizontalScrollClass();\r\n                this._dateTableScrollable.option(this._dateTableScrollableConfig());\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"allowMultipleCellSelection\":\r\n            case \"selectedCellData\":\r\n                break;\r\n            case \"scrolling\":\r\n                if (this._isVirtualModeOn()) {\r\n                    if (!this.option(\"renovateRender\")) {\r\n                        this.option(\"renovateRender\", true)\r\n                    } else {\r\n                        this.repaint()\r\n                    }\r\n                } else {\r\n                    this.option(\"renovateRender\", false)\r\n                }\r\n                break;\r\n            case \"renovateRender\":\r\n                this.repaint();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _cleanWorkSpace() {\r\n        var _this$virtualScrollin2;\r\n        this._cleanView();\r\n        this._toggleGroupedClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        null === (_this$virtualScrollin2 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin2 ? void 0 : _this$virtualScrollin2.updateDimensions(true);\r\n        this._renderView();\r\n        this.option(\"crossScrollingEnabled\") && this._setTableSizes();\r\n        this.cache.clear()\r\n    }\r\n    _init() {\r\n        this._headerSemaphore = new ScrollSemaphore;\r\n        this._sideBarSemaphore = new ScrollSemaphore;\r\n        this._dataTableSemaphore = new ScrollSemaphore;\r\n        this._viewDataProvider = null;\r\n        this._virtualSelectionState = null;\r\n        this._activeStateUnit = CELL_SELECTOR;\r\n        this._maxAllowedVerticalPosition = [];\r\n        this._maxAllowedPosition = [];\r\n        super._init();\r\n        this._initGrouping();\r\n        this._toggleHorizontalScrollClass();\r\n        this._toggleWorkSpaceCountClass();\r\n        this._toggleGroupByDateClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass())\r\n    }\r\n    _initGrouping() {\r\n        this._initGroupedStrategy();\r\n        this._toggleGroupingDirectionClass();\r\n        this._toggleGroupByDateClass()\r\n    }\r\n    _initGroupedStrategy() {\r\n        var strategyName = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var Strategy = \"vertical\" === strategyName ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\r\n        this._groupedStrategy = new Strategy(this)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"horizontal\"\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isHorizontalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\")\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"))\r\n    }\r\n    _toggleGroupByDateClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate())\r\n    }\r\n    _toggleWorkSpaceCountClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount())\r\n    }\r\n    _isWorkSpaceWithCount() {\r\n        return this.option(\"intervalCount\") > 1\r\n    }\r\n    _toggleWorkSpaceWithOddCells() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells())\r\n    }\r\n    _isWorkspaceWithOddCells() {\r\n        return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling()\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getRealGroupOrientation() {\r\n        return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\"\r\n    }\r\n    _getTimePanelClass() {\r\n        return TIME_PANEL_CLASS\r\n    }\r\n    _getDateTableClass() {\r\n        return DATE_TABLE_CLASS\r\n    }\r\n    _getDateTableRowClass() {\r\n        return DATE_TABLE_ROW_CLASS\r\n    }\r\n    _getDateTableCellClass(i, j) {\r\n        var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._needApplyLastGroupCellClass() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1, i, j) : cellClass\r\n    }\r\n    _needApplyLastGroupCellClass() {\r\n        return true\r\n    }\r\n    _getGroupRowClass() {\r\n        return GROUP_ROW_CLASS\r\n    }\r\n    _getGroupHeaderClass(i) {\r\n        var cellClass = GROUP_HEADER_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1)\r\n    }\r\n    _getGroupHeaderContentClass() {\r\n        return GROUP_HEADER_CONTENT_CLASS\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._$headerPanel = $(\"<table>\");\r\n        this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\r\n        this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\r\n        this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\r\n        this._initAllDayPanelElements();\r\n        if (this.isRenovatedRender()) {\r\n            this.createRAllDayPanelElements()\r\n        } else {\r\n            this._createAllDayPanelElements()\r\n        }\r\n        this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\r\n        this._$dateTable = $(\"<table>\");\r\n        this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS)\r\n    }\r\n    _initAllDayPanelElements() {\r\n        this._allDayTitles = [];\r\n        this._allDayTables = [];\r\n        this._allDayPanels = []\r\n    }\r\n    createRAllDayPanelElements() {\r\n        this._$allDayPanel = $(\"<div>\");\r\n        this._$allDayTitle = $(\"<div>\").appendTo(this.$element())\r\n    }\r\n    _createAllDayPanelElements() {\r\n        var groupCount = this._getGroupCount();\r\n        if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\r\n                this._allDayTitles.push($allDayTitle);\r\n                this._$allDayTable = $(\"<table>\");\r\n                this._allDayTables.push(this._$allDayTable);\r\n                this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\r\n                this._allDayPanels.push(this._$allDayPanel)\r\n            }\r\n        } else {\r\n            this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\r\n            this._$allDayTable = $(\"<table>\");\r\n            this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable)\r\n        }\r\n    }\r\n    _initDateTableScrollable() {\r\n        var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\r\n        this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig())\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            bounceEnabled: false,\r\n            updateManually: true\r\n        };\r\n        if (this._needCreateCrossScrolling()) {\r\n            config = extend(config, this._createCrossScrollingConfig())\r\n        }\r\n        return config\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        var config = {};\r\n        config.direction = \"both\";\r\n        config.onScroll = e => {\r\n            this._dataTableSemaphore.take();\r\n            this._sideBarSemaphore.isFree() && this._sidebarScrollable && this._sidebarScrollable.scrollTo({\r\n                top: e.scrollOffset.top\r\n            });\r\n            this._headerSemaphore.isFree() && this._headerScrollable && this._headerScrollable.scrollTo({\r\n                left: e.scrollOffset.left\r\n            });\r\n            this._dataTableSemaphore.release()\r\n        };\r\n        config.onEnd = () => {\r\n            this.notifyObserver(\"updateResizableArea\", {})\r\n        };\r\n        return config\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this._createWorkSpaceStaticElements()\r\n        }\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._dateTableScrollable.$content().append(this._$allDayContainer, this._$groupTable, this._$timePanel, this._$dateTable);\r\n            this.$element().append(this._$fixedContainer, this._$headerPanel, this._dateTableScrollable.$element())\r\n        } else {\r\n            this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\r\n            this.$element().append(this._$fixedContainer, this._$headerPanel, this._$allDayContainer, this._$allDayPanel, this._dateTableScrollable.$element())\r\n        }\r\n    }\r\n    _createWorkSpaceScrollableElements() {\r\n        this.$element().append(this._$fixedContainer);\r\n        this._createHeaderScrollable();\r\n        this._createSidebarScrollable();\r\n        this.$element().append(this._dateTableScrollable.$element());\r\n        this._headerScrollable.$content().append(this._$headerPanel);\r\n        this._dateTableScrollable.$content().append(this._$dateTable);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._dateTableScrollable.$content().prepend(this._$allDayContainer);\r\n            this._sidebarScrollable.$content().append(this._$groupTable, this._$timePanel)\r\n        } else {\r\n            this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel)\r\n        }\r\n        this._sidebarScrollable.$content().append(this._$timePanel)\r\n    }\r\n    _createHeaderScrollable() {\r\n        var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this.$element());\r\n        this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig())\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            showScrollbar: false,\r\n            direction: \"horizontal\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._headerSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                });\r\n                this._headerSemaphore.release()\r\n            }\r\n        };\r\n        return config\r\n    }\r\n    _createSidebarScrollable() {\r\n        var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this.$element());\r\n        this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\r\n            useKeyboard: false,\r\n            showScrollbar: false,\r\n            direction: \"vertical\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._sideBarSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    top: e.scrollOffset.top\r\n                });\r\n                this._sideBarSemaphore.release()\r\n            }\r\n        })\r\n    }\r\n    _visibilityChanged(visible) {\r\n        this.cache.clear();\r\n        if (visible) {\r\n            this._updateGroupTableHeight()\r\n        }\r\n        if (visible && this._needCreateCrossScrolling()) {\r\n            this._setTableSizes()\r\n        }\r\n    }\r\n    _attachTableClasses() {\r\n        this._addTableClass(this._$dateTable, this._getDateTableClass());\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS)\r\n            }\r\n        } else {\r\n            this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS)\r\n        }\r\n    }\r\n    _attachHeaderTableClasses() {\r\n        this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS)\r\n    }\r\n    _addTableClass($el, className) {\r\n        $el && !$el.hasClass(className) && $el.addClass(className)\r\n    }\r\n    _setTableSizes() {\r\n        this._attachTableClasses();\r\n        var cellWidth = this.getCellWidth();\r\n        if (cellWidth < this.getCellMinWidth()) {\r\n            cellWidth = this.getCellMinWidth()\r\n        }\r\n        var minWidth = this.getWorkSpaceMinWidth();\r\n        var groupCount = this._getGroupCount();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var width = cellWidth * totalCellCount;\r\n        if (width < minWidth) {\r\n            width = minWidth\r\n        }\r\n        this._$headerPanel.width(width);\r\n        this._$dateTable.width(width);\r\n        this._$allDayTable && this._$allDayTable.width(width);\r\n        this._attachHeaderTableClasses();\r\n        this._updateGroupTableHeight()\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return this._groupedStrategy.getWorkSpaceMinWidth()\r\n    }\r\n    _dimensionChanged() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._setTableSizes()\r\n        }\r\n        this.headerPanelOffsetRecalculate();\r\n        this.cache.clear();\r\n        this._cleanAllowedPositions()\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\")\r\n    }\r\n    _getElementClass() {\r\n        return noop()\r\n    }\r\n    _getRowCount() {\r\n        return noop()\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        var allDayRowCount = this._isShowAllDayPanel() ? 1 : 0;\r\n        return this._getRowCount() + allDayRowCount\r\n    }\r\n    _getCellCount() {\r\n        return noop()\r\n    }\r\n    _initMarkup() {\r\n        this.cache.clear();\r\n        this._initWorkSpaceUnits();\r\n        this._initDateTableScrollable();\r\n        this._createWorkSpaceElements();\r\n        this._initVirtualScrolling();\r\n        super._initMarkup();\r\n        if (!this.option(\"crossScrollingEnabled\")) {\r\n            this._attachTableClasses();\r\n            this._attachHeaderTableClasses()\r\n        }\r\n        this._toggleGroupedClass();\r\n        this._toggleFixedScrollableClass();\r\n        this._renderView();\r\n        this._attachEvents();\r\n        this._setFocusOnCellByOption(this.option(\"selectedCellData\"))\r\n    }\r\n    isRenovatedRender() {\r\n        return this.renovatedRenderSupported() && this.option(\"renovateRender\")\r\n    }\r\n    _isVirtualModeOn() {\r\n        return \"virtual\" === this.option(\"scrolling.mode\")\r\n    }\r\n    isVirtualScrolling() {\r\n        return this.isRenovatedRender() && this._isVirtualModeOn()\r\n    }\r\n    _initVirtualScrolling() {\r\n        if (this.virtualScrollingDispatcher) {\r\n            this.virtualScrollingDispatcher.dispose();\r\n            this.virtualScrollingDispatcher = null\r\n        }\r\n        if (this.isVirtualScrolling()) {\r\n            this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this)\r\n        }\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _toggleGroupedClass() {\r\n        this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0)\r\n    }\r\n    _toggleFixedScrollableClass() {\r\n        return noop()\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        if (this.isRenovatedRender()) {\r\n            if (this._isVerticalGroupedWorkSpace()) {\r\n                this.renderRGroupPanel()\r\n            }\r\n        } else {\r\n            this._applyCellTemplates(this._renderGroupHeader())\r\n        }\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkspace()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderGroupAllDayPanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._updateGroupTableHeight();\r\n        this._shader = new VerticalShader(this)\r\n    }\r\n    onDataSourceChanged() {}\r\n    preRenderAppointments(options) {\r\n        this.option(\"allDayExpanded\", options.allDayExpanded)\r\n    }\r\n    isGroupedAllDayPanel() {\r\n        return this._isShowAllDayPanel() && this._isVerticalGroupedWorkSpace()\r\n    }\r\n    generateRenderOptions(isProvideVirtualCellsWidth) {\r\n        var _this$_getToday;\r\n        var groupCount = this._getGroupCount();\r\n        var verticalGroupCount = !this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\r\n        var horizontalGroupCount = this._isVerticalGroupedWorkSpace() ? 1 : groupCount;\r\n        var allDayElements = this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0;\r\n        var rowCountInGroup = this._getRowCount();\r\n        var cellCount = this._getTotalCellCount(groupCount);\r\n        var rowCount = this._getTotalRowCount(groupCount, this._isVerticalGroupedWorkSpace());\r\n        var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var options = {\r\n            horizontalGroupCount: horizontalGroupCount,\r\n            verticalGroupCount: verticalGroupCount,\r\n            rowCountInGroup: rowCountInGroup,\r\n            cellCount: cellCount,\r\n            cellCountInGroupRow: this._getCellCount(),\r\n            cellDataGetters: [this._getCellData.bind(this)],\r\n            allDayElements: allDayElements,\r\n            startRowIndex: 0,\r\n            startCellIndex: 0,\r\n            groupOrientation: groupOrientation,\r\n            rowCount: rowCount,\r\n            totalRowCount: rowCount,\r\n            totalCellCount: cellCount,\r\n            groupCount: groupCount,\r\n            getDateHeaderText: this._getHeaderText.bind(this),\r\n            getDateHeaderDate: this._getDateByIndex.bind(this),\r\n            getTimeCellDate: this._getTimeCellDate.bind(this),\r\n            today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupsList: this._getAllGroups(),\r\n            isHorizontalGrouping: this._isHorizontalGroupedWorkSpace(),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth\r\n        };\r\n        if (this.isVirtualScrolling()) {\r\n            extend(options, this.virtualScrollingDispatcher.getRenderState())\r\n        }\r\n        return options\r\n    }\r\n    renovatedRenderSupported() {\r\n        return false\r\n    }\r\n    renderRWorkspace() {\r\n        var _this$virtualScrollin3;\r\n        var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        this._cleanAllowedPositions();\r\n        this.viewDataProvider.update(isGenerateNewViewData);\r\n        this.renderRHeaderPanel();\r\n        this.renderRTimeTable();\r\n        this.renderRDateTable();\r\n        this.renderRAllDayPanel();\r\n        this.updateRSelection();\r\n        null === (_this$virtualScrollin3 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin3 ? void 0 : _this$virtualScrollin3.updateDimensions()\r\n    }\r\n    renderRDateTable() {\r\n        this.renderRComponent(this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    renderRGroupPanel() {\r\n        var options = {\r\n            groups: this.option(\"groups\"),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            baseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\r\n            columnCountPerGroup: this._getCellCount()\r\n        };\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountAttr();\r\n            this.renderRComponent(this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options)\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n    }\r\n    renderRAllDayPanel() {\r\n        var visible = this._isShowAllDayPanel() && !this.isGroupedAllDayPanel();\r\n        if (this.supportAllDayRow() && !this._isVerticalGroupedWorkSpace()) {\r\n            this._toggleAllDayVisibility(false);\r\n            var groupCount = this._getGroupCount();\r\n            var cellCount = this._getTotalCellCount(groupCount);\r\n            var options = {\r\n                viewData: this.viewDataProvider.viewData,\r\n                visible: visible,\r\n                dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n                startCellIndex: 0,\r\n                cellCount: cellCount\r\n            };\r\n            if (this.isVirtualScrolling()) {\r\n                var {\r\n                    horizontalVirtualScrolling: horizontalVirtualScrolling\r\n                } = this.virtualScrollingDispatcher;\r\n                var renderState = null === horizontalVirtualScrolling || void 0 === horizontalVirtualScrolling ? void 0 : horizontalVirtualScrolling.getRenderState();\r\n                extend(options, _extends({}, renderState))\r\n            }\r\n            this.renderRComponent(this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\r\n            this.renderRComponent(this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {\r\n                visible: visible\r\n            });\r\n            this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS))\r\n        }\r\n        this._toggleAllDayVisibility(true)\r\n    }\r\n    renderRTimeTable() {\r\n        this.renderRComponent(this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\r\n            timePanelData: this.viewDataProvider.timePanelData,\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        })\r\n    }\r\n    renderRHeaderPanel() {\r\n        var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountAttr()\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n        this.renderRComponent(this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\r\n            dateHeaderData: this.viewDataProvider.dateHeaderData,\r\n            dateCellTemplate: this.option(\"dateCellTemplate\"),\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groups: this.option(\"groups\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            groupPanelCellBaseColSpan: this.isGroupedByDate() ? 1 : this._getCellCount(),\r\n            columnCountPerGroup: this._getCellCount(),\r\n            isRenderDateHeader: isRenderDateHeader\r\n        })\r\n    }\r\n    renderRComponent(parentElement, componentClass, componentName, viewModel) {\r\n        var component = this[componentName];\r\n        if (!component) {\r\n            var container = getPublicElement(parentElement);\r\n            component = this._createComponent(container, componentClass, _extends({}, viewModel, {\r\n                groupOrientation: this.option(\"groupOrientation\")\r\n            }));\r\n            this[componentName] = component\r\n        } else {\r\n            component.option(viewModel)\r\n        }\r\n    }\r\n    updateRSelection() {\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        var focusedCell = this.virtualSelectionState.getFocusedCell();\r\n        var selectedCells = this.virtualSelectionState.getSelectedCells();\r\n        if (null !== focusedCell && void 0 !== focusedCell && focusedCell.coordinates) {\r\n            var {\r\n                coordinates: coordinates,\r\n                cellData: cellData\r\n            } = focusedCell;\r\n            var $cell = !isVerticalGrouping && cellData.allDay ? this._dom_getAllDayPanelCell(coordinates.cellIndex) : this._dom_getDateCell(coordinates);\r\n            $cell && this._setFocusedCell($cell)\r\n        }\r\n        selectedCells && this._setSelectedCellsByCellData(selectedCells)\r\n    }\r\n    _updateGroupTableHeight() {\r\n        if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            this._setHorizontalGroupHeaderCellsHeight()\r\n        }\r\n    }\r\n    _renderDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        return noop()\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setFocusOnCellByOption(data) {\r\n        this._releaseSelectedAndFocusedCells();\r\n        this._setSelectedCellsByCellData(data)\r\n    }\r\n    _setSelectedCellsByCellData(data) {\r\n        var _data$;\r\n        var cells = [];\r\n        var $cells = this._getAllCells(null === data || void 0 === data ? void 0 : null === (_data$ = data[0]) || void 0 === _data$ ? void 0 : _data$.allDay);\r\n        var cellsInRow = this._getTotalCellCount(this._getGroupCount());\r\n        if (this.isVirtualScrolling()) {\r\n            var renderState = this.virtualScrollingDispatcher.getRenderState();\r\n            cellsInRow = renderState.cellCount || cellsInRow\r\n        }\r\n        data.forEach(cellData => {\r\n            var {\r\n                groups: groups,\r\n                startDate: startDate,\r\n                allDay: allDay,\r\n                index: index\r\n            } = cellData;\r\n            var {\r\n                groupIndex: groupIndex\r\n            } = cellData;\r\n            if (!groupIndex) {\r\n                groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0\r\n            }\r\n            var coordinates = this.isVirtualScrolling() ? this.viewDataProvider.findCellPositionInMap({\r\n                groupIndex: groupIndex,\r\n                startDate: startDate,\r\n                isAllDay: allDay,\r\n                index: index\r\n            }) : this.getCoordinatesByDate(startDate, groupIndex, allDay);\r\n            if (coordinates) {\r\n                var {\r\n                    rowIndex: rowIndex,\r\n                    cellIndex: cellIndex\r\n                } = coordinates;\r\n                var _index = rowIndex * cellsInRow + cellIndex;\r\n                var $cell = $cells[_index];\r\n                if (isDefined($cell)) {\r\n                    this._toggleFocusClass(true, $($cell));\r\n                    cells.push($cell)\r\n                }\r\n            }\r\n        });\r\n        this._selectedCells = cells\r\n    }\r\n    _isGroupsSpecified(resources) {\r\n        return this.option(\"groups\").length && resources\r\n    }\r\n    _getGroupIndexByResourceId(id) {\r\n        var groups = this.option(\"groups\");\r\n        var resourceTree = this.invoke(\"createResourcesTree\", groups);\r\n        if (!resourceTree.length) {\r\n            return 0\r\n        }\r\n        return this._getGroupIndexRecursively(resourceTree, id)\r\n    }\r\n    _getGroupIndexRecursively(resourceTree, id) {\r\n        var currentKey = resourceTree[0].name;\r\n        var currentValue = id[currentKey];\r\n        return resourceTree.reduce((prevIndex, _ref2) => {\r\n            var {\r\n                leafIndex: leafIndex,\r\n                value: value,\r\n                children: children\r\n            } = _ref2;\r\n            var areValuesEqual = currentValue === value;\r\n            if (areValuesEqual && void 0 !== leafIndex) {\r\n                return leafIndex\r\n            }\r\n            if (areValuesEqual) {\r\n                return this._getGroupIndexRecursively(children, id)\r\n            }\r\n            return prevIndex\r\n        }, 0)\r\n    }\r\n    _getCalculatedFirstDayOfWeek() {\r\n        var firstDayOfWeekOption = this._firstDayOfWeek();\r\n        var firstDayOfWeek = isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\r\n        return firstDayOfWeek\r\n    }\r\n    _setFirstViewDate() {\r\n        var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\r\n        this._firstViewDate = dateUtils.getFirstWeekDate(this._getViewStartByOptions(), firstDayOfWeek);\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getViewStartByOptions() {\r\n        if (!this.option(\"startDate\")) {\r\n            return this.option(\"currentDate\")\r\n        } else {\r\n            var startDate = dateUtils.trimTime(this._getStartViewDate());\r\n            var currentDate = this.option(\"currentDate\");\r\n            var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n            var endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff);\r\n            while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\r\n                startDate = endDate;\r\n                endDate = new Date(startDate.getTime() + this._getIntervalDuration() * diff)\r\n            }\r\n            return diff > 0 ? startDate : endDate\r\n        }\r\n    }\r\n    _getHeaderDate() {\r\n        return this.getStartViewDate()\r\n    }\r\n    _getStartViewDate() {\r\n        return this.option(\"startDate\")\r\n    }\r\n    _dateInRange(date, startDate, endDate, diff) {\r\n        return diff > 0 ? dateUtils.dateInRange(date, startDate, new Date(endDate.getTime() - 1)) : dateUtils.dateInRange(date, endDate, startDate, \"date\")\r\n    }\r\n    _getIntervalDuration() {\r\n        return toMs(\"day\") * this.option(\"intervalCount\")\r\n    }\r\n    _setStartDayHour(date) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        if (isDefined(startDayHour)) {\r\n            date.setHours(startDayHour, startDayHour % 1 * 60, 0, 0)\r\n        }\r\n    }\r\n    _firstDayOfWeek() {\r\n        return this.option(\"firstDayOfWeek\")\r\n    }\r\n    _attachEvents() {\r\n        this._createSelectionChangedAction();\r\n        this._attachClickEvent();\r\n        this._attachContextMenuEvent()\r\n    }\r\n    _attachClickEvent() {\r\n        var that = this;\r\n        var pointerDownAction = this._createAction((function(e) {\r\n            that._pointerDownHandler(e.event)\r\n        }));\r\n        this._createCellClickAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, (function(e) {\r\n            if (isMouseEvent(e) && e.which > 1) {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        }));\r\n        eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, (function(e) {\r\n            var $cell = $(e.target);\r\n            that._cellClickAction({\r\n                event: e,\r\n                cellElement: getPublicElement($cell),\r\n                cellData: that.getCellData($cell)\r\n            })\r\n        }))\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\", {\r\n            afterExecute: e => this._cellClickHandler(e.args[0].event)\r\n        })\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _cellClickHandler(e) {\r\n        var $target = $(e.target);\r\n        if (this._showPopup && this._hasFocusClass($target)) {\r\n            delete this._showPopup;\r\n            this._showAddAppointmentPopup($target)\r\n        }\r\n    }\r\n    _pointerDownHandler(e) {\r\n        var $target = $(e.target);\r\n        if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\r\n            this._isCellClick = false;\r\n            return\r\n        }\r\n        this._isCellClick = true;\r\n        if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            this._showPopup = true\r\n        } else {\r\n            this._setSelectedAndFocusedCells($target)\r\n        }\r\n    }\r\n    _showAddAppointmentPopup($cell) {\r\n        var firstCellData = this.getCellData($cell.first());\r\n        var lastCellData = this.getCellData($cell.last());\r\n        if (this.isVirtualScrolling()) {\r\n            var selectedCells = this.virtualSelectionState.getSelectedCells();\r\n            firstCellData = selectedCells[0];\r\n            lastCellData = selectedCells[selectedCells.length - 1]\r\n        }\r\n        var result = {\r\n            startDate: firstCellData.startDate,\r\n            endDate: lastCellData.endDate\r\n        };\r\n        if (void 0 !== lastCellData.allDay) {\r\n            result.allDay = lastCellData.allDay\r\n        }\r\n        this.invoke(\"showAddAppointmentPopup\", result, lastCellData.groups)\r\n    }\r\n    _attachContextMenuEvent() {\r\n        this._createContextMenuAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        var eventName = addNamespace(contextMenuEventName, this.NAME);\r\n        eventsEngine.off($element, eventName, cellSelector);\r\n        eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this))\r\n    }\r\n    _contextMenuHandler(e) {\r\n        var $cell = $(e.target);\r\n        this._contextMenuAction({\r\n            event: e,\r\n            cellElement: getPublicElement($cell),\r\n            cellData: this.getCellData($cell)\r\n        });\r\n        this._contextMenuHandled = true\r\n    }\r\n    _createContextMenuAction() {\r\n        this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\")\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$groupTable\r\n        }\r\n        return this._$thead\r\n    }\r\n    _getDateHeaderContainer() {\r\n        return this._$thead\r\n    }\r\n    _renderGroupHeader() {\r\n        var $container = this._getGroupHeaderContainer();\r\n        var groupCount = this._getGroupCount();\r\n        var cellTemplates = [];\r\n        if (groupCount) {\r\n            var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\r\n            this._attachGroupCountAttr();\r\n            $container.append(groupRows.elements);\r\n            cellTemplates = groupRows.cellTemplates\r\n        } else {\r\n            this._detachGroupCountAttr()\r\n        }\r\n        return cellTemplates\r\n    }\r\n    _applyCellTemplates(templates) {\r\n        null === templates || void 0 === templates ? void 0 : templates.forEach((function(template) {\r\n            template()\r\n        }))\r\n    }\r\n    _detachGroupCountAttr() {\r\n        var groupedAttr = this._groupedStrategy.getGroupCountAttr();\r\n        this.$element().removeAttr(groupedAttr.attr)\r\n    }\r\n    _attachGroupCountAttr() {\r\n        var groupedAttr = this._groupedStrategy.getGroupCountAttr(this.option(\"groups\"));\r\n        this.$element().attr(groupedAttr.attr, groupedAttr.count)\r\n    }\r\n    headerPanelOffsetRecalculate() {\r\n        if (!this.option(\"resourceCellTemplate\") && !this.option(\"dateCellTemplate\")) {\r\n            return\r\n        }\r\n        var headerPanelHeight = this.getHeaderPanelHeight();\r\n        var headerHeight = this.invoke(\"getHeaderHeight\");\r\n        var allDayPanelHeight = this.isAllDayPanelVisible ? this._groupedStrategy.getAllDayTableHeight() : 0;\r\n        headerPanelHeight && this._headerScrollable && this._headerScrollable.$element().height(headerPanelHeight + allDayPanelHeight);\r\n        headerPanelHeight && this._dateTableScrollable.$element().css({\r\n            paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\r\n            marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\r\n        });\r\n        headerPanelHeight && this._sidebarScrollable && this._sidebarScrollable.$element().css({\r\n            paddingBottom: allDayPanelHeight + headerPanelHeight + \"px\",\r\n            marginBottom: -1 * (parseInt(headerPanelHeight, 10) + allDayPanelHeight) + \"px\"\r\n        });\r\n        this._$allDayTitle && this._$allDayTitle.css(\"top\", headerHeight + headerPanelHeight + \"px\")\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupHeaderRowClass: this._getGroupRowClass(),\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: this._getGroupHeaderContentClass()\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate)\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _renderDateHeader() {\r\n        var container = this._getDateHeaderContainer();\r\n        var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\r\n        var count = this._getCellCount();\r\n        var cellTemplate = this._getDateHeaderTemplate();\r\n        var repeatCount = this._getCalculateHeaderCellRepeatCount();\r\n        var templateCallbacks = [];\r\n        var groupByDate = this.isGroupedByDate();\r\n        if (!groupByDate) {\r\n            for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\r\n                for (var cellIndex = 0; cellIndex < count; cellIndex++) {\r\n                    var templateIndex = rowIndex * count + cellIndex;\r\n                    this._renderDateHeaderTemplate($headerRow, cellIndex, templateIndex, cellTemplate, templateCallbacks)\r\n                }\r\n            }\r\n            container.append($headerRow)\r\n        } else {\r\n            var colSpan = groupByDate ? this._getGroupCount() : 1;\r\n            for (var _cellIndex = 0; _cellIndex < count; _cellIndex++) {\r\n                var _templateIndex = _cellIndex * repeatCount;\r\n                var cellElement = this._renderDateHeaderTemplate($headerRow, _cellIndex, _templateIndex, cellTemplate, templateCallbacks);\r\n                cellElement.attr(\"colSpan\", colSpan)\r\n            }\r\n            container.prepend($headerRow)\r\n        }\r\n        this._applyCellTemplates(templateCallbacks);\r\n        return $headerRow\r\n    }\r\n    _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\r\n        var text = this._getHeaderText(panelCellIndex);\r\n        var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\r\n        if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\r\n            templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\r\n                model: _extends({\r\n                    text: text,\r\n                    date: this._getDateByIndex(panelCellIndex)\r\n                }, this._getGroupsForDateHeaderTemplate(templateIndex)),\r\n                index: templateIndex,\r\n                container: getPublicElement($cell)\r\n            }))\r\n        } else {\r\n            $cell.text(text)\r\n        }\r\n        container.append($cell);\r\n        return $cell\r\n    }\r\n    _getGroupsForDateHeaderTemplate(templateIndex) {\r\n        var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\r\n        var groupIndex;\r\n        var groups;\r\n        if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\r\n            groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\r\n            var groupsArray = this._getCellGroups(groupIndex);\r\n            groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            groups: groups,\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate())\r\n    }\r\n    _getCalculateHeaderCellRepeatCount() {\r\n        return this._groupedStrategy.calculateHeaderCellRepeatCount()\r\n    }\r\n    _renderAllDayPanel(index) {\r\n        var cellCount = this._getCellCount();\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            cellCount *= this._getGroupCount() || 1\r\n        }\r\n        var cellTemplates = this._renderTableBody({\r\n            container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\r\n            rowCount: 1,\r\n            cellCount: cellCount,\r\n            cellClass: this._getAllDayPanelCellClass.bind(this),\r\n            rowClass: ALL_DAY_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._getAllDayCellData.bind(this),\r\n            groupIndex: index\r\n        }, true);\r\n        this._toggleAllDayVisibility(true);\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _renderGroupAllDayPanel() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._renderAllDayPanel(i)\r\n            }\r\n        }\r\n    }\r\n    _getAllDayPanelCellClass(i, j) {\r\n        var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1)\r\n    }\r\n    _getAllDayCellData(cell, rowIndex, cellIndex, groupIndex) {\r\n        var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\r\n        var cellGroupIndex = groupIndex || this._getGroupIndex(rowIndex, cellIndex);\r\n        startDate = dateUtils.trimTime(startDate);\r\n        var data = {\r\n            startDate: startDate,\r\n            endDate: startDate,\r\n            allDay: true,\r\n            groupIndex: cellGroupIndex\r\n        };\r\n        var groupsArray = this._getCellGroups(cellGroupIndex);\r\n        if (groupsArray.length) {\r\n            data.groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            key: CELL_DATA,\r\n            value: data\r\n        }\r\n    }\r\n    _toggleAllDayVisibility(isUpdateScrollable) {\r\n        var showAllDayPanel = this._isShowAllDayPanel();\r\n        this._$allDayPanel.toggle(showAllDayPanel);\r\n        this._$allDayTitle && this._$allDayTitle.toggleClass(ALL_DAY_TITLE_HIDDEN_CLASS, !showAllDayPanel);\r\n        this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\r\n        this._changeAllDayVisibility();\r\n        isUpdateScrollable && this._updateScrollable()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel())\r\n    }\r\n    _updateScrollable() {\r\n        this._dateTableScrollable.update();\r\n        this._headerScrollable && this._headerScrollable.update();\r\n        this._sidebarScrollable && this._sidebarScrollable.update()\r\n    }\r\n    _renderTimePanel() {\r\n        var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\r\n        var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount() * repeatCount,\r\n            cellCount: 1,\r\n            cellClass: this._getTimeCellClass.bind(this),\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellTemplate: this.option(\"timeCellTemplate\"),\r\n            getCellText: (i => {\r\n                var index = i % this._getRowCount();\r\n                if (index % 2 === 0) {\r\n                    return dateLocalization.format(this._getTimeCellDateCore(startViewDate, i), \"shorttime\")\r\n                }\r\n                return \"\"\r\n            }).bind(this),\r\n            getCellDate: this._getTimeCellDate.bind(this),\r\n            groupCount: this._getGroupCount(),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\r\n            getTemplateData: (rowIndex => {\r\n                if (!this._isVerticalGroupedWorkSpace()) {\r\n                    return {}\r\n                }\r\n                var groupIndex = this._getGroupIndex(rowIndex, 0);\r\n                var groupsArray = this._getCellGroups(groupIndex);\r\n                var groups = this._getGroupsObjectFromGroupsArray(groupsArray);\r\n                return {\r\n                    groupIndex: groupIndex,\r\n                    groups: groups\r\n                }\r\n            }).bind(this)\r\n        })\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this._getCellCountInDay()\r\n    }\r\n    _getCellCountInDay(skipRound) {\r\n        var result = this._calculateDayDuration() / this.option(\"hoursInterval\");\r\n        return skipRound ? result : Math.ceil(result)\r\n    }\r\n    _calculateDayDuration() {\r\n        return this.option(\"endDayHour\") - this.option(\"startDayHour\")\r\n    }\r\n    _getTimeCellClass(i) {\r\n        var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass\r\n    }\r\n    _getTimeCellDate(i) {\r\n        return this._getTimeCellDateCore(this.getStartViewDate(), i)\r\n    }\r\n    _getTimeCellDateCore(startViewDate, i) {\r\n        var result = new Date(startViewDate);\r\n        var timeCellDuration = Math.round(this.getCellDuration());\r\n        var cellCountInDay = this._getCellCountInDay(true);\r\n        result.setMilliseconds(result.getMilliseconds() + timeCellDuration * (i % cellCountInDay) - this._getTimeOffsetForStartViewDate());\r\n        return result\r\n    }\r\n    _renderDateTable() {\r\n        var groupCount = this._getGroupCount();\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowCount: this._getTotalRowCount(groupCount),\r\n            cellCount: this._getTotalCellCount(groupCount),\r\n            cellClass: this._getDateTableCellClass.bind(this),\r\n            rowClass: this._getDateTableRowClass(),\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._getCellData.bind(this),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\r\n            groupCount: groupCount,\r\n            groupByDate: this.option(\"groupByDate\")\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return this._groupedStrategy.insertAllDayRowsIntoDateTable()\r\n    }\r\n    _getTotalCellCount(groupCount) {\r\n        return this._groupedStrategy.getTotalCellCount(groupCount)\r\n    }\r\n    _getTotalRowCount(groupCount, includeAllDayPanelRows) {\r\n        var result = this._groupedStrategy.getTotalRowCount(groupCount);\r\n        if (includeAllDayPanelRows && groupCount > 1 && this.isAllDayPanelVisible) {\r\n            result += groupCount\r\n        }\r\n        return result\r\n    }\r\n    _getCellData(cell, rowIndex, cellIndex) {\r\n        var data = this._prepareCellData(rowIndex, cellIndex, cell);\r\n        return {\r\n            key: CELL_DATA,\r\n            value: data\r\n        }\r\n    }\r\n    _prepareCellData(rowIndex, cellIndex) {\r\n        var startDate = this._getDateByCellIndexes(rowIndex, cellIndex);\r\n        var endDate = this.calculateEndDate(startDate);\r\n        var groupIndex = this._getGroupIndex(rowIndex, cellIndex);\r\n        var data = {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: this._getTableAllDay(),\r\n            groupIndex: groupIndex\r\n        };\r\n        var groupsArray = this._getCellGroups(groupIndex);\r\n        if (groupsArray.length) {\r\n            data.groups = this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return data\r\n    }\r\n    _getGroupIndex(rowIndex, cellIndex) {\r\n        return this._groupedStrategy.getGroupIndex(rowIndex, cellIndex)\r\n    }\r\n    _getTableAllDay() {\r\n        return false\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var result = new Date(startDate);\r\n        result.setMilliseconds(result.getMilliseconds() + Math.round(this._getInterval()));\r\n        return result\r\n    }\r\n    _getGroupCount() {\r\n        var groups = this.option(\"groups\");\r\n        var result = 0;\r\n        for (var i = 0, len = groups.length; i < len; i++) {\r\n            if (!i) {\r\n                result = groups[i].items.length\r\n            } else {\r\n                result *= groups[i].items.length\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getPathToLeaf(leafIndex) {\r\n        var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\r\n        var leaf = function findLeafByIndex(data, index) {\r\n            for (var i = 0; i < data.length; i++) {\r\n                if (data[i].leafIndex === index) {\r\n                    return data[i]\r\n                } else {\r\n                    var _leaf = findLeafByIndex(data[i].children, index);\r\n                    if (_leaf) {\r\n                        return _leaf\r\n                    }\r\n                }\r\n            }\r\n        }(tree, leafIndex);\r\n        return function makeBranch(leaf, result) {\r\n            result = result || [];\r\n            result.push(leaf.value);\r\n            if (leaf.parent) {\r\n                makeBranch(leaf.parent, result)\r\n            }\r\n            return result\r\n        }(leaf).reverse()\r\n    }\r\n    _getAllGroups() {\r\n        var groupCount = this._getGroupCount();\r\n        return [...new Array(groupCount)].map((_, groupIndex) => {\r\n            var groupsArray = this._getCellGroups(groupIndex);\r\n            return this._getGroupsObjectFromGroupsArray(groupsArray)\r\n        })\r\n    }\r\n    _getCellGroups(groupIndex) {\r\n        var result = [];\r\n        if (this._getGroupCount()) {\r\n            var groups = this.option(\"groups\");\r\n            if (groupIndex < 0) {\r\n                return\r\n            }\r\n            var path = this._getPathToLeaf(groupIndex);\r\n            for (var i = 0; i < groups.length; i++) {\r\n                result.push({\r\n                    name: groups[i].name,\r\n                    id: path[i]\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getGroupsObjectFromGroupsArray(groupsArray) {\r\n        return groupsArray.reduce((currentGroups, _ref3) => {\r\n            var {\r\n                name: name,\r\n                id: id\r\n            } = _ref3;\r\n            return _extends({}, currentGroups, {\r\n                [name]: id\r\n            })\r\n        }, {})\r\n    }\r\n    _attachTablesEvents() {\r\n        var element = this.$element();\r\n        this._attachDragEvents(element);\r\n        this._attachPointerEvents(element)\r\n    }\r\n    _detachDragEvents(element) {\r\n        eventsEngine.off(element, DragEventNames.ENTER);\r\n        eventsEngine.off(element, DragEventNames.LEAVE);\r\n        eventsEngine.off(element, DragEventNames.DROP)\r\n    }\r\n    _attachDragEvents(element) {\r\n        this._detachDragEvents(element);\r\n        eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\r\n            checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\r\n        }, e => {\r\n            this.removeDroppableCellClass();\r\n            $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n        });\r\n        eventsEngine.on(element, DragEventNames.LEAVE, () => this.removeDroppableCellClass());\r\n        eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => this.removeDroppableCellClass())\r\n    }\r\n    _attachPointerEvents(element) {\r\n        var isPointerDown = false;\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isMouseEvent(e) && 1 === e.which) {\r\n                isPointerDown = true;\r\n                this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\r\n                eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n                eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\r\n                    isPointerDown = false;\r\n                    this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS)\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._moveToCell($(e.target), true)\r\n            }\r\n        })\r\n    }\r\n    _getDateTables() {\r\n        return this._$dateTable.add(this._$allDayTable)\r\n    }\r\n    _getDateTable() {\r\n        return this._$dateTable\r\n    }\r\n    _getAllDayTable() {\r\n        return this._$allDayTable\r\n    }\r\n    _getInterval() {\r\n        if (void 0 === this._interval) {\r\n            this._interval = this.option(\"hoursInterval\") * HOUR_MS\r\n        }\r\n        return this._interval\r\n    }\r\n    _getHeaderText(headerIndex) {\r\n        return dateLocalization.format(this._getDateForHeaderText(headerIndex), this._getFormat())\r\n    }\r\n    _getDateForHeaderText(index) {\r\n        return this._getDateByIndex(index)\r\n    }\r\n    _getDateByIndex() {\r\n        return abstract()\r\n    }\r\n    _getFormat() {\r\n        return abstract()\r\n    }\r\n    _calculateCellIndex(rowIndex, cellIndex) {\r\n        return this._groupedStrategy.calculateCellIndex(rowIndex, cellIndex)\r\n    }\r\n    _renderTableBody(options, delayCellTemplateRendering) {\r\n        var result = [];\r\n        if (!delayCellTemplateRendering) {\r\n            this._applyCellTemplates(tableCreator.makeTable(options))\r\n        } else {\r\n            result = tableCreator.makeTable(options)\r\n        }\r\n        return result\r\n    }\r\n    _removeAllDayElements() {\r\n        this._$allDayTable && this._$allDayTable.remove();\r\n        this._$allDayTitle && this._$allDayTitle.remove()\r\n    }\r\n    _cleanView() {\r\n        var _this$virtualSelectio2, _this$_shader;\r\n        this.cache.clear();\r\n        this._cleanTableWidths();\r\n        this._cleanAllowedPositions();\r\n        null === (_this$virtualSelectio2 = this.virtualSelectionState) || void 0 === _this$virtualSelectio2 ? void 0 : _this$virtualSelectio2.releaseSelectedAndFocusedCells();\r\n        if (!this.isRenovatedRender()) {\r\n            var _this$_$allDayTable, _this$_$sidebarTable;\r\n            this._$thead.empty();\r\n            this._$dateTable.empty();\r\n            this._$timePanel.empty();\r\n            this._$groupTable.empty();\r\n            null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\r\n            null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty()\r\n        }\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        delete this._hiddenInterval;\r\n        delete this._interval\r\n    }\r\n    _clean() {\r\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n        this._disposeRenovatedComponents();\r\n        super._clean()\r\n    }\r\n    _cleanTableWidths() {\r\n        this._$headerPanel.css(\"width\", \"\");\r\n        this._$dateTable.css(\"width\", \"\");\r\n        this._$allDayTable && this._$allDayTable.css(\"width\", \"\")\r\n    }\r\n    _disposeRenovatedComponents() {\r\n        var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\r\n        null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\r\n        this.renovatedAllDayPanel = void 0;\r\n        null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\r\n        this.renovatedDateTable = void 0;\r\n        null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\r\n        this.renovatedTimePanel = void 0;\r\n        null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\r\n        this.renovatedGroupPanel = void 0;\r\n        null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\r\n        this.renovatedHeaderPanel = void 0\r\n    }\r\n    getWorkArea() {\r\n        return this._dateTableScrollable.$content()\r\n    }\r\n    getScrollable() {\r\n        return this._dateTableScrollable\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._dateTableScrollable.scrollTop()\r\n    }\r\n    getGroupedScrollableScrollTop(allDay) {\r\n        return this._groupedStrategy.getScrollableScrollTop(allDay)\r\n    }\r\n    getScrollableScrollLeft() {\r\n        return this._dateTableScrollable.scrollLeft()\r\n    }\r\n    getScrollableOuterWidth() {\r\n        return this._dateTableScrollable.scrollWidth()\r\n    }\r\n    getScrollableContainer() {\r\n        return this._dateTableScrollable._container()\r\n    }\r\n    getHeaderPanelHeight() {\r\n        return this._$headerPanel && this._$headerPanel.outerHeight(true)\r\n    }\r\n    getTimePanelWidth() {\r\n        return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$groupTable ? this._$groupTable.outerWidth() : 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return this._groupedStrategy.getLeftOffset()\r\n    }\r\n    getGroupedStrategy() {\r\n        return this._groupedStrategy\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var cellIndex = Math.floor(index / this._getRowCount());\r\n        var rowIndex = index - this._getRowCount() * cellIndex;\r\n        return {\r\n            cellIndex: cellIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex, patchedIndexes) {\r\n        cellIndex = !patchedIndexes ? this._patchCellIndex(cellIndex) : cellIndex;\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var millisecondsOffset = this._getMillisecondsOffset(rowIndex, cellIndex);\r\n        var offsetByCount = this._getOffsetByCount(cellIndex);\r\n        var startViewDateOffset = this._getTimeOffsetForStartViewDate();\r\n        var currentDate = new Date(firstViewDateTime + millisecondsOffset + offsetByCount - startViewDateOffset);\r\n        currentDate.setTime(currentDate.getTime() + dateUtils.getTimezonesDifference(firstViewDate, currentDate));\r\n        return currentDate\r\n    }\r\n    _patchCellIndex(cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        }\r\n        return cellIndex\r\n    }\r\n    _getOffsetByCount() {\r\n        return 0\r\n    }\r\n    _getMillisecondsOffset(rowIndex, cellIndex) {\r\n        return this._getInterval() * this._calculateCellIndex(rowIndex, cellIndex) + this._calculateHiddenInterval(rowIndex, cellIndex)\r\n    }\r\n    _calculateHiddenInterval(rowIndex, cellIndex) {\r\n        var dayCount = cellIndex % this._getCellCount();\r\n        return dayCount * this._getHiddenInterval()\r\n    }\r\n    _getHiddenInterval() {\r\n        if (void 0 === this._hiddenInterval) {\r\n            this._hiddenInterval = DAY_MS - this.getVisibleDayDuration()\r\n        }\r\n        return this._hiddenInterval\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\r\n        var days = this._getDaysOfInterval(fullInterval, startDayTime);\r\n        var weekendsCount = this._getWeekendsCount(days);\r\n        var result = (days - weekendsCount) * DAY_MS;\r\n        if (!allDay) {\r\n            result = fullInterval - days * this._getHiddenInterval() - weekendsCount * this.getVisibleDayDuration()\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    _getDaysOfInterval(fullInterval, startDayTime) {\r\n        return Math.floor((fullInterval + startDayTime) / DAY_MS)\r\n    }\r\n    _getGroupIndexes(appointmentResources) {\r\n        var result = [];\r\n        if (this._isGroupsSpecified(appointmentResources)) {\r\n            var tree = this.invoke(\"createResourcesTree\", this.option(\"groups\"));\r\n            result = this.invoke(\"getResourceTreeLeaves\", tree, appointmentResources)\r\n        }\r\n        return result\r\n    }\r\n    _updateIndex(index) {\r\n        return index * this._getRowCount()\r\n    }\r\n    _getDroppableCell() {\r\n        return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this.cache.get(\"workspaceWidth\", () => {\r\n            if (this._needCreateCrossScrolling()) {\r\n                return getBoundingRect(this._$dateTable.get(0)).width\r\n            }\r\n            return getBoundingRect(this.$element().get(0)).width - this.getTimePanelWidth()\r\n        })\r\n    }\r\n    _getCellPositionByIndex(index, groupIndex, inAllDayRow) {\r\n        var cellCoordinates = this._getCellCoordinatesByIndex(index);\r\n        var $cell = this._getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._getCellPositionWithCache($cell, cellCoordinates, groupIndex)\r\n    }\r\n    _getCellPositionWithCache($cell, cellCoordinates, groupIndex) {\r\n        var result = this._getCellPosition($cell);\r\n        this.setCellDataCache(cellCoordinates, groupIndex, $cell);\r\n        if (result) {\r\n            result.rowIndex = cellCoordinates.rowIndex;\r\n            result.cellIndex = cellCoordinates.cellIndex\r\n        }\r\n        return result\r\n    }\r\n    _getCellPosition($cell) {\r\n        var position = $cell.position();\r\n        if (this.option(\"rtlEnabled\")) {\r\n            position.left += getBoundingRect($cell.get(0)).width\r\n        }\r\n        return position\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._dom_getDateCell(indexes)\r\n    }\r\n    _dom_getDateCell(position) {\r\n        return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.cellIndex)\r\n    }\r\n    _dom_getAllDayPanelCell(cellIndex) {\r\n        return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(cellIndex)\r\n    }\r\n    _getCells(allDay, direction) {\r\n        var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        if (\"vertical\" === direction) {\r\n            var result = [];\r\n            for (var i = 1;; i++) {\r\n                var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\r\n                if (!cells.length) {\r\n                    break\r\n                }\r\n                result = result.concat(cells.toArray())\r\n            }\r\n            return $(result)\r\n        } else {\r\n            return this.$element().find(\".\" + cellClass)\r\n        }\r\n    }\r\n    _getAllCells(allDay) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"))\r\n        }\r\n        var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        return this.$element().find(\".\" + cellClass)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        var height = getBoundingRect(this._$dateTable.get(0)).height;\r\n        this._$groupTable.outerHeight(height)\r\n    }\r\n    _getDateTableBorder() {\r\n        return DATE_TABLE_CELL_BORDER\r\n    }\r\n    _getDateTableBorderOffset() {\r\n        return 2 * this._getDateTableBorder()\r\n    }\r\n    _getGroupHeaderCellsContent() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CONTENT_CLASS)\r\n    }\r\n    _getGroupHeaderCells() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CLASS)\r\n    }\r\n    _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\r\n        var currentDate = date || new Date(this.option(\"currentDate\"));\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        if (hours < startDayHour) {\r\n            hours = startDayHour\r\n        }\r\n        if (hours >= endDayHour) {\r\n            hours = endDayHour - 1\r\n        }\r\n        currentDate.setHours(hours, minutes, 0, 0);\r\n        if (!this.isVirtualScrolling()) {\r\n            return this.getCoordinatesByDate(currentDate, groupIndex, allDay)\r\n        }\r\n        var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\r\n        var {\r\n            position: position,\r\n            cellData: cellData\r\n        } = cell;\r\n        return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, this.isDateAndTimeView, \"vertical\" === this.viewDirection)\r\n    }\r\n    _isOutsideScrollable(target, event) {\r\n        var $dateTableScrollableElement = this._dateTableScrollable.$element();\r\n        var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\r\n        var window = getWindow();\r\n        var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\r\n        var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\r\n        var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\r\n        if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\r\n            return false\r\n        }\r\n        return isOutsideVerticalScrollable || isOutsideHorizontalScrollable\r\n    }\r\n    setCellDataCache(cellCoordinates, groupIndex, $cell) {\r\n        var key = JSON.stringify({\r\n            rowIndex: cellCoordinates.rowIndex,\r\n            cellIndex: cellCoordinates.cellIndex,\r\n            groupIndex: groupIndex\r\n        });\r\n        this.cache.set(key, this.getCellData($cell))\r\n    }\r\n    setCellDataCacheAlias(appointment, geometry) {\r\n        var key = JSON.stringify({\r\n            rowIndex: appointment.rowIndex,\r\n            cellIndex: appointment.cellIndex,\r\n            groupIndex: appointment.groupIndex\r\n        });\r\n        var aliasKey = JSON.stringify({\r\n            top: geometry.top,\r\n            left: geometry.left\r\n        });\r\n        this.cache.set(aliasKey, this.cache.get(key))\r\n    }\r\n    _cleanAllowedPositions() {\r\n        this._maxAllowedVerticalPosition = [];\r\n        this._maxAllowedPosition = []\r\n    }\r\n    supportAllDayRow() {\r\n        return true\r\n    }\r\n    keepOriginalHours() {\r\n        return false\r\n    }\r\n    getSelectedCellData() {\r\n        if (this.isVirtualScrolling()) {\r\n            return this.virtualSelectionState.getSelectedCells()\r\n        }\r\n        var $focusedCells = this._getAllFocusedCells();\r\n        var result = [];\r\n        if ($focusedCells.length > 1) {\r\n            result = this._getMultipleCellsData($focusedCells)\r\n        } else {\r\n            var data = this.getCellData($($focusedCells[0]));\r\n            data && result.push(data)\r\n        }\r\n        return result\r\n    }\r\n    _getMultipleCellsData($cells) {\r\n        var data = [];\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            data.push(this.getCellData($($cells[i])))\r\n        }\r\n        return data\r\n    }\r\n    getCellData($cell) {\r\n        var data;\r\n        var currentCell = $cell[0];\r\n        if (currentCell) {\r\n            if (this.isRenovatedRender()) {\r\n                data = this._getCellDataInRenovatedView($cell)\r\n            } else {\r\n                data = elementData(currentCell, CELL_DATA)\r\n            }\r\n        }\r\n        return extend(true, {}, data)\r\n    }\r\n    _getVirtualRowOffset() {\r\n        var _this$virtualScrollin4;\r\n        return (null === (_this$virtualScrollin4 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin4 ? void 0 : _this$virtualScrollin4.virtualRowOffset) || 0\r\n    }\r\n    _getVirtualCellOffset() {\r\n        var _this$virtualScrollin5;\r\n        return (null === (_this$virtualScrollin5 = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin5 ? void 0 : _this$virtualScrollin5.virtualCellOffset) || 0\r\n    }\r\n    _getCellDataInRenovatedView($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        if (this.isVirtualScrolling()) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        var columnIndex = $cell.index();\r\n        if (this.isVirtualScrolling()) {\r\n            columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount\r\n        }\r\n        var {\r\n            viewDataProvider: viewDataProvider\r\n        } = this;\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\r\n        return cellData ? {\r\n            startDate: cellData.startDate,\r\n            endDate: cellData.endDate,\r\n            groups: cellData.groups,\r\n            groupIndex: cellData.groupIndex,\r\n            allDay: cellData.allDay\r\n        } : void 0\r\n    }\r\n    _getHorizontalMax(groupIndex) {\r\n        groupIndex = this.isGroupedByDate() ? this._getGroupCount() - 1 : groupIndex;\r\n        return this._groupedStrategy.getHorizontalMax(groupIndex)\r\n    }\r\n    getCoordinatesByDate(date, groupIndex, inAllDayRow) {\r\n        groupIndex = groupIndex || 0;\r\n        var position;\r\n        if (this.isVirtualScrolling()) {\r\n            var cellInfo = {\r\n                groupIndex: groupIndex,\r\n                startDate: date,\r\n                isAllDay: inAllDayRow\r\n            };\r\n            var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\r\n            if (!positionByMap) {\r\n                return\r\n            }\r\n            var $cell = this._dom_getDateCell(positionByMap);\r\n            position = this._getCellPositionWithCache($cell, positionByMap, groupIndex)\r\n        } else {\r\n            position = this.calculateCellPositionByView(date, groupIndex, inAllDayRow)\r\n        }\r\n        var shift = this.getPositionShift(inAllDayRow ? 0 : this.getTimeShift(date), inAllDayRow);\r\n        var horizontalHMax = this._getHorizontalMax(groupIndex, date);\r\n        if (!position) {\r\n            throw errors.Error(\"E1039\")\r\n        }\r\n        return {\r\n            cellPosition: position.left + shift.cellPosition,\r\n            top: position.top + shift.top,\r\n            left: position.left + shift.left,\r\n            rowIndex: position.rowIndex,\r\n            cellIndex: position.cellIndex,\r\n            hMax: horizontalHMax,\r\n            vMax: this.getVerticalMax(groupIndex),\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    calculateCellPositionByView(date, groupIndex, inAllDayRow) {\r\n        var index = this.getCellIndexByDate(date, inAllDayRow);\r\n        return this._getCellPositionByIndex(index, groupIndex, inAllDayRow)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        return this._groupedStrategy.getVerticalMax(groupIndex)\r\n    }\r\n    _getOffsetByAllDayPanel(groupIndex) {\r\n        return this._groupedStrategy._getOffsetByAllDayPanel(groupIndex)\r\n    }\r\n    _getGroupTop(groupIndex) {\r\n        return this._groupedStrategy._getGroupTop(groupIndex)\r\n    }\r\n    isGroupedByDate() {\r\n        return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0\r\n    }\r\n    getCellIndexByDate(date, inAllDayRow) {\r\n        var timeInterval = inAllDayRow ? 864e5 : this._getInterval();\r\n        var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + this._getTimeOffsetForStartViewDate();\r\n        var index = Math.floor(dateTimeStamp / timeInterval);\r\n        if (inAllDayRow) {\r\n            index = this._updateIndex(index)\r\n        }\r\n        if (index < 0) {\r\n            index = 0\r\n        }\r\n        return index\r\n    }\r\n    getPositionShift(timeShift, isAllDay) {\r\n        return {\r\n            top: timeShift * this.getCellHeight(),\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n    getTimeShift(date) {\r\n        var currentDayStart = new Date(date);\r\n        var cellDuration = this.getCellDuration();\r\n        var currentDayEndHour = new Date(new Date(date).setHours(this.option(\"endDayHour\"), 0, 0));\r\n        if (date.getTime() <= currentDayEndHour.getTime()) {\r\n            currentDayStart.setHours(this.option(\"startDayHour\"), 0, 0, 0)\r\n        }\r\n        var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\r\n        var currentDateTime = date.getTime();\r\n        var currentDayStartTime = currentDayStart.getTime();\r\n        var minTime = this._firstViewDate.getTime();\r\n        return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % cellDuration / cellDuration : 0\r\n    }\r\n    _isSkippedData() {\r\n        return false\r\n    }\r\n    getCoordinatesByDateInGroup(startDate, appointmentResources, inAllDayRow, groupIndex) {\r\n        var result = [];\r\n        if (this._isSkippedData(startDate)) {\r\n            return result\r\n        }\r\n        var groupIndices = [groupIndex];\r\n        if (!isDefined(groupIndex)) {\r\n            groupIndices = this._getGroupCount() ? this._getGroupIndexes(appointmentResources) : [0]\r\n        }\r\n        groupIndices.forEach(groupIndex => {\r\n            var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\r\n            coordinates && result.push(coordinates)\r\n        });\r\n        return result\r\n    }\r\n    getDroppableCellIndex() {\r\n        var $droppableCell = this._getDroppableCell();\r\n        var $row = $droppableCell.parent();\r\n        var rowIndex = $row.index();\r\n        return rowIndex * $row.find(\"td\").length + $droppableCell.index()\r\n    }\r\n    getDataByDroppableCell() {\r\n        var cellData = this.getCellData($(this._getDroppableCell()));\r\n        var allDay = cellData.allDay;\r\n        var startDate = cellData.startDate;\r\n        var endDate = startDate && this.invoke(\"calculateAppointmentEndDate\", allDay, startDate);\r\n        return {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay,\r\n            groups: cellData.groups\r\n        }\r\n    }\r\n    getDateRange() {\r\n        return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()]\r\n    }\r\n    getCellWidth() {\r\n        return this.cache.get(\"cellWidth\", () => {\r\n            var cell = this._getCells().first().get(0);\r\n            return cell && getBoundingRect(cell).width\r\n        })\r\n    }\r\n    getCellMinWidth() {\r\n        return DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    getRoundedCellWidth(groupIndex, startIndex, cellCount) {\r\n        if (groupIndex < 0) {\r\n            return 0\r\n        }\r\n        var $row = this.$element().find(\".\" + this._getDateTableRowClass()).eq(0);\r\n        var width = 0;\r\n        var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\r\n        var totalCellCount = this._getCellCount() * groupIndex;\r\n        cellCount = cellCount || this._getCellCount();\r\n        if (!isDefined(startIndex)) {\r\n            startIndex = totalCellCount\r\n        }\r\n        for (var i = startIndex; i < totalCellCount + cellCount; i++) {\r\n            width += getBoundingRect($($cells).eq(i).get(0)).width\r\n        }\r\n        return width / (totalCellCount + cellCount - startIndex)\r\n    }\r\n    getCellHeight() {\r\n        var useCache = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        var callbackResult = () => {\r\n            var cell = this._getCells().first().get(0);\r\n            return cell && getBoundingRect(cell).height\r\n        };\r\n        return useCache ? this.cache.get(\"cellHeight\", callbackResult) : callbackResult()\r\n    }\r\n    getAllDayHeight() {\r\n        var cell = this._getCells(true).first().get(0);\r\n        return this._isShowAllDayPanel() ? cell && getBoundingRect(cell).height || 0 : 0\r\n    }\r\n    getAllDayOffset() {\r\n        return this._groupedStrategy.getAllDayOffset()\r\n    }\r\n    getMaxAllowedPosition(groupIndex) {\r\n        var validGroupIndex = groupIndex || 0;\r\n        if (this.isRenovatedRender()) {\r\n            return this.getRMaxAllowedHorizontalPosition(validGroupIndex)\r\n        }\r\n        return this.getMaxAllowedHorizontalPosition(validGroupIndex)\r\n    }\r\n    getMaxAllowedHorizontalPosition(groupIndex) {\r\n        if (0 === this._maxAllowedPosition.length) {\r\n            var isRtl = this.option(\"rtlEnabled\");\r\n            this._maxAllowedPosition = [];\r\n            this._$dateTable.find(\"tr\").first().find(\"td:nth-child(\".concat(this._getCellCount(), \"n)\")).each(function(_, cell) {\r\n                var maxPosition = $(cell).position().left;\r\n                if (!isRtl) {\r\n                    maxPosition += getBoundingRect(cell).width\r\n                }\r\n                this._maxAllowedPosition.push(Math.round(maxPosition))\r\n            }.bind(this))\r\n        }\r\n        return this._maxAllowedPosition[groupIndex]\r\n    }\r\n    getRMaxAllowedHorizontalPosition(groupIndex) {\r\n        if (!this._maxAllowedPosition[groupIndex]) {\r\n            var {\r\n                cellIndex: cellIndex\r\n            } = this.viewDataProvider.getLasGroupCellPosition(groupIndex);\r\n            (cellIndex => {\r\n                var cell = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).first().find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).get(cellIndex);\r\n                var maxPosition = $(cell).position().left;\r\n                if (!this.option(\"rtlEnabled\")) {\r\n                    maxPosition += getBoundingRect(cell).width\r\n                }\r\n                this._maxAllowedPosition[groupIndex] = Math.round(maxPosition)\r\n            })(cellIndex)\r\n        }\r\n        return this._maxAllowedPosition[groupIndex]\r\n    }\r\n    getMaxAllowedVerticalPosition(groupIndex) {\r\n        if (this.isRenovatedRender()) {\r\n            return this.getRMaxAllowedVerticalPosition(groupIndex)\r\n        }\r\n        return this.getMaxAllowedVerticalPositionStandard(groupIndex)\r\n    }\r\n    getMaxAllowedVerticalPositionStandard(groupIndex) {\r\n        if (0 === this._maxAllowedVerticalPosition.length) {\r\n            var rowCount = this._getRowCount();\r\n            this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \"):nth-child(\").concat(rowCount, \"n)\")).each((_, row) => {\r\n                var maxPosition = $(row).position().top + getBoundingRect(row).height;\r\n                this._maxAllowedVerticalPosition.push(Math.round(maxPosition))\r\n            })\r\n        }\r\n        return this._maxAllowedVerticalPosition[groupIndex]\r\n    }\r\n    getRMaxAllowedVerticalPosition(groupIndex) {\r\n        if (!this._maxAllowedVerticalPosition[groupIndex]) {\r\n            var {\r\n                rowIndex: rowIndex\r\n            } = this.viewDataProvider.getLasGroupCellPosition(groupIndex);\r\n            (rowIndex => {\r\n                var row = this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).get(rowIndex);\r\n                var maxPosition = $(row).position().top + getBoundingRect(row).height;\r\n                if (this.isGroupedAllDayPanel()) {\r\n                    maxPosition -= (groupIndex + 1) * this.getAllDayHeight()\r\n                }\r\n                this._maxAllowedVerticalPosition[groupIndex] = Math.round(maxPosition)\r\n            })(rowIndex)\r\n        }\r\n        return this._maxAllowedVerticalPosition[groupIndex]\r\n    }\r\n    getFixedContainer() {\r\n        return this._$fixedContainer\r\n    }\r\n    getAllDayContainer() {\r\n        return this._$allDayContainer\r\n    }\r\n    getCellIndexByCoordinates(coordinates, allDay) {\r\n        var cellCount = this._getTotalCellCount(this._getGroupCount());\r\n        var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\r\n        var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\r\n        var leftOffset = this._isRTL() || this.option(\"crossScrollingEnabled\") ? 0 : this.getWorkSpaceLeftOffset();\r\n        var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\r\n        var leftIndex = Math.floor((coordinates.left + 5 - leftOffset) / cellWidth);\r\n        if (this._isRTL()) {\r\n            leftIndex = cellCount - leftIndex - 1\r\n        }\r\n        return cellCount * topIndex + leftIndex\r\n    }\r\n    getStartViewDate() {\r\n        return this._firstViewDate\r\n    }\r\n    getEndViewDate() {\r\n        var dateOfLastViewCell = this.getDateOfLastViewCell();\r\n        var endDateOfLastViewCell = this.calculateEndViewDate(dateOfLastViewCell);\r\n        return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        var dateOfLastViewCell = this.getDateOfLastViewCell();\r\n        var endTime = dateUtils.dateTimeFromDecimal(this.option(\"endDayHour\"));\r\n        var endDateOfLastViewCell = new Date(dateOfLastViewCell.setHours(endTime.hours, endTime.minutes));\r\n        return this._adjustEndViewDateByDaylightDiff(dateOfLastViewCell, endDateOfLastViewCell)\r\n    }\r\n    calculateEndViewDate(dateOfLastViewCell) {\r\n        return new Date(dateOfLastViewCell.getTime() + this.getCellDuration())\r\n    }\r\n    _adjustEndViewDateByDaylightDiff(startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\r\n        var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\r\n        return new Date(endDateOfLastViewCell.getTime() - this._getEndViewDateTimeDiff())\r\n    }\r\n    _getEndViewDateTimeDiff() {\r\n        return toMs(\"minute\")\r\n    }\r\n    getDateOfLastViewCell() {\r\n        var rowIndex = this._getRowCount() - 1;\r\n        var cellIndex = this._getCellCount();\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = cellIndex * this._getGroupCount() - 1\r\n        } else {\r\n            cellIndex -= 1\r\n        }\r\n        return this._getDateByCellIndexes(rowIndex, cellIndex, true)\r\n    }\r\n    getCellDuration() {\r\n        return 36e5 * this.option(\"hoursInterval\")\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return allDay ? toMs(\"day\") : this.getCellDuration()\r\n    }\r\n    getVisibleDayDuration() {\r\n        return this.option(\"hoursInterval\") * this._getCellCountInDay() * HOUR_MS\r\n    }\r\n    getGroupBounds(coordinates) {\r\n        var cellCount = this._getCellCount();\r\n        var $cells = this._getCells();\r\n        var cellWidth = this.getCellWidth();\r\n        var result;\r\n        if (this.isVirtualScrolling()) {\r\n            var groupedDataMap = this.viewDataProvider.groupedDataMap;\r\n            result = this._groupedStrategy.getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap)\r\n        } else {\r\n            result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates)\r\n        }\r\n        if (this._isRTL()) {\r\n            var startOffset = result.left;\r\n            result.left = result.right - 2 * cellWidth;\r\n            result.right = startOffset + 2 * cellWidth\r\n        }\r\n        return result\r\n    }\r\n    needRecalculateResizableArea() {\r\n        return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop()\r\n    }\r\n    getCellDataByCoordinates(coordinates, allDay) {\r\n        var key = JSON.stringify({\r\n            top: coordinates.top,\r\n            left: coordinates.left\r\n        });\r\n        return this.cache.get(key, () => {\r\n            var $cells = this._getCells(allDay);\r\n            var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\r\n            var $cell = $cells.eq(cellIndex);\r\n            return this.getCellData($cell)\r\n        })\r\n    }\r\n    getVisibleBounds() {\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\r\n        var totalCellCount = scrolledCellCount + $scrollable.height() / cellHeight;\r\n        result.top = {\r\n            hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: scrolledCellCount % 2 ? 30 : 0\r\n        };\r\n        result.bottom = {\r\n            hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\r\n        };\r\n        return result\r\n    }\r\n    updateScrollPosition(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var scheduler = this.option(\"observer\");\r\n        var newDate = scheduler.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var inAllDayRow = allDay && this.isAllDayPanelVisible;\r\n        if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\r\n            this.scrollTo(newDate, groups, inAllDayRow, false)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(date, groups, inAllDayRow) {\r\n        var cells = this._getCellsInViewport(inAllDayRow);\r\n        var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        return cells.reduce((currentResult, cell) => {\r\n            var {\r\n                startDate: cellStartDate,\r\n                endDate: cellEndDate,\r\n                groupIndex: cellGroupIndex\r\n            } = this.getCellData(cell);\r\n            var cellStartTime = cellStartDate.getTime();\r\n            var cellEndTime = cellEndDate.getTime();\r\n            if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\r\n                return false\r\n            }\r\n            return currentResult\r\n        }, true)\r\n    }\r\n    _getCellsInViewport(inAllDayRow) {\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var cellWidth = this.getCellWidth();\r\n        var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\r\n        var scrollableScrollTop = this.getScrollableScrollTop();\r\n        var scrollableScrollLeft = this.getScrollableScrollLeft();\r\n        var fullScrolledRowCount = scrollableScrollTop / cellHeight;\r\n        if (this.isVirtualScrolling()) {\r\n            fullScrolledRowCount -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        var scrolledRowCount = Math.floor(fullScrolledRowCount);\r\n        if (scrollableScrollTop % cellHeight !== 0) {\r\n            scrolledRowCount += 1\r\n        }\r\n        var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\r\n        var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\r\n        if (scrollableScrollLeft % cellWidth !== 0) {\r\n            scrolledColumnCount += 1\r\n        }\r\n        var rowCount = Math.floor(fullScrolledRowCount + $scrollable.height() / cellHeight);\r\n        var columnCount = Math.floor(fullScrolledColumnCount + $scrollable.width() / cellWidth);\r\n        var $cells = this._getAllCells(inAllDayRow);\r\n        var result = [];\r\n        $cells.each((function(index) {\r\n            var $cell = $(this);\r\n            var columnIndex = index % totalColumnCount;\r\n            var rowIndex = index / totalColumnCount;\r\n            if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\r\n                result.push($cell)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    getGroupWidth(groupIndex) {\r\n        var result = this._getCellCount() * this.getCellWidth();\r\n        if (this.isVirtualScrolling()) {\r\n            var groupedData = this.viewDataProvider.groupedDataMap.dateTableGroupedMap;\r\n            var groupLength = groupedData[groupIndex][0].length;\r\n            result = groupLength * this.getCellWidth()\r\n        }\r\n        var position = this.getMaxAllowedPosition(groupIndex);\r\n        var currentPosition = position[groupIndex];\r\n        if (currentPosition) {\r\n            if (this._isRTL()) {\r\n                result = currentPosition - position[groupIndex + 1]\r\n            } else if (0 === groupIndex) {\r\n                result = currentPosition\r\n            } else {\r\n                result = currentPosition - position[groupIndex - 1]\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        if (!this._isValidScrollDate(date)) {\r\n            return\r\n        }\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        scrollable.scrollBy({\r\n            top: coordinates.top - scrollable.scrollTop(),\r\n            left: 0\r\n        })\r\n    }\r\n    scrollTo(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\r\n        if (!this._isValidScrollDate(date, throwWarning)) {\r\n            return\r\n        }\r\n        var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\r\n        var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\r\n        var scrollable = this.getScrollable();\r\n        var $scrollable = scrollable.$element();\r\n        var offset = this.option(\"rtlEnabled\") ? this.getCellWidth() : 0;\r\n        var scrollableHeight = $scrollable.height();\r\n        var scrollableWidth = $scrollable.width();\r\n        var cellWidth = this.getCellWidth();\r\n        var cellHeight = this.getCellHeight();\r\n        var xShift = (scrollableWidth - cellWidth) / 2;\r\n        var yShift = (scrollableHeight - cellHeight) / 2;\r\n        var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\r\n        var top = coordinates.top - scrollable.scrollTop() - yShift;\r\n        if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\r\n            top = 0\r\n        }\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(() => {\r\n                scrollable.scrollBy({\r\n                    left: left,\r\n                    top: top\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: left,\r\n                top: top\r\n            })\r\n        }\r\n    }\r\n    _isValidScrollDate(date) {\r\n        var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        var min = this.getStartViewDate();\r\n        var max = this.getEndViewDate();\r\n        if (date < min || date > max) {\r\n            throwWarning && errors.log(\"W1008\", date);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    getDistanceBetweenCells(startIndex, endIndex) {\r\n        var result = 0;\r\n        this.$element().find(\".\" + this._getDateTableRowClass()).first().find(\".\" + DATE_TABLE_CELL_CLASS).each((function(index) {\r\n            if (index < startIndex || index > endIndex) {\r\n                return true\r\n            }\r\n            result += getBoundingRect(this).width\r\n        }));\r\n        return result\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return false\r\n    }\r\n    initDragBehavior(scheduler) {\r\n        if (!this.dragBehavior && scheduler) {\r\n            this.dragBehavior = new AppointmentDragBehavior(scheduler);\r\n            this._createDragBehavior(this.getWorkArea());\r\n            this._createDragBehavior(this.getAllDayContainer());\r\n            this._createDragBehavior(this._$allDayPanel)\r\n        }\r\n    }\r\n    _createDragBehavior($element) {\r\n        this._createDragBehaviorBase($element, (itemElement, appointments) => appointments._getItemData(itemElement), $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY))\r\n    }\r\n    _createDragBehaviorBase($element, getItemData, getItemSettings) {\r\n        var options = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};\r\n        var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\r\n        var element = this.$element();\r\n        var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\r\n        this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, () => this._attachDragEvents(element), () => this._detachDragEvents(element), () => this._getDroppableCell(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), getItemData, getItemSettings, options))\r\n    }\r\n    _createDragAppointment(itemData, settings, appointments) {\r\n        var appointmentIndex = appointments.option(\"items\").length;\r\n        settings.isCompact = false;\r\n        settings.virtual = false;\r\n        var items = appointments._renderItem(appointmentIndex, {\r\n            itemData: itemData,\r\n            settings: [settings]\r\n        });\r\n        return items[0]\r\n    }\r\n    _isApplyCompactAppointmentOffset() {\r\n        return this._supportCompactDropDownAppointments()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return true\r\n    }\r\n    _formatWeekday(date) {\r\n        return formatWeekday(date)\r\n    }\r\n    _formatWeekdayAndDay(date) {\r\n        return formatWeekday(date) + \" \" + dateLocalization.format(date, \"day\")\r\n    }\r\n    removeDroppableCellClass($cellElement) {\r\n        ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getCoordinatesByCell($cell) {\r\n        var columnIndex = $cell.index();\r\n        var rowIndex = $cell.parent().index();\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        if (this.isVirtualScrolling() && !(isAllDayCell && !isVerticalGrouping)) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        if (this.isVirtualScrolling()) {\r\n            columnIndex -= this.virtualScrollingDispatcher.leftVirtualCellsCount\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _isShowAllDayPanel() {\r\n        return this.option(\"showAllDayPanel\")\r\n    }\r\n    updateAppointments() {\r\n        var _this$dragBehavior;\r\n        this.invoke(\"renderAppointments\");\r\n        null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource()\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS))\r\n    }\r\n    _getRDateTableProps() {\r\n        return {\r\n            viewData: this.viewDataProvider.viewData,\r\n            dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n            addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        }\r\n    }\r\n    _getTimeOffsetForStartViewDate() {\r\n        var startViewDate = this.getStartViewDate();\r\n        var startDayHour = Math.floor(this.option(\"startDayHour\"));\r\n        var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\r\n        if (isDSTChange && startDayHour !== startViewDate.getHours()) {\r\n            return toMs(\"hour\")\r\n        }\r\n        return 0\r\n    }\r\n}\r\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, removeDroppableCellClass, getCellWidth, getItemData, getItemSettings, options) => {\r\n    var state = {\r\n        dragElement: void 0,\r\n        itemData: void 0\r\n    };\r\n    var cursorOffset = options.isSetCursorOffset ? () => {\r\n        var $dragElement = $(state.dragElement);\r\n        return {\r\n            x: $dragElement.width() / 2,\r\n            y: $dragElement.height() / 2\r\n        }\r\n    } : void 0;\r\n    return {\r\n        container: container,\r\n        dragTemplate: () => state.dragElement,\r\n        onDragStart: e => {\r\n            if (!isDefaultDraggingMode) {\r\n                detachGeneralEvents()\r\n            }\r\n            var canceled = e.cancel;\r\n            var event = e.event;\r\n            var $itemElement = $(e.itemElement);\r\n            var appointments = e.component._appointments;\r\n            state.itemData = getItemData(e.itemElement, appointments);\r\n            var settings = getItemSettings($itemElement, e);\r\n            if (state.itemData && !state.itemData.disabled) {\r\n                event.data = event.data || {};\r\n                if (!canceled) {\r\n                    if (!settings.isCompact) {\r\n                        dragBehavior.updateDragSource(state.itemData, settings)\r\n                    }\r\n                    state.dragElement = ((itemData, settings, appointments) => {\r\n                        var appointmentIndex = appointments.option(\"items\").length;\r\n                        settings.isCompact = false;\r\n                        settings.virtual = false;\r\n                        var items = appointments._renderItem(appointmentIndex, {\r\n                            itemData: itemData,\r\n                            settings: [settings]\r\n                        });\r\n                        return items[0]\r\n                    })(state.itemData, settings, appointments);\r\n                    event.data.itemElement = state.dragElement;\r\n                    event.data.initialPosition = locate($(state.dragElement));\r\n                    event.data.itemData = state.itemData;\r\n                    event.data.itemSettings = settings;\r\n                    dragBehavior.onDragStart(event.data);\r\n                    resetPosition($(state.dragElement))\r\n                }\r\n            }\r\n        },\r\n        onDragMove: () => {\r\n            if (isDefaultDraggingMode) {\r\n                return\r\n            }\r\n            var appointmentWidth = $(state.dragElement).width();\r\n            var isWideAppointment = appointmentWidth > getCellWidth();\r\n            var draggableElement = locate($(state.dragElement).parent());\r\n            var newX = draggableElement.left + 10;\r\n            var newY = draggableElement.top + 10;\r\n            var elements = isWideAppointment ? getElementsFromPoint(newX, newY) : getElementsFromPoint(newX + appointmentWidth / 2, newY);\r\n            var droppableCell = elements.filter(el => el.className.indexOf(DATE_TABLE_CELL_CLASS) > -1 || el.className.indexOf(ALL_DAY_TABLE_CELL_CLASS) > -1)[0];\r\n            if (droppableCell) {\r\n                var oldDroppableCell = getDroppableCell();\r\n                if (!oldDroppableCell.is(droppableCell)) {\r\n                    removeDroppableCellClass()\r\n                }\r\n                $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        },\r\n        onDragEnd: e => {\r\n            var _state$dragElement;\r\n            if (!isDefaultDraggingMode) {\r\n                attachGeneralEvents()\r\n            }\r\n            if (state.itemData && !state.itemData.disabled) {\r\n                dragBehavior.onDragEnd(e)\r\n            }\r\n            null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\r\n            removeDroppableCellClass()\r\n        },\r\n        cursorOffset: cursorOffset,\r\n        filter: options.filter\r\n    }\r\n};\r\nexport default SchedulerWorkSpace;\r\n"]},"metadata":{},"sourceType":"module"}