{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid.core.virtual_data_loader.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { isObject, isString } from \"../../core/utils/type\";\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\n\nvar needTwoPagesLoading = function needTwoPagesLoading(that) {\n  return that.option(\"scrolling.loadTwoPagesOnStart\") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;\n};\n\nvar getBeginPageIndex = function getBeginPageIndex(that) {\n  return that._cache.length ? that._cache[0].pageIndex : -1;\n};\n\nvar getEndPageIndex = function getEndPageIndex(that) {\n  return that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\n};\n\nvar fireChanged = function fireChanged(that, changed, args) {\n  that._isChangedFiring = true;\n  changed(args);\n  that._isChangedFiring = false;\n};\n\nvar processDelayChanged = function processDelayChanged(that, changed, args) {\n  if (that._isDelayChanged) {\n    that._isDelayChanged = false;\n    fireChanged(that, changed, args);\n    return true;\n  }\n};\n\nvar getViewportPageCount = function getViewportPageCount(that) {\n  var pageSize = that._dataOptions.pageSize();\n\n  var preventPreload = that.option(\"scrolling.preventPreload\");\n\n  if (preventPreload) {\n    return 0;\n  }\n\n  var realViewportSize = that._controller.viewportSize();\n\n  if (that._controller.isVirtualMode() && that.option(\"scrolling.removeInvisiblePages\")) {\n    realViewportSize = 0;\n\n    var viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();\n\n    var offset = that._controller.getContentOffset();\n\n    var position = that._controller.getViewportPosition();\n\n    var virtualItemsCount = that._controller.virtualItemsCount();\n\n    var totalItemsCount = that._dataOptions.totalItemsCount();\n\n    for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\n      if (offset >= position + viewportSize) {\n        break;\n      }\n\n      var itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();\n\n      offset += itemSize;\n\n      if (offset >= position) {\n        realViewportSize++;\n      }\n    }\n  }\n\n  return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1;\n};\n\nvar getPreloadPageCount = function getPreloadPageCount(that, previous) {\n  var preloadEnabled = that.option(\"scrolling.preloadEnabled\");\n  var pageCount = getViewportPageCount(that);\n\n  var isAppendMode = that._controller.isAppendMode();\n\n  if (pageCount) {\n    if (previous) {\n      pageCount = preloadEnabled ? 1 : 0;\n    } else {\n      if (preloadEnabled) {\n        pageCount++;\n      }\n\n      if (isAppendMode || !needTwoPagesLoading(that)) {\n        pageCount--;\n      }\n    }\n  }\n\n  return pageCount;\n};\n\nvar getPageIndexForLoad = function getPageIndexForLoad(that) {\n  var result = -1;\n  var beginPageIndex = getBeginPageIndex(that);\n  var dataOptions = that._dataOptions;\n\n  if (beginPageIndex < 0) {\n    result = that._pageIndex;\n  } else if (!that._cache[that._pageIndex - beginPageIndex]) {\n    result = that._pageIndex;\n  } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {\n    if (beginPageIndex > 0) {\n      var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\n      var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\n\n      if (needToLoadPrevPage) {\n        result = beginPageIndex - 1;\n      }\n    }\n\n    if (result < 0) {\n      var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\n\n      if (needToLoadNextPage) {\n        result = beginPageIndex + that._cache.length;\n      }\n    }\n  }\n\n  if (that._loadingPageIndexes[result]) {\n    result = -1;\n  }\n\n  return result;\n};\n\nvar loadCore = function loadCore(that, pageIndex) {\n  var dataOptions = that._dataOptions;\n\n  if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {\n    dataOptions.pageIndex(pageIndex);\n    that._loadingPageIndexes[pageIndex] = true;\n    return when(dataOptions.load()).always(function () {\n      that._loadingPageIndexes[pageIndex] = false;\n    });\n  }\n};\n\nvar processChanged = function processChanged(that, changed, changeType, isDelayChanged, removeCacheItem) {\n  var dataOptions = that._dataOptions;\n  var items = dataOptions.items().slice();\n  var change = isObject(changeType) ? changeType : void 0;\n  var isPrepend = \"prepend\" === changeType;\n  var viewportItems = dataOptions.viewportItems();\n\n  if (changeType && isString(changeType) && !that._isDelayChanged) {\n    change = {\n      changeType: changeType,\n      items: items\n    };\n\n    if (removeCacheItem) {\n      change.removeCount = removeCacheItem.itemsCount;\n\n      if (change.removeCount && dataOptions.correctCount) {\n        change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend);\n      }\n    }\n  }\n\n  var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\n\n  if (removeItemCount && dataOptions.correctCount) {\n    removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend);\n  }\n\n  if (\"append\" === changeType) {\n    viewportItems.push.apply(viewportItems, items);\n\n    if (removeCacheItem) {\n      viewportItems.splice(0, removeItemCount);\n    }\n  } else if (isPrepend) {\n    viewportItems.unshift.apply(viewportItems, items);\n\n    if (removeCacheItem) {\n      viewportItems.splice(-removeItemCount);\n    }\n  } else {\n    that._dataOptions.viewportItems(items);\n  }\n\n  dataOptions.updateLoading();\n  that._lastPageIndex = that.pageIndex();\n  that._isDelayChanged = isDelayChanged;\n\n  if (!isDelayChanged) {\n    fireChanged(that, changed, change);\n  }\n};\n\nexport var VirtualDataLoader = /*#__PURE__*/function () {\n  function VirtualDataLoader(controller, dataOptions) {\n    _classCallCheck(this, VirtualDataLoader);\n\n    this._controller = controller;\n    this._dataOptions = dataOptions;\n    this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();\n    this._cache = [];\n    this._loadingPageIndexes = {};\n  }\n\n  _createClass(VirtualDataLoader, [{\n    key: \"option\",\n    value: function option() {\n      return this._controller.option.apply(this._controller, arguments);\n    }\n  }, {\n    key: \"viewportItemIndexChanged\",\n    value: function viewportItemIndexChanged(itemIndex) {\n      var pageSize = this._dataOptions.pageSize();\n\n      var pageCount = this._dataOptions.pageCount();\n\n      var virtualMode = this._controller.isVirtualMode();\n\n      var appendMode = this._controller.isAppendMode();\n\n      var totalItemsCount = this._dataOptions.totalItemsCount();\n\n      var newPageIndex;\n\n      if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\n        var viewportSize = this._controller.viewportSize();\n\n        if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {\n          if (this._dataOptions.hasKnownLastPage()) {\n            newPageIndex = pageCount - 1;\n            var lastPageSize = totalItemsCount % pageSize;\n\n            if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {\n              newPageIndex--;\n            }\n          } else {\n            newPageIndex = pageCount;\n          }\n        } else {\n          newPageIndex = Math.floor(itemIndex / pageSize);\n          var maxPageIndex = pageCount - 1;\n          newPageIndex = Math.max(newPageIndex, 0);\n          newPageIndex = Math.min(newPageIndex, maxPageIndex);\n        }\n\n        this.pageIndex(newPageIndex);\n        return this.load();\n      }\n    }\n  }, {\n    key: \"pageIndex\",\n    value: function pageIndex(_pageIndex) {\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        if (void 0 !== _pageIndex) {\n          this._pageIndex = _pageIndex;\n        }\n\n        return this._pageIndex;\n      } else {\n        return this._dataOptions.pageIndex(_pageIndex);\n      }\n    }\n  }, {\n    key: \"beginPageIndex\",\n    value: function beginPageIndex(defaultPageIndex) {\n      var beginPageIndex = getBeginPageIndex(this);\n\n      if (beginPageIndex < 0) {\n        beginPageIndex = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex();\n      }\n\n      return beginPageIndex;\n    }\n  }, {\n    key: \"endPageIndex\",\n    value: function endPageIndex() {\n      var endPageIndex = getEndPageIndex(this);\n      return endPageIndex > 0 ? endPageIndex : this._lastPageIndex;\n    }\n  }, {\n    key: \"pageSize\",\n    value: function pageSize() {\n      return this._dataOptions.pageSize();\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n\n      var dataOptions = this._dataOptions;\n      var result;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        var pageIndexForLoad = getPageIndexForLoad(this);\n\n        if (pageIndexForLoad >= 0) {\n          var loadResult = loadCore(this, pageIndexForLoad);\n\n          if (loadResult) {\n            result = new Deferred();\n            loadResult.done(function () {\n              var delayDeferred = _this._delayDeferred;\n\n              if (delayDeferred) {\n                delayDeferred.done(result.resolve).fail(result.reject);\n              } else {\n                result.resolve();\n              }\n            }).fail(result.reject);\n            dataOptions.updateLoading();\n          }\n        }\n      } else {\n        result = dataOptions.load();\n      }\n\n      if (!result && this._lastPageIndex !== this.pageIndex()) {\n        this._dataOptions.onChanged({\n          changeType: \"pageIndex\"\n        });\n      }\n\n      return result || new Deferred().resolve();\n    }\n  }, {\n    key: \"loadIfNeed\",\n    value: function loadIfNeed() {\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {\n        var position = this._controller.getViewportPosition();\n\n        if (position > 0) {\n          this._controller._setViewportPositionCore(position);\n        } else {\n          this.load();\n        }\n      }\n    }\n  }, {\n    key: \"handleDataChanged\",\n    value: function handleDataChanged(callBase, e) {\n      var _this2 = this;\n\n      var dataOptions = this._dataOptions;\n      var lastCacheLength = this._cache.length;\n      var changeType;\n      var removeInvisiblePages;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (e && e.changes) {\n        fireChanged(this, callBase, e);\n      } else if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        var beginPageIndex = getBeginPageIndex(this);\n\n        if (beginPageIndex >= 0) {\n          if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {\n            lastCacheLength = 0;\n            this._cache = [];\n          }\n\n          if (isAppendMode) {\n            if (0 === dataOptions.pageIndex()) {\n              this._cache = [];\n            } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {\n              fireChanged(this, callBase, {\n                changeType: \"append\",\n                items: []\n              });\n              return;\n            }\n          }\n        }\n\n        var cacheItem = {\n          pageIndex: dataOptions.pageIndex(),\n          itemsLength: dataOptions.items(true).length,\n          itemsCount: this.itemsCount(true)\n        };\n\n        if (this.option(\"scrolling.removeInvisiblePages\") && isVirtualMode) {\n          removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2);\n        } else {\n          processDelayChanged(this, callBase, {\n            isDelayed: true\n          });\n        }\n\n        var removeCacheItem;\n\n        if (beginPageIndex === dataOptions.pageIndex() + 1) {\n          if (removeInvisiblePages) {\n            removeCacheItem = this._cache.pop();\n          }\n\n          changeType = \"prepend\";\n\n          this._cache.unshift(cacheItem);\n        } else {\n          if (removeInvisiblePages) {\n            removeCacheItem = this._cache.shift();\n          }\n\n          changeType = \"append\";\n\n          this._cache.push(cacheItem);\n        }\n\n        var isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);\n        processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\n        this._delayDeferred = this.load().done(function () {\n          if (processDelayChanged(_this2, callBase)) {\n            _this2.load();\n          }\n        });\n      } else {\n        processChanged(this, callBase, e);\n      }\n    }\n  }, {\n    key: \"getDelayDeferred\",\n    value: function getDelayDeferred() {\n      return this._delayDeferred;\n    }\n  }, {\n    key: \"itemsCount\",\n    value: function itemsCount(isBase) {\n      var itemsCount = 0;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      if (!isBase && isVirtualMode) {\n        this._cache.forEach(function (cacheItem) {\n          itemsCount += cacheItem.itemsCount;\n        });\n      } else {\n        itemsCount = this._dataOptions.itemsCount();\n      }\n\n      return itemsCount;\n    }\n  }, {\n    key: \"virtualItemsCount\",\n    value: function virtualItemsCount() {\n      var pageIndex = getBeginPageIndex(this);\n\n      if (pageIndex < 0) {\n        pageIndex = this._dataOptions.pageIndex();\n      }\n\n      var beginItemsCount = pageIndex * this._dataOptions.pageSize();\n\n      var itemsCount = this._cache.length * this._dataOptions.pageSize();\n\n      var endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);\n      return {\n        begin: beginItemsCount,\n        end: endItemsCount\n      };\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._loadingPageIndexes = {};\n      this._cache = [];\n    }\n  }]);\n\n  return VirtualDataLoader;\n}();","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/grid_core/ui.grid.core.virtual_data_loader.js"],"names":["Deferred","when","isObject","isString","NEW_SCROLLING_MODE","needTwoPagesLoading","that","option","_controller","isVirtual","getViewportItemIndex","getBeginPageIndex","_cache","length","pageIndex","getEndPageIndex","fireChanged","changed","args","_isChangedFiring","processDelayChanged","_isDelayChanged","getViewportPageCount","pageSize","_dataOptions","preventPreload","realViewportSize","viewportSize","isVirtualMode","viewportItemSize","offset","getContentOffset","position","getViewportPosition","virtualItemsCount","totalItemsCount","itemIndex","begin","itemSize","getItemSizes","Math","ceil","getPreloadPageCount","previous","preloadEnabled","pageCount","isAppendMode","getPageIndexForLoad","result","beginPageIndex","dataOptions","_pageIndex","needToLoadPageBeforeLast","needToLoadPrevPage","needToLoadNextPage","_loadingPageIndexes","loadCore","isLoading","hasKnownLastPage","load","always","processChanged","changeType","isDelayChanged","removeCacheItem","items","slice","change","isPrepend","viewportItems","removeCount","itemsCount","correctCount","removeItemCount","itemsLength","push","apply","splice","unshift","updateLoading","_lastPageIndex","VirtualDataLoader","controller","arguments","virtualMode","appendMode","newPageIndex","lastPageSize","floor","maxPageIndex","max","min","defaultPageIndex","endPageIndex","pageIndexForLoad","loadResult","done","delayDeferred","_delayDeferred","resolve","fail","reject","onChanged","_setViewportPositionCore","callBase","e","lastCacheLength","removeInvisiblePages","changes","cacheItem","isDelayed","pop","shift","isBase","forEach","beginItemsCount","endItemsCount","end"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,QADJ,EAEIC,IAFJ,QAGO,2BAHP;AAIA,SACIC,QADJ,EAEIC,QAFJ,QAGO,uBAHP;AAIA,IAAIC,kBAAkB,GAAG,mBAAzB;;AACA,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,MAAL,CAAY,+BAAZ,KAAgDD,IAAI,CAACE,WAAL,CAAiBC,SAAjB,EAAhD,IAAgFH,IAAI,CAACE,WAAL,CAAiBE,oBAAjB,KAA0C,CAA9H;AAAA,CAA9B;;AACA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAL,IAAI;AAAA,SAAIA,IAAI,CAACM,MAAL,CAAYC,MAAZ,GAAqBP,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAeE,SAApC,GAAgD,CAAC,CAArD;AAAA,CAA5B;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAAT,IAAI;AAAA,SAAIA,IAAI,CAACM,MAAL,CAAYC,MAAZ,GAAqBP,IAAI,CAACM,MAAL,CAAYN,IAAI,CAACM,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,EAAoCC,SAAzD,GAAqE,CAAC,CAA1E;AAAA,CAA1B;;AACA,IAAIE,WAAW,GAAG,SAAdA,WAAc,CAACV,IAAD,EAAOW,OAAP,EAAgBC,IAAhB,EAAyB;AACvCZ,EAAAA,IAAI,CAACa,gBAAL,GAAwB,IAAxB;AACAF,EAAAA,OAAO,CAACC,IAAD,CAAP;AACAZ,EAAAA,IAAI,CAACa,gBAAL,GAAwB,KAAxB;AACH,CAJD;;AAKA,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACd,IAAD,EAAOW,OAAP,EAAgBC,IAAhB,EAAyB;AAC/C,MAAIZ,IAAI,CAACe,eAAT,EAA0B;AACtBf,IAAAA,IAAI,CAACe,eAAL,GAAuB,KAAvB;AACAL,IAAAA,WAAW,CAACV,IAAD,EAAOW,OAAP,EAAgBC,IAAhB,CAAX;AACA,WAAO,IAAP;AACH;AACJ,CAND;;AAOA,IAAII,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAhB,IAAI,EAAI;AAC/B,MAAIiB,QAAQ,GAAGjB,IAAI,CAACkB,YAAL,CAAkBD,QAAlB,EAAf;;AACA,MAAIE,cAAc,GAAGnB,IAAI,CAACC,MAAL,CAAY,0BAAZ,CAArB;;AACA,MAAIkB,cAAJ,EAAoB;AAChB,WAAO,CAAP;AACH;;AACD,MAAIC,gBAAgB,GAAGpB,IAAI,CAACE,WAAL,CAAiBmB,YAAjB,EAAvB;;AACA,MAAIrB,IAAI,CAACE,WAAL,CAAiBoB,aAAjB,MAAoCtB,IAAI,CAACC,MAAL,CAAY,gCAAZ,CAAxC,EAAuF;AACnFmB,IAAAA,gBAAgB,GAAG,CAAnB;;AACA,QAAIC,YAAY,GAAGrB,IAAI,CAACE,WAAL,CAAiBmB,YAAjB,KAAkCrB,IAAI,CAACE,WAAL,CAAiBqB,gBAAjB,EAArD;;AACA,QAAIC,MAAM,GAAGxB,IAAI,CAACE,WAAL,CAAiBuB,gBAAjB,EAAb;;AACA,QAAIC,QAAQ,GAAG1B,IAAI,CAACE,WAAL,CAAiByB,mBAAjB,EAAf;;AACA,QAAIC,iBAAiB,GAAG5B,IAAI,CAACE,WAAL,CAAiB0B,iBAAjB,EAAxB;;AACA,QAAIC,eAAe,GAAG7B,IAAI,CAACkB,YAAL,CAAkBW,eAAlB,EAAtB;;AACA,SAAK,IAAIC,SAAS,GAAGF,iBAAiB,CAACG,KAAvC,EAA8CD,SAAS,GAAGD,eAA1D,EAA2EC,SAAS,EAApF,EAAwF;AACpF,UAAIN,MAAM,IAAIE,QAAQ,GAAGL,YAAzB,EAAuC;AACnC;AACH;;AACD,UAAIW,QAAQ,GAAGhC,IAAI,CAACE,WAAL,CAAiB+B,YAAjB,GAAgCH,SAAhC,KAA8C9B,IAAI,CAACE,WAAL,CAAiBqB,gBAAjB,EAA7D;;AACAC,MAAAA,MAAM,IAAIQ,QAAV;;AACA,UAAIR,MAAM,IAAIE,QAAd,EAAwB;AACpBN,QAAAA,gBAAgB;AACnB;AACJ;AACJ;;AACD,SAAOH,QAAQ,IAAIG,gBAAgB,GAAG,CAA/B,GAAmCc,IAAI,CAACC,IAAL,CAAUf,gBAAgB,GAAGH,QAA7B,CAAnC,GAA4E,CAAnF;AACH,CA1BD;;AA2BA,IAAImB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACpC,IAAD,EAAOqC,QAAP,EAAoB;AAC1C,MAAIC,cAAc,GAAGtC,IAAI,CAACC,MAAL,CAAY,0BAAZ,CAArB;AACA,MAAIsC,SAAS,GAAGvB,oBAAoB,CAAChB,IAAD,CAApC;;AACA,MAAIwC,YAAY,GAAGxC,IAAI,CAACE,WAAL,CAAiBsC,YAAjB,EAAnB;;AACA,MAAID,SAAJ,EAAe;AACX,QAAIF,QAAJ,EAAc;AACVE,MAAAA,SAAS,GAAGD,cAAc,GAAG,CAAH,GAAO,CAAjC;AACH,KAFD,MAEO;AACH,UAAIA,cAAJ,EAAoB;AAChBC,QAAAA,SAAS;AACZ;;AACD,UAAIC,YAAY,IAAI,CAACzC,mBAAmB,CAACC,IAAD,CAAxC,EAAgD;AAC5CuC,QAAAA,SAAS;AACZ;AACJ;AACJ;;AACD,SAAOA,SAAP;AACH,CAjBD;;AAkBA,IAAIE,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAzC,IAAI,EAAI;AAC9B,MAAI0C,MAAM,GAAG,CAAC,CAAd;AACA,MAAIC,cAAc,GAAGtC,iBAAiB,CAACL,IAAD,CAAtC;AACA,MAAI4C,WAAW,GAAG5C,IAAI,CAACkB,YAAvB;;AACA,MAAIyB,cAAc,GAAG,CAArB,EAAwB;AACpBD,IAAAA,MAAM,GAAG1C,IAAI,CAAC6C,UAAd;AACH,GAFD,MAEO,IAAI,CAAC7C,IAAI,CAACM,MAAL,CAAYN,IAAI,CAAC6C,UAAL,GAAkBF,cAA9B,CAAL,EAAoD;AACvDD,IAAAA,MAAM,GAAG1C,IAAI,CAAC6C,UAAd;AACH,GAFM,MAEA,IAAIF,cAAc,IAAI,CAAlB,IAAuB3C,IAAI,CAACE,WAAL,CAAiBmB,YAAjB,MAAmC,CAA9D,EAAiE;AACpE,QAAIsB,cAAc,GAAG,CAArB,EAAwB;AACpB,UAAIG,wBAAwB,GAAGrC,eAAe,CAACT,IAAD,CAAf,GAAwB,CAAxB,KAA8B4C,WAAW,CAACL,SAAZ,EAA9B,IAAyDvC,IAAI,CAACM,MAAL,CAAYC,MAAZ,GAAqB6B,mBAAmB,CAACpC,IAAD,CAAnB,GAA4B,CAAzI;AACA,UAAI+C,kBAAkB,GAAGD,wBAAwB,IAAI9C,IAAI,CAAC6C,UAAL,KAAoBF,cAApB,IAAsCP,mBAAmB,CAACpC,IAAD,EAAO,IAAP,CAA9G;;AACA,UAAI+C,kBAAJ,EAAwB;AACpBL,QAAAA,MAAM,GAAGC,cAAc,GAAG,CAA1B;AACH;AACJ;;AACD,QAAID,MAAM,GAAG,CAAb,EAAgB;AACZ,UAAIM,kBAAkB,GAAGL,cAAc,GAAG3C,IAAI,CAACM,MAAL,CAAYC,MAA7B,IAAuCP,IAAI,CAAC6C,UAAL,GAAkBT,mBAAmB,CAACpC,IAAD,CAArG;;AACA,UAAIgD,kBAAJ,EAAwB;AACpBN,QAAAA,MAAM,GAAGC,cAAc,GAAG3C,IAAI,CAACM,MAAL,CAAYC,MAAtC;AACH;AACJ;AACJ;;AACD,MAAIP,IAAI,CAACiD,mBAAL,CAAyBP,MAAzB,CAAJ,EAAsC;AAClCA,IAAAA,MAAM,GAAG,CAAC,CAAV;AACH;;AACD,SAAOA,MAAP;AACH,CA3BD;;AA4BA,IAAIQ,QAAQ,GAAG,SAAXA,QAAW,CAAClD,IAAD,EAAOQ,SAAP,EAAqB;AAChC,MAAIoC,WAAW,GAAG5C,IAAI,CAACkB,YAAvB;;AACA,MAAIV,SAAS,KAAKR,IAAI,CAACQ,SAAL,EAAd,IAAkC,CAACoC,WAAW,CAACO,SAAZ,EAAD,IAA4B3C,SAAS,GAAGoC,WAAW,CAACL,SAAZ,EAA1E,IAAqG,CAACK,WAAW,CAACQ,gBAAZ,EAAD,IAAmC5C,SAAS,KAAKoC,WAAW,CAACL,SAAZ,EAA1J,EAAmL;AAC/KK,IAAAA,WAAW,CAACpC,SAAZ,CAAsBA,SAAtB;AACAR,IAAAA,IAAI,CAACiD,mBAAL,CAAyBzC,SAAzB,IAAsC,IAAtC;AACA,WAAOb,IAAI,CAACiD,WAAW,CAACS,IAAZ,EAAD,CAAJ,CAAyBC,MAAzB,CAAgC,YAAM;AACzCtD,MAAAA,IAAI,CAACiD,mBAAL,CAAyBzC,SAAzB,IAAsC,KAAtC;AACH,KAFM,CAAP;AAGH;AACJ,CATD;;AAUA,IAAI+C,cAAc,GAAG,SAAjBA,cAAiB,CAACvD,IAAD,EAAOW,OAAP,EAAgB6C,UAAhB,EAA4BC,cAA5B,EAA4CC,eAA5C,EAAgE;AACjF,MAAId,WAAW,GAAG5C,IAAI,CAACkB,YAAvB;AACA,MAAIyC,KAAK,GAAGf,WAAW,CAACe,KAAZ,GAAoBC,KAApB,EAAZ;AACA,MAAIC,MAAM,GAAGjE,QAAQ,CAAC4D,UAAD,CAAR,GAAuBA,UAAvB,GAAoC,KAAK,CAAtD;AACA,MAAIM,SAAS,GAAG,cAAcN,UAA9B;AACA,MAAIO,aAAa,GAAGnB,WAAW,CAACmB,aAAZ,EAApB;;AACA,MAAIP,UAAU,IAAI3D,QAAQ,CAAC2D,UAAD,CAAtB,IAAsC,CAACxD,IAAI,CAACe,eAAhD,EAAiE;AAC7D8C,IAAAA,MAAM,GAAG;AACLL,MAAAA,UAAU,EAAEA,UADP;AAELG,MAAAA,KAAK,EAAEA;AAFF,KAAT;;AAIA,QAAID,eAAJ,EAAqB;AACjBG,MAAAA,MAAM,CAACG,WAAP,GAAqBN,eAAe,CAACO,UAArC;;AACA,UAAIJ,MAAM,CAACG,WAAP,IAAsBpB,WAAW,CAACsB,YAAtC,EAAoD;AAChDL,QAAAA,MAAM,CAACG,WAAP,GAAqBpB,WAAW,CAACsB,YAAZ,CAAyBH,aAAzB,EAAwCF,MAAM,CAACG,WAA/C,EAA4DF,SAA5D,CAArB;AACH;AACJ;AACJ;;AACD,MAAIK,eAAe,GAAGT,eAAe,GAAGA,eAAe,CAACU,WAAnB,GAAiC,CAAtE;;AACA,MAAID,eAAe,IAAIvB,WAAW,CAACsB,YAAnC,EAAiD;AAC7CC,IAAAA,eAAe,GAAGvB,WAAW,CAACsB,YAAZ,CAAyBH,aAAzB,EAAwCI,eAAxC,EAAyDL,SAAzD,CAAlB;AACH;;AACD,MAAI,aAAaN,UAAjB,EAA6B;AACzBO,IAAAA,aAAa,CAACM,IAAd,CAAmBC,KAAnB,CAAyBP,aAAzB,EAAwCJ,KAAxC;;AACA,QAAID,eAAJ,EAAqB;AACjBK,MAAAA,aAAa,CAACQ,MAAd,CAAqB,CAArB,EAAwBJ,eAAxB;AACH;AACJ,GALD,MAKO,IAAIL,SAAJ,EAAe;AAClBC,IAAAA,aAAa,CAACS,OAAd,CAAsBF,KAAtB,CAA4BP,aAA5B,EAA2CJ,KAA3C;;AACA,QAAID,eAAJ,EAAqB;AACjBK,MAAAA,aAAa,CAACQ,MAAd,CAAqB,CAACJ,eAAtB;AACH;AACJ,GALM,MAKA;AACHnE,IAAAA,IAAI,CAACkB,YAAL,CAAkB6C,aAAlB,CAAgCJ,KAAhC;AACH;;AACDf,EAAAA,WAAW,CAAC6B,aAAZ;AACAzE,EAAAA,IAAI,CAAC0E,cAAL,GAAsB1E,IAAI,CAACQ,SAAL,EAAtB;AACAR,EAAAA,IAAI,CAACe,eAAL,GAAuB0C,cAAvB;;AACA,MAAI,CAACA,cAAL,EAAqB;AACjB/C,IAAAA,WAAW,CAACV,IAAD,EAAOW,OAAP,EAAgBkD,MAAhB,CAAX;AACH;AACJ,CAzCD;;AA0CA,WAAac,iBAAb;AACI,6BAAYC,UAAZ,EAAwBhC,WAAxB,EAAqC;AAAA;;AACjC,SAAK1C,WAAL,GAAmB0E,UAAnB;AACA,SAAK1D,YAAL,GAAoB0B,WAApB;AACA,SAAKC,UAAL,GAAkB,KAAK6B,cAAL,GAAsB9B,WAAW,CAACpC,SAAZ,EAAxC;AACA,SAAKF,MAAL,GAAc,EAAd;AACA,SAAK2C,mBAAL,GAA2B,EAA3B;AACH;;AAPL;AAAA;AAAA,WAQI,kBAAS;AACL,aAAO,KAAK/C,WAAL,CAAiBD,MAAjB,CAAwBqE,KAAxB,CAA8B,KAAKpE,WAAnC,EAAgD2E,SAAhD,CAAP;AACH;AAVL;AAAA;AAAA,WAWI,kCAAyB/C,SAAzB,EAAoC;AAChC,UAAIb,QAAQ,GAAG,KAAKC,YAAL,CAAkBD,QAAlB,EAAf;;AACA,UAAIsB,SAAS,GAAG,KAAKrB,YAAL,CAAkBqB,SAAlB,EAAhB;;AACA,UAAIuC,WAAW,GAAG,KAAK5E,WAAL,CAAiBoB,aAAjB,EAAlB;;AACA,UAAIyD,UAAU,GAAG,KAAK7E,WAAL,CAAiBsC,YAAjB,EAAjB;;AACA,UAAIX,eAAe,GAAG,KAAKX,YAAL,CAAkBW,eAAlB,EAAtB;;AACA,UAAImD,YAAJ;;AACA,UAAI/D,QAAQ,KAAK6D,WAAW,IAAIC,UAApB,CAAR,IAA2ClD,eAAe,IAAI,CAAlE,EAAqE;AACjE,YAAIR,YAAY,GAAG,KAAKnB,WAAL,CAAiBmB,YAAjB,EAAnB;;AACA,YAAIA,YAAY,IAAIS,SAAS,GAAGT,YAAZ,IAA4BQ,eAA5C,IAA+D,CAAC,KAAK3B,WAAL,CAAiBC,SAAjB,EAApE,EAAkG;AAC9F,cAAI,KAAKe,YAAL,CAAkBkC,gBAAlB,EAAJ,EAA0C;AACtC4B,YAAAA,YAAY,GAAGzC,SAAS,GAAG,CAA3B;AACA,gBAAI0C,YAAY,GAAGpD,eAAe,GAAGZ,QAArC;;AACA,gBAAI+D,YAAY,GAAG,CAAf,IAAoBC,YAAY,GAAG,CAAnC,IAAwCA,YAAY,GAAG5D,YAA3D,EAAyE;AACrE2D,cAAAA,YAAY;AACf;AACJ,WAND,MAMO;AACHA,YAAAA,YAAY,GAAGzC,SAAf;AACH;AACJ,SAVD,MAUO;AACHyC,UAAAA,YAAY,GAAG9C,IAAI,CAACgD,KAAL,CAAWpD,SAAS,GAAGb,QAAvB,CAAf;AACA,cAAIkE,YAAY,GAAG5C,SAAS,GAAG,CAA/B;AACAyC,UAAAA,YAAY,GAAG9C,IAAI,CAACkD,GAAL,CAASJ,YAAT,EAAuB,CAAvB,CAAf;AACAA,UAAAA,YAAY,GAAG9C,IAAI,CAACmD,GAAL,CAASL,YAAT,EAAuBG,YAAvB,CAAf;AACH;;AACD,aAAK3E,SAAL,CAAewE,YAAf;AACA,eAAO,KAAK3B,IAAL,EAAP;AACH;AACJ;AAvCL;AAAA;AAAA,WAwCI,mBAAU7C,UAAV,EAAqB;AACjB,UAAIc,aAAa,GAAG,KAAKpB,WAAL,CAAiBoB,aAAjB,EAApB;;AACA,UAAIkB,YAAY,GAAG,KAAKtC,WAAL,CAAiBsC,YAAjB,EAAnB;;AACA,UAAI,CAAC,KAAKvC,MAAL,CAAYH,kBAAZ,CAAD,KAAqCwB,aAAa,IAAIkB,YAAtD,CAAJ,EAAyE;AACrE,YAAI,KAAK,CAAL,KAAWhC,UAAf,EAA0B;AACtB,eAAKqC,UAAL,GAAkBrC,UAAlB;AACH;;AACD,eAAO,KAAKqC,UAAZ;AACH,OALD,MAKO;AACH,eAAO,KAAK3B,YAAL,CAAkBV,SAAlB,CAA4BA,UAA5B,CAAP;AACH;AACJ;AAnDL;AAAA;AAAA,WAoDI,wBAAe8E,gBAAf,EAAiC;AAC7B,UAAI3C,cAAc,GAAGtC,iBAAiB,CAAC,IAAD,CAAtC;;AACA,UAAIsC,cAAc,GAAG,CAArB,EAAwB;AACpBA,QAAAA,cAAc,GAAG,KAAK,CAAL,KAAW2C,gBAAX,GAA8BA,gBAA9B,GAAiD,KAAK9E,SAAL,EAAlE;AACH;;AACD,aAAOmC,cAAP;AACH;AA1DL;AAAA;AAAA,WA2DI,wBAAe;AACX,UAAI4C,YAAY,GAAG9E,eAAe,CAAC,IAAD,CAAlC;AACA,aAAO8E,YAAY,GAAG,CAAf,GAAmBA,YAAnB,GAAkC,KAAKb,cAA9C;AACH;AA9DL;AAAA;AAAA,WA+DI,oBAAW;AACP,aAAO,KAAKxD,YAAL,CAAkBD,QAAlB,EAAP;AACH;AAjEL;AAAA;AAAA,WAkEI,gBAAO;AAAA;;AACH,UAAI2B,WAAW,GAAG,KAAK1B,YAAvB;AACA,UAAIwB,MAAJ;;AACA,UAAIpB,aAAa,GAAG,KAAKpB,WAAL,CAAiBoB,aAAjB,EAApB;;AACA,UAAIkB,YAAY,GAAG,KAAKtC,WAAL,CAAiBsC,YAAjB,EAAnB;;AACA,UAAI,CAAC,KAAKvC,MAAL,CAAYH,kBAAZ,CAAD,KAAqCwB,aAAa,IAAIkB,YAAtD,CAAJ,EAAyE;AACrE,YAAIgD,gBAAgB,GAAG/C,mBAAmB,CAAC,IAAD,CAA1C;;AACA,YAAI+C,gBAAgB,IAAI,CAAxB,EAA2B;AACvB,cAAIC,UAAU,GAAGvC,QAAQ,CAAC,IAAD,EAAOsC,gBAAP,CAAzB;;AACA,cAAIC,UAAJ,EAAgB;AACZ/C,YAAAA,MAAM,GAAG,IAAIhD,QAAJ,EAAT;AACA+F,YAAAA,UAAU,CAACC,IAAX,CAAgB,YAAM;AAClB,kBAAIC,aAAa,GAAG,KAAI,CAACC,cAAzB;;AACA,kBAAID,aAAJ,EAAmB;AACfA,gBAAAA,aAAa,CAACD,IAAd,CAAmBhD,MAAM,CAACmD,OAA1B,EAAmCC,IAAnC,CAAwCpD,MAAM,CAACqD,MAA/C;AACH,eAFD,MAEO;AACHrD,gBAAAA,MAAM,CAACmD,OAAP;AACH;AACJ,aAPD,EAOGC,IAPH,CAOQpD,MAAM,CAACqD,MAPf;AAQAnD,YAAAA,WAAW,CAAC6B,aAAZ;AACH;AACJ;AACJ,OAjBD,MAiBO;AACH/B,QAAAA,MAAM,GAAGE,WAAW,CAACS,IAAZ,EAAT;AACH;;AACD,UAAI,CAACX,MAAD,IAAW,KAAKgC,cAAL,KAAwB,KAAKlE,SAAL,EAAvC,EAAyD;AACrD,aAAKU,YAAL,CAAkB8E,SAAlB,CAA4B;AACxBxC,UAAAA,UAAU,EAAE;AADY,SAA5B;AAGH;;AACD,aAAOd,MAAM,IAAK,IAAIhD,QAAJ,EAAD,CAAemG,OAAf,EAAjB;AACH;AAjGL;AAAA;AAAA,WAkGI,sBAAa;AACT,UAAIvE,aAAa,GAAG,KAAKpB,WAAL,CAAiBoB,aAAjB,EAApB;;AACA,UAAIkB,YAAY,GAAG,KAAKtC,WAAL,CAAiBsC,YAAjB,EAAnB;;AACA,UAAI,CAAClB,aAAa,IAAIkB,YAAlB,KAAmC,CAAC,KAAKtB,YAAL,CAAkBiC,SAAlB,EAApC,KAAsE,CAAC,KAAKtC,gBAAN,IAA0B,KAAKX,WAAL,CAAiBC,SAAjB,EAAhG,CAAJ,EAAmI;AAC/H,YAAIuB,QAAQ,GAAG,KAAKxB,WAAL,CAAiByB,mBAAjB,EAAf;;AACA,YAAID,QAAQ,GAAG,CAAf,EAAkB;AACd,eAAKxB,WAAL,CAAiB+F,wBAAjB,CAA0CvE,QAA1C;AACH,SAFD,MAEO;AACH,eAAK2B,IAAL;AACH;AACJ;AACJ;AA7GL;AAAA;AAAA,WA8GI,2BAAkB6C,QAAlB,EAA4BC,CAA5B,EAA+B;AAAA;;AAC3B,UAAIvD,WAAW,GAAG,KAAK1B,YAAvB;AACA,UAAIkF,eAAe,GAAG,KAAK9F,MAAL,CAAYC,MAAlC;AACA,UAAIiD,UAAJ;AACA,UAAI6C,oBAAJ;;AACA,UAAI/E,aAAa,GAAG,KAAKpB,WAAL,CAAiBoB,aAAjB,EAApB;;AACA,UAAIkB,YAAY,GAAG,KAAKtC,WAAL,CAAiBsC,YAAjB,EAAnB;;AACA,UAAI2D,CAAC,IAAIA,CAAC,CAACG,OAAX,EAAoB;AAChB5F,QAAAA,WAAW,CAAC,IAAD,EAAOwF,QAAP,EAAiBC,CAAjB,CAAX;AACH,OAFD,MAEO,IAAI,CAAC,KAAKlG,MAAL,CAAYH,kBAAZ,CAAD,KAAqCwB,aAAa,IAAIkB,YAAtD,CAAJ,EAAyE;AAC5E,YAAIG,cAAc,GAAGtC,iBAAiB,CAAC,IAAD,CAAtC;;AACA,YAAIsC,cAAc,IAAI,CAAtB,EAAyB;AACrB,cAAIrB,aAAa,IAAIqB,cAAc,GAAG,KAAKrC,MAAL,CAAYC,MAA7B,KAAwCqC,WAAW,CAACpC,SAAZ,EAAzD,IAAoFmC,cAAc,GAAG,CAAjB,KAAuBC,WAAW,CAACpC,SAAZ,EAA/G,EAAwI;AACpI4F,YAAAA,eAAe,GAAG,CAAlB;AACA,iBAAK9F,MAAL,GAAc,EAAd;AACH;;AACD,cAAIkC,YAAJ,EAAkB;AACd,gBAAI,MAAMI,WAAW,CAACpC,SAAZ,EAAV,EAAmC;AAC/B,mBAAKF,MAAL,GAAc,EAAd;AACH,aAFD,MAEO,IAAIsC,WAAW,CAACpC,SAAZ,KAA0BC,eAAe,CAAC,IAAD,CAA7C,EAAqD;AACxDC,cAAAA,WAAW,CAAC,IAAD,EAAOwF,QAAP,EAAiB;AACxB1C,gBAAAA,UAAU,EAAE,QADY;AAExBG,gBAAAA,KAAK,EAAE;AAFiB,eAAjB,CAAX;AAIA;AACH;AACJ;AACJ;;AACD,YAAI4C,SAAS,GAAG;AACZ/F,UAAAA,SAAS,EAAEoC,WAAW,CAACpC,SAAZ,EADC;AAEZ4D,UAAAA,WAAW,EAAExB,WAAW,CAACe,KAAZ,CAAkB,IAAlB,EAAwBpD,MAFzB;AAGZ0D,UAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgB,IAAhB;AAHA,SAAhB;;AAKA,YAAI,KAAKhE,MAAL,CAAY,gCAAZ,KAAiDqB,aAArD,EAAoE;AAChE+E,UAAAA,oBAAoB,GAAG,KAAK/F,MAAL,CAAYC,MAAZ,GAAqB2B,IAAI,CAACkD,GAAL,CAAShD,mBAAmB,CAAC,IAAD,CAAnB,IAA6B,KAAKnC,MAAL,CAAY,0BAAZ,IAA0C,CAA1C,GAA8C,CAA3E,CAAT,EAAwF,CAAxF,CAA5C;AACH,SAFD,MAEO;AACHa,UAAAA,mBAAmB,CAAC,IAAD,EAAOoF,QAAP,EAAiB;AAChCM,YAAAA,SAAS,EAAE;AADqB,WAAjB,CAAnB;AAGH;;AACD,YAAI9C,eAAJ;;AACA,YAAIf,cAAc,KAAKC,WAAW,CAACpC,SAAZ,KAA0B,CAAjD,EAAoD;AAChD,cAAI6F,oBAAJ,EAA0B;AACtB3C,YAAAA,eAAe,GAAG,KAAKpD,MAAL,CAAYmG,GAAZ,EAAlB;AACH;;AACDjD,UAAAA,UAAU,GAAG,SAAb;;AACA,eAAKlD,MAAL,CAAYkE,OAAZ,CAAoB+B,SAApB;AACH,SAND,MAMO;AACH,cAAIF,oBAAJ,EAA0B;AACtB3C,YAAAA,eAAe,GAAG,KAAKpD,MAAL,CAAYoG,KAAZ,EAAlB;AACH;;AACDlD,UAAAA,UAAU,GAAG,QAAb;;AACA,eAAKlD,MAAL,CAAY+D,IAAZ,CAAiBkC,SAAjB;AACH;;AACD,YAAI9C,cAAc,GAAGnC,aAAa,IAAI,MAAM8E,eAAvB,IAA0CrG,mBAAmB,CAAC,IAAD,CAAlF;AACAwD,QAAAA,cAAc,CAAC,IAAD,EAAO2C,QAAP,EAAiB,KAAK5F,MAAL,CAAYC,MAAZ,GAAqB,CAArB,GAAyBiD,UAAzB,GAAsC,KAAK,CAA5D,EAA+DC,cAA/D,EAA+EC,eAA/E,CAAd;AACA,aAAKkC,cAAL,GAAsB,KAAKvC,IAAL,GAAYqC,IAAZ,CAAiB,YAAM;AACzC,cAAI5E,mBAAmB,CAAC,MAAD,EAAOoF,QAAP,CAAvB,EAAyC;AACrC,YAAA,MAAI,CAAC7C,IAAL;AACH;AACJ,SAJqB,CAAtB;AAKH,OApDM,MAoDA;AACHE,QAAAA,cAAc,CAAC,IAAD,EAAO2C,QAAP,EAAiBC,CAAjB,CAAd;AACH;AACJ;AA9KL;AAAA;AAAA,WA+KI,4BAAmB;AACf,aAAO,KAAKP,cAAZ;AACH;AAjLL;AAAA;AAAA,WAkLI,oBAAWe,MAAX,EAAmB;AACf,UAAI1C,UAAU,GAAG,CAAjB;;AACA,UAAI3C,aAAa,GAAG,KAAKpB,WAAL,CAAiBoB,aAAjB,EAApB;;AACA,UAAI,CAACqF,MAAD,IAAWrF,aAAf,EAA8B;AAC1B,aAAKhB,MAAL,CAAYsG,OAAZ,CAAoB,UAAAL,SAAS,EAAI;AAC7BtC,UAAAA,UAAU,IAAIsC,SAAS,CAACtC,UAAxB;AACH,SAFD;AAGH,OAJD,MAIO;AACHA,QAAAA,UAAU,GAAG,KAAK/C,YAAL,CAAkB+C,UAAlB,EAAb;AACH;;AACD,aAAOA,UAAP;AACH;AA7LL;AAAA;AAAA,WA8LI,6BAAoB;AAChB,UAAIzD,SAAS,GAAGH,iBAAiB,CAAC,IAAD,CAAjC;;AACA,UAAIG,SAAS,GAAG,CAAhB,EAAmB;AACfA,QAAAA,SAAS,GAAG,KAAKU,YAAL,CAAkBV,SAAlB,EAAZ;AACH;;AACD,UAAIqG,eAAe,GAAGrG,SAAS,GAAG,KAAKU,YAAL,CAAkBD,QAAlB,EAAlC;;AACA,UAAIgD,UAAU,GAAG,KAAK3D,MAAL,CAAYC,MAAZ,GAAqB,KAAKW,YAAL,CAAkBD,QAAlB,EAAtC;;AACA,UAAI6F,aAAa,GAAG5E,IAAI,CAACkD,GAAL,CAAS,CAAT,EAAY,KAAKlE,YAAL,CAAkBW,eAAlB,KAAsCoC,UAAtC,GAAmD4C,eAA/D,CAApB;AACA,aAAO;AACH9E,QAAAA,KAAK,EAAE8E,eADJ;AAEHE,QAAAA,GAAG,EAAED;AAFF,OAAP;AAIH;AA1ML;AAAA;AAAA,WA2MI,iBAAQ;AACJ,WAAK7D,mBAAL,GAA2B,EAA3B;AACA,WAAK3C,MAAL,GAAc,EAAd;AACH;AA9ML;;AAAA;AAAA","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid.core.virtual_data_loader.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    isObject,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\r\nvar needTwoPagesLoading = that => that.option(\"scrolling.loadTwoPagesOnStart\") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;\r\nvar getBeginPageIndex = that => that._cache.length ? that._cache[0].pageIndex : -1;\r\nvar getEndPageIndex = that => that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\r\nvar fireChanged = (that, changed, args) => {\r\n    that._isChangedFiring = true;\r\n    changed(args);\r\n    that._isChangedFiring = false\r\n};\r\nvar processDelayChanged = (that, changed, args) => {\r\n    if (that._isDelayChanged) {\r\n        that._isDelayChanged = false;\r\n        fireChanged(that, changed, args);\r\n        return true\r\n    }\r\n};\r\nvar getViewportPageCount = that => {\r\n    var pageSize = that._dataOptions.pageSize();\r\n    var preventPreload = that.option(\"scrolling.preventPreload\");\r\n    if (preventPreload) {\r\n        return 0\r\n    }\r\n    var realViewportSize = that._controller.viewportSize();\r\n    if (that._controller.isVirtualMode() && that.option(\"scrolling.removeInvisiblePages\")) {\r\n        realViewportSize = 0;\r\n        var viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();\r\n        var offset = that._controller.getContentOffset();\r\n        var position = that._controller.getViewportPosition();\r\n        var virtualItemsCount = that._controller.virtualItemsCount();\r\n        var totalItemsCount = that._dataOptions.totalItemsCount();\r\n        for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\r\n            if (offset >= position + viewportSize) {\r\n                break\r\n            }\r\n            var itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();\r\n            offset += itemSize;\r\n            if (offset >= position) {\r\n                realViewportSize++\r\n            }\r\n        }\r\n    }\r\n    return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1\r\n};\r\nvar getPreloadPageCount = (that, previous) => {\r\n    var preloadEnabled = that.option(\"scrolling.preloadEnabled\");\r\n    var pageCount = getViewportPageCount(that);\r\n    var isAppendMode = that._controller.isAppendMode();\r\n    if (pageCount) {\r\n        if (previous) {\r\n            pageCount = preloadEnabled ? 1 : 0\r\n        } else {\r\n            if (preloadEnabled) {\r\n                pageCount++\r\n            }\r\n            if (isAppendMode || !needTwoPagesLoading(that)) {\r\n                pageCount--\r\n            }\r\n        }\r\n    }\r\n    return pageCount\r\n};\r\nvar getPageIndexForLoad = that => {\r\n    var result = -1;\r\n    var beginPageIndex = getBeginPageIndex(that);\r\n    var dataOptions = that._dataOptions;\r\n    if (beginPageIndex < 0) {\r\n        result = that._pageIndex\r\n    } else if (!that._cache[that._pageIndex - beginPageIndex]) {\r\n        result = that._pageIndex\r\n    } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {\r\n        if (beginPageIndex > 0) {\r\n            var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\r\n            var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\r\n            if (needToLoadPrevPage) {\r\n                result = beginPageIndex - 1\r\n            }\r\n        }\r\n        if (result < 0) {\r\n            var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\r\n            if (needToLoadNextPage) {\r\n                result = beginPageIndex + that._cache.length\r\n            }\r\n        }\r\n    }\r\n    if (that._loadingPageIndexes[result]) {\r\n        result = -1\r\n    }\r\n    return result\r\n};\r\nvar loadCore = (that, pageIndex) => {\r\n    var dataOptions = that._dataOptions;\r\n    if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {\r\n        dataOptions.pageIndex(pageIndex);\r\n        that._loadingPageIndexes[pageIndex] = true;\r\n        return when(dataOptions.load()).always(() => {\r\n            that._loadingPageIndexes[pageIndex] = false\r\n        })\r\n    }\r\n};\r\nvar processChanged = (that, changed, changeType, isDelayChanged, removeCacheItem) => {\r\n    var dataOptions = that._dataOptions;\r\n    var items = dataOptions.items().slice();\r\n    var change = isObject(changeType) ? changeType : void 0;\r\n    var isPrepend = \"prepend\" === changeType;\r\n    var viewportItems = dataOptions.viewportItems();\r\n    if (changeType && isString(changeType) && !that._isDelayChanged) {\r\n        change = {\r\n            changeType: changeType,\r\n            items: items\r\n        };\r\n        if (removeCacheItem) {\r\n            change.removeCount = removeCacheItem.itemsCount;\r\n            if (change.removeCount && dataOptions.correctCount) {\r\n                change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend)\r\n            }\r\n        }\r\n    }\r\n    var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\r\n    if (removeItemCount && dataOptions.correctCount) {\r\n        removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend)\r\n    }\r\n    if (\"append\" === changeType) {\r\n        viewportItems.push.apply(viewportItems, items);\r\n        if (removeCacheItem) {\r\n            viewportItems.splice(0, removeItemCount)\r\n        }\r\n    } else if (isPrepend) {\r\n        viewportItems.unshift.apply(viewportItems, items);\r\n        if (removeCacheItem) {\r\n            viewportItems.splice(-removeItemCount)\r\n        }\r\n    } else {\r\n        that._dataOptions.viewportItems(items)\r\n    }\r\n    dataOptions.updateLoading();\r\n    that._lastPageIndex = that.pageIndex();\r\n    that._isDelayChanged = isDelayChanged;\r\n    if (!isDelayChanged) {\r\n        fireChanged(that, changed, change)\r\n    }\r\n};\r\nexport class VirtualDataLoader {\r\n    constructor(controller, dataOptions) {\r\n        this._controller = controller;\r\n        this._dataOptions = dataOptions;\r\n        this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();\r\n        this._cache = [];\r\n        this._loadingPageIndexes = {}\r\n    }\r\n    option() {\r\n        return this._controller.option.apply(this._controller, arguments)\r\n    }\r\n    viewportItemIndexChanged(itemIndex) {\r\n        var pageSize = this._dataOptions.pageSize();\r\n        var pageCount = this._dataOptions.pageCount();\r\n        var virtualMode = this._controller.isVirtualMode();\r\n        var appendMode = this._controller.isAppendMode();\r\n        var totalItemsCount = this._dataOptions.totalItemsCount();\r\n        var newPageIndex;\r\n        if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\r\n            var viewportSize = this._controller.viewportSize();\r\n            if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {\r\n                if (this._dataOptions.hasKnownLastPage()) {\r\n                    newPageIndex = pageCount - 1;\r\n                    var lastPageSize = totalItemsCount % pageSize;\r\n                    if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {\r\n                        newPageIndex--\r\n                    }\r\n                } else {\r\n                    newPageIndex = pageCount\r\n                }\r\n            } else {\r\n                newPageIndex = Math.floor(itemIndex / pageSize);\r\n                var maxPageIndex = pageCount - 1;\r\n                newPageIndex = Math.max(newPageIndex, 0);\r\n                newPageIndex = Math.min(newPageIndex, maxPageIndex)\r\n            }\r\n            this.pageIndex(newPageIndex);\r\n            return this.load()\r\n        }\r\n    }\r\n    pageIndex(pageIndex) {\r\n        var isVirtualMode = this._controller.isVirtualMode();\r\n        var isAppendMode = this._controller.isAppendMode();\r\n        if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            if (void 0 !== pageIndex) {\r\n                this._pageIndex = pageIndex\r\n            }\r\n            return this._pageIndex\r\n        } else {\r\n            return this._dataOptions.pageIndex(pageIndex)\r\n        }\r\n    }\r\n    beginPageIndex(defaultPageIndex) {\r\n        var beginPageIndex = getBeginPageIndex(this);\r\n        if (beginPageIndex < 0) {\r\n            beginPageIndex = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex()\r\n        }\r\n        return beginPageIndex\r\n    }\r\n    endPageIndex() {\r\n        var endPageIndex = getEndPageIndex(this);\r\n        return endPageIndex > 0 ? endPageIndex : this._lastPageIndex\r\n    }\r\n    pageSize() {\r\n        return this._dataOptions.pageSize()\r\n    }\r\n    load() {\r\n        var dataOptions = this._dataOptions;\r\n        var result;\r\n        var isVirtualMode = this._controller.isVirtualMode();\r\n        var isAppendMode = this._controller.isAppendMode();\r\n        if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            var pageIndexForLoad = getPageIndexForLoad(this);\r\n            if (pageIndexForLoad >= 0) {\r\n                var loadResult = loadCore(this, pageIndexForLoad);\r\n                if (loadResult) {\r\n                    result = new Deferred;\r\n                    loadResult.done(() => {\r\n                        var delayDeferred = this._delayDeferred;\r\n                        if (delayDeferred) {\r\n                            delayDeferred.done(result.resolve).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(result.reject);\r\n                    dataOptions.updateLoading()\r\n                }\r\n            }\r\n        } else {\r\n            result = dataOptions.load()\r\n        }\r\n        if (!result && this._lastPageIndex !== this.pageIndex()) {\r\n            this._dataOptions.onChanged({\r\n                changeType: \"pageIndex\"\r\n            })\r\n        }\r\n        return result || (new Deferred).resolve()\r\n    }\r\n    loadIfNeed() {\r\n        var isVirtualMode = this._controller.isVirtualMode();\r\n        var isAppendMode = this._controller.isAppendMode();\r\n        if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {\r\n            var position = this._controller.getViewportPosition();\r\n            if (position > 0) {\r\n                this._controller._setViewportPositionCore(position)\r\n            } else {\r\n                this.load()\r\n            }\r\n        }\r\n    }\r\n    handleDataChanged(callBase, e) {\r\n        var dataOptions = this._dataOptions;\r\n        var lastCacheLength = this._cache.length;\r\n        var changeType;\r\n        var removeInvisiblePages;\r\n        var isVirtualMode = this._controller.isVirtualMode();\r\n        var isAppendMode = this._controller.isAppendMode();\r\n        if (e && e.changes) {\r\n            fireChanged(this, callBase, e)\r\n        } else if (!this.option(NEW_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\r\n            var beginPageIndex = getBeginPageIndex(this);\r\n            if (beginPageIndex >= 0) {\r\n                if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {\r\n                    lastCacheLength = 0;\r\n                    this._cache = []\r\n                }\r\n                if (isAppendMode) {\r\n                    if (0 === dataOptions.pageIndex()) {\r\n                        this._cache = []\r\n                    } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {\r\n                        fireChanged(this, callBase, {\r\n                            changeType: \"append\",\r\n                            items: []\r\n                        });\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            var cacheItem = {\r\n                pageIndex: dataOptions.pageIndex(),\r\n                itemsLength: dataOptions.items(true).length,\r\n                itemsCount: this.itemsCount(true)\r\n            };\r\n            if (this.option(\"scrolling.removeInvisiblePages\") && isVirtualMode) {\r\n                removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2)\r\n            } else {\r\n                processDelayChanged(this, callBase, {\r\n                    isDelayed: true\r\n                })\r\n            }\r\n            var removeCacheItem;\r\n            if (beginPageIndex === dataOptions.pageIndex() + 1) {\r\n                if (removeInvisiblePages) {\r\n                    removeCacheItem = this._cache.pop()\r\n                }\r\n                changeType = \"prepend\";\r\n                this._cache.unshift(cacheItem)\r\n            } else {\r\n                if (removeInvisiblePages) {\r\n                    removeCacheItem = this._cache.shift()\r\n                }\r\n                changeType = \"append\";\r\n                this._cache.push(cacheItem)\r\n            }\r\n            var isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);\r\n            processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\r\n            this._delayDeferred = this.load().done(() => {\r\n                if (processDelayChanged(this, callBase)) {\r\n                    this.load()\r\n                }\r\n            })\r\n        } else {\r\n            processChanged(this, callBase, e)\r\n        }\r\n    }\r\n    getDelayDeferred() {\r\n        return this._delayDeferred\r\n    }\r\n    itemsCount(isBase) {\r\n        var itemsCount = 0;\r\n        var isVirtualMode = this._controller.isVirtualMode();\r\n        if (!isBase && isVirtualMode) {\r\n            this._cache.forEach(cacheItem => {\r\n                itemsCount += cacheItem.itemsCount\r\n            })\r\n        } else {\r\n            itemsCount = this._dataOptions.itemsCount()\r\n        }\r\n        return itemsCount\r\n    }\r\n    virtualItemsCount() {\r\n        var pageIndex = getBeginPageIndex(this);\r\n        if (pageIndex < 0) {\r\n            pageIndex = this._dataOptions.pageIndex()\r\n        }\r\n        var beginItemsCount = pageIndex * this._dataOptions.pageSize();\r\n        var itemsCount = this._cache.length * this._dataOptions.pageSize();\r\n        var endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);\r\n        return {\r\n            begin: beginItemsCount,\r\n            end: endItemsCount\r\n        }\r\n    }\r\n    reset() {\r\n        this._loadingPageIndexes = {};\r\n        this._cache = []\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}