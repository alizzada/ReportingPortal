{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.folder_chooser.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport messageLocalization from \"../../localization/message\";\nimport { getMapFromObject } from \"./ui.file_manager.common\";\nimport FileManagerDialogBase from \"./ui.file_manager.dialog.js\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER = \"dx-filemanager-dialog-folder-chooser\";\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP = \"dx-filemanager-dialog-folder-chooser-popup\";\n\nvar FileManagerFolderChooserDialog = /*#__PURE__*/function (_FileManagerDialogBas) {\n  _inherits(FileManagerFolderChooserDialog, _FileManagerDialogBas);\n\n  var _super = _createSuper(FileManagerFolderChooserDialog);\n\n  function FileManagerFolderChooserDialog() {\n    _classCallCheck(this, FileManagerFolderChooserDialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFolderChooserDialog, [{\n    key: \"show\",\n    value: function show() {\n      var _this$_filesTreeView;\n\n      this._resetDialogSelectedDirectory();\n\n      null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView.refresh();\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"show\", this).call(this);\n    }\n  }, {\n    key: \"switchToCopyDialog\",\n    value: function switchToCopyDialog(targetItemInfos) {\n      this._targetItemInfos = targetItemInfos;\n\n      this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyTitle\"));\n\n      this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyButtonText\"));\n    }\n  }, {\n    key: \"switchToMoveDialog\",\n    value: function switchToMoveDialog(targetItemInfos) {\n      this._targetItemInfos = targetItemInfos;\n\n      this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveTitle\"));\n\n      this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveButtonText\"));\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_getDialogOptions\", this).call(this), {\n        contentCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER,\n        popupCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP\n      });\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_createContentTemplate\", this).call(this, element);\n\n      this._filesTreeView = this._createComponent($(\"<div>\"), FileManagerFilesTreeView, {\n        getDirectories: this.option(\"getDirectories\"),\n        getCurrentDirectory: function getCurrentDirectory() {\n          return _this._getDialogSelectedDirectory();\n        },\n        onDirectoryClick: function onDirectoryClick(e) {\n          return _this._onFilesTreeViewDirectoryClick(e);\n        },\n        onFilesTreeViewContentReady: function onFilesTreeViewContentReady() {\n          return _this._toggleUnavailableLocationsDisabled(true);\n        }\n      });\n\n      this._$contentElement.append(this._filesTreeView.$element());\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      var result = this._getDialogSelectedDirectory();\n\n      return result ? {\n        folder: result\n      } : result;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_getDefaultOptions\", this).call(this), {\n        getItems: null\n      });\n    }\n  }, {\n    key: \"_getDialogSelectedDirectory\",\n    value: function _getDialogSelectedDirectory() {\n      return this._selectedDirectoryInfo;\n    }\n  }, {\n    key: \"_resetDialogSelectedDirectory\",\n    value: function _resetDialogSelectedDirectory() {\n      this._selectedDirectoryInfo = null;\n    }\n  }, {\n    key: \"_onFilesTreeViewDirectoryClick\",\n    value: function _onFilesTreeViewDirectoryClick(_ref) {\n      var itemData = _ref.itemData;\n      this._selectedDirectoryInfo = itemData;\n\n      this._filesTreeView.updateCurrentDirectory();\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {\n      this._toggleUnavailableLocationsDisabled(true);\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_onPopupShown\", this).call(this);\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function _onPopupHidden() {\n      this._toggleUnavailableLocationsDisabled(false);\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_onPopupHidden\", this).call(this);\n    }\n  }, {\n    key: \"_toggleUnavailableLocationsDisabled\",\n    value: function _toggleUnavailableLocationsDisabled(isDisabled) {\n      var _this2 = this;\n\n      if (!this._filesTreeView) {\n        return;\n      }\n\n      var locations = this._getLocationsToProcess(isDisabled);\n\n      this._filesTreeView.toggleDirectoryExpandedStateRecursive(locations.locationsToExpand[0], isDisabled).then(function () {\n        return _this2._filesTreeView.toggleDirectoryLineExpandedState(locations.locationsToCollapse, !isDisabled).then(function () {\n          return locations.locationKeysToDisable.forEach(function (key) {\n            return _this2._filesTreeView.toggleNodeDisabledState(key, isDisabled);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getLocationsToProcess\",\n    value: function _getLocationsToProcess(isDisabled) {\n      var _expandMap$keys;\n\n      var expandLocations = {};\n      var collapseLocations = {};\n\n      this._targetItemInfos.forEach(function (itemInfo) {\n        if (itemInfo.parentDirectory) {\n          expandLocations[itemInfo.parentDirectory.getInternalKey()] = itemInfo.parentDirectory;\n        }\n\n        if (itemInfo.fileItem.isDirectory) {\n          collapseLocations[itemInfo.getInternalKey()] = itemInfo;\n        }\n      });\n\n      var expandMap = getMapFromObject(expandLocations);\n      var collapseMap = getMapFromObject(collapseLocations);\n      return {\n        locationsToExpand: isDisabled ? expandMap.values : [],\n        locationsToCollapse: isDisabled ? collapseMap.values : [],\n        locationKeysToDisable: (_expandMap$keys = expandMap.keys).concat.apply(_expandMap$keys, _toConsumableArray(collapseMap.keys))\n      };\n    }\n  }]);\n\n  return FileManagerFolderChooserDialog;\n}(FileManagerDialogBase);\n\nexport default FileManagerFolderChooserDialog;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.dialog.folder_chooser.js"],"names":["$","extend","messageLocalization","getMapFromObject","FileManagerDialogBase","FileManagerFilesTreeView","FILE_MANAGER_DIALOG_FOLDER_CHOOSER","FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP","FileManagerFolderChooserDialog","_this$_filesTreeView","_resetDialogSelectedDirectory","_filesTreeView","refresh","targetItemInfos","_targetItemInfos","_setTitle","format","_setButtonText","contentCssClass","popupCssClass","element","_createComponent","getDirectories","option","getCurrentDirectory","_getDialogSelectedDirectory","onDirectoryClick","e","_onFilesTreeViewDirectoryClick","onFilesTreeViewContentReady","_toggleUnavailableLocationsDisabled","_$contentElement","append","$element","result","folder","getItems","_selectedDirectoryInfo","_ref","itemData","updateCurrentDirectory","isDisabled","locations","_getLocationsToProcess","toggleDirectoryExpandedStateRecursive","locationsToExpand","then","toggleDirectoryLineExpandedState","locationsToCollapse","locationKeysToDisable","forEach","key","toggleNodeDisabledState","expandLocations","collapseLocations","itemInfo","parentDirectory","getInternalKey","fileItem","isDirectory","expandMap","collapseMap","values","keys","concat"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.folder_chooser.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    getMapFromObject\r\n} from \"./ui.file_manager.common\";\r\nimport FileManagerDialogBase from \"./ui.file_manager.dialog.js\";\r\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\r\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER = \"dx-filemanager-dialog-folder-chooser\";\r\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP = \"dx-filemanager-dialog-folder-chooser-popup\";\r\nclass FileManagerFolderChooserDialog extends FileManagerDialogBase {\r\n    show() {\r\n        var _this$_filesTreeView;\r\n        this._resetDialogSelectedDirectory();\r\n        null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView.refresh();\r\n        super.show()\r\n    }\r\n    switchToCopyDialog(targetItemInfos) {\r\n        this._targetItemInfos = targetItemInfos;\r\n        this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyTitle\"));\r\n        this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyButtonText\"))\r\n    }\r\n    switchToMoveDialog(targetItemInfos) {\r\n        this._targetItemInfos = targetItemInfos;\r\n        this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveTitle\"));\r\n        this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveButtonText\"))\r\n    }\r\n    _getDialogOptions() {\r\n        return extend(super._getDialogOptions(), {\r\n            contentCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER,\r\n            popupCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP\r\n        })\r\n    }\r\n    _createContentTemplate(element) {\r\n        super._createContentTemplate(element);\r\n        this._filesTreeView = this._createComponent($(\"<div>\"), FileManagerFilesTreeView, {\r\n            getDirectories: this.option(\"getDirectories\"),\r\n            getCurrentDirectory: () => this._getDialogSelectedDirectory(),\r\n            onDirectoryClick: e => this._onFilesTreeViewDirectoryClick(e),\r\n            onFilesTreeViewContentReady: () => this._toggleUnavailableLocationsDisabled(true)\r\n        });\r\n        this._$contentElement.append(this._filesTreeView.$element())\r\n    }\r\n    _getDialogResult() {\r\n        var result = this._getDialogSelectedDirectory();\r\n        return result ? {\r\n            folder: result\r\n        } : result\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            getItems: null\r\n        })\r\n    }\r\n    _getDialogSelectedDirectory() {\r\n        return this._selectedDirectoryInfo\r\n    }\r\n    _resetDialogSelectedDirectory() {\r\n        this._selectedDirectoryInfo = null\r\n    }\r\n    _onFilesTreeViewDirectoryClick(_ref) {\r\n        var {\r\n            itemData: itemData\r\n        } = _ref;\r\n        this._selectedDirectoryInfo = itemData;\r\n        this._filesTreeView.updateCurrentDirectory()\r\n    }\r\n    _onPopupShown() {\r\n        this._toggleUnavailableLocationsDisabled(true);\r\n        super._onPopupShown()\r\n    }\r\n    _onPopupHidden() {\r\n        this._toggleUnavailableLocationsDisabled(false);\r\n        super._onPopupHidden()\r\n    }\r\n    _toggleUnavailableLocationsDisabled(isDisabled) {\r\n        if (!this._filesTreeView) {\r\n            return\r\n        }\r\n        var locations = this._getLocationsToProcess(isDisabled);\r\n        this._filesTreeView.toggleDirectoryExpandedStateRecursive(locations.locationsToExpand[0], isDisabled).then(() => this._filesTreeView.toggleDirectoryLineExpandedState(locations.locationsToCollapse, !isDisabled).then(() => locations.locationKeysToDisable.forEach(key => this._filesTreeView.toggleNodeDisabledState(key, isDisabled))))\r\n    }\r\n    _getLocationsToProcess(isDisabled) {\r\n        var expandLocations = {};\r\n        var collapseLocations = {};\r\n        this._targetItemInfos.forEach(itemInfo => {\r\n            if (itemInfo.parentDirectory) {\r\n                expandLocations[itemInfo.parentDirectory.getInternalKey()] = itemInfo.parentDirectory\r\n            }\r\n            if (itemInfo.fileItem.isDirectory) {\r\n                collapseLocations[itemInfo.getInternalKey()] = itemInfo\r\n            }\r\n        });\r\n        var expandMap = getMapFromObject(expandLocations);\r\n        var collapseMap = getMapFromObject(collapseLocations);\r\n        return {\r\n            locationsToExpand: isDisabled ? expandMap.values : [],\r\n            locationsToCollapse: isDisabled ? collapseMap.values : [],\r\n            locationKeysToDisable: expandMap.keys.concat(...collapseMap.keys)\r\n        }\r\n    }\r\n}\r\nexport default FileManagerFolderChooserDialog;\r\n"]},"metadata":{},"sourceType":"module"}