{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\n\nvar FileManagerDialogBase = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerDialogBase, _Widget);\n\n  var _super = _createSuper(FileManagerDialogBase);\n\n  function FileManagerDialogBase() {\n    _classCallCheck(this, FileManagerDialogBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerDialogBase, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_initMarkup\", this).call(this);\n\n      this._createOnClosedAction();\n\n      var options = this._getDialogOptions();\n\n      var $popup = $(\"<div>\").addClass(FILE_MANAGER_DIALOG_POPUP).appendTo(this.$element());\n\n      if (options.popupCssClass) {\n        $popup.addClass(options.popupCssClass);\n      }\n\n      var popupOptions = {\n        showTitle: true,\n        title: options.title,\n        visible: false,\n        closeOnOutsideClick: true,\n        contentTemplate: this._createContentTemplate.bind(this),\n        toolbarItems: [{\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: options.buttonText,\n            onClick: this._applyDialogChanges.bind(this)\n          }\n        }, {\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: messageLocalization.format(\"dxFileManager-dialogButtonCancel\"),\n            onClick: this._closeDialog.bind(this)\n          }\n        }],\n        onInitialized: function onInitialized(_ref) {\n          var component = _ref.component;\n          component.registerKeyHandler(\"enter\", _this._applyDialogChanges.bind(_this));\n        },\n        onHidden: this._onPopupHidden.bind(this),\n        onShown: this._onPopupShown.bind(this)\n      };\n\n      if (isDefined(options.height)) {\n        popupOptions.height = options.height;\n      }\n\n      if (isDefined(options.maxHeight)) {\n        popupOptions.maxHeight = options.maxHeight;\n      }\n\n      this._popup = this._createComponent($popup, Popup, popupOptions);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._dialogResult = null;\n\n      this._popup.show();\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return {\n        title: \"Title\",\n        buttonText: \"ButtonText\",\n        contentCssClass: \"\",\n        popupCssClass: \"\"\n      };\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      this._$contentElement = $(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\n\n      var cssClass = this._getDialogOptions().contentCssClass;\n\n      if (cssClass) {\n        this._$contentElement.addClass(cssClass);\n      }\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      return null;\n    }\n  }, {\n    key: \"_applyDialogChanges\",\n    value: function _applyDialogChanges() {\n      var result = this._getDialogResult();\n\n      if (result) {\n        this._dialogResult = result;\n\n        this._closeDialog();\n      }\n    }\n  }, {\n    key: \"_closeDialog\",\n    value: function _closeDialog() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function _onPopupHidden() {\n      this._onClosedAction({\n        dialogResult: this._dialogResult\n      });\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {}\n  }, {\n    key: \"_createOnClosedAction\",\n    value: function _createOnClosedAction() {\n      this._onClosedAction = this._createActionByOption(\"onClosed\");\n    }\n  }, {\n    key: \"_setTitle\",\n    value: function _setTitle(newTitle) {\n      this._popup.option(\"title\", newTitle);\n    }\n  }, {\n    key: \"_setButtonText\",\n    value: function _setButtonText(newText) {\n      this._popup.option(\"toolbarItems[0].options.text\", newText);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        onClosed: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"onClosed\":\n          this._createOnPathChangedAction();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerDialogBase;\n}(Widget);\n\nexport default FileManagerDialogBase;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.dialog.js"],"names":["$","extend","isDefined","messageLocalization","Widget","Popup","FILE_MANAGER_DIALOG_CONTENT","FILE_MANAGER_DIALOG_POPUP","FileManagerDialogBase","_createOnClosedAction","options","_getDialogOptions","$popup","addClass","appendTo","$element","popupCssClass","popupOptions","showTitle","title","visible","closeOnOutsideClick","contentTemplate","_createContentTemplate","bind","toolbarItems","widget","toolbar","location","text","buttonText","onClick","_applyDialogChanges","format","_closeDialog","onInitialized","_ref","component","registerKeyHandler","onHidden","_onPopupHidden","onShown","_onPopupShown","height","maxHeight","_popup","_createComponent","_dialogResult","show","contentCssClass","element","_$contentElement","cssClass","result","_getDialogResult","hide","_onClosedAction","dialogResult","_createActionByOption","newTitle","option","newText","onClosed","args","name","_createOnPathChangedAction"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Popup from \"../popup\";\r\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\r\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\r\nclass FileManagerDialogBase extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._createOnClosedAction();\r\n        var options = this._getDialogOptions();\r\n        var $popup = $(\"<div>\").addClass(FILE_MANAGER_DIALOG_POPUP).appendTo(this.$element());\r\n        if (options.popupCssClass) {\r\n            $popup.addClass(options.popupCssClass)\r\n        }\r\n        var popupOptions = {\r\n            showTitle: true,\r\n            title: options.title,\r\n            visible: false,\r\n            closeOnOutsideClick: true,\r\n            contentTemplate: this._createContentTemplate.bind(this),\r\n            toolbarItems: [{\r\n                widget: \"dxButton\",\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                options: {\r\n                    text: options.buttonText,\r\n                    onClick: this._applyDialogChanges.bind(this)\r\n                }\r\n            }, {\r\n                widget: \"dxButton\",\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                options: {\r\n                    text: messageLocalization.format(\"dxFileManager-dialogButtonCancel\"),\r\n                    onClick: this._closeDialog.bind(this)\r\n                }\r\n            }],\r\n            onInitialized: _ref => {\r\n                var {\r\n                    component: component\r\n                } = _ref;\r\n                component.registerKeyHandler(\"enter\", this._applyDialogChanges.bind(this))\r\n            },\r\n            onHidden: this._onPopupHidden.bind(this),\r\n            onShown: this._onPopupShown.bind(this)\r\n        };\r\n        if (isDefined(options.height)) {\r\n            popupOptions.height = options.height\r\n        }\r\n        if (isDefined(options.maxHeight)) {\r\n            popupOptions.maxHeight = options.maxHeight\r\n        }\r\n        this._popup = this._createComponent($popup, Popup, popupOptions)\r\n    }\r\n    show() {\r\n        this._dialogResult = null;\r\n        this._popup.show()\r\n    }\r\n    _getDialogOptions() {\r\n        return {\r\n            title: \"Title\",\r\n            buttonText: \"ButtonText\",\r\n            contentCssClass: \"\",\r\n            popupCssClass: \"\"\r\n        }\r\n    }\r\n    _createContentTemplate(element) {\r\n        this._$contentElement = $(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\r\n        var cssClass = this._getDialogOptions().contentCssClass;\r\n        if (cssClass) {\r\n            this._$contentElement.addClass(cssClass)\r\n        }\r\n    }\r\n    _getDialogResult() {\r\n        return null\r\n    }\r\n    _applyDialogChanges() {\r\n        var result = this._getDialogResult();\r\n        if (result) {\r\n            this._dialogResult = result;\r\n            this._closeDialog()\r\n        }\r\n    }\r\n    _closeDialog() {\r\n        this._popup.hide()\r\n    }\r\n    _onPopupHidden() {\r\n        this._onClosedAction({\r\n            dialogResult: this._dialogResult\r\n        })\r\n    }\r\n    _onPopupShown() {}\r\n    _createOnClosedAction() {\r\n        this._onClosedAction = this._createActionByOption(\"onClosed\")\r\n    }\r\n    _setTitle(newTitle) {\r\n        this._popup.option(\"title\", newTitle)\r\n    }\r\n    _setButtonText(newText) {\r\n        this._popup.option(\"toolbarItems[0].options.text\", newText)\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            onClosed: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"onClosed\":\r\n                this._createOnPathChangedAction();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport default FileManagerDialogBase;\r\n"]},"metadata":{},"sourceType":"module"}