{"ast":null,"code":"import _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray } from \"../core/utils/array\";\nimport { each } from \"../core/utils/iterator\";\nimport { EventsStrategy } from \"../core/events_strategy\";\nimport errors from \"../core/errors\";\nimport { grep } from \"../core/utils/common\";\nimport { isDefined, isString, isDate, isBoolean, isObject, isFunction, isPromise, isNumeric } from \"../core/utils/type\";\nimport numberLocalization from \"../localization/number\";\nimport messageLocalization from \"../localization/message\";\nimport Promise from \"../core/polyfills/promise\";\nimport { fromPromise, Deferred } from \"../core/utils/deferred\";\nvar STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\n\nvar BaseRuleValidator = /*#__PURE__*/function () {\n  function BaseRuleValidator() {\n    _classCallCheck(this, BaseRuleValidator);\n\n    this.NAME = \"base\";\n  }\n\n  _createClass(BaseRuleValidator, [{\n    key: \"defaultMessage\",\n    value: function defaultMessage(value) {\n      return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value);\n    }\n  }, {\n    key: \"defaultFormattedMessage\",\n    value: function defaultFormattedMessage(value) {\n      return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value);\n    }\n  }, {\n    key: \"_isValueEmpty\",\n    value: function _isValueEmpty(value) {\n      return !rulesValidators.required.validate(value, {});\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value, rule) {\n      var _this = this;\n\n      var valueArray = Array.isArray(value) ? value : [value];\n      var result = true;\n\n      if (valueArray.length) {\n        valueArray.every(function (itemValue) {\n          result = _this._validate(itemValue, rule);\n          return result;\n        });\n      } else {\n        result = this._validate(null, rule);\n      }\n\n      return result;\n    }\n  }]);\n\n  return BaseRuleValidator;\n}();\n\nvar RequiredRuleValidator = /*#__PURE__*/function (_BaseRuleValidator) {\n  _inherits(RequiredRuleValidator, _BaseRuleValidator);\n\n  var _super = _createSuper(RequiredRuleValidator);\n\n  function RequiredRuleValidator() {\n    var _this2;\n\n    _classCallCheck(this, RequiredRuleValidator);\n\n    _this2 = _super.call(this);\n    _this2.NAME = \"required\";\n    return _this2;\n  }\n\n  _createClass(RequiredRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (!isDefined(value)) {\n        return false;\n      }\n\n      if (false === value) {\n        return false;\n      }\n\n      value = String(value);\n\n      if (rule.trim || !isDefined(rule.trim)) {\n        value = value.trim();\n      }\n\n      return \"\" !== value;\n    }\n  }]);\n\n  return RequiredRuleValidator;\n}(BaseRuleValidator);\n\nvar NumericRuleValidator = /*#__PURE__*/function (_BaseRuleValidator2) {\n  _inherits(NumericRuleValidator, _BaseRuleValidator2);\n\n  var _super2 = _createSuper(NumericRuleValidator);\n\n  function NumericRuleValidator() {\n    var _this3;\n\n    _classCallCheck(this, NumericRuleValidator);\n\n    _this3 = _super2.call(this);\n    _this3.NAME = \"numeric\";\n    return _this3;\n  }\n\n  _createClass(NumericRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      if (rule.useCultureSettings && isString(value)) {\n        return !isNaN(numberLocalization.parse(value));\n      } else {\n        return isNumeric(value);\n      }\n    }\n  }]);\n\n  return NumericRuleValidator;\n}(BaseRuleValidator);\n\nvar RangeRuleValidator = /*#__PURE__*/function (_BaseRuleValidator3) {\n  _inherits(RangeRuleValidator, _BaseRuleValidator3);\n\n  var _super3 = _createSuper(RangeRuleValidator);\n\n  function RangeRuleValidator() {\n    var _this4;\n\n    _classCallCheck(this, RangeRuleValidator);\n\n    _this4 = _super3.call(this);\n    _this4.NAME = \"range\";\n    return _this4;\n  }\n\n  _createClass(RangeRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validNumber = rulesValidators.numeric.validate(value, rule);\n      var validValue = isDefined(value) && \"\" !== value;\n      var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\n      var min = rule.min;\n      var max = rule.max;\n\n      if (!(validNumber || isDate(value)) && !validValue) {\n        return false;\n      }\n\n      if (isDefined(min)) {\n        if (isDefined(max)) {\n          return number >= min && number <= max;\n        }\n\n        return number >= min;\n      } else if (isDefined(max)) {\n        return number <= max;\n      } else {\n        throw errors.Error(\"E0101\");\n      }\n    }\n  }]);\n\n  return RangeRuleValidator;\n}(BaseRuleValidator);\n\nvar StringLengthRuleValidator = /*#__PURE__*/function (_BaseRuleValidator4) {\n  _inherits(StringLengthRuleValidator, _BaseRuleValidator4);\n\n  var _super4 = _createSuper(StringLengthRuleValidator);\n\n  function StringLengthRuleValidator() {\n    var _this5;\n\n    _classCallCheck(this, StringLengthRuleValidator);\n\n    _this5 = _super4.call(this);\n    _this5.NAME = \"stringLength\";\n    return _this5;\n  }\n\n  _createClass(StringLengthRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      var _value;\n\n      value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\n\n      if (rule.trim || !isDefined(rule.trim)) {\n        value = value.trim();\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      return rulesValidators.range.validate(value.length, extend({}, rule));\n    }\n  }]);\n\n  return StringLengthRuleValidator;\n}(BaseRuleValidator);\n\nvar CustomRuleValidator = /*#__PURE__*/function (_BaseRuleValidator5) {\n  _inherits(CustomRuleValidator, _BaseRuleValidator5);\n\n  var _super5 = _createSuper(CustomRuleValidator);\n\n  function CustomRuleValidator() {\n    var _this6;\n\n    _classCallCheck(this, CustomRuleValidator);\n\n    _this6 = _super5.call(this);\n    _this6.NAME = \"custom\";\n    return _this6;\n  }\n\n  _createClass(CustomRuleValidator, [{\n    key: \"validate\",\n    value: function validate(value, rule) {\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validator = rule.validator;\n      var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n      var extraParams = isFunction(dataGetter) && dataGetter();\n      var params = {\n        value: value,\n        validator: validator,\n        rule: rule\n      };\n\n      if (extraParams) {\n        extend(params, extraParams);\n      }\n\n      return rule.validationCallback(params);\n    }\n  }]);\n\n  return CustomRuleValidator;\n}(BaseRuleValidator);\n\nvar AsyncRuleValidator = /*#__PURE__*/function (_CustomRuleValidator) {\n  _inherits(AsyncRuleValidator, _CustomRuleValidator);\n\n  var _super6 = _createSuper(AsyncRuleValidator);\n\n  function AsyncRuleValidator() {\n    var _this7;\n\n    _classCallCheck(this, AsyncRuleValidator);\n\n    _this7 = _super6.call(this);\n    _this7.NAME = \"async\";\n    return _this7;\n  }\n\n  _createClass(AsyncRuleValidator, [{\n    key: \"validate\",\n    value: function validate(value, rule) {\n      if (!isDefined(rule.reevaluate)) {\n        extend(rule, {\n          reevaluate: true\n        });\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var validator = rule.validator;\n      var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\n      var extraParams = isFunction(dataGetter) && dataGetter();\n      var params = {\n        value: value,\n        validator: validator,\n        rule: rule\n      };\n\n      if (extraParams) {\n        extend(params, extraParams);\n      }\n\n      var callbackResult = rule.validationCallback(params);\n\n      if (!isPromise(callbackResult)) {\n        throw errors.Error(\"E0103\");\n      }\n\n      return this._getWrappedPromise(fromPromise(callbackResult).promise());\n    }\n  }, {\n    key: \"_getWrappedPromise\",\n    value: function _getWrappedPromise(promise) {\n      var deferred = new Deferred();\n      promise.then(function (res) {\n        deferred.resolve(res);\n      }, function (err) {\n        var res = {\n          isValid: false\n        };\n\n        if (isDefined(err)) {\n          if (isString(err)) {\n            res.message = err;\n          } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\n            res.message = err.message;\n          }\n        }\n\n        deferred.resolve(res);\n      });\n      return deferred.promise();\n    }\n  }]);\n\n  return AsyncRuleValidator;\n}(CustomRuleValidator);\n\nvar CompareRuleValidator = /*#__PURE__*/function (_BaseRuleValidator6) {\n  _inherits(CompareRuleValidator, _BaseRuleValidator6);\n\n  var _super7 = _createSuper(CompareRuleValidator);\n\n  function CompareRuleValidator() {\n    var _this8;\n\n    _classCallCheck(this, CompareRuleValidator);\n\n    _this8 = _super7.call(this);\n    _this8.NAME = \"compare\";\n    return _this8;\n  }\n\n  _createClass(CompareRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (!rule.comparisonTarget) {\n        throw errors.Error(\"E0102\");\n      }\n\n      if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      extend(rule, {\n        reevaluate: true\n      });\n      var otherValue = rule.comparisonTarget();\n      var type = rule.comparisonType || \"==\";\n\n      switch (type) {\n        case \"==\":\n          return value == otherValue;\n\n        case \"!=\":\n          return value != otherValue;\n\n        case \"===\":\n          return value === otherValue;\n\n        case \"!==\":\n          return value !== otherValue;\n\n        case \">\":\n          return value > otherValue;\n\n        case \">=\":\n          return value >= otherValue;\n\n        case \"<\":\n          return value < otherValue;\n\n        case \"<=\":\n          return value <= otherValue;\n      }\n    }\n  }]);\n\n  return CompareRuleValidator;\n}(BaseRuleValidator);\n\nvar PatternRuleValidator = /*#__PURE__*/function (_BaseRuleValidator7) {\n  _inherits(PatternRuleValidator, _BaseRuleValidator7);\n\n  var _super8 = _createSuper(PatternRuleValidator);\n\n  function PatternRuleValidator() {\n    var _this9;\n\n    _classCallCheck(this, PatternRuleValidator);\n\n    _this9 = _super8.call(this);\n    _this9.NAME = \"pattern\";\n    return _this9;\n  }\n\n  _createClass(PatternRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      var pattern = rule.pattern;\n\n      if (isString(pattern)) {\n        pattern = new RegExp(pattern);\n      }\n\n      return pattern.test(value);\n    }\n  }]);\n\n  return PatternRuleValidator;\n}(BaseRuleValidator);\n\nvar EmailRuleValidator = /*#__PURE__*/function (_BaseRuleValidator8) {\n  _inherits(EmailRuleValidator, _BaseRuleValidator8);\n\n  var _super9 = _createSuper(EmailRuleValidator);\n\n  function EmailRuleValidator() {\n    var _this10;\n\n    _classCallCheck(this, EmailRuleValidator);\n\n    _this10 = _super9.call(this);\n    _this10.NAME = \"email\";\n    return _this10;\n  }\n\n  _createClass(EmailRuleValidator, [{\n    key: \"_validate\",\n    value: function _validate(value, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n        return true;\n      }\n\n      return rulesValidators.pattern.validate(value, extend({}, rule, {\n        pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\n      }));\n    }\n  }]);\n\n  return EmailRuleValidator;\n}(BaseRuleValidator);\n\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  async: new AsyncRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\nvar GroupConfig = Class.inherit({\n  ctor: function ctor(group) {\n    this.group = group;\n    this.validators = [];\n    this._pendingValidators = [];\n    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\n\n    this._resetValidationInfo();\n\n    this._eventsStrategy = new EventsStrategy(this);\n  },\n  validate: function validate() {\n    var _this11 = this;\n\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: [],\n      status: STATUS.valid,\n      complete: null\n    };\n\n    this._unsubscribeFromAllChangeEvents();\n\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n\n    each(this.validators, function (_, validator) {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n\n      if (validatorResult.brokenRules) {\n        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);\n      }\n\n      result.validators.push(validator);\n\n      if (validatorResult.status === STATUS.pending) {\n        _this11._addPendingValidator(validator);\n      }\n\n      _this11._subscribeToChangeEvents(validator);\n    });\n\n    if (this._pendingValidators.length) {\n      result.status = STATUS.pending;\n    } else {\n      result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n\n      this._unsubscribeFromAllChangeEvents();\n\n      this._raiseValidatedEvent(result);\n    }\n\n    this._updateValidationInfo(result);\n\n    return extend({}, this._validationInfo.result);\n  },\n  _subscribeToChangeEvents: function _subscribeToChangeEvents(validator) {\n    validator.on(\"validating\", this._onValidatorStatusChanged);\n    validator.on(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromChangeEvents: function _unsubscribeFromChangeEvents(validator) {\n    validator.off(\"validating\", this._onValidatorStatusChanged);\n    validator.off(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromAllChangeEvents: function _unsubscribeFromAllChangeEvents() {\n    var _this12 = this;\n\n    each(this.validators, function (_, validator) {\n      _this12._unsubscribeFromChangeEvents(validator);\n    });\n  },\n  _updateValidationInfo: function _updateValidationInfo(result) {\n    this._validationInfo.result = result;\n\n    if (result.status !== STATUS.pending) {\n      return;\n    }\n\n    if (!this._validationInfo.deferred) {\n      this._validationInfo.deferred = new Deferred();\n      this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n    }\n  },\n  _addPendingValidator: function _addPendingValidator(validator) {\n    var foundValidator = grep(this._pendingValidators, function (val) {\n      return val === validator;\n    })[0];\n\n    if (!foundValidator) {\n      this._pendingValidators.push(validator);\n    }\n  },\n  _removePendingValidator: function _removePendingValidator(validator) {\n    var index = inArray(validator, this._pendingValidators);\n\n    if (index >= 0) {\n      this._pendingValidators.splice(index, 1);\n    }\n  },\n  _orderBrokenRules: function _orderBrokenRules(brokenRules) {\n    var orderedRules = [];\n    each(this.validators, function (_, validator) {\n      var foundRules = grep(brokenRules, function (rule) {\n        return rule.validator === validator;\n      });\n\n      if (foundRules.length) {\n        orderedRules = orderedRules.concat(foundRules);\n      }\n    });\n    return orderedRules;\n  },\n  _updateBrokenRules: function _updateBrokenRules(result) {\n    if (!this._validationInfo.result) {\n      return;\n    }\n\n    var brokenRules = this._validationInfo.result.brokenRules;\n    var rules = grep(brokenRules, function (rule) {\n      return rule.validator !== result.validator;\n    });\n\n    if (result.brokenRules) {\n      brokenRules = rules.concat(result.brokenRules);\n    }\n\n    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);\n  },\n  _onValidatorStatusChanged: function _onValidatorStatusChanged(result) {\n    if (result.status === STATUS.pending) {\n      this._addPendingValidator(result.validator);\n\n      return;\n    }\n\n    this._resolveIfComplete(result);\n  },\n  _resolveIfComplete: function _resolveIfComplete(result) {\n    this._removePendingValidator(result.validator);\n\n    this._updateBrokenRules(result);\n\n    if (!this._pendingValidators.length) {\n      this._unsubscribeFromAllChangeEvents();\n\n      if (!this._validationInfo.result) {\n        return;\n      }\n\n      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\n      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\n      var res = extend({}, this._validationInfo.result, {\n        complete: null\n      });\n      var deferred = this._validationInfo.deferred;\n\n      this._resetValidationInfo();\n\n      this._raiseValidatedEvent(res);\n\n      deferred && setTimeout(function () {\n        deferred.resolve(res);\n      });\n    }\n  },\n  _raiseValidatedEvent: function _raiseValidatedEvent(result) {\n    this._eventsStrategy.fireEvent(\"validated\", [result]);\n  },\n  _resetValidationInfo: function _resetValidationInfo() {\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n  _synchronizeValidationInfo: function _synchronizeValidationInfo() {\n    if (this._validationInfo.result) {\n      this._validationInfo.result.validators = this.validators;\n    }\n  },\n  removeRegisteredValidator: function removeRegisteredValidator(validator) {\n    var index = inArray(validator, this.validators);\n\n    if (index > -1) {\n      this.validators.splice(index, 1);\n\n      this._synchronizeValidationInfo();\n\n      this._resolveIfComplete({\n        validator: validator\n      });\n    }\n  },\n  registerValidator: function registerValidator(validator) {\n    if (inArray(validator, this.validators) < 0) {\n      this.validators.push(validator);\n\n      this._synchronizeValidationInfo();\n    }\n  },\n  reset: function reset() {\n    each(this.validators, function (_, validator) {\n      validator.reset();\n    });\n    this._pendingValidators = [];\n\n    this._resetValidationInfo();\n  },\n  on: function on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n  off: function off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  }\n});\nvar ValidationEngine = {\n  groups: [],\n  getGroupConfig: function getGroupConfig(group) {\n    var result = grep(this.groups, function (config) {\n      return config.group === group;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n  },\n  findGroup: function findGroup($element, model) {\n    var $dxGroup = $element.parents(\".dx-validationgroup\").first();\n\n    if ($dxGroup.length) {\n      return $dxGroup.dxValidationGroup(\"instance\");\n    }\n\n    return model;\n  },\n  initGroups: function initGroups() {\n    this.groups = [];\n    this.addGroup();\n  },\n  addGroup: function addGroup(group) {\n    var config = this.getGroupConfig(group);\n\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n\n    return config;\n  },\n  removeGroup: function removeGroup(group) {\n    var config = this.getGroupConfig(group);\n    var index = inArray(config, this.groups);\n\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n\n    return config;\n  },\n  _setDefaultMessage: function _setDefaultMessage(info) {\n    var rule = info.rule,\n        validator = info.validator,\n        name = info.name;\n\n    if (!isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n  _addBrokenRule: function _addBrokenRule(info) {\n    var result = info.result,\n        rule = info.rule;\n\n    if (!result.brokenRule) {\n      result.brokenRule = rule;\n    }\n\n    if (!result.brokenRules) {\n      result.brokenRules = [];\n    }\n\n    result.brokenRules.push(rule);\n  },\n  validate: function validate(value, rules, name) {\n    var _this13 = this;\n\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      brokenRules: null,\n      isValid: true,\n      validationRules: rules,\n      pendingRules: null,\n      status: STATUS.valid,\n      complete: null\n    };\n    var asyncRuleItems = [];\n    each(rules || [], function (_, rule) {\n      var ruleValidator = rulesValidators[rule.type];\n      var ruleValidationResult;\n\n      if (ruleValidator) {\n        if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n\n            _this13._addBrokenRule({\n              result: result,\n              rule: rule\n            });\n\n            return false;\n          }\n\n          return true;\n        }\n\n        rule.value = value;\n\n        if (\"async\" === rule.type) {\n          asyncRuleItems.push({\n            rule: rule,\n            ruleValidator: ruleValidator\n          });\n          return true;\n        }\n\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n\n        if (!ruleValidationResult) {\n          result.isValid = false;\n\n          _this13._setDefaultMessage({\n            rule: rule,\n            validator: ruleValidator,\n            name: name\n          });\n\n          _this13._addBrokenRule({\n            result: result,\n            rule: rule\n          });\n        }\n\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw errors.Error(\"E0100\");\n      }\n    });\n\n    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\n      result = this._validateAsyncRules({\n        value: value,\n        items: asyncRuleItems,\n        result: result,\n        name: name\n      });\n    }\n\n    result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  _validateAsyncRules: function _validateAsyncRules(_ref) {\n    var _this14 = this;\n\n    var result = _ref.result,\n        value = _ref.value,\n        items = _ref.items,\n        name = _ref.name;\n    var asyncResults = [];\n    each(items, function (_, item) {\n      var validateResult = item.ruleValidator.validate(value, item.rule);\n\n      if (!isPromise(validateResult)) {\n        _this14._updateRuleConfig({\n          rule: item.rule,\n          ruleResult: _this14._getPatchedRuleResult(validateResult),\n          validator: item.ruleValidator,\n          name: name\n        });\n      } else {\n        if (!result.pendingRules) {\n          result.pendingRules = [];\n        }\n\n        result.pendingRules.push(item.rule);\n        var asyncResult = validateResult.then(function (res) {\n          var ruleResult = _this14._getPatchedRuleResult(res);\n\n          _this14._updateRuleConfig({\n            rule: item.rule,\n            ruleResult: ruleResult,\n            validator: item.ruleValidator,\n            name: name\n          });\n\n          return ruleResult;\n        });\n        asyncResults.push(asyncResult);\n      }\n    });\n\n    if (asyncResults.length) {\n      result.complete = Promise.all(asyncResults).then(function (values) {\n        return _this14._getAsyncRulesResult({\n          result: result,\n          values: values\n        });\n      });\n    }\n\n    return result;\n  },\n  _updateRuleConfig: function _updateRuleConfig(_ref2) {\n    var rule = _ref2.rule,\n        ruleResult = _ref2.ruleResult,\n        validator = _ref2.validator,\n        name = _ref2.name;\n    rule.isValid = ruleResult.isValid;\n\n    if (!ruleResult.isValid) {\n      if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\n        rule.message = ruleResult.message;\n      } else {\n        this._setDefaultMessage({\n          rule: rule,\n          validator: validator,\n          name: name\n        });\n      }\n    }\n  },\n  _getPatchedRuleResult: function _getPatchedRuleResult(ruleResult) {\n    var result;\n\n    if (isObject(ruleResult)) {\n      result = extend({}, ruleResult);\n\n      if (!isDefined(result.isValid)) {\n        result.isValid = true;\n      }\n    } else {\n      result = {\n        isValid: isBoolean(ruleResult) ? ruleResult : true\n      };\n    }\n\n    return result;\n  },\n  _getAsyncRulesResult: function _getAsyncRulesResult(_ref3) {\n    var _this15 = this;\n\n    var values = _ref3.values,\n        result = _ref3.result;\n    each(values, function (index, val) {\n      if (false === val.isValid) {\n        result.isValid = val.isValid;\n        var rule = result.pendingRules[index];\n\n        _this15._addBrokenRule({\n          result: result,\n          rule: rule\n        });\n      }\n    });\n    result.pendingRules = null;\n    result.complete = null;\n    result.status = result.isValid ? STATUS.valid : STATUS.invalid;\n    return result;\n  },\n  registerValidatorInGroup: function registerValidatorInGroup(group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n    groupConfig.registerValidator.call(groupConfig, validator);\n  },\n  _shouldRemoveGroup: function _shouldRemoveGroup(group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group;\n    var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n  removeRegisteredValidator: function removeRegisteredValidator(group, validator) {\n    var config = ValidationEngine.getGroupConfig(group);\n\n    if (config) {\n      config.removeRegisteredValidator.call(config, validator);\n      var validatorsInGroup = config.validators;\n\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n  initValidationOptions: function initValidationOptions(options) {\n    var _this16 = this;\n\n    var initedOptions = {};\n\n    if (options) {\n      [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(function (prop) {\n        if (prop in options) {\n          extend(initedOptions, _this16.synchronizeValidationOptions({\n            name: prop,\n            value: options[prop]\n          }, options));\n        }\n      });\n    }\n\n    return initedOptions;\n  },\n  synchronizeValidationOptions: function synchronizeValidationOptions(_ref4, options) {\n    var name = _ref4.name,\n        value = _ref4.value;\n\n    switch (name) {\n      case \"validationStatus\":\n        var isValid = value === STATUS.valid || value === STATUS.pending;\n        return options.isValid !== isValid ? {\n          isValid: isValid\n        } : {};\n\n      case \"isValid\":\n        var validationStatus = options.validationStatus;\n        var newStatus = validationStatus;\n\n        if (value && validationStatus === STATUS.invalid) {\n          newStatus = STATUS.valid;\n        } else if (!value && validationStatus !== STATUS.invalid) {\n          newStatus = STATUS.invalid;\n        }\n\n        return newStatus !== validationStatus ? {\n          validationStatus: newStatus\n        } : {};\n\n      case \"validationErrors\":\n        var validationError = !value || !value.length ? null : value[0];\n        return options.validationError !== validationError ? {\n          validationError: validationError\n        } : {};\n\n      case \"validationError\":\n        var validationErrors = options.validationErrors;\n\n        if (!value && validationErrors) {\n          return {\n            validationErrors: null\n          };\n        } else if (value && !validationErrors) {\n          return {\n            validationErrors: [value]\n          };\n        } else if (value && validationErrors && value !== validationErrors[0]) {\n          validationErrors[0] = value;\n          return {\n            validationErrors: validationErrors.slice()\n          };\n        }\n\n    }\n\n    return {};\n  },\n  validateGroup: function validateGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.validate();\n  },\n  resetGroup: function resetGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.reset();\n  }\n};\nValidationEngine.initGroups();\nexport default ValidationEngine;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/validation_engine.js"],"names":["Class","extend","inArray","each","EventsStrategy","errors","grep","isDefined","isString","isDate","isBoolean","isObject","isFunction","isPromise","isNumeric","numberLocalization","messageLocalization","Promise","fromPromise","Deferred","STATUS","valid","invalid","pending","BaseRuleValidator","NAME","value","getFormatter","concat","rulesValidators","required","validate","rule","valueArray","Array","isArray","result","length","every","itemValue","_validate","RequiredRuleValidator","String","trim","NumericRuleValidator","ignoreEmptyValue","_isValueEmpty","useCultureSettings","isNaN","parse","RangeRuleValidator","validNumber","numeric","validValue","number","parseFloat","valueOf","min","max","Error","StringLengthRuleValidator","_value","range","CustomRuleValidator","validator","dataGetter","option","extraParams","params","validationCallback","AsyncRuleValidator","reevaluate","callbackResult","_getWrappedPromise","promise","deferred","then","res","resolve","err","isValid","message","CompareRuleValidator","comparisonTarget","otherValue","type","comparisonType","PatternRuleValidator","pattern","RegExp","test","EmailRuleValidator","stringLength","custom","async","compare","email","GroupConfig","inherit","ctor","group","validators","_pendingValidators","_onValidatorStatusChanged","bind","_resetValidationInfo","_eventsStrategy","brokenRules","status","complete","_unsubscribeFromAllChangeEvents","_","validatorResult","push","_addPendingValidator","_subscribeToChangeEvents","_raiseValidatedEvent","_updateValidationInfo","_validationInfo","on","_unsubscribeFromChangeEvents","off","foundValidator","val","_removePendingValidator","index","splice","_orderBrokenRules","orderedRules","foundRules","_updateBrokenRules","rules","_resolveIfComplete","setTimeout","fireEvent","_synchronizeValidationInfo","removeRegisteredValidator","registerValidator","reset","eventName","eventHandler","ValidationEngine","groups","getGroupConfig","config","findGroup","$element","model","$dxGroup","parents","first","dxValidationGroup","initGroups","addGroup","removeGroup","_setDefaultMessage","info","name","defaultFormattedMessage","defaultMessage","_addBrokenRule","brokenRule","validationRules","pendingRules","asyncRuleItems","ruleValidator","ruleValidationResult","_validateAsyncRules","items","_ref","asyncResults","item","validateResult","_updateRuleConfig","ruleResult","_getPatchedRuleResult","asyncResult","all","values","_getAsyncRulesResult","_ref2","_ref3","registerValidatorInGroup","groupConfig","call","_shouldRemoveGroup","validatorsInGroup","isDefaultGroup","isValidationGroupInstance","initValidationOptions","options","initedOptions","forEach","prop","synchronizeValidationOptions","_ref4","validationStatus","newStatus","validationError","validationErrors","slice","validateGroup","resetGroup"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/validation_engine.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Class from \"../core/class\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    inArray\r\n} from \"../core/utils/array\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    EventsStrategy\r\n} from \"../core/events_strategy\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    grep\r\n} from \"../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isBoolean,\r\n    isObject,\r\n    isFunction,\r\n    isPromise,\r\n    isNumeric\r\n} from \"../core/utils/type\";\r\nimport numberLocalization from \"../localization/number\";\r\nimport messageLocalization from \"../localization/message\";\r\nimport Promise from \"../core/polyfills/promise\";\r\nimport {\r\n    fromPromise,\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nvar STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nclass BaseRuleValidator {\r\n    constructor() {\r\n        this.NAME = \"base\"\r\n    }\r\n    defaultMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME))(value)\r\n    }\r\n    defaultFormattedMessage(value) {\r\n        return messageLocalization.getFormatter(\"validation-\".concat(this.NAME, \"-formatted\"))(value)\r\n    }\r\n    _isValueEmpty(value) {\r\n        return !rulesValidators.required.validate(value, {})\r\n    }\r\n    validate(value, rule) {\r\n        var valueArray = Array.isArray(value) ? value : [value];\r\n        var result = true;\r\n        if (valueArray.length) {\r\n            valueArray.every(itemValue => {\r\n                result = this._validate(itemValue, rule);\r\n                return result\r\n            })\r\n        } else {\r\n            result = this._validate(null, rule)\r\n        }\r\n        return result\r\n    }\r\n}\r\nclass RequiredRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"required\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!isDefined(value)) {\r\n            return false\r\n        }\r\n        if (false === value) {\r\n            return false\r\n        }\r\n        value = String(value);\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        return \"\" !== value\r\n    }\r\n}\r\nclass NumericRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"numeric\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        if (rule.useCultureSettings && isString(value)) {\r\n            return !isNaN(numberLocalization.parse(value))\r\n        } else {\r\n            return isNumeric(value)\r\n        }\r\n    }\r\n}\r\nclass RangeRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"range\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validNumber = rulesValidators.numeric.validate(value, rule);\r\n        var validValue = isDefined(value) && \"\" !== value;\r\n        var number = validNumber ? parseFloat(value) : validValue && value.valueOf();\r\n        var min = rule.min;\r\n        var max = rule.max;\r\n        if (!(validNumber || isDate(value)) && !validValue) {\r\n            return false\r\n        }\r\n        if (isDefined(min)) {\r\n            if (isDefined(max)) {\r\n                return number >= min && number <= max\r\n            }\r\n            return number >= min\r\n        } else if (isDefined(max)) {\r\n            return number <= max\r\n        } else {\r\n            throw errors.Error(\"E0101\")\r\n        }\r\n    }\r\n}\r\nclass StringLengthRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"stringLength\"\r\n    }\r\n    _validate(value, rule) {\r\n        var _value;\r\n        value = String(null !== (_value = value) && void 0 !== _value ? _value : \"\");\r\n        if (rule.trim || !isDefined(rule.trim)) {\r\n            value = value.trim()\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.range.validate(value.length, extend({}, rule))\r\n    }\r\n}\r\nclass CustomRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"custom\"\r\n    }\r\n    validate(value, rule) {\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        return rule.validationCallback(params)\r\n    }\r\n}\r\nclass AsyncRuleValidator extends CustomRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"async\"\r\n    }\r\n    validate(value, rule) {\r\n        if (!isDefined(rule.reevaluate)) {\r\n            extend(rule, {\r\n                reevaluate: true\r\n            })\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var validator = rule.validator;\r\n        var dataGetter = validator && isFunction(validator.option) && validator.option(\"dataGetter\");\r\n        var extraParams = isFunction(dataGetter) && dataGetter();\r\n        var params = {\r\n            value: value,\r\n            validator: validator,\r\n            rule: rule\r\n        };\r\n        if (extraParams) {\r\n            extend(params, extraParams)\r\n        }\r\n        var callbackResult = rule.validationCallback(params);\r\n        if (!isPromise(callbackResult)) {\r\n            throw errors.Error(\"E0103\")\r\n        }\r\n        return this._getWrappedPromise(fromPromise(callbackResult).promise())\r\n    }\r\n    _getWrappedPromise(promise) {\r\n        var deferred = new Deferred;\r\n        promise.then((function(res) {\r\n            deferred.resolve(res)\r\n        }), (function(err) {\r\n            var res = {\r\n                isValid: false\r\n            };\r\n            if (isDefined(err)) {\r\n                if (isString(err)) {\r\n                    res.message = err\r\n                } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {\r\n                    res.message = err.message\r\n                }\r\n            }\r\n            deferred.resolve(res)\r\n        }));\r\n        return deferred.promise()\r\n    }\r\n}\r\nclass CompareRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"compare\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (!rule.comparisonTarget) {\r\n            throw errors.Error(\"E0102\")\r\n        }\r\n        if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        extend(rule, {\r\n            reevaluate: true\r\n        });\r\n        var otherValue = rule.comparisonTarget();\r\n        var type = rule.comparisonType || \"==\";\r\n        switch (type) {\r\n            case \"==\":\r\n                return value == otherValue;\r\n            case \"!=\":\r\n                return value != otherValue;\r\n            case \"===\":\r\n                return value === otherValue;\r\n            case \"!==\":\r\n                return value !== otherValue;\r\n            case \">\":\r\n                return value > otherValue;\r\n            case \">=\":\r\n                return value >= otherValue;\r\n            case \"<\":\r\n                return value < otherValue;\r\n            case \"<=\":\r\n                return value <= otherValue\r\n        }\r\n    }\r\n}\r\nclass PatternRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"pattern\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        var pattern = rule.pattern;\r\n        if (isString(pattern)) {\r\n            pattern = new RegExp(pattern)\r\n        }\r\n        return pattern.test(value)\r\n    }\r\n}\r\nclass EmailRuleValidator extends BaseRuleValidator {\r\n    constructor() {\r\n        super();\r\n        this.NAME = \"email\"\r\n    }\r\n    _validate(value, rule) {\r\n        if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\r\n            return true\r\n        }\r\n        return rulesValidators.pattern.validate(value, extend({}, rule, {\r\n            pattern: /^[\\d\\w._-]+@[\\d\\w._-]+\\.[\\w]+$/i\r\n        }))\r\n    }\r\n}\r\nvar rulesValidators = {\r\n    required: new RequiredRuleValidator,\r\n    numeric: new NumericRuleValidator,\r\n    range: new RangeRuleValidator,\r\n    stringLength: new StringLengthRuleValidator,\r\n    custom: new CustomRuleValidator,\r\n    async: new AsyncRuleValidator,\r\n    compare: new CompareRuleValidator,\r\n    pattern: new PatternRuleValidator,\r\n    email: new EmailRuleValidator\r\n};\r\nvar GroupConfig = Class.inherit({\r\n    ctor(group) {\r\n        this.group = group;\r\n        this.validators = [];\r\n        this._pendingValidators = [];\r\n        this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\r\n        this._resetValidationInfo();\r\n        this._eventsStrategy = new EventsStrategy(this)\r\n    },\r\n    validate() {\r\n        var result = {\r\n            isValid: true,\r\n            brokenRules: [],\r\n            validators: [],\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        this._unsubscribeFromAllChangeEvents();\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo();\r\n        each(this.validators, (_, validator) => {\r\n            var validatorResult = validator.validate();\r\n            result.isValid = result.isValid && validatorResult.isValid;\r\n            if (validatorResult.brokenRules) {\r\n                result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules)\r\n            }\r\n            result.validators.push(validator);\r\n            if (validatorResult.status === STATUS.pending) {\r\n                this._addPendingValidator(validator)\r\n            }\r\n            this._subscribeToChangeEvents(validator)\r\n        });\r\n        if (this._pendingValidators.length) {\r\n            result.status = STATUS.pending\r\n        } else {\r\n            result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n            this._unsubscribeFromAllChangeEvents();\r\n            this._raiseValidatedEvent(result)\r\n        }\r\n        this._updateValidationInfo(result);\r\n        return extend({}, this._validationInfo.result)\r\n    },\r\n    _subscribeToChangeEvents(validator) {\r\n        validator.on(\"validating\", this._onValidatorStatusChanged);\r\n        validator.on(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromChangeEvents(validator) {\r\n        validator.off(\"validating\", this._onValidatorStatusChanged);\r\n        validator.off(\"validated\", this._onValidatorStatusChanged)\r\n    },\r\n    _unsubscribeFromAllChangeEvents() {\r\n        each(this.validators, (_, validator) => {\r\n            this._unsubscribeFromChangeEvents(validator)\r\n        })\r\n    },\r\n    _updateValidationInfo(result) {\r\n        this._validationInfo.result = result;\r\n        if (result.status !== STATUS.pending) {\r\n            return\r\n        }\r\n        if (!this._validationInfo.deferred) {\r\n            this._validationInfo.deferred = new Deferred;\r\n            this._validationInfo.result.complete = this._validationInfo.deferred.promise()\r\n        }\r\n    },\r\n    _addPendingValidator(validator) {\r\n        var foundValidator = grep(this._pendingValidators, (function(val) {\r\n            return val === validator\r\n        }))[0];\r\n        if (!foundValidator) {\r\n            this._pendingValidators.push(validator)\r\n        }\r\n    },\r\n    _removePendingValidator(validator) {\r\n        var index = inArray(validator, this._pendingValidators);\r\n        if (index >= 0) {\r\n            this._pendingValidators.splice(index, 1)\r\n        }\r\n    },\r\n    _orderBrokenRules(brokenRules) {\r\n        var orderedRules = [];\r\n        each(this.validators, (function(_, validator) {\r\n            var foundRules = grep(brokenRules, (function(rule) {\r\n                return rule.validator === validator\r\n            }));\r\n            if (foundRules.length) {\r\n                orderedRules = orderedRules.concat(foundRules)\r\n            }\r\n        }));\r\n        return orderedRules\r\n    },\r\n    _updateBrokenRules(result) {\r\n        if (!this._validationInfo.result) {\r\n            return\r\n        }\r\n        var brokenRules = this._validationInfo.result.brokenRules;\r\n        var rules = grep(brokenRules, (function(rule) {\r\n            return rule.validator !== result.validator\r\n        }));\r\n        if (result.brokenRules) {\r\n            brokenRules = rules.concat(result.brokenRules)\r\n        }\r\n        this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules)\r\n    },\r\n    _onValidatorStatusChanged(result) {\r\n        if (result.status === STATUS.pending) {\r\n            this._addPendingValidator(result.validator);\r\n            return\r\n        }\r\n        this._resolveIfComplete(result)\r\n    },\r\n    _resolveIfComplete(result) {\r\n        this._removePendingValidator(result.validator);\r\n        this._updateBrokenRules(result);\r\n        if (!this._pendingValidators.length) {\r\n            this._unsubscribeFromAllChangeEvents();\r\n            if (!this._validationInfo.result) {\r\n                return\r\n            }\r\n            this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;\r\n            this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;\r\n            var res = extend({}, this._validationInfo.result, {\r\n                complete: null\r\n            });\r\n            var deferred = this._validationInfo.deferred;\r\n            this._resetValidationInfo();\r\n            this._raiseValidatedEvent(res);\r\n            deferred && setTimeout(() => {\r\n                deferred.resolve(res)\r\n            })\r\n        }\r\n    },\r\n    _raiseValidatedEvent(result) {\r\n        this._eventsStrategy.fireEvent(\"validated\", [result])\r\n    },\r\n    _resetValidationInfo() {\r\n        this._validationInfo = {\r\n            result: null,\r\n            deferred: null\r\n        }\r\n    },\r\n    _synchronizeValidationInfo() {\r\n        if (this._validationInfo.result) {\r\n            this._validationInfo.result.validators = this.validators\r\n        }\r\n    },\r\n    removeRegisteredValidator(validator) {\r\n        var index = inArray(validator, this.validators);\r\n        if (index > -1) {\r\n            this.validators.splice(index, 1);\r\n            this._synchronizeValidationInfo();\r\n            this._resolveIfComplete({\r\n                validator: validator\r\n            })\r\n        }\r\n    },\r\n    registerValidator(validator) {\r\n        if (inArray(validator, this.validators) < 0) {\r\n            this.validators.push(validator);\r\n            this._synchronizeValidationInfo()\r\n        }\r\n    },\r\n    reset() {\r\n        each(this.validators, (function(_, validator) {\r\n            validator.reset()\r\n        }));\r\n        this._pendingValidators = [];\r\n        this._resetValidationInfo()\r\n    },\r\n    on(eventName, eventHandler) {\r\n        this._eventsStrategy.on(eventName, eventHandler);\r\n        return this\r\n    },\r\n    off(eventName, eventHandler) {\r\n        this._eventsStrategy.off(eventName, eventHandler);\r\n        return this\r\n    }\r\n});\r\nvar ValidationEngine = {\r\n    groups: [],\r\n    getGroupConfig(group) {\r\n        var result = grep(this.groups, (function(config) {\r\n            return config.group === group\r\n        }));\r\n        if (result.length) {\r\n            return result[0]\r\n        }\r\n    },\r\n    findGroup($element, model) {\r\n        var $dxGroup = $element.parents(\".dx-validationgroup\").first();\r\n        if ($dxGroup.length) {\r\n            return $dxGroup.dxValidationGroup(\"instance\")\r\n        }\r\n        return model\r\n    },\r\n    initGroups() {\r\n        this.groups = [];\r\n        this.addGroup()\r\n    },\r\n    addGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        if (!config) {\r\n            config = new GroupConfig(group);\r\n            this.groups.push(config)\r\n        }\r\n        return config\r\n    },\r\n    removeGroup(group) {\r\n        var config = this.getGroupConfig(group);\r\n        var index = inArray(config, this.groups);\r\n        if (index > -1) {\r\n            this.groups.splice(index, 1)\r\n        }\r\n        return config\r\n    },\r\n    _setDefaultMessage(info) {\r\n        var {\r\n            rule: rule,\r\n            validator: validator,\r\n            name: name\r\n        } = info;\r\n        if (!isDefined(rule.message)) {\r\n            if (validator.defaultFormattedMessage && isDefined(name)) {\r\n                rule.message = validator.defaultFormattedMessage(name)\r\n            } else {\r\n                rule.message = validator.defaultMessage()\r\n            }\r\n        }\r\n    },\r\n    _addBrokenRule(info) {\r\n        var {\r\n            result: result,\r\n            rule: rule\r\n        } = info;\r\n        if (!result.brokenRule) {\r\n            result.brokenRule = rule\r\n        }\r\n        if (!result.brokenRules) {\r\n            result.brokenRules = []\r\n        }\r\n        result.brokenRules.push(rule)\r\n    },\r\n    validate(value, rules, name) {\r\n        var result = {\r\n            name: name,\r\n            value: value,\r\n            brokenRule: null,\r\n            brokenRules: null,\r\n            isValid: true,\r\n            validationRules: rules,\r\n            pendingRules: null,\r\n            status: STATUS.valid,\r\n            complete: null\r\n        };\r\n        var asyncRuleItems = [];\r\n        each(rules || [], (_, rule) => {\r\n            var ruleValidator = rulesValidators[rule.type];\r\n            var ruleValidationResult;\r\n            if (ruleValidator) {\r\n                if (isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\r\n                    if (!rule.isValid) {\r\n                        result.isValid = false;\r\n                        this._addBrokenRule({\r\n                            result: result,\r\n                            rule: rule\r\n                        });\r\n                        return false\r\n                    }\r\n                    return true\r\n                }\r\n                rule.value = value;\r\n                if (\"async\" === rule.type) {\r\n                    asyncRuleItems.push({\r\n                        rule: rule,\r\n                        ruleValidator: ruleValidator\r\n                    });\r\n                    return true\r\n                }\r\n                ruleValidationResult = ruleValidator.validate(value, rule);\r\n                rule.isValid = ruleValidationResult;\r\n                if (!ruleValidationResult) {\r\n                    result.isValid = false;\r\n                    this._setDefaultMessage({\r\n                        rule: rule,\r\n                        validator: ruleValidator,\r\n                        name: name\r\n                    });\r\n                    this._addBrokenRule({\r\n                        result: result,\r\n                        rule: rule\r\n                    })\r\n                }\r\n                if (!rule.isValid) {\r\n                    return false\r\n                }\r\n            } else {\r\n                throw errors.Error(\"E0100\")\r\n            }\r\n        });\r\n        if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\r\n            result = this._validateAsyncRules({\r\n                value: value,\r\n                items: asyncRuleItems,\r\n                result: result,\r\n                name: name\r\n            })\r\n        }\r\n        result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    _validateAsyncRules(_ref) {\r\n        var {\r\n            result: result,\r\n            value: value,\r\n            items: items,\r\n            name: name\r\n        } = _ref;\r\n        var asyncResults = [];\r\n        each(items, (_, item) => {\r\n            var validateResult = item.ruleValidator.validate(value, item.rule);\r\n            if (!isPromise(validateResult)) {\r\n                this._updateRuleConfig({\r\n                    rule: item.rule,\r\n                    ruleResult: this._getPatchedRuleResult(validateResult),\r\n                    validator: item.ruleValidator,\r\n                    name: name\r\n                })\r\n            } else {\r\n                if (!result.pendingRules) {\r\n                    result.pendingRules = []\r\n                }\r\n                result.pendingRules.push(item.rule);\r\n                var asyncResult = validateResult.then(res => {\r\n                    var ruleResult = this._getPatchedRuleResult(res);\r\n                    this._updateRuleConfig({\r\n                        rule: item.rule,\r\n                        ruleResult: ruleResult,\r\n                        validator: item.ruleValidator,\r\n                        name: name\r\n                    });\r\n                    return ruleResult\r\n                });\r\n                asyncResults.push(asyncResult)\r\n            }\r\n        });\r\n        if (asyncResults.length) {\r\n            result.complete = Promise.all(asyncResults).then(values => this._getAsyncRulesResult({\r\n                result: result,\r\n                values: values\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _updateRuleConfig(_ref2) {\r\n        var {\r\n            rule: rule,\r\n            ruleResult: ruleResult,\r\n            validator: validator,\r\n            name: name\r\n        } = _ref2;\r\n        rule.isValid = ruleResult.isValid;\r\n        if (!ruleResult.isValid) {\r\n            if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {\r\n                rule.message = ruleResult.message\r\n            } else {\r\n                this._setDefaultMessage({\r\n                    rule: rule,\r\n                    validator: validator,\r\n                    name: name\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _getPatchedRuleResult(ruleResult) {\r\n        var result;\r\n        if (isObject(ruleResult)) {\r\n            result = extend({}, ruleResult);\r\n            if (!isDefined(result.isValid)) {\r\n                result.isValid = true\r\n            }\r\n        } else {\r\n            result = {\r\n                isValid: isBoolean(ruleResult) ? ruleResult : true\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _getAsyncRulesResult(_ref3) {\r\n        var {\r\n            values: values,\r\n            result: result\r\n        } = _ref3;\r\n        each(values, (index, val) => {\r\n            if (false === val.isValid) {\r\n                result.isValid = val.isValid;\r\n                var rule = result.pendingRules[index];\r\n                this._addBrokenRule({\r\n                    result: result,\r\n                    rule: rule\r\n                })\r\n            }\r\n        });\r\n        result.pendingRules = null;\r\n        result.complete = null;\r\n        result.status = result.isValid ? STATUS.valid : STATUS.invalid;\r\n        return result\r\n    },\r\n    registerValidatorInGroup(group, validator) {\r\n        var groupConfig = ValidationEngine.addGroup(group);\r\n        groupConfig.registerValidator.call(groupConfig, validator)\r\n    },\r\n    _shouldRemoveGroup(group, validatorsInGroup) {\r\n        var isDefaultGroup = void 0 === group;\r\n        var isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\r\n        return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length\r\n    },\r\n    removeRegisteredValidator(group, validator) {\r\n        var config = ValidationEngine.getGroupConfig(group);\r\n        if (config) {\r\n            config.removeRegisteredValidator.call(config, validator);\r\n            var validatorsInGroup = config.validators;\r\n            if (this._shouldRemoveGroup(group, validatorsInGroup)) {\r\n                this.removeGroup(group)\r\n            }\r\n        }\r\n    },\r\n    initValidationOptions(options) {\r\n        var initedOptions = {};\r\n        if (options) {\r\n            [\"isValid\", \"validationStatus\", \"validationError\", \"validationErrors\"].forEach(prop => {\r\n                if (prop in options) {\r\n                    extend(initedOptions, this.synchronizeValidationOptions({\r\n                        name: prop,\r\n                        value: options[prop]\r\n                    }, options))\r\n                }\r\n            })\r\n        }\r\n        return initedOptions\r\n    },\r\n    synchronizeValidationOptions(_ref4, options) {\r\n        var {\r\n            name: name,\r\n            value: value\r\n        } = _ref4;\r\n        switch (name) {\r\n            case \"validationStatus\":\r\n                var isValid = value === STATUS.valid || value === STATUS.pending;\r\n                return options.isValid !== isValid ? {\r\n                    isValid: isValid\r\n                } : {};\r\n            case \"isValid\":\r\n                var {\r\n                    validationStatus: validationStatus\r\n                } = options;\r\n                var newStatus = validationStatus;\r\n                if (value && validationStatus === STATUS.invalid) {\r\n                    newStatus = STATUS.valid\r\n                } else if (!value && validationStatus !== STATUS.invalid) {\r\n                    newStatus = STATUS.invalid\r\n                }\r\n                return newStatus !== validationStatus ? {\r\n                    validationStatus: newStatus\r\n                } : {};\r\n            case \"validationErrors\":\r\n                var validationError = !value || !value.length ? null : value[0];\r\n                return options.validationError !== validationError ? {\r\n                    validationError: validationError\r\n                } : {};\r\n            case \"validationError\":\r\n                var {\r\n                    validationErrors: validationErrors\r\n                } = options;\r\n                if (!value && validationErrors) {\r\n                    return {\r\n                        validationErrors: null\r\n                    }\r\n                } else if (value && !validationErrors) {\r\n                    return {\r\n                        validationErrors: [value]\r\n                    }\r\n                } else if (value && validationErrors && value !== validationErrors[0]) {\r\n                    validationErrors[0] = value;\r\n                    return {\r\n                        validationErrors: validationErrors.slice()\r\n                    }\r\n                }\r\n        }\r\n        return {}\r\n    },\r\n    validateGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.validate()\r\n    },\r\n    resetGroup(group) {\r\n        var groupConfig = ValidationEngine.getGroupConfig(group);\r\n        if (!groupConfig) {\r\n            throw errors.Error(\"E0110\")\r\n        }\r\n        return groupConfig.reset()\r\n    }\r\n};\r\nValidationEngine.initGroups();\r\nexport default ValidationEngine;\r\n"]},"metadata":{},"sourceType":"module"}