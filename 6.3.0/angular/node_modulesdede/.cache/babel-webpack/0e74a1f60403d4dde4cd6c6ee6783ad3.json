{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/number_box/number_box.spins.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\nimport SpinButton from \"./number_box.spin\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport pointer from \"../../events/pointer\";\nimport { extend } from \"../../core/utils/extend\";\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\n\nvar SpinButtons = /*#__PURE__*/function (_TextEditorButton) {\n  _inherits(SpinButtons, _TextEditorButton);\n\n  var _super = _createSuper(SpinButtons);\n\n  function SpinButtons() {\n    _classCallCheck(this, SpinButtons);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpinButtons, [{\n    key: \"_attachEvents\",\n    value: function _attachEvents(instance, $spinContainer) {\n      var editor = this.editor;\n      var eventName = addNamespace(pointer.down, editor.NAME);\n      var $spinContainerChildren = $spinContainer.children();\n\n      var pointerDownAction = editor._createAction(function (e) {\n        return editor._spinButtonsPointerDownHandler(e);\n      });\n\n      eventsEngine.off($spinContainer, eventName);\n      eventsEngine.on($spinContainer, eventName, function (e) {\n        return pointerDownAction({\n          event: e\n        });\n      });\n      SpinButton.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", function (e) {\n        return editor._spinUpChangeHandler(e);\n      });\n      SpinButton.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", function (e) {\n        return editor._spinDownChangeHandler(e);\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      var editor = this.editor;\n      var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n      var $spinUp = $(\"<div>\").appendTo($spinContainer);\n      var $spinDown = $(\"<div>\").appendTo($spinContainer);\n\n      var options = this._getOptions();\n\n      this._addToContainer($spinContainer);\n\n      editor._createComponent($spinUp, SpinButton, extend({\n        direction: \"up\"\n      }, options));\n\n      editor._createComponent($spinDown, SpinButton, extend({\n        direction: \"down\"\n      }, options));\n\n      this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n\n      return {\n        instance: $spinContainer,\n        $element: $spinContainer\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function _getOptions() {\n      var editor = this.editor;\n\n      var visible = this._isVisible();\n\n      var disabled = editor.option(\"disabled\");\n      return {\n        visible: visible,\n        disabled: disabled\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var editor = this.editor;\n      return _get(_getPrototypeOf(SpinButtons.prototype), \"_isVisible\", this).call(this) && editor.option(\"showSpinButtons\");\n    }\n  }, {\n    key: \"_isTouchFriendly\",\n    value: function _isTouchFriendly() {\n      var editor = this.editor;\n      return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function _legacyRender($editor, isTouchFriendly, isVisible) {\n      $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n      $editor.toggleClass(SPIN_CLASS, isVisible);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var shouldUpdate = _get(_getPrototypeOf(SpinButtons.prototype), \"update\", this).call(this);\n\n      if (shouldUpdate) {\n        var editor = this.editor,\n            instance = this.instance;\n        var $editor = editor.$element();\n\n        var isVisible = this._isVisible();\n\n        var isTouchFriendly = this._isTouchFriendly();\n\n        var $spinButtons = instance.children();\n        var spinUp = SpinButton.getInstance($spinButtons.eq(0));\n        var spinDown = SpinButton.getInstance($spinButtons.eq(1));\n\n        var options = this._getOptions();\n\n        spinUp.option(options);\n        spinDown.option(options);\n\n        this._legacyRender($editor, isTouchFriendly, isVisible);\n      }\n    }\n  }]);\n\n  return SpinButtons;\n}(TextEditorButton);\n\nexport { SpinButtons as default };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/number_box/number_box.spins.js"],"names":["$","eventsEngine","TextEditorButton","SpinButton","addNamespace","pointer","extend","SPIN_CLASS","SPIN_CONTAINER_CLASS","SPIN_TOUCH_FRIENDLY_CLASS","SpinButtons","instance","$spinContainer","editor","eventName","down","NAME","$spinContainerChildren","children","pointerDownAction","_createAction","e","_spinButtonsPointerDownHandler","off","on","event","getInstance","eq","option","_spinUpChangeHandler","_spinDownChangeHandler","addClass","$spinUp","appendTo","$spinDown","options","_getOptions","_addToContainer","_createComponent","direction","_legacyRender","$element","_isTouchFriendly","visible","_isVisible","disabled","$editor","isTouchFriendly","isVisible","toggleClass","shouldUpdate","$spinButtons","spinUp","spinDown"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/number_box/number_box.spins.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\r\nimport SpinButton from \"./number_box.spin\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport pointer from \"../../events/pointer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nvar SPIN_CLASS = \"dx-numberbox-spin\";\r\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\r\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\r\nexport default class SpinButtons extends TextEditorButton {\r\n    _attachEvents(instance, $spinContainer) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        var eventName = addNamespace(pointer.down, editor.NAME);\r\n        var $spinContainerChildren = $spinContainer.children();\r\n        var pointerDownAction = editor._createAction(e => editor._spinButtonsPointerDownHandler(e));\r\n        eventsEngine.off($spinContainer, eventName);\r\n        eventsEngine.on($spinContainer, eventName, e => pointerDownAction({\r\n            event: e\r\n        }));\r\n        SpinButton.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", e => editor._spinUpChangeHandler(e));\r\n        SpinButton.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", e => editor._spinDownChangeHandler(e))\r\n    }\r\n    _create() {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\r\n        var $spinUp = $(\"<div>\").appendTo($spinContainer);\r\n        var $spinDown = $(\"<div>\").appendTo($spinContainer);\r\n        var options = this._getOptions();\r\n        this._addToContainer($spinContainer);\r\n        editor._createComponent($spinUp, SpinButton, extend({\r\n            direction: \"up\"\r\n        }, options));\r\n        editor._createComponent($spinDown, SpinButton, extend({\r\n            direction: \"down\"\r\n        }, options));\r\n        this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\r\n        return {\r\n            instance: $spinContainer,\r\n            $element: $spinContainer\r\n        }\r\n    }\r\n    _getOptions() {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        var visible = this._isVisible();\r\n        var disabled = editor.option(\"disabled\");\r\n        return {\r\n            visible: visible,\r\n            disabled: disabled\r\n        }\r\n    }\r\n    _isVisible() {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        return super._isVisible() && editor.option(\"showSpinButtons\")\r\n    }\r\n    _isTouchFriendly() {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\")\r\n    }\r\n    _legacyRender($editor, isTouchFriendly, isVisible) {\r\n        $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\r\n        $editor.toggleClass(SPIN_CLASS, isVisible)\r\n    }\r\n    update() {\r\n        var shouldUpdate = super.update();\r\n        if (shouldUpdate) {\r\n            var {\r\n                editor: editor,\r\n                instance: instance\r\n            } = this;\r\n            var $editor = editor.$element();\r\n            var isVisible = this._isVisible();\r\n            var isTouchFriendly = this._isTouchFriendly();\r\n            var $spinButtons = instance.children();\r\n            var spinUp = SpinButton.getInstance($spinButtons.eq(0));\r\n            var spinDown = SpinButton.getInstance($spinButtons.eq(1));\r\n            var options = this._getOptions();\r\n            spinUp.option(options);\r\n            spinDown.option(options);\r\n            this._legacyRender($editor, isTouchFriendly, isVisible)\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}