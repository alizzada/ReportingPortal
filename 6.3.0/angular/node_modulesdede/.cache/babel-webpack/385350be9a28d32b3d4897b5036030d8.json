{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/splitter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Widget from \"./widget/ui.widget\";\nimport domAdapter from \"../core/dom_adapter\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport pointerEvents from \"../events/pointer\";\nimport { getWindow } from \"../core/utils/window\";\nimport { addNamespace } from \"../events/utils/index\";\nvar window = getWindow();\nvar SPLITTER_CLASS = \"dx-splitter\";\nvar SPLITTER_WRAPPER_CLASS = \"\".concat(SPLITTER_CLASS, \"-wrapper\");\nvar SPLITTER_INACTIVE_CLASS = \"\".concat(SPLITTER_CLASS, \"-inactive\");\nvar SPLITTER_BORDER_CLASS = \"\".concat(SPLITTER_CLASS, \"-border\");\nvar SPLITTER_INITIAL_STATE_CLASS = \"\".concat(SPLITTER_CLASS, \"-initial\");\nvar STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar SPLITTER_MODULE_NAMESPACE = \"dxSplitterResizing\";\nvar SPLITTER_POINTER_DOWN_EVENT_NAME = addNamespace(pointerEvents.down, SPLITTER_MODULE_NAMESPACE);\nvar SPLITTER_POINTER_MOVE_EVENT_NAME = addNamespace(pointerEvents.move, SPLITTER_MODULE_NAMESPACE);\nvar SPLITTER_POINTER_UP_EVENT_NAME = addNamespace(pointerEvents.up, SPLITTER_MODULE_NAMESPACE);\n\nvar SplitterControl = /*#__PURE__*/function (_Widget) {\n  _inherits(SplitterControl, _Widget);\n\n  var _super = _createSuper(SplitterControl);\n\n  function SplitterControl() {\n    _classCallCheck(this, SplitterControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SplitterControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._$container = this.option(\"container\");\n      this._$leftElement = this.option(\"leftElement\");\n      this._$rightElement = this.option(\"rightElement\");\n      this.$element().addClass(SPLITTER_WRAPPER_CLASS).addClass(SPLITTER_INITIAL_STATE_CLASS);\n      this._$splitterBorder = $(\"<div>\").addClass(SPLITTER_BORDER_CLASS).appendTo(this.$element());\n      this._$splitter = $(\"<div>\").addClass(SPLITTER_CLASS).addClass(SPLITTER_INACTIVE_CLASS).appendTo(this._$splitterBorder);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onApplyPanelSize: this._createActionByOption(\"onApplyPanelSize\"),\n        onActiveStateChanged: this._createActionByOption(\"onActiveStateChanged\")\n      };\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_render\", this).call(this);\n\n      this._detachEventHandlers();\n\n      this._attachEventHandlers();\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._detachEventHandlers();\n\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_attachEventHandlers\",\n    value: function _attachEventHandlers() {\n      var document = domAdapter.getDocument();\n      eventsEngine.on(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME, this._onMouseDownHandler.bind(this));\n      eventsEngine.on(document, SPLITTER_POINTER_MOVE_EVENT_NAME, this._onMouseMoveHandler.bind(this));\n      eventsEngine.on(document, SPLITTER_POINTER_UP_EVENT_NAME, this._onMouseUpHandler.bind(this));\n    }\n  }, {\n    key: \"_detachEventHandlers\",\n    value: function _detachEventHandlers() {\n      var document = domAdapter.getDocument();\n      eventsEngine.off(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME);\n      eventsEngine.off(document, SPLITTER_POINTER_MOVE_EVENT_NAME);\n      eventsEngine.off(document, SPLITTER_POINTER_UP_EVENT_NAME);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._containerWidth = this._$container.get(0).clientWidth;\n\n        this._setSplitterPositionLeft({\n          needUpdatePanels: true,\n          usePercentagePanelsWidth: true\n        });\n      }\n    }\n  }, {\n    key: \"_onMouseDownHandler\",\n    value: function _onMouseDownHandler(e) {\n      e.preventDefault();\n      this._offsetX = e.pageX - this._$splitterBorder.offset().left <= this._getSplitterBorderWidth() ? e.pageX - this._$splitterBorder.offset().left : 0;\n      this._containerWidth = this._$container.get(0).clientWidth;\n      this.$element().removeClass(SPLITTER_INITIAL_STATE_CLASS);\n\n      this._toggleActive(true);\n\n      this._setSplitterPositionLeft({\n        needUpdatePanels: true\n      });\n    }\n  }, {\n    key: \"_onMouseMoveHandler\",\n    value: function _onMouseMoveHandler(e) {\n      if (!this._isSplitterActive) {\n        return;\n      }\n\n      this._setSplitterPositionLeft({\n        splitterPositionLeft: this._getNewSplitterPositionLeft(e),\n        needUpdatePanels: true\n      });\n    }\n  }, {\n    key: \"_onMouseUpHandler\",\n    value: function _onMouseUpHandler() {\n      if (!this._isSplitterActive) {\n        return;\n      }\n\n      this._leftPanelPercentageWidth = null;\n\n      this._toggleActive(false);\n\n      this._setSplitterPositionLeft({\n        needUpdatePanels: true,\n        usePercentagePanelsWidth: true\n      });\n    }\n  }, {\n    key: \"_getNewSplitterPositionLeft\",\n    value: function _getNewSplitterPositionLeft(e) {\n      var newSplitterPositionLeft = e.pageX - this._getContainerLeftOffset() - this._offsetX;\n\n      newSplitterPositionLeft = Math.max(0 - this._getSplitterOffset(), newSplitterPositionLeft);\n      newSplitterPositionLeft = Math.min(this._containerWidth - this._getSplitterOffset() - this._getSplitterWidth(), newSplitterPositionLeft);\n      return newSplitterPositionLeft;\n    }\n  }, {\n    key: \"_getContainerLeftOffset\",\n    value: function _getContainerLeftOffset() {\n      var offsetLeft = this._$container.offset().left;\n\n      if (window) {\n        var style = window.getComputedStyle(this._$container.get(0));\n        var paddingLeft = parseFloat(style.paddingLeft) || 0;\n        var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n        offsetLeft += paddingLeft + borderLeft;\n      }\n\n      return offsetLeft;\n    }\n  }, {\n    key: \"_getSplitterOffset\",\n    value: function _getSplitterOffset() {\n      return (this._getSplitterBorderWidth() - this._getSplitterWidth()) / 2;\n    }\n  }, {\n    key: \"_getSplitterWidth\",\n    value: function _getSplitterWidth() {\n      return this._$splitter.get(0).clientWidth;\n    }\n  }, {\n    key: \"_getSplitterBorderWidth\",\n    value: function _getSplitterBorderWidth() {\n      return this._$splitterBorder.get(0).clientWidth;\n    }\n  }, {\n    key: \"_getLeftPanelWidth\",\n    value: function _getLeftPanelWidth() {\n      return this._$leftElement.get(0).clientWidth;\n    }\n  }, {\n    key: \"_toggleActive\",\n    value: function _toggleActive(isActive) {\n      this.$element().toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n\n      this._$splitter.toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n\n      this._isSplitterActive = isActive;\n\n      this._actions.onActiveStateChanged({\n        isActive: isActive\n      });\n    }\n  }, {\n    key: \"toggleDisabled\",\n    value: function toggleDisabled(isDisabled) {\n      this.$element().toggleClass(STATE_DISABLED_CLASS, isDisabled);\n\n      this._$splitter.toggleClass(STATE_DISABLED_CLASS, isDisabled);\n    }\n  }, {\n    key: \"isSplitterMoved\",\n    value: function isSplitterMoved() {\n      return !this.$element().hasClass(SPLITTER_INITIAL_STATE_CLASS);\n    }\n  }, {\n    key: \"disableSplitterCalculation\",\n    value: function disableSplitterCalculation(value) {\n      this._isSplitterCalculationDisabled = value;\n    }\n  }, {\n    key: \"_setSplitterPositionLeft\",\n    value: function _setSplitterPositionLeft() {\n      var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n          _ref$splitterPosition = _ref.splitterPositionLeft,\n          splitterPositionLeft = _ref$splitterPosition === void 0 ? null : _ref$splitterPosition,\n          _ref$needUpdatePanels = _ref.needUpdatePanels,\n          needUpdatePanels = _ref$needUpdatePanels === void 0 ? false : _ref$needUpdatePanels,\n          _ref$usePercentagePan = _ref.usePercentagePanelsWidth,\n          usePercentagePanelsWidth = _ref$usePercentagePan === void 0 ? false : _ref$usePercentagePan;\n\n      splitterPositionLeft = splitterPositionLeft || this._getLeftPanelWidth() - this._getSplitterOffset();\n\n      var leftPanelWidth = splitterPositionLeft + this._getSplitterOffset();\n\n      var rightPanelWidth = this._containerWidth - leftPanelWidth;\n\n      if (!this._isSplitterCalculationDisabled) {\n        this.$element().css(\"left\", splitterPositionLeft);\n      }\n\n      this._leftPanelPercentageWidth = this._leftPanelPercentageWidth || this._convertToPercentage(leftPanelWidth);\n\n      var rightPanelPercentageWidth = this._convertToPercentage(this._containerWidth - this._convertToPixels(this._leftPanelPercentageWidth));\n\n      if (!needUpdatePanels) {\n        return;\n      }\n\n      this._actions.onApplyPanelSize({\n        leftPanelWidth: usePercentagePanelsWidth ? \"\".concat(this._leftPanelPercentageWidth, \"%\") : leftPanelWidth,\n        rightPanelWidth: usePercentagePanelsWidth ? \"\".concat(rightPanelPercentageWidth, \"%\") : rightPanelWidth\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"initialLeftPanelWidth\":\n          this._leftPanelPercentageWidth = this._convertToPercentage(args.value);\n\n          this._dimensionChanged();\n\n          break;\n\n        case \"leftElement\":\n          this.repaint();\n          break;\n\n        case \"onActiveStateChanged\":\n        case \"onApplyPanelSize\":\n          this._actions[args.name] = this._createActionByOption(args.name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(SplitterControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_convertToPercentage\",\n    value: function _convertToPercentage(pixelWidth) {\n      return pixelWidth / this._$container.get(0).clientWidth * 100;\n    }\n  }, {\n    key: \"_convertToPixels\",\n    value: function _convertToPixels(percentageWidth) {\n      return percentageWidth / 100 * this._$container.get(0).clientWidth;\n    }\n  }]);\n\n  return SplitterControl;\n}(Widget);\n\nexport { SplitterControl as default };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/splitter.js"],"names":["$","Widget","domAdapter","eventsEngine","pointerEvents","getWindow","addNamespace","window","SPLITTER_CLASS","SPLITTER_WRAPPER_CLASS","concat","SPLITTER_INACTIVE_CLASS","SPLITTER_BORDER_CLASS","SPLITTER_INITIAL_STATE_CLASS","STATE_DISABLED_CLASS","SPLITTER_MODULE_NAMESPACE","SPLITTER_POINTER_DOWN_EVENT_NAME","down","SPLITTER_POINTER_MOVE_EVENT_NAME","move","SPLITTER_POINTER_UP_EVENT_NAME","up","SplitterControl","_initActions","_$container","option","_$leftElement","_$rightElement","$element","addClass","_$splitterBorder","appendTo","_$splitter","_actions","onApplyPanelSize","_createActionByOption","onActiveStateChanged","_detachEventHandlers","_attachEventHandlers","document","getDocument","on","_onMouseDownHandler","bind","_onMouseMoveHandler","_onMouseUpHandler","off","dimension","_containerWidth","get","clientWidth","_setSplitterPositionLeft","needUpdatePanels","usePercentagePanelsWidth","e","preventDefault","_offsetX","pageX","offset","left","_getSplitterBorderWidth","removeClass","_toggleActive","_isSplitterActive","splitterPositionLeft","_getNewSplitterPositionLeft","_leftPanelPercentageWidth","newSplitterPositionLeft","_getContainerLeftOffset","Math","max","_getSplitterOffset","min","_getSplitterWidth","offsetLeft","style","getComputedStyle","paddingLeft","parseFloat","borderLeft","borderLeftWidth","isActive","toggleClass","isDisabled","hasClass","value","_isSplitterCalculationDisabled","arguments","length","_getLeftPanelWidth","leftPanelWidth","rightPanelWidth","css","_convertToPercentage","rightPanelPercentageWidth","_convertToPixels","args","name","_dimensionChanged","repaint","pixelWidth","percentageWidth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/splitter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../core/renderer\";\r\nimport Widget from \"./widget/ui.widget\";\r\nimport domAdapter from \"../core/dom_adapter\";\r\nimport eventsEngine from \"../events/core/events_engine\";\r\nimport pointerEvents from \"../events/pointer\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport {\r\n    addNamespace\r\n} from \"../events/utils/index\";\r\nvar window = getWindow();\r\nvar SPLITTER_CLASS = \"dx-splitter\";\r\nvar SPLITTER_WRAPPER_CLASS = \"\".concat(SPLITTER_CLASS, \"-wrapper\");\r\nvar SPLITTER_INACTIVE_CLASS = \"\".concat(SPLITTER_CLASS, \"-inactive\");\r\nvar SPLITTER_BORDER_CLASS = \"\".concat(SPLITTER_CLASS, \"-border\");\r\nvar SPLITTER_INITIAL_STATE_CLASS = \"\".concat(SPLITTER_CLASS, \"-initial\");\r\nvar STATE_DISABLED_CLASS = \"dx-state-disabled\";\r\nvar SPLITTER_MODULE_NAMESPACE = \"dxSplitterResizing\";\r\nvar SPLITTER_POINTER_DOWN_EVENT_NAME = addNamespace(pointerEvents.down, SPLITTER_MODULE_NAMESPACE);\r\nvar SPLITTER_POINTER_MOVE_EVENT_NAME = addNamespace(pointerEvents.move, SPLITTER_MODULE_NAMESPACE);\r\nvar SPLITTER_POINTER_UP_EVENT_NAME = addNamespace(pointerEvents.up, SPLITTER_MODULE_NAMESPACE);\r\nexport default class SplitterControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._$container = this.option(\"container\");\r\n        this._$leftElement = this.option(\"leftElement\");\r\n        this._$rightElement = this.option(\"rightElement\");\r\n        this.$element().addClass(SPLITTER_WRAPPER_CLASS).addClass(SPLITTER_INITIAL_STATE_CLASS);\r\n        this._$splitterBorder = $(\"<div>\").addClass(SPLITTER_BORDER_CLASS).appendTo(this.$element());\r\n        this._$splitter = $(\"<div>\").addClass(SPLITTER_CLASS).addClass(SPLITTER_INACTIVE_CLASS).appendTo(this._$splitterBorder)\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onApplyPanelSize: this._createActionByOption(\"onApplyPanelSize\"),\r\n            onActiveStateChanged: this._createActionByOption(\"onActiveStateChanged\")\r\n        }\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._detachEventHandlers();\r\n        this._attachEventHandlers()\r\n    }\r\n    _clean() {\r\n        this._detachEventHandlers();\r\n        super._clean()\r\n    }\r\n    _attachEventHandlers() {\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.on(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME, this._onMouseDownHandler.bind(this));\r\n        eventsEngine.on(document, SPLITTER_POINTER_MOVE_EVENT_NAME, this._onMouseMoveHandler.bind(this));\r\n        eventsEngine.on(document, SPLITTER_POINTER_UP_EVENT_NAME, this._onMouseUpHandler.bind(this))\r\n    }\r\n    _detachEventHandlers() {\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.off(this._$splitterBorder, SPLITTER_POINTER_DOWN_EVENT_NAME);\r\n        eventsEngine.off(document, SPLITTER_POINTER_MOVE_EVENT_NAME);\r\n        eventsEngine.off(document, SPLITTER_POINTER_UP_EVENT_NAME)\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!dimension || \"height\" !== dimension) {\r\n            this._containerWidth = this._$container.get(0).clientWidth;\r\n            this._setSplitterPositionLeft({\r\n                needUpdatePanels: true,\r\n                usePercentagePanelsWidth: true\r\n            })\r\n        }\r\n    }\r\n    _onMouseDownHandler(e) {\r\n        e.preventDefault();\r\n        this._offsetX = e.pageX - this._$splitterBorder.offset().left <= this._getSplitterBorderWidth() ? e.pageX - this._$splitterBorder.offset().left : 0;\r\n        this._containerWidth = this._$container.get(0).clientWidth;\r\n        this.$element().removeClass(SPLITTER_INITIAL_STATE_CLASS);\r\n        this._toggleActive(true);\r\n        this._setSplitterPositionLeft({\r\n            needUpdatePanels: true\r\n        })\r\n    }\r\n    _onMouseMoveHandler(e) {\r\n        if (!this._isSplitterActive) {\r\n            return\r\n        }\r\n        this._setSplitterPositionLeft({\r\n            splitterPositionLeft: this._getNewSplitterPositionLeft(e),\r\n            needUpdatePanels: true\r\n        })\r\n    }\r\n    _onMouseUpHandler() {\r\n        if (!this._isSplitterActive) {\r\n            return\r\n        }\r\n        this._leftPanelPercentageWidth = null;\r\n        this._toggleActive(false);\r\n        this._setSplitterPositionLeft({\r\n            needUpdatePanels: true,\r\n            usePercentagePanelsWidth: true\r\n        })\r\n    }\r\n    _getNewSplitterPositionLeft(e) {\r\n        var newSplitterPositionLeft = e.pageX - this._getContainerLeftOffset() - this._offsetX;\r\n        newSplitterPositionLeft = Math.max(0 - this._getSplitterOffset(), newSplitterPositionLeft);\r\n        newSplitterPositionLeft = Math.min(this._containerWidth - this._getSplitterOffset() - this._getSplitterWidth(), newSplitterPositionLeft);\r\n        return newSplitterPositionLeft\r\n    }\r\n    _getContainerLeftOffset() {\r\n        var offsetLeft = this._$container.offset().left;\r\n        if (window) {\r\n            var style = window.getComputedStyle(this._$container.get(0));\r\n            var paddingLeft = parseFloat(style.paddingLeft) || 0;\r\n            var borderLeft = parseFloat(style.borderLeftWidth) || 0;\r\n            offsetLeft += paddingLeft + borderLeft\r\n        }\r\n        return offsetLeft\r\n    }\r\n    _getSplitterOffset() {\r\n        return (this._getSplitterBorderWidth() - this._getSplitterWidth()) / 2\r\n    }\r\n    _getSplitterWidth() {\r\n        return this._$splitter.get(0).clientWidth\r\n    }\r\n    _getSplitterBorderWidth() {\r\n        return this._$splitterBorder.get(0).clientWidth\r\n    }\r\n    _getLeftPanelWidth() {\r\n        return this._$leftElement.get(0).clientWidth\r\n    }\r\n    _toggleActive(isActive) {\r\n        this.$element().toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\r\n        this._$splitter.toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\r\n        this._isSplitterActive = isActive;\r\n        this._actions.onActiveStateChanged({\r\n            isActive: isActive\r\n        })\r\n    }\r\n    toggleDisabled(isDisabled) {\r\n        this.$element().toggleClass(STATE_DISABLED_CLASS, isDisabled);\r\n        this._$splitter.toggleClass(STATE_DISABLED_CLASS, isDisabled)\r\n    }\r\n    isSplitterMoved() {\r\n        return !this.$element().hasClass(SPLITTER_INITIAL_STATE_CLASS)\r\n    }\r\n    disableSplitterCalculation(value) {\r\n        this._isSplitterCalculationDisabled = value\r\n    }\r\n    _setSplitterPositionLeft() {\r\n        var {\r\n            splitterPositionLeft: splitterPositionLeft = null,\r\n            needUpdatePanels: needUpdatePanels = false,\r\n            usePercentagePanelsWidth: usePercentagePanelsWidth = false\r\n        } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\r\n        splitterPositionLeft = splitterPositionLeft || this._getLeftPanelWidth() - this._getSplitterOffset();\r\n        var leftPanelWidth = splitterPositionLeft + this._getSplitterOffset();\r\n        var rightPanelWidth = this._containerWidth - leftPanelWidth;\r\n        if (!this._isSplitterCalculationDisabled) {\r\n            this.$element().css(\"left\", splitterPositionLeft)\r\n        }\r\n        this._leftPanelPercentageWidth = this._leftPanelPercentageWidth || this._convertToPercentage(leftPanelWidth);\r\n        var rightPanelPercentageWidth = this._convertToPercentage(this._containerWidth - this._convertToPixels(this._leftPanelPercentageWidth));\r\n        if (!needUpdatePanels) {\r\n            return\r\n        }\r\n        this._actions.onApplyPanelSize({\r\n            leftPanelWidth: usePercentagePanelsWidth ? \"\".concat(this._leftPanelPercentageWidth, \"%\") : leftPanelWidth,\r\n            rightPanelWidth: usePercentagePanelsWidth ? \"\".concat(rightPanelPercentageWidth, \"%\") : rightPanelWidth\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"initialLeftPanelWidth\":\r\n                this._leftPanelPercentageWidth = this._convertToPercentage(args.value);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"leftElement\":\r\n                this.repaint();\r\n                break;\r\n            case \"onActiveStateChanged\":\r\n            case \"onApplyPanelSize\":\r\n                this._actions[args.name] = this._createActionByOption(args.name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _convertToPercentage(pixelWidth) {\r\n        return pixelWidth / this._$container.get(0).clientWidth * 100\r\n    }\r\n    _convertToPixels(percentageWidth) {\r\n        return percentageWidth / 100 * this._$container.get(0).clientWidth\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}