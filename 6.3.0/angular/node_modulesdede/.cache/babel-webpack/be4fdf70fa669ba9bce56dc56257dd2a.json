{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.export.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Class from \"../../core/class\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport formatHelper from \"../../format_helper\";\nimport localizationNumber from \"../../localization/number\";\nimport { excel as excelExporter, export as exportMethod } from \"../../exporter\";\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DEFAULT_DATA_TYPE = \"string\";\nvar DEFAUL_COLUMN_WIDTH = 100;\nexport var ExportMixin = extend({}, exportMixin, {\n  exportToExcel: function exportToExcel() {\n    exportMethod(this.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      proxyUrl: this.option(\"export.proxyUrl\"),\n      format: \"EXCEL\",\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\n      exportingAction: this._actions.onExporting,\n      exportedAction: this._actions.onExported,\n      fileSavingAction: this._actions.onFileSaving\n    }, excelExporter.getData);\n  },\n  _getLength: function _getLength(items) {\n    var i;\n    var itemCount = items[0].length;\n    var cellCount = 0;\n\n    for (i = 0; i < itemCount; i++) {\n      cellCount += items[0][i].colspan || 1;\n    }\n\n    return cellCount;\n  },\n  _correctCellsInfoItemLengths: function _correctCellsInfoItemLengths(cellsInfo, expectedLength) {\n    for (var i = 0; i < cellsInfo.length; i++) {\n      while (cellsInfo[i].length < expectedLength) {\n        cellsInfo[i].push({});\n      }\n    }\n\n    return cellsInfo;\n  },\n  _calculateCellInfoItemLength: function _calculateCellInfoItemLength(columnsRow) {\n    var result = 0;\n\n    for (var columnIndex = 0; columnIndex < columnsRow.length; columnIndex++) {\n      result += isDefined(columnsRow[columnIndex].colspan) ? columnsRow[columnIndex].colspan : 1;\n    }\n\n    return result;\n  },\n  _getAllItems: function _getAllItems(columnsInfo, rowsInfoItems, cellsInfo) {\n    var cellIndex;\n    var rowIndex;\n    var correctedCellsInfo = cellsInfo;\n\n    var rowsLength = this._getLength(rowsInfoItems);\n\n    var headerRowsCount = columnsInfo.length;\n\n    if (columnsInfo.length > 0 && columnsInfo[0].length > 0 && cellsInfo.length > 0 && 0 === cellsInfo[0].length) {\n      var cellInfoItemLength = this._calculateCellInfoItemLength(columnsInfo[0]);\n\n      if (cellInfoItemLength > 0) {\n        correctedCellsInfo = this._correctCellsInfoItemLengths(cellsInfo, cellInfoItemLength);\n      }\n    }\n\n    var sourceItems = columnsInfo.concat(correctedCellsInfo);\n\n    for (rowIndex = 0; rowIndex < rowsInfoItems.length; rowIndex++) {\n      for (cellIndex = rowsInfoItems[rowIndex].length - 1; cellIndex >= 0; cellIndex--) {\n        if (!isDefined(sourceItems[rowIndex + headerRowsCount])) {\n          sourceItems[rowIndex + headerRowsCount] = [];\n        }\n\n        sourceItems[rowIndex + headerRowsCount].splice(0, 0, extend({}, rowsInfoItems[rowIndex][cellIndex]));\n      }\n    }\n\n    sourceItems[0].splice(0, 0, extend({}, this._getEmptyCell(), {\n      alignment: getDefaultAlignment(this._options.rtlEnabled),\n      colspan: rowsLength,\n      rowspan: headerRowsCount\n    }));\n    return this._prepareItems(sourceItems);\n  },\n  getDataProvider: function getDataProvider() {\n    var that = this;\n    var dataController = this._dataController;\n    var items = new Deferred();\n    dataController.beginLoading();\n    setTimeout(function () {\n      var columnsInfo = extend(true, [], dataController.getColumnsInfo(true));\n      var rowsInfoItems = extend(true, [], dataController.getRowsInfo(true));\n      var cellsInfo = dataController.getCellsInfo(true);\n      items.resolve(that._getAllItems(columnsInfo, rowsInfoItems, cellsInfo));\n      dataController.endLoading();\n    });\n    return new DataProvider({\n      items: items,\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      dataFields: this.getDataSource().getAreaFields(\"data\"),\n      customizeExcelCell: this.option(\"export.customizeExcelCell\"),\n      rowsArea: this._rowsArea,\n      columnsArea: this._columnsArea\n    });\n  }\n});\nexport var DataProvider = Class.inherit({\n  ctor: function ctor(options) {\n    this._options = options;\n  },\n  ready: function ready() {\n    var options = this._options;\n    return when(options.items).done(function (items) {\n      var headerSize = items[0][0].rowspan;\n      var columns = items[headerSize - 1];\n      each(columns, function (columnIndex, column) {\n        column.width = DEFAUL_COLUMN_WIDTH;\n      });\n      options.columns = columns;\n      options.items = items;\n    });\n  },\n  getColumns: function getColumns() {\n    return this._options.columns;\n  },\n  getColumnsWidths: function getColumnsWidths() {\n    var colsArea = this._options.columnsArea;\n    var rowsArea = this._options.rowsArea;\n    var columns = this._options.columns;\n    var useDefaultWidth = !hasWindow() || \"virtual\" === colsArea.option(\"scrolling.mode\") || colsArea.element().is(\":hidden\");\n    return useDefaultWidth ? columns.map(function (_) {\n      return DEFAUL_COLUMN_WIDTH;\n    }) : rowsArea.getColumnsWidth().concat(colsArea.getColumnsWidth());\n  },\n  getRowsCount: function getRowsCount() {\n    return this._options.items.length;\n  },\n  getGroupLevel: function getGroupLevel() {\n    return 0;\n  },\n  getCellMerging: function getCellMerging(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex];\n    return item ? {\n      colspan: item.colspan - 1,\n      rowspan: item.rowspan - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function getFrozenArea() {\n    return {\n      x: this.getRowAreaColCount(),\n      y: this.getColumnAreaRowCount()\n    };\n  },\n  getCellType: function getCellType(rowIndex, cellIndex) {\n    var style = this.getStyles()[this.getStyleId(rowIndex, cellIndex)];\n    return style && style.dataType || \"string\";\n  },\n  getCellData: function getCellData(rowIndex, cellIndex, isExcelJS) {\n    var result = {};\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\n\n    if (isExcelJS) {\n      result.cellSourceData = item;\n\n      var areaName = this._tryGetAreaName(item, rowIndex, cellIndex);\n\n      if (areaName) {\n        result.cellSourceData.area = areaName;\n      }\n\n      result.cellSourceData.rowIndex = rowIndex;\n      result.cellSourceData.columnIndex = cellIndex;\n    }\n\n    if (\"string\" === this.getCellType(rowIndex, cellIndex)) {\n      result.value = item.text;\n    } else {\n      result.value = item.value;\n    }\n\n    if (result.cellSourceData && result.cellSourceData.isWhiteSpace) {\n      result.value = \"\";\n    }\n\n    return result;\n  },\n  _tryGetAreaName: function _tryGetAreaName(item, rowIndex, cellIndex) {\n    if (this.isColumnAreaCell(rowIndex, cellIndex)) {\n      return \"column\";\n    } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\n      return \"row\";\n    } else if (isDefined(item.dataIndex)) {\n      return \"data\";\n    }\n  },\n  isRowAreaCell: function isRowAreaCell(rowIndex, cellIndex) {\n    return rowIndex >= this.getColumnAreaRowCount() && cellIndex < this.getRowAreaColCount();\n  },\n  isColumnAreaCell: function isColumnAreaCell(rowIndex, cellIndex) {\n    return cellIndex >= this.getRowAreaColCount() && rowIndex < this.getColumnAreaRowCount();\n  },\n  getColumnAreaRowCount: function getColumnAreaRowCount() {\n    return this._options.items[0][0].rowspan;\n  },\n  getRowAreaColCount: function getRowAreaColCount() {\n    return this._options.items[0][0].colspan;\n  },\n  getHeaderStyles: function getHeaderStyles() {\n    return [{\n      alignment: \"center\",\n      dataType: \"string\"\n    }, {\n      alignment: getDefaultAlignment(this._options.rtlEnabled),\n      dataType: \"string\"\n    }];\n  },\n  getDataFieldStyles: function getDataFieldStyles() {\n    var _this = this;\n\n    var dataFields = this._options.dataFields;\n    var dataItemStyle = {\n      alignment: this._options.rtlEnabled ? \"left\" : \"right\"\n    };\n    var dataFieldStyles = [];\n\n    if (dataFields.length) {\n      dataFields.forEach(function (dataField) {\n        dataFieldStyles.push(_extends({}, dataItemStyle, {\n          format: dataField.format,\n          dataType: _this.getCellDataType(dataField)\n        }));\n      });\n      return dataFieldStyles;\n    }\n\n    return [dataItemStyle];\n  },\n  getStyles: function getStyles() {\n    if (this._styles) {\n      return this._styles;\n    }\n\n    this._styles = [].concat(_toConsumableArray(this.getHeaderStyles()), _toConsumableArray(this.getDataFieldStyles()));\n    return this._styles;\n  },\n  getCellDataType: function getCellDataType(field) {\n    if (field && field.customizeText) {\n      return \"string\";\n    }\n\n    if (field.dataType) {\n      return field.dataType;\n    }\n\n    if (field.format) {\n      if (1 === localizationNumber.parse(formatHelper.format(1, field.format))) {\n        return \"number\";\n      }\n\n      if (formatHelper.format(new Date(), field.format)) {\n        return \"date\";\n      }\n    }\n\n    return DEFAULT_DATA_TYPE;\n  },\n  getStyleId: function getStyleId(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\n\n    if (0 === cellIndex && 0 === rowIndex || this.isColumnAreaCell(rowIndex, cellIndex)) {\n      return 0;\n    } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\n      return 1;\n    }\n\n    return this.getHeaderStyles().length + (item.dataIndex || 0);\n  },\n  hasCustomizeExcelCell: function hasCustomizeExcelCell() {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function customizeExcelCell(e) {\n    if (this._options.customizeExcelCell) {\n      this._options.customizeExcelCell(e);\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/pivot_grid/ui.pivot_grid.export.js"],"names":["_extends","Class","isDefined","extend","each","hasWindow","getDefaultAlignment","formatHelper","localizationNumber","excel","excelExporter","export","exportMethod","exportMixin","when","Deferred","DEFAULT_DATA_TYPE","DEFAUL_COLUMN_WIDTH","ExportMixin","exportToExcel","getDataProvider","fileName","option","proxyUrl","format","rtlEnabled","ignoreErrors","exportingAction","_actions","onExporting","exportedAction","onExported","fileSavingAction","onFileSaving","getData","_getLength","items","i","itemCount","length","cellCount","colspan","_correctCellsInfoItemLengths","cellsInfo","expectedLength","push","_calculateCellInfoItemLength","columnsRow","result","columnIndex","_getAllItems","columnsInfo","rowsInfoItems","cellIndex","rowIndex","correctedCellsInfo","rowsLength","headerRowsCount","cellInfoItemLength","sourceItems","concat","splice","_getEmptyCell","alignment","_options","rowspan","_prepareItems","that","dataController","_dataController","beginLoading","setTimeout","getColumnsInfo","getRowsInfo","getCellsInfo","resolve","endLoading","DataProvider","dataFields","getDataSource","getAreaFields","customizeExcelCell","rowsArea","_rowsArea","columnsArea","_columnsArea","inherit","ctor","options","ready","done","headerSize","columns","column","width","getColumns","getColumnsWidths","colsArea","useDefaultWidth","element","is","map","_","getColumnsWidth","getRowsCount","getGroupLevel","getCellMerging","item","getFrozenArea","x","getRowAreaColCount","y","getColumnAreaRowCount","getCellType","style","getStyles","getStyleId","dataType","getCellData","isExcelJS","cellSourceData","areaName","_tryGetAreaName","area","value","text","isWhiteSpace","isColumnAreaCell","isRowAreaCell","dataIndex","getHeaderStyles","getDataFieldStyles","dataItemStyle","dataFieldStyles","forEach","dataField","getCellDataType","_styles","field","customizeText","parse","Date","hasCustomizeExcelCell","e"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.export.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport Class from \"../../core/class\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport formatHelper from \"../../format_helper\";\r\nimport localizationNumber from \"../../localization/number\";\r\nimport {\r\n    excel as excelExporter,\r\n    export as exportMethod\r\n} from \"../../exporter\";\r\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar DEFAULT_DATA_TYPE = \"string\";\r\nvar DEFAUL_COLUMN_WIDTH = 100;\r\nexport var ExportMixin = extend({}, exportMixin, {\r\n    exportToExcel: function() {\r\n        exportMethod(this.getDataProvider(), {\r\n            fileName: this.option(\"export.fileName\"),\r\n            proxyUrl: this.option(\"export.proxyUrl\"),\r\n            format: \"EXCEL\",\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\r\n            exportingAction: this._actions.onExporting,\r\n            exportedAction: this._actions.onExported,\r\n            fileSavingAction: this._actions.onFileSaving\r\n        }, excelExporter.getData)\r\n    },\r\n    _getLength: function(items) {\r\n        var i;\r\n        var itemCount = items[0].length;\r\n        var cellCount = 0;\r\n        for (i = 0; i < itemCount; i++) {\r\n            cellCount += items[0][i].colspan || 1\r\n        }\r\n        return cellCount\r\n    },\r\n    _correctCellsInfoItemLengths: function(cellsInfo, expectedLength) {\r\n        for (var i = 0; i < cellsInfo.length; i++) {\r\n            while (cellsInfo[i].length < expectedLength) {\r\n                cellsInfo[i].push({})\r\n            }\r\n        }\r\n        return cellsInfo\r\n    },\r\n    _calculateCellInfoItemLength: function(columnsRow) {\r\n        var result = 0;\r\n        for (var columnIndex = 0; columnIndex < columnsRow.length; columnIndex++) {\r\n            result += isDefined(columnsRow[columnIndex].colspan) ? columnsRow[columnIndex].colspan : 1\r\n        }\r\n        return result\r\n    },\r\n    _getAllItems: function(columnsInfo, rowsInfoItems, cellsInfo) {\r\n        var cellIndex;\r\n        var rowIndex;\r\n        var correctedCellsInfo = cellsInfo;\r\n        var rowsLength = this._getLength(rowsInfoItems);\r\n        var headerRowsCount = columnsInfo.length;\r\n        if (columnsInfo.length > 0 && columnsInfo[0].length > 0 && cellsInfo.length > 0 && 0 === cellsInfo[0].length) {\r\n            var cellInfoItemLength = this._calculateCellInfoItemLength(columnsInfo[0]);\r\n            if (cellInfoItemLength > 0) {\r\n                correctedCellsInfo = this._correctCellsInfoItemLengths(cellsInfo, cellInfoItemLength)\r\n            }\r\n        }\r\n        var sourceItems = columnsInfo.concat(correctedCellsInfo);\r\n        for (rowIndex = 0; rowIndex < rowsInfoItems.length; rowIndex++) {\r\n            for (cellIndex = rowsInfoItems[rowIndex].length - 1; cellIndex >= 0; cellIndex--) {\r\n                if (!isDefined(sourceItems[rowIndex + headerRowsCount])) {\r\n                    sourceItems[rowIndex + headerRowsCount] = []\r\n                }\r\n                sourceItems[rowIndex + headerRowsCount].splice(0, 0, extend({}, rowsInfoItems[rowIndex][cellIndex]))\r\n            }\r\n        }\r\n        sourceItems[0].splice(0, 0, extend({}, this._getEmptyCell(), {\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled),\r\n            colspan: rowsLength,\r\n            rowspan: headerRowsCount\r\n        }));\r\n        return this._prepareItems(sourceItems)\r\n    },\r\n    getDataProvider: function() {\r\n        var that = this;\r\n        var dataController = this._dataController;\r\n        var items = new Deferred;\r\n        dataController.beginLoading();\r\n        setTimeout((function() {\r\n            var columnsInfo = extend(true, [], dataController.getColumnsInfo(true));\r\n            var rowsInfoItems = extend(true, [], dataController.getRowsInfo(true));\r\n            var cellsInfo = dataController.getCellsInfo(true);\r\n            items.resolve(that._getAllItems(columnsInfo, rowsInfoItems, cellsInfo));\r\n            dataController.endLoading()\r\n        }));\r\n        return new DataProvider({\r\n            items: items,\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            dataFields: this.getDataSource().getAreaFields(\"data\"),\r\n            customizeExcelCell: this.option(\"export.customizeExcelCell\"),\r\n            rowsArea: this._rowsArea,\r\n            columnsArea: this._columnsArea\r\n        })\r\n    }\r\n});\r\nexport var DataProvider = Class.inherit({\r\n    ctor: function(options) {\r\n        this._options = options\r\n    },\r\n    ready: function() {\r\n        var options = this._options;\r\n        return when(options.items).done(items => {\r\n            var headerSize = items[0][0].rowspan;\r\n            var columns = items[headerSize - 1];\r\n            each(columns, (columnIndex, column) => {\r\n                column.width = DEFAUL_COLUMN_WIDTH\r\n            });\r\n            options.columns = columns;\r\n            options.items = items\r\n        })\r\n    },\r\n    getColumns: function() {\r\n        return this._options.columns\r\n    },\r\n    getColumnsWidths: function() {\r\n        var colsArea = this._options.columnsArea;\r\n        var rowsArea = this._options.rowsArea;\r\n        var columns = this._options.columns;\r\n        var useDefaultWidth = !hasWindow() || \"virtual\" === colsArea.option(\"scrolling.mode\") || colsArea.element().is(\":hidden\");\r\n        return useDefaultWidth ? columns.map(_ => DEFAUL_COLUMN_WIDTH) : rowsArea.getColumnsWidth().concat(colsArea.getColumnsWidth())\r\n    },\r\n    getRowsCount: function() {\r\n        return this._options.items.length\r\n    },\r\n    getGroupLevel: function() {\r\n        return 0\r\n    },\r\n    getCellMerging: function(rowIndex, cellIndex) {\r\n        var items = this._options.items;\r\n        var item = items[rowIndex] && items[rowIndex][cellIndex];\r\n        return item ? {\r\n            colspan: item.colspan - 1,\r\n            rowspan: item.rowspan - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    },\r\n    getFrozenArea: function() {\r\n        return {\r\n            x: this.getRowAreaColCount(),\r\n            y: this.getColumnAreaRowCount()\r\n        }\r\n    },\r\n    getCellType: function(rowIndex, cellIndex) {\r\n        var style = this.getStyles()[this.getStyleId(rowIndex, cellIndex)];\r\n        return style && style.dataType || \"string\"\r\n    },\r\n    getCellData: function(rowIndex, cellIndex, isExcelJS) {\r\n        var result = {};\r\n        var items = this._options.items;\r\n        var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\r\n        if (isExcelJS) {\r\n            result.cellSourceData = item;\r\n            var areaName = this._tryGetAreaName(item, rowIndex, cellIndex);\r\n            if (areaName) {\r\n                result.cellSourceData.area = areaName\r\n            }\r\n            result.cellSourceData.rowIndex = rowIndex;\r\n            result.cellSourceData.columnIndex = cellIndex\r\n        }\r\n        if (\"string\" === this.getCellType(rowIndex, cellIndex)) {\r\n            result.value = item.text\r\n        } else {\r\n            result.value = item.value\r\n        }\r\n        if (result.cellSourceData && result.cellSourceData.isWhiteSpace) {\r\n            result.value = \"\"\r\n        }\r\n        return result\r\n    },\r\n    _tryGetAreaName(item, rowIndex, cellIndex) {\r\n        if (this.isColumnAreaCell(rowIndex, cellIndex)) {\r\n            return \"column\"\r\n        } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\r\n            return \"row\"\r\n        } else if (isDefined(item.dataIndex)) {\r\n            return \"data\"\r\n        }\r\n    },\r\n    isRowAreaCell(rowIndex, cellIndex) {\r\n        return rowIndex >= this.getColumnAreaRowCount() && cellIndex < this.getRowAreaColCount()\r\n    },\r\n    isColumnAreaCell(rowIndex, cellIndex) {\r\n        return cellIndex >= this.getRowAreaColCount() && rowIndex < this.getColumnAreaRowCount()\r\n    },\r\n    getColumnAreaRowCount() {\r\n        return this._options.items[0][0].rowspan\r\n    },\r\n    getRowAreaColCount() {\r\n        return this._options.items[0][0].colspan\r\n    },\r\n    getHeaderStyles() {\r\n        return [{\r\n            alignment: \"center\",\r\n            dataType: \"string\"\r\n        }, {\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled),\r\n            dataType: \"string\"\r\n        }]\r\n    },\r\n    getDataFieldStyles() {\r\n        var dataFields = this._options.dataFields;\r\n        var dataItemStyle = {\r\n            alignment: this._options.rtlEnabled ? \"left\" : \"right\"\r\n        };\r\n        var dataFieldStyles = [];\r\n        if (dataFields.length) {\r\n            dataFields.forEach(dataField => {\r\n                dataFieldStyles.push(_extends({}, dataItemStyle, {\r\n                    format: dataField.format,\r\n                    dataType: this.getCellDataType(dataField)\r\n                }))\r\n            });\r\n            return dataFieldStyles\r\n        }\r\n        return [dataItemStyle]\r\n    },\r\n    getStyles: function() {\r\n        if (this._styles) {\r\n            return this._styles\r\n        }\r\n        this._styles = [...this.getHeaderStyles(), ...this.getDataFieldStyles()];\r\n        return this._styles\r\n    },\r\n    getCellDataType: function(field) {\r\n        if (field && field.customizeText) {\r\n            return \"string\"\r\n        }\r\n        if (field.dataType) {\r\n            return field.dataType\r\n        }\r\n        if (field.format) {\r\n            if (1 === localizationNumber.parse(formatHelper.format(1, field.format))) {\r\n                return \"number\"\r\n            }\r\n            if (formatHelper.format(new Date, field.format)) {\r\n                return \"date\"\r\n            }\r\n        }\r\n        return DEFAULT_DATA_TYPE\r\n    },\r\n    getStyleId: function(rowIndex, cellIndex) {\r\n        var items = this._options.items;\r\n        var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\r\n        if (0 === cellIndex && 0 === rowIndex || this.isColumnAreaCell(rowIndex, cellIndex)) {\r\n            return 0\r\n        } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\r\n            return 1\r\n        }\r\n        return this.getHeaderStyles().length + (item.dataIndex || 0)\r\n    },\r\n    hasCustomizeExcelCell: function() {\r\n        return isDefined(this._options.customizeExcelCell)\r\n    },\r\n    customizeExcelCell: function(e) {\r\n        if (this._options.customizeExcelCell) {\r\n            this._options.customizeExcelCell(e)\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}