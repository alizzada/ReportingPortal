{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/vdom\";\nimport { LightButton } from \"../common/light_button\";\nimport { PagesLarge } from \"./large\";\nimport { PagesSmall } from \"./small\";\nimport { PagerProps } from \"../common/pager_props\";\nimport { ConfigContext } from \"../../../common/config_context\";\nvar PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\";\nvar PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\";\nvar PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\";\nexport var PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\nvar nextButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nvar nextButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nexport var viewFunction = function viewFunction(_ref) {\n  var navigateToNextPage = _ref.navigateToNextPage,\n      navigateToPrevPage = _ref.navigateToPrevPage,\n      nextClassName = _ref.nextClassName,\n      pageIndexChange = _ref.pageIndexChange,\n      prevClassName = _ref.prevClassName,\n      _ref$props = _ref.props,\n      isLargeDisplayMode = _ref$props.isLargeDisplayMode,\n      maxPagesCount = _ref$props.maxPagesCount,\n      pageCount = _ref$props.pageCount,\n      pageIndex = _ref$props.pageIndex,\n      pagesCountText = _ref$props.pagesCountText,\n      renderNextButton = _ref.renderNextButton,\n      renderPrevButton = _ref.renderPrevButton;\n  return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {\n    className: prevClassName,\n    label: \"Previous page\",\n    onClick: navigateToPrevPage\n  }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {\n    maxPagesCount: maxPagesCount,\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange,\n    pagesCountText: pagesCountText\n  }), renderNextButton && createComponentVNode(2, LightButton, {\n    className: nextClassName,\n    label: \"Next page\",\n    onClick: navigateToNextPage\n  })], 0);\n};\n\nfunction getIncrement(direction) {\n  return \"next\" === direction ? 1 : -1;\n}\n\nexport var PageIndexSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageIndexSelectorPropsType = {\n  maxPagesCount: PagerProps.maxPagesCount,\n  pageCount: PagerProps.pageCount,\n  hasKnownLastPage: PagerProps.hasKnownLastPage,\n  showNavigationButtons: PagerProps.showNavigationButtons,\n  totalCount: PagerProps.totalCount,\n  isLargeDisplayMode: PageIndexSelectorProps.isLargeDisplayMode,\n  defaultPageIndex: PagerProps.pageIndex\n};\nexport var PageIndexSelector = /*#__PURE__*/function (_BaseInfernoComponent) {\n  _inherits(PageIndexSelector, _BaseInfernoComponent);\n\n  var _super = _createSuper(PageIndexSelector);\n\n  function PageIndexSelector(props) {\n    var _this;\n\n    _classCallCheck(this, PageIndexSelector);\n\n    _this = _super.call(this, props);\n    _this._currentState = null;\n    _this.state = {\n      pageIndex: void 0 !== _this.props.pageIndex ? _this.props.pageIndex : _this.props.defaultPageIndex\n    };\n    _this.getNextDirection = _this.getNextDirection.bind(_assertThisInitialized(_this));\n    _this.getPrevDirection = _this.getPrevDirection.bind(_assertThisInitialized(_this));\n    _this.canNavigateToPage = _this.canNavigateToPage.bind(_assertThisInitialized(_this));\n    _this.getNextPageIndex = _this.getNextPageIndex.bind(_assertThisInitialized(_this));\n    _this.canNavigateTo = _this.canNavigateTo.bind(_assertThisInitialized(_this));\n    _this.navigateToPage = _this.navigateToPage.bind(_assertThisInitialized(_this));\n    _this.pageIndexChange = _this.pageIndexChange.bind(_assertThisInitialized(_this));\n    _this.navigateToNextPage = _this.navigateToNextPage.bind(_assertThisInitialized(_this));\n    _this.navigateToPrevPage = _this.navigateToPrevPage.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PageIndexSelector, [{\n    key: \"config\",\n    get: function get() {\n      if (\"ConfigContext\" in this.context) {\n        return this.context.ConfigContext;\n      }\n\n      return ConfigContext;\n    }\n  }, {\n    key: \"__state_pageIndex\",\n    get: function get() {\n      var state = this._currentState || this.state;\n      return void 0 !== this.props.pageIndex ? this.props.pageIndex : state.pageIndex;\n    }\n  }, {\n    key: \"set_pageIndex\",\n    value: function set_pageIndex(value) {\n      var _this2 = this;\n\n      this.setState(function (state) {\n        var _this$props$pageIndex, _this$props;\n\n        _this2._currentState = state;\n        var newValue = value();\n        null === (_this$props$pageIndex = (_this$props = _this2.props).pageIndexChange) || void 0 === _this$props$pageIndex ? void 0 : _this$props$pageIndex.call(_this$props, newValue);\n        _this2._currentState = null;\n        return {\n          pageIndex: newValue\n        };\n      });\n    }\n  }, {\n    key: \"getNextDirection\",\n    value: function getNextDirection() {\n      var _this$config;\n\n      return !(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled) ? \"next\" : \"prev\";\n    }\n  }, {\n    key: \"getPrevDirection\",\n    value: function getPrevDirection() {\n      var _this$config2;\n\n      return !(null !== (_this$config2 = this.config) && void 0 !== _this$config2 && _this$config2.rtlEnabled) ? \"prev\" : \"next\";\n    }\n  }, {\n    key: \"canNavigateToPage\",\n    value: function canNavigateToPage(pageIndex) {\n      if (!this.props.hasKnownLastPage) {\n        return pageIndex >= 0;\n      }\n\n      return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1;\n    }\n  }, {\n    key: \"getNextPageIndex\",\n    value: function getNextPageIndex(direction) {\n      return this.__state_pageIndex + getIncrement(direction);\n    }\n  }, {\n    key: \"canNavigateTo\",\n    value: function canNavigateTo(direction) {\n      return this.canNavigateToPage(this.getNextPageIndex(direction));\n    }\n  }, {\n    key: \"navigateToPage\",\n    value: function navigateToPage(direction) {\n      this.pageIndexChange(this.getNextPageIndex(direction));\n    }\n  }, {\n    key: \"renderPrevButton\",\n    get: function get() {\n      var _this$props2 = this.props,\n          isLargeDisplayMode = _this$props2.isLargeDisplayMode,\n          showNavigationButtons = _this$props2.showNavigationButtons;\n      return !isLargeDisplayMode || showNavigationButtons;\n    }\n  }, {\n    key: \"renderNextButton\",\n    get: function get() {\n      return this.renderPrevButton || !this.props.hasKnownLastPage;\n    }\n  }, {\n    key: \"nextClassName\",\n    get: function get() {\n      var direction = this.getNextDirection();\n      var canNavigate = this.canNavigateTo(direction);\n      return canNavigate ? nextButtonClassName : nextButtonDisabledClassName;\n    }\n  }, {\n    key: \"prevClassName\",\n    get: function get() {\n      var direction = this.getPrevDirection();\n      var canNavigate = this.canNavigateTo(direction);\n      return canNavigate ? prevButtonClassName : prevButtonDisabledClassName;\n    }\n  }, {\n    key: \"pageIndexChange\",\n    value: function pageIndexChange(pageIndex) {\n      if (this.canNavigateToPage(pageIndex)) {\n        this.set_pageIndex(function () {\n          return pageIndex;\n        });\n      }\n    }\n  }, {\n    key: \"navigateToNextPage\",\n    value: function navigateToNextPage() {\n      this.navigateToPage(this.getNextDirection());\n    }\n  }, {\n    key: \"navigateToPrevPage\",\n    value: function navigateToPrevPage() {\n      this.navigateToPage(this.getPrevDirection());\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props$pageIndex2 = _extends({}, this.props, {\n        pageIndex: this.__state_pageIndex\n      }),\n          restProps = _objectWithoutPropertiesLoose(_this$props$pageIndex2, [\"defaultPageIndex\", \"hasKnownLastPage\", \"isLargeDisplayMode\", \"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\", \"showNavigationButtons\", \"totalCount\"]);\n\n      return restProps;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          pageIndex: this.__state_pageIndex\n        }),\n        config: this.config,\n        renderPrevButton: this.renderPrevButton,\n        renderNextButton: this.renderNextButton,\n        nextClassName: this.nextClassName,\n        prevClassName: this.prevClassName,\n        pageIndexChange: this.pageIndexChange,\n        navigateToNextPage: this.navigateToNextPage,\n        navigateToPrevPage: this.navigateToPrevPage,\n        restAttributes: this.restAttributes\n      });\n    }\n  }]);\n\n  return PageIndexSelector;\n}(BaseInfernoComponent);\nPageIndexSelector.defaultProps = _extends({}, PageIndexSelectorPropsType);","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/renovation/ui/pager/pages/page_index_selector.js"],"names":["_extends","_objectWithoutPropertiesLoose","createFragment","createComponentVNode","Fragment","BaseInfernoComponent","LightButton","PagesLarge","PagesSmall","PagerProps","ConfigContext","PAGER_NAVIGATE_BUTTON","PAGER_PREV_BUTTON_CLASS","PAGER_NEXT_BUTTON_CLASS","PAGER_BUTTON_DISABLE_CLASS","nextButtonClassName","concat","prevButtonClassName","nextButtonDisabledClassName","prevButtonDisabledClassName","viewFunction","_ref","navigateToNextPage","navigateToPrevPage","nextClassName","pageIndexChange","prevClassName","props","isLargeDisplayMode","maxPagesCount","pageCount","pageIndex","pagesCountText","renderNextButton","renderPrevButton","className","label","onClick","getIncrement","direction","PageIndexSelectorProps","PageIndexSelectorPropsType","hasKnownLastPage","showNavigationButtons","totalCount","defaultPageIndex","PageIndexSelector","_currentState","state","getNextDirection","bind","getPrevDirection","canNavigateToPage","getNextPageIndex","canNavigateTo","navigateToPage","context","value","setState","_this$props$pageIndex","_this$props","newValue","call","_this$config","config","rtlEnabled","_this$config2","__state_pageIndex","canNavigate","set_pageIndex","_this$props$pageIndex2","restProps","restAttributes","defaultProps"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport {\r\n    createFragment,\r\n    createComponentVNode\r\n} from \"inferno\";\r\nimport {\r\n    Fragment\r\n} from \"inferno\";\r\nimport {\r\n    BaseInfernoComponent\r\n} from \"@devextreme/vdom\";\r\nimport {\r\n    LightButton\r\n} from \"../common/light_button\";\r\nimport {\r\n    PagesLarge\r\n} from \"./large\";\r\nimport {\r\n    PagesSmall\r\n} from \"./small\";\r\nimport {\r\n    PagerProps\r\n} from \"../common/pager_props\";\r\nimport {\r\n    ConfigContext\r\n} from \"../../../common/config_context\";\r\nvar PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\";\r\nvar PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\";\r\nvar PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\";\r\nexport var PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\r\nvar nextButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\r\nvar prevButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\r\nvar nextButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\r\nvar prevButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\r\nexport var viewFunction = _ref => {\r\n    var {\r\n        navigateToNextPage: navigateToNextPage,\r\n        navigateToPrevPage: navigateToPrevPage,\r\n        nextClassName: nextClassName,\r\n        pageIndexChange: pageIndexChange,\r\n        prevClassName: prevClassName,\r\n        props: {\r\n            isLargeDisplayMode: isLargeDisplayMode,\r\n            maxPagesCount: maxPagesCount,\r\n            pageCount: pageCount,\r\n            pageIndex: pageIndex,\r\n            pagesCountText: pagesCountText\r\n        },\r\n        renderNextButton: renderNextButton,\r\n        renderPrevButton: renderPrevButton\r\n    } = _ref;\r\n    return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {\r\n        className: prevClassName,\r\n        label: \"Previous page\",\r\n        onClick: navigateToPrevPage\r\n    }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {\r\n        maxPagesCount: maxPagesCount,\r\n        pageCount: pageCount,\r\n        pageIndex: pageIndex,\r\n        pageIndexChange: pageIndexChange\r\n    }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {\r\n        pageCount: pageCount,\r\n        pageIndex: pageIndex,\r\n        pageIndexChange: pageIndexChange,\r\n        pagesCountText: pagesCountText\r\n    }), renderNextButton && createComponentVNode(2, LightButton, {\r\n        className: nextClassName,\r\n        label: \"Next page\",\r\n        onClick: navigateToNextPage\r\n    })], 0)\r\n};\r\n\r\nfunction getIncrement(direction) {\r\n    return \"next\" === direction ? 1 : -1\r\n}\r\nexport var PageIndexSelectorProps = {\r\n    isLargeDisplayMode: true\r\n};\r\nvar PageIndexSelectorPropsType = {\r\n    maxPagesCount: PagerProps.maxPagesCount,\r\n    pageCount: PagerProps.pageCount,\r\n    hasKnownLastPage: PagerProps.hasKnownLastPage,\r\n    showNavigationButtons: PagerProps.showNavigationButtons,\r\n    totalCount: PagerProps.totalCount,\r\n    isLargeDisplayMode: PageIndexSelectorProps.isLargeDisplayMode,\r\n    defaultPageIndex: PagerProps.pageIndex\r\n};\r\nexport class PageIndexSelector extends BaseInfernoComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this._currentState = null;\r\n        this.state = {\r\n            pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.props.defaultPageIndex\r\n        };\r\n        this.getNextDirection = this.getNextDirection.bind(this);\r\n        this.getPrevDirection = this.getPrevDirection.bind(this);\r\n        this.canNavigateToPage = this.canNavigateToPage.bind(this);\r\n        this.getNextPageIndex = this.getNextPageIndex.bind(this);\r\n        this.canNavigateTo = this.canNavigateTo.bind(this);\r\n        this.navigateToPage = this.navigateToPage.bind(this);\r\n        this.pageIndexChange = this.pageIndexChange.bind(this);\r\n        this.navigateToNextPage = this.navigateToNextPage.bind(this);\r\n        this.navigateToPrevPage = this.navigateToPrevPage.bind(this)\r\n    }\r\n    get config() {\r\n        if (\"ConfigContext\" in this.context) {\r\n            return this.context.ConfigContext\r\n        }\r\n        return ConfigContext\r\n    }\r\n    get __state_pageIndex() {\r\n        var state = this._currentState || this.state;\r\n        return void 0 !== this.props.pageIndex ? this.props.pageIndex : state.pageIndex\r\n    }\r\n    set_pageIndex(value) {\r\n        this.setState(state => {\r\n            var _this$props$pageIndex, _this$props;\r\n            this._currentState = state;\r\n            var newValue = value();\r\n            null === (_this$props$pageIndex = (_this$props = this.props).pageIndexChange) || void 0 === _this$props$pageIndex ? void 0 : _this$props$pageIndex.call(_this$props, newValue);\r\n            this._currentState = null;\r\n            return {\r\n                pageIndex: newValue\r\n            }\r\n        })\r\n    }\r\n    getNextDirection() {\r\n        var _this$config;\r\n        return !(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled) ? \"next\" : \"prev\"\r\n    }\r\n    getPrevDirection() {\r\n        var _this$config2;\r\n        return !(null !== (_this$config2 = this.config) && void 0 !== _this$config2 && _this$config2.rtlEnabled) ? \"prev\" : \"next\"\r\n    }\r\n    canNavigateToPage(pageIndex) {\r\n        if (!this.props.hasKnownLastPage) {\r\n            return pageIndex >= 0\r\n        }\r\n        return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1\r\n    }\r\n    getNextPageIndex(direction) {\r\n        return this.__state_pageIndex + getIncrement(direction)\r\n    }\r\n    canNavigateTo(direction) {\r\n        return this.canNavigateToPage(this.getNextPageIndex(direction))\r\n    }\r\n    navigateToPage(direction) {\r\n        this.pageIndexChange(this.getNextPageIndex(direction))\r\n    }\r\n    get renderPrevButton() {\r\n        var {\r\n            isLargeDisplayMode: isLargeDisplayMode,\r\n            showNavigationButtons: showNavigationButtons\r\n        } = this.props;\r\n        return !isLargeDisplayMode || showNavigationButtons\r\n    }\r\n    get renderNextButton() {\r\n        return this.renderPrevButton || !this.props.hasKnownLastPage\r\n    }\r\n    get nextClassName() {\r\n        var direction = this.getNextDirection();\r\n        var canNavigate = this.canNavigateTo(direction);\r\n        return canNavigate ? nextButtonClassName : nextButtonDisabledClassName\r\n    }\r\n    get prevClassName() {\r\n        var direction = this.getPrevDirection();\r\n        var canNavigate = this.canNavigateTo(direction);\r\n        return canNavigate ? prevButtonClassName : prevButtonDisabledClassName\r\n    }\r\n    pageIndexChange(pageIndex) {\r\n        if (this.canNavigateToPage(pageIndex)) {\r\n            this.set_pageIndex(() => pageIndex)\r\n        }\r\n    }\r\n    navigateToNextPage() {\r\n        this.navigateToPage(this.getNextDirection())\r\n    }\r\n    navigateToPrevPage() {\r\n        this.navigateToPage(this.getPrevDirection())\r\n    }\r\n    get restAttributes() {\r\n        var _this$props$pageIndex2 = _extends({}, this.props, {\r\n                pageIndex: this.__state_pageIndex\r\n            }),\r\n            restProps = _objectWithoutPropertiesLoose(_this$props$pageIndex2, [\"defaultPageIndex\", \"hasKnownLastPage\", \"isLargeDisplayMode\", \"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\", \"showNavigationButtons\", \"totalCount\"]);\r\n        return restProps\r\n    }\r\n    render() {\r\n        var props = this.props;\r\n        return viewFunction({\r\n            props: _extends({}, props, {\r\n                pageIndex: this.__state_pageIndex\r\n            }),\r\n            config: this.config,\r\n            renderPrevButton: this.renderPrevButton,\r\n            renderNextButton: this.renderNextButton,\r\n            nextClassName: this.nextClassName,\r\n            prevClassName: this.prevClassName,\r\n            pageIndexChange: this.pageIndexChange,\r\n            navigateToNextPage: this.navigateToNextPage,\r\n            navigateToPrevPage: this.navigateToPrevPage,\r\n            restAttributes: this.restAttributes\r\n        })\r\n    }\r\n}\r\nPageIndexSelector.defaultProps = _extends({}, PageIndexSelectorPropsType);\r\n"]},"metadata":{},"sourceType":"module"}