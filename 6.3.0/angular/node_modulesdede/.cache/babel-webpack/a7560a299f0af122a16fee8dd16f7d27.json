{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\nimport dateUtils from \"../../../core/utils/date\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar HorizontalRenderingStrategy = /*#__PURE__*/function (_BaseAppointmentsStra) {\n  _inherits(HorizontalRenderingStrategy, _BaseAppointmentsStra);\n\n  var _super = _createSuper(HorizontalRenderingStrategy);\n\n  function HorizontalRenderingStrategy() {\n    _classCallCheck(this, HorizontalRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalRenderingStrategy, [{\n    key: \"_needVerifyItemSize\",\n    value: function _needVerifyItemSize() {\n      return true;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth(appointment, position) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n      var startDate = position.info.appointment.startDate;\n      var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n\n      var appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n      appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\n      var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\");\n      var durationInCells = appointmentDuration / cellDuration;\n      var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n      return width;\n    }\n  }, {\n    key: \"_needAdjustDuration\",\n    value: function _needAdjustDuration(diff) {\n      return diff < 0;\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(coordinates) {\n      var result = this._customizeAppointmentGeometry(coordinates);\n\n      return _get(_getPrototypeOf(HorizontalRenderingStrategy.prototype), \"getAppointmentGeometry\", this).call(this, result);\n    }\n  }, {\n    key: \"_customizeAppointmentGeometry\",\n    value: function _customizeAppointmentGeometry(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: 0,\n        auto: 0\n      };\n    }\n  }, {\n    key: \"_getCompactLeftCoordinate\",\n    value: function _getCompactLeftCoordinate(itemLeft, index) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      return itemLeft + cellWidth * index;\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {\n      return this.getDefaultCellHeight() || this.getAppointmentMinSize();\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function _getAppointmentCount(overlappingMode, coordinates) {\n      return this._getMaxAppointmentCountPerCellByType(false);\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return DEFAULT_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return MIN_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition(a, b) {\n      return this._columnCondition(a, b);\n    }\n  }, {\n    key: \"_getOrientation\",\n    value: function _getOrientation() {\n      return [\"left\", \"right\", \"top\"];\n    }\n  }, {\n    key: \"_getMaxAppointmentWidth\",\n    value: function _getMaxAppointmentWidth(startDate) {\n      return this.instance.fire(\"getMaxAppointmentWidth\", {\n        date: startDate\n      });\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth() {\n      return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET;\n    }\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime(args, initialSize) {\n      var deltaTime;\n      var deltaWidth = args.width - initialSize.width;\n      deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\n      return deltaTime;\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay(appointmentData) {\n      return this.instance.fire(\"getField\", \"allDay\", appointmentData);\n    }\n  }, {\n    key: \"needSeparateAppointment\",\n    value: function needSeparateAppointment() {\n      return this.instance.fire(\"isGroupedByDate\");\n    }\n  }]);\n\n  return HorizontalRenderingStrategy;\n}(BaseAppointmentsStrategy);\n\nexport default HorizontalRenderingStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js"],"names":["BaseAppointmentsStrategy","dateUtils","DEFAULT_APPOINTMENT_HEIGHT","MIN_APPOINTMENT_HEIGHT","DROP_DOWN_BUTTON_OFFSET","toMs","dateToMilliseconds","HorizontalRenderingStrategy","appointment","position","cellWidth","getDefaultCellWidth","getAppointmentMinSize","allDay","instance","fire","startDate","info","endDate","normalizeEndDateByViewEnd","appointmentDuration","_getAppointmentDurationInMs","_adjustDurationByDaylightDiff","cellDuration","getAppointmentDurationInMinutes","durationInCells","width","cropAppointmentWidth","diff","coordinates","result","_customizeAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","height","appointmentCountPerCell","offset","unlimited","auto","itemLeft","index","getDefaultCellHeight","overlappingMode","_getMaxAppointmentCountPerCellByType","a","b","_columnCondition","date","args","initialSize","deltaTime","deltaWidth","Math","round","appointmentData"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\r\nvar MIN_APPOINTMENT_HEIGHT = 35;\r\nvar DROP_DOWN_BUTTON_OFFSET = 2;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    _needVerifyItemSize() {\r\n        return true\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var startDate = position.info.appointment.startDate;\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\r\n        appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\r\n        var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\");\r\n        var durationInCells = appointmentDuration / cellDuration;\r\n        var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\r\n        return width\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return diff < 0\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var result = this._customizeAppointmentGeometry(coordinates);\r\n        return super.getAppointmentGeometry(result)\r\n    }\r\n    _customizeAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: 0,\r\n            auto: 0\r\n        }\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return itemLeft + cellWidth * index\r\n    }\r\n    _getMaxHeight() {\r\n        return this.getDefaultCellHeight() || this.getAppointmentMinSize()\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return this._getMaxAppointmentCountPerCellByType(false)\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return DEFAULT_APPOINTMENT_HEIGHT\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return MIN_APPOINTMENT_HEIGHT\r\n    }\r\n    _sortCondition(a, b) {\r\n        return this._columnCondition(a, b)\r\n    }\r\n    _getOrientation() {\r\n        return [\"left\", \"right\", \"top\"]\r\n    }\r\n    _getMaxAppointmentWidth(startDate) {\r\n        return this.instance.fire(\"getMaxAppointmentWidth\", {\r\n            date: startDate\r\n        })\r\n    }\r\n    getDropDownAppointmentWidth() {\r\n        return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET\r\n    }\r\n    getDeltaTime(args, initialSize) {\r\n        var deltaTime;\r\n        var deltaWidth = args.width - initialSize.width;\r\n        deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\r\n        return deltaTime\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return this.instance.fire(\"getField\", \"allDay\", appointmentData)\r\n    }\r\n    needSeparateAppointment() {\r\n        return this.instance.fire(\"isGroupedByDate\")\r\n    }\r\n}\r\nexport default HorizontalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}