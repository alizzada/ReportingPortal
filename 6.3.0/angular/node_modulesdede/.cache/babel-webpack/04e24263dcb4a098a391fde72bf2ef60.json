{"ast":null,"code":"import _defineProperty from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Guid from \"../../core/guid\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport FileManagerProgressPanel from \"./ui.file_manager.notification.progress_panel\";\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\nvar MANAGER_ID_NAME = \"__operationInfoManager\";\nvar ACTION_PROGRESS_STATUS = {\n  default: \"default\",\n  progress: \"progress\",\n  error: \"error\",\n  success: \"success\"\n};\n\nvar NotificationManagerBase = /*#__PURE__*/function () {\n  function NotificationManagerBase(_ref) {\n    _classCallCheck(this, NotificationManagerBase);\n\n    var onActionProgressStatusChanged = _ref.onActionProgressStatusChanged,\n        isActual = _ref.isActual;\n    this._id = new Guid().toString();\n    this._isActual = isActual || false;\n    this._actionProgressStatus = ACTION_PROGRESS_STATUS.default;\n    this._raiseActionProgress = onActionProgressStatusChanged;\n  }\n\n  _createClass(NotificationManagerBase, [{\n    key: \"getId\",\n    value: function getId() {\n      return this._id;\n    }\n  }, {\n    key: \"isActual\",\n    value: function isActual() {\n      return this._isActual;\n    }\n  }, {\n    key: \"createErrorDetailsProgressBox\",\n    value: function createErrorDetailsProgressBox($container, item, errorText) {\n      var detailsItem = this._createDetailsItem($container, item);\n\n      this.renderError(detailsItem.$wrapper, errorText);\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError($container, errorText) {\n      $(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"isActionProgressStatusDefault\",\n    value: function isActionProgressStatusDefault() {\n      return this._actionProgressStatus === ACTION_PROGRESS_STATUS.default;\n    }\n  }, {\n    key: \"_createDetailsItem\",\n    value: function _createDetailsItem($container, item) {\n      var $detailsItem = $(\"<div>\").appendTo($container);\n      return this._createProgressBox($detailsItem, {\n        commonText: item.commonText,\n        imageUrl: item.imageUrl\n      });\n    }\n  }, {\n    key: \"_createProgressBox\",\n    value: function _createProgressBox($container, options) {\n      $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\n\n      if (options.imageUrl) {\n        getImageContainer(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container);\n      }\n\n      var $wrapper = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\n      var $commonText = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\n      return {\n        $commonText: $commonText,\n        $element: $container,\n        $wrapper: $wrapper\n      };\n    }\n  }]);\n\n  return NotificationManagerBase;\n}();\n\nvar NotificationManagerStub = /*#__PURE__*/function (_NotificationManagerB) {\n  _inherits(NotificationManagerStub, _NotificationManagerB);\n\n  var _super = _createSuper(NotificationManagerStub);\n\n  function NotificationManagerStub() {\n    _classCallCheck(this, NotificationManagerStub);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NotificationManagerStub, [{\n    key: \"addOperation\",\n    value: function addOperation() {\n      return _defineProperty({}, MANAGER_ID_NAME, this._id);\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails() {}\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress() {}\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem() {}\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation() {}\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError() {}\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError() {}\n  }, {\n    key: \"handleDimensionChanged\",\n    value: function handleDimensionChanged() {\n      return false;\n    }\n  }, {\n    key: \"ensureProgressPanelCreated\",\n    value: function ensureProgressPanelCreated() {}\n  }, {\n    key: \"tryHideActionProgress\",\n    value: function tryHideActionProgress() {\n      this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n    }\n  }, {\n    key: \"updateActionProgressStatus\",\n    value: function updateActionProgressStatus() {\n      this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n    }\n  }, {\n    key: \"_updateActionProgress\",\n    value: function _updateActionProgress(message, status) {\n      if (status !== ACTION_PROGRESS_STATUS.default && status !== ACTION_PROGRESS_STATUS.progress) {\n        return;\n      }\n\n      this._actionProgressStatus = status;\n\n      this._raiseActionProgress(message, status);\n    }\n  }, {\n    key: \"hasNoOperations\",\n    value: function hasNoOperations() {\n      return true;\n    }\n  }, {\n    key: \"_operationInProgressCount\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"_failedOperationCount\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {}\n  }]);\n\n  return NotificationManagerStub;\n}(NotificationManagerBase);\n\nvar NotificationManager = /*#__PURE__*/function (_NotificationManagerB2) {\n  _inherits(NotificationManager, _NotificationManagerB2);\n\n  var _super2 = _createSuper(NotificationManager);\n\n  function NotificationManager(options) {\n    var _this;\n\n    _classCallCheck(this, NotificationManager);\n\n    _this = _super2.call(this, options);\n    _this._failedOperationCount = 0;\n    _this._operationInProgressCount = 0;\n    return _this;\n  }\n\n  _createClass(NotificationManager, [{\n    key: \"addOperation\",\n    value: function addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n      this._operationInProgressCount++;\n\n      var operationInfo = this._progressPanel.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n\n      operationInfo[MANAGER_ID_NAME] = this._id;\n\n      this._updateActionProgress(processingMessage, ACTION_PROGRESS_STATUS.progress);\n\n      return operationInfo;\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails(operationInfo, details, showCloseButton) {\n      this._progressPanel.addOperationDetails(operationInfo, details, showCloseButton);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n      this._progressPanel.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(operationInfo, itemIndex, commonProgress) {\n      this._progressPanel.completeOperationItem(operationInfo, itemIndex, commonProgress);\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation(operationInfo, commonText, isError, statusText) {\n      this._operationInProgressCount--;\n\n      if (isError) {\n        this._failedOperationCount++;\n      }\n\n      this._progressPanel.completeOperation(operationInfo, commonText, isError, statusText);\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError(operationInfo, errorInfo) {\n      this._progressPanel.completeSingleOperationWithError(operationInfo, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError(operationInfo, errorInfo) {\n      this._progressPanel.addOperationDetailsError(operationInfo, errorInfo.itemIndex, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"handleDimensionChanged\",\n    value: function handleDimensionChanged() {\n      if (this._progressPanel) {\n        this._progressPanel.$element().detach();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"ensureProgressPanelCreated\",\n    value: function ensureProgressPanelCreated(container, options) {\n      var _this2 = this;\n\n      if (!this._progressPanel) {\n        var $progressPanelElement = $(\"<div>\").appendTo(container);\n\n        var ProgressPanelClass = this._getProgressPanelComponent();\n\n        this._progressPanel = new ProgressPanelClass($progressPanelElement, extend({}, options, {\n          onOperationClosed: function onOperationClosed(_ref2) {\n            var info = _ref2.info;\n            return _this2._onProgressPanelOperationClosed(info);\n          }\n        }));\n      } else {\n        this._progressPanel.$element().appendTo(container);\n      }\n    }\n  }, {\n    key: \"_getProgressPanelComponent\",\n    value: function _getProgressPanelComponent() {\n      return FileManagerProgressPanel;\n    }\n  }, {\n    key: \"_onProgressPanelOperationClosed\",\n    value: function _onProgressPanelOperationClosed(operationInfo) {\n      if (operationInfo.hasError) {\n        this._failedOperationCount--;\n        this.tryHideActionProgress(operationInfo);\n      }\n    }\n  }, {\n    key: \"tryHideActionProgress\",\n    value: function tryHideActionProgress() {\n      if (this.hasNoOperations()) {\n        this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n      }\n    }\n  }, {\n    key: \"updateActionProgressStatus\",\n    value: function updateActionProgressStatus(operationInfo) {\n      if (operationInfo) {\n        var status = 0 === this._failedOperationCount ? ACTION_PROGRESS_STATUS.success : ACTION_PROGRESS_STATUS.error;\n\n        this._updateActionProgress(\"\", status);\n      }\n    }\n  }, {\n    key: \"_notifyError\",\n    value: function _notifyError(errorInfo) {\n      var status = this.hasNoOperations() ? ACTION_PROGRESS_STATUS.default : ACTION_PROGRESS_STATUS.error;\n\n      this._updateActionProgress(errorInfo.commonErrorText, status);\n    }\n  }, {\n    key: \"_updateActionProgress\",\n    value: function _updateActionProgress(message, status) {\n      this._actionProgressStatus = status;\n\n      this._raiseActionProgress(message, status);\n    }\n  }, {\n    key: \"hasNoOperations\",\n    value: function hasNoOperations() {\n      return 0 === this._operationInProgressCount && 0 === this._failedOperationCount;\n    }\n  }, {\n    key: \"_operationInProgressCount\",\n    get: function get() {\n      return this._operationInProgressCountInternal;\n    },\n    set: function set(value) {\n      this._operationInProgressCountInternal = value;\n    }\n  }, {\n    key: \"_failedOperationCount\",\n    get: function get() {\n      return this._failedOperationCountInternal;\n    },\n    set: function set(value) {\n      this._failedOperationCountInternal = value;\n    }\n  }]);\n\n  return NotificationManager;\n}(NotificationManagerBase);\n\nexport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.notification_manager.js"],"names":["Guid","$","extend","getImageContainer","FileManagerProgressPanel","FILE_MANAGER_PROGRESS_BOX_CLASS","FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS","concat","FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS","FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS","FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS","MANAGER_ID_NAME","ACTION_PROGRESS_STATUS","default","progress","error","success","NotificationManagerBase","_ref","onActionProgressStatusChanged","isActual","_id","toString","_isActual","_actionProgressStatus","_raiseActionProgress","$container","item","errorText","detailsItem","_createDetailsItem","renderError","$wrapper","text","addClass","appendTo","$detailsItem","_createProgressBox","commonText","imageUrl","options","$commonText","$element","NotificationManagerStub","_updateActionProgress","message","status","value","NotificationManager","_failedOperationCount","_operationInProgressCount","processingMessage","allowCancel","allowProgressAutoUpdate","operationInfo","_progressPanel","addOperation","details","showCloseButton","addOperationDetails","itemIndex","itemProgress","commonProgress","updateOperationItemProgress","completeOperationItem","isError","statusText","completeOperation","errorInfo","completeSingleOperationWithError","detailErrorText","_notifyError","addOperationDetailsError","detach","container","$progressPanelElement","ProgressPanelClass","_getProgressPanelComponent","onOperationClosed","_ref2","info","_onProgressPanelOperationClosed","hasError","tryHideActionProgress","hasNoOperations","commonErrorText","_operationInProgressCountInternal","_failedOperationCountInternal"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Guid from \"../../core/guid\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getImageContainer\r\n} from \"../../core/utils/icon\";\r\nimport FileManagerProgressPanel from \"./ui.file_manager.notification.progress_panel\";\r\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\r\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\r\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\r\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\r\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\r\nvar MANAGER_ID_NAME = \"__operationInfoManager\";\r\nvar ACTION_PROGRESS_STATUS = {\r\n    default: \"default\",\r\n    progress: \"progress\",\r\n    error: \"error\",\r\n    success: \"success\"\r\n};\r\nclass NotificationManagerBase {\r\n    constructor(_ref) {\r\n        var {\r\n            onActionProgressStatusChanged: onActionProgressStatusChanged,\r\n            isActual: isActual\r\n        } = _ref;\r\n        this._id = (new Guid).toString();\r\n        this._isActual = isActual || false;\r\n        this._actionProgressStatus = ACTION_PROGRESS_STATUS.default;\r\n        this._raiseActionProgress = onActionProgressStatusChanged\r\n    }\r\n    getId() {\r\n        return this._id\r\n    }\r\n    isActual() {\r\n        return this._isActual\r\n    }\r\n    createErrorDetailsProgressBox($container, item, errorText) {\r\n        var detailsItem = this._createDetailsItem($container, item);\r\n        this.renderError(detailsItem.$wrapper, errorText)\r\n    }\r\n    renderError($container, errorText) {\r\n        $(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container)\r\n    }\r\n    isActionProgressStatusDefault() {\r\n        return this._actionProgressStatus === ACTION_PROGRESS_STATUS.default\r\n    }\r\n    _createDetailsItem($container, item) {\r\n        var $detailsItem = $(\"<div>\").appendTo($container);\r\n        return this._createProgressBox($detailsItem, {\r\n            commonText: item.commonText,\r\n            imageUrl: item.imageUrl\r\n        })\r\n    }\r\n    _createProgressBox($container, options) {\r\n        $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\r\n        if (options.imageUrl) {\r\n            getImageContainer(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container)\r\n        }\r\n        var $wrapper = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\r\n        var $commonText = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\r\n        return {\r\n            $commonText: $commonText,\r\n            $element: $container,\r\n            $wrapper: $wrapper\r\n        }\r\n    }\r\n}\r\nclass NotificationManagerStub extends NotificationManagerBase {\r\n    addOperation() {\r\n        return {\r\n            [MANAGER_ID_NAME]: this._id\r\n        }\r\n    }\r\n    addOperationDetails() {}\r\n    updateOperationItemProgress() {}\r\n    completeOperationItem() {}\r\n    completeOperation() {}\r\n    completeSingleOperationWithError() {}\r\n    addOperationDetailsError() {}\r\n    handleDimensionChanged() {\r\n        return false\r\n    }\r\n    ensureProgressPanelCreated() {}\r\n    tryHideActionProgress() {\r\n        this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default)\r\n    }\r\n    updateActionProgressStatus() {\r\n        this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default)\r\n    }\r\n    _updateActionProgress(message, status) {\r\n        if (status !== ACTION_PROGRESS_STATUS.default && status !== ACTION_PROGRESS_STATUS.progress) {\r\n            return\r\n        }\r\n        this._actionProgressStatus = status;\r\n        this._raiseActionProgress(message, status)\r\n    }\r\n    hasNoOperations() {\r\n        return true\r\n    }\r\n    get _operationInProgressCount() {\r\n        return 0\r\n    }\r\n    set _operationInProgressCount(value) {}\r\n    get _failedOperationCount() {\r\n        return 0\r\n    }\r\n    set _failedOperationCount(value) {}\r\n}\r\nclass NotificationManager extends NotificationManagerBase {\r\n    constructor(options) {\r\n        super(options);\r\n        this._failedOperationCount = 0;\r\n        this._operationInProgressCount = 0\r\n    }\r\n    addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\r\n        this._operationInProgressCount++;\r\n        var operationInfo = this._progressPanel.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\r\n        operationInfo[MANAGER_ID_NAME] = this._id;\r\n        this._updateActionProgress(processingMessage, ACTION_PROGRESS_STATUS.progress);\r\n        return operationInfo\r\n    }\r\n    addOperationDetails(operationInfo, details, showCloseButton) {\r\n        this._progressPanel.addOperationDetails(operationInfo, details, showCloseButton)\r\n    }\r\n    updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\r\n        this._progressPanel.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress)\r\n    }\r\n    completeOperationItem(operationInfo, itemIndex, commonProgress) {\r\n        this._progressPanel.completeOperationItem(operationInfo, itemIndex, commonProgress)\r\n    }\r\n    completeOperation(operationInfo, commonText, isError, statusText) {\r\n        this._operationInProgressCount--;\r\n        if (isError) {\r\n            this._failedOperationCount++\r\n        }\r\n        this._progressPanel.completeOperation(operationInfo, commonText, isError, statusText)\r\n    }\r\n    completeSingleOperationWithError(operationInfo, errorInfo) {\r\n        this._progressPanel.completeSingleOperationWithError(operationInfo, errorInfo.detailErrorText);\r\n        this._notifyError(errorInfo)\r\n    }\r\n    addOperationDetailsError(operationInfo, errorInfo) {\r\n        this._progressPanel.addOperationDetailsError(operationInfo, errorInfo.itemIndex, errorInfo.detailErrorText);\r\n        this._notifyError(errorInfo)\r\n    }\r\n    handleDimensionChanged() {\r\n        if (this._progressPanel) {\r\n            this._progressPanel.$element().detach()\r\n        }\r\n        return true\r\n    }\r\n    ensureProgressPanelCreated(container, options) {\r\n        if (!this._progressPanel) {\r\n            var $progressPanelElement = $(\"<div>\").appendTo(container);\r\n            var ProgressPanelClass = this._getProgressPanelComponent();\r\n            this._progressPanel = new ProgressPanelClass($progressPanelElement, extend({}, options, {\r\n                onOperationClosed: _ref2 => {\r\n                    var {\r\n                        info: info\r\n                    } = _ref2;\r\n                    return this._onProgressPanelOperationClosed(info)\r\n                }\r\n            }))\r\n        } else {\r\n            this._progressPanel.$element().appendTo(container)\r\n        }\r\n    }\r\n    _getProgressPanelComponent() {\r\n        return FileManagerProgressPanel\r\n    }\r\n    _onProgressPanelOperationClosed(operationInfo) {\r\n        if (operationInfo.hasError) {\r\n            this._failedOperationCount--;\r\n            this.tryHideActionProgress(operationInfo)\r\n        }\r\n    }\r\n    tryHideActionProgress() {\r\n        if (this.hasNoOperations()) {\r\n            this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default)\r\n        }\r\n    }\r\n    updateActionProgressStatus(operationInfo) {\r\n        if (operationInfo) {\r\n            var status = 0 === this._failedOperationCount ? ACTION_PROGRESS_STATUS.success : ACTION_PROGRESS_STATUS.error;\r\n            this._updateActionProgress(\"\", status)\r\n        }\r\n    }\r\n    _notifyError(errorInfo) {\r\n        var status = this.hasNoOperations() ? ACTION_PROGRESS_STATUS.default : ACTION_PROGRESS_STATUS.error;\r\n        this._updateActionProgress(errorInfo.commonErrorText, status)\r\n    }\r\n    _updateActionProgress(message, status) {\r\n        this._actionProgressStatus = status;\r\n        this._raiseActionProgress(message, status)\r\n    }\r\n    hasNoOperations() {\r\n        return 0 === this._operationInProgressCount && 0 === this._failedOperationCount\r\n    }\r\n    get _operationInProgressCount() {\r\n        return this._operationInProgressCountInternal\r\n    }\r\n    set _operationInProgressCount(value) {\r\n        this._operationInProgressCountInternal = value\r\n    }\r\n    get _failedOperationCount() {\r\n        return this._failedOperationCountInternal\r\n    }\r\n    set _failedOperationCount(value) {\r\n        this._failedOperationCountInternal = value\r\n    }\r\n}\r\nexport {\r\n    NotificationManager,\r\n    NotificationManagerStub,\r\n    MANAGER_ID_NAME\r\n};\r\n"]},"metadata":{},"sourceType":"module"}