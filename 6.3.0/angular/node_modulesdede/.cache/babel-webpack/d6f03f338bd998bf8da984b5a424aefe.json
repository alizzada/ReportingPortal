{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { animation } from \"./ui.drawer.animation\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\n\nvar DrawerStrategy = /*#__PURE__*/function () {\n  function DrawerStrategy(drawer) {\n    _classCallCheck(this, DrawerStrategy);\n\n    this._drawer = drawer;\n  }\n\n  _createClass(DrawerStrategy, [{\n    key: \"getDrawerInstance\",\n    value: function getDrawerInstance() {\n      return this._drawer;\n    }\n  }, {\n    key: \"renderPanelContent\",\n    value: function renderPanelContent(whenPanelContentRendered) {\n      var drawer = this.getDrawerInstance();\n\n      var template = drawer._getTemplate(drawer.option(\"template\"));\n\n      if (template) {\n        template.render({\n          container: drawer.content(),\n          onRendered: function onRendered() {\n            whenPanelContentRendered.resolve();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"renderPosition\",\n    value: function renderPosition(changePositionUsingFxAnimation, animationDuration) {\n      var whenPositionAnimationCompleted = new Deferred();\n      var whenShaderAnimationCompleted = new Deferred();\n      var drawer = this.getDrawerInstance();\n\n      if (changePositionUsingFxAnimation) {\n        when.apply($, [whenPositionAnimationCompleted, whenShaderAnimationCompleted]).done(function () {\n          drawer._animationCompleteHandler();\n        });\n      }\n\n      this._internalRenderPosition(changePositionUsingFxAnimation, whenPositionAnimationCompleted);\n\n      if (!changePositionUsingFxAnimation) {\n        drawer.resizeViewContent();\n      }\n\n      this.renderShaderVisibility(changePositionUsingFxAnimation, animationDuration, whenShaderAnimationCompleted);\n    }\n  }, {\n    key: \"_getPanelOffset\",\n    value: function _getPanelOffset(isDrawerOpened) {\n      var drawer = this.getDrawerInstance();\n      var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\n\n      if (isDrawerOpened) {\n        return -(size - drawer.getMaxSize());\n      } else {\n        return -(size - drawer.getMinSize());\n      }\n    }\n  }, {\n    key: \"_getPanelSize\",\n    value: function _getPanelSize(isDrawerOpened) {\n      return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize();\n    }\n  }, {\n    key: \"renderShaderVisibility\",\n    value: function renderShaderVisibility(changePositionUsingFxAnimation, duration, whenAnimationCompleted) {\n      var _this = this;\n\n      var drawer = this.getDrawerInstance();\n      var isShaderVisible = drawer.option(\"opened\");\n      var fadeConfig = isShaderVisible ? {\n        from: 0,\n        to: 1\n      } : {\n        from: 1,\n        to: 0\n      };\n\n      if (changePositionUsingFxAnimation) {\n        animation.fade($(drawer._$shader), fadeConfig, duration, function () {\n          _this._drawer._toggleShaderVisibility(isShaderVisible);\n\n          whenAnimationCompleted.resolve();\n        });\n      } else {\n        drawer._toggleShaderVisibility(isShaderVisible);\n\n        drawer._$shader.css(\"opacity\", fadeConfig.to);\n      }\n    }\n  }, {\n    key: \"getPanelContent\",\n    value: function getPanelContent() {\n      return $(this.getDrawerInstance().content());\n    }\n  }, {\n    key: \"setPanelSize\",\n    value: function setPanelSize(calcFromRealPanelSize) {\n      this.refreshPanelElementSize(calcFromRealPanelSize);\n    }\n  }, {\n    key: \"refreshPanelElementSize\",\n    value: function refreshPanelElementSize(calcFromRealPanelSize) {\n      var drawer = this.getDrawerInstance();\n\n      var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n      if (drawer.isHorizontalDirection()) {\n        $(drawer.content()).width(calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize);\n      } else {\n        $(drawer.content()).height(calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize);\n      }\n    }\n  }, {\n    key: \"isViewContentFirst\",\n    value: function isViewContentFirst() {\n      return false;\n    }\n  }, {\n    key: \"onPanelContentRendered\",\n    value: function onPanelContentRendered() {}\n  }]);\n\n  return DrawerStrategy;\n}();\n\nexport default DrawerStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/drawer/ui.drawer.rendering.strategy.js"],"names":["$","animation","Deferred","when","DrawerStrategy","drawer","_drawer","whenPanelContentRendered","getDrawerInstance","template","_getTemplate","option","render","container","content","onRendered","resolve","changePositionUsingFxAnimation","animationDuration","whenPositionAnimationCompleted","whenShaderAnimationCompleted","apply","done","_animationCompleteHandler","_internalRenderPosition","resizeViewContent","renderShaderVisibility","isDrawerOpened","size","isHorizontalDirection","getRealPanelWidth","getRealPanelHeight","getMaxSize","getMinSize","duration","whenAnimationCompleted","isShaderVisible","fadeConfig","from","to","fade","_$shader","_toggleShaderVisibility","css","calcFromRealPanelSize","refreshPanelElementSize","panelSize","_getPanelSize","width","height"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    animation\r\n} from \"./ui.drawer.animation\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nclass DrawerStrategy {\r\n    constructor(drawer) {\r\n        this._drawer = drawer\r\n    }\r\n    getDrawerInstance() {\r\n        return this._drawer\r\n    }\r\n    renderPanelContent(whenPanelContentRendered) {\r\n        var drawer = this.getDrawerInstance();\r\n        var template = drawer._getTemplate(drawer.option(\"template\"));\r\n        if (template) {\r\n            template.render({\r\n                container: drawer.content(),\r\n                onRendered: () => {\r\n                    whenPanelContentRendered.resolve()\r\n                }\r\n            })\r\n        }\r\n    }\r\n    renderPosition(changePositionUsingFxAnimation, animationDuration) {\r\n        var whenPositionAnimationCompleted = new Deferred;\r\n        var whenShaderAnimationCompleted = new Deferred;\r\n        var drawer = this.getDrawerInstance();\r\n        if (changePositionUsingFxAnimation) {\r\n            when.apply($, [whenPositionAnimationCompleted, whenShaderAnimationCompleted]).done(() => {\r\n                drawer._animationCompleteHandler()\r\n            })\r\n        }\r\n        this._internalRenderPosition(changePositionUsingFxAnimation, whenPositionAnimationCompleted);\r\n        if (!changePositionUsingFxAnimation) {\r\n            drawer.resizeViewContent()\r\n        }\r\n        this.renderShaderVisibility(changePositionUsingFxAnimation, animationDuration, whenShaderAnimationCompleted)\r\n    }\r\n    _getPanelOffset(isDrawerOpened) {\r\n        var drawer = this.getDrawerInstance();\r\n        var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\r\n        if (isDrawerOpened) {\r\n            return -(size - drawer.getMaxSize())\r\n        } else {\r\n            return -(size - drawer.getMinSize())\r\n        }\r\n    }\r\n    _getPanelSize(isDrawerOpened) {\r\n        return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize()\r\n    }\r\n    renderShaderVisibility(changePositionUsingFxAnimation, duration, whenAnimationCompleted) {\r\n        var drawer = this.getDrawerInstance();\r\n        var isShaderVisible = drawer.option(\"opened\");\r\n        var fadeConfig = isShaderVisible ? {\r\n            from: 0,\r\n            to: 1\r\n        } : {\r\n            from: 1,\r\n            to: 0\r\n        };\r\n        if (changePositionUsingFxAnimation) {\r\n            animation.fade($(drawer._$shader), fadeConfig, duration, () => {\r\n                this._drawer._toggleShaderVisibility(isShaderVisible);\r\n                whenAnimationCompleted.resolve()\r\n            })\r\n        } else {\r\n            drawer._toggleShaderVisibility(isShaderVisible);\r\n            drawer._$shader.css(\"opacity\", fadeConfig.to)\r\n        }\r\n    }\r\n    getPanelContent() {\r\n        return $(this.getDrawerInstance().content())\r\n    }\r\n    setPanelSize(calcFromRealPanelSize) {\r\n        this.refreshPanelElementSize(calcFromRealPanelSize)\r\n    }\r\n    refreshPanelElementSize(calcFromRealPanelSize) {\r\n        var drawer = this.getDrawerInstance();\r\n        var panelSize = this._getPanelSize(drawer.option(\"opened\"));\r\n        if (drawer.isHorizontalDirection()) {\r\n            $(drawer.content()).width(calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize)\r\n        } else {\r\n            $(drawer.content()).height(calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize)\r\n        }\r\n    }\r\n    isViewContentFirst() {\r\n        return false\r\n    }\r\n    onPanelContentRendered() {}\r\n}\r\nexport default DrawerStrategy;\r\n"]},"metadata":{},"sourceType":"module"}