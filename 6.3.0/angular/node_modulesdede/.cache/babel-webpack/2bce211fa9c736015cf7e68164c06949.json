{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { name as doubleClickEvent } from \"../../events/double_click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES } from \"./ui.grid_core.editing_constants\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\n\nvar createFailureHandler = function createFailureHandler(deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar isEditingCell = function isEditingCell(isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function isEditingOrShowEditorAlwaysDataCell(isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = function getButtonIndex(buttons, name) {\n    var result = -1;\n    buttons.some(function (button, index) {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n\n  return {\n    init: function init() {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n\n      if (this._deferreds) {\n        this._deferreds.forEach(function (d) {\n          return d.reject(\"cancel\");\n        });\n      }\n\n      this._deferreds = [];\n\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n\n      this._updateEditColumn();\n\n      this._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function getEditMode() {\n      var editMode = this.option(\"editing.mode\");\n\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function _getDefaultEditorTemplate() {\n      var _this = this;\n\n      return function (container, options) {\n        var $editor = $(\"<div>\").appendTo(container);\n\n        _this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    getChanges: function getChanges() {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    resetChanges: function resetChanges() {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function _getInternalData(key) {\n      return this._internalState.filter(function (item) {\n        return equalByValue(item.key, key);\n      })[0];\n    },\n    _addInternalData: function _addInternalData(params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return extend(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function _getOldData(key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function getUpdatedData(data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function getInsertedData() {\n      return this.getChanges().filter(function (change) {\n        return change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE;\n      }).map(function (change) {\n        return change.data;\n      });\n    },\n    getRemovedData: function getRemovedData() {\n      var _this2 = this;\n\n      return this.getChanges().filter(function (change) {\n        return _this2._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE;\n      }).map(function (change) {\n        return _this2._getOldData(change.key);\n      });\n    },\n    _fireDataErrorOccurred: function _fireDataErrorOccurred(arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n      var result = true;\n\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n\n        case \"undelete\":\n          result = false;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function _isButtonVisible(button, options) {\n      var visible = button.visible;\n\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _getButtonConfig: function _getButtonConfig(button, options) {\n      var _this3 = this;\n\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n\n      var editingTexts = function (options) {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      }(options);\n\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName],\n        onClick: function onClick(e) {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(function () {\n            options.row && allowAction && _this3[methodName] && _this3[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function _getEditingButtons(options) {\n      var _this4 = this;\n\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(function (button) {\n        return _this4._getButtonConfig(button, options);\n      });\n    },\n    _renderEditingButtons: function _renderEditingButtons($container, buttons, options) {\n      var _this5 = this;\n\n      buttons.forEach(function (button) {\n        if (_this5._isButtonVisible(button, options)) {\n          _this5._createButton($container, button, options);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function _getEditCommandCellTemplate() {\n      var _this6 = this;\n\n      return function (container, options) {\n        var $container = $(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = _this6._getEditingButtons(options);\n\n          _this6._renderEditingButtons($container, buttons, options);\n\n          options.watch && options.watch(function () {\n            return buttons.map(function (button) {\n              return _this6._isButtonVisible(button, options);\n            });\n          }, function () {\n            $container.empty();\n\n            _this6._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function isRowBasedEditMode() {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function getFirstEditableColumnIndex() {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function getFirstEditableCellInRow(rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function getFocusedCellInRow(rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function getIndexByKey(key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function hasChanges(rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function dispose() {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          this._handleChangesChange(args);\n        } else if (!args.handled) {\n          this.init();\n          this.resetChanges();\n\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function _handleEditRowKeyChange(args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function _handleChangesChange(args) {\n      var dataController = this._dataController;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      this._processInsertChanges(args.value);\n\n      dataController.updateItems({\n        repaintChangesOnly: true\n      });\n    },\n    _processInsertChanges: function _processInsertChanges(changes) {\n      var _this7 = this;\n\n      changes.forEach(function (change) {\n        if (\"insert\" === change.type) {\n          _this7._addInsertInfo(change);\n        }\n      });\n    },\n    publicMethods: function publicMethods() {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function refresh(isPageChanged) {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n\n      this._refreshCore(isPageChanged);\n    },\n    _refreshCore: noop,\n    isEditing: function isEditing() {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function isEditRow() {\n      return false;\n    },\n    _setEditRowKey: function _setEditRowKey(value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function _setEditRowKeyByIndex(rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function getEditRowIndex() {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function getEditFormRowIndex() {\n      return -1;\n    },\n    isEditCell: function isEditCell(visibleRowIndex, columnIndex) {\n      return this._getVisibleEditRowIndex() === visibleRowIndex && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _needInsertItem: function _needInsertItem(change, changeType) {\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var scrollingMode = this.option(\"scrolling.mode\");\n      var pageIndex = dataSource.pageIndex();\n      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\n      var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\n      var isLastPage = endPageIndex === dataSource.pageCount() - 1;\n\n      if (\"standard\" !== scrollingMode) {\n        var pageSize = dataSource.pageSize() || 1;\n        var changePageIndex = Math.floor(change.index / pageSize);\n        var needInsertOnLastPosition = isLastPage && -1 === change.index;\n\n        switch (changeType) {\n          case \"append\":\n            return changePageIndex === endPageIndex || needInsertOnLastPosition;\n\n          case \"prepend\":\n            return changePageIndex === beginPageIndex;\n\n          default:\n            var _dataController$topIt, _dataController$botto;\n\n            var topItemIndex = null === (_dataController$topIt = dataController.topItemIndex) || void 0 === _dataController$topIt ? void 0 : _dataController$topIt.call(dataController);\n            var bottomItemIndex = null === (_dataController$botto = dataController.bottomItemIndex) || void 0 === _dataController$botto ? void 0 : _dataController$botto.call(dataController);\n\n            if (this.option(NEW_SCROLLING_MODE) && isDefined(topItemIndex)) {\n              return change.index >= topItemIndex && change.index <= bottomItemIndex || needInsertOnLastPosition;\n            }\n\n            return changePageIndex >= beginPageIndex && changePageIndex <= endPageIndex || needInsertOnLastPosition;\n        }\n      }\n\n      return change.pageIndex === pageIndex || -1 === change.pageIndex && isLastPage;\n    },\n    _generateNewItem: function _generateNewItem(key) {\n      var _this$_getInternalDat2;\n\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndex: function _getLoadedRowIndex(items, change, key) {\n      var dataController = this._dataController;\n      var loadedRowIndexOffset = dataController.getRowIndexOffset(true);\n      var changes = this.getChanges();\n      var index = change ? changes.filter(function (editChange) {\n        return equalByValue(editChange.key, key);\n      })[0].index : 0;\n      var loadedRowIndex = index - loadedRowIndexOffset;\n\n      if (\"append\" === change.changeType) {\n        loadedRowIndex -= dataController.items(true).length;\n\n        if (change.removeCount) {\n          loadedRowIndex += change.removeCount;\n        }\n      }\n\n      for (var i = 0; i < loadedRowIndex; i++) {\n        if (items[i] && items[i][INSERT_INDEX]) {\n          loadedRowIndex++;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function processItems(items, e) {\n      var _this8 = this;\n\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(function (change) {\n        var _this$_getInternalDat3;\n\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n\n        if (!isInsert) {\n          return;\n        }\n\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = _this8._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n\n        if (!isDefined(change.key) || !isDefined(insertInfo)) {\n          var keys = _this8._addInsertInfo(change);\n\n          key = keys.key;\n          insertInfo = keys.insertInfo;\n        }\n\n        var loadedRowIndex = _this8._getLoadedRowIndex(items, e, key);\n\n        var item = _this8._generateNewItem(key);\n\n        if ((loadedRowIndex >= 0 || -1 === change.index) && _this8._needInsertItem(change, changeType, items, item)) {\n          if (-1 !== change.index) {\n            items.splice(change.index ? loadedRowIndex : 0, 0, item);\n          } else {\n            items.push(item);\n          }\n        }\n      });\n      return items;\n    },\n    processDataItem: function processDataItem(item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function _processDataItemCore(item, change, key, columns, generateDataValues) {\n      var data = change.data,\n          type = change.type;\n\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function _initNewRow(options) {\n      var _this9 = this;\n\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this9._fireDataErrorOccurred(arg);\n        });\n        return deferred;\n      }\n    },\n    _calculateIndex: function _calculateIndex(rowIndex) {\n      var dataController = this._dataController;\n      var rows = dataController.items();\n      return dataController.getRowIndexOffset() + rows.filter(function (row, index) {\n        return index < rowIndex && (\"data\" === row.rowType && !row.isNewRow || \"group\" === row.rowType);\n      }).length;\n    },\n    _createInsertInfo: function _createInsertInfo() {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _getCorrectedInsertRowIndex: function _getCorrectedInsertRowIndex(parentKey) {\n      var rowIndex = this._getInsertRowIndex(parentKey);\n\n      var dataController = this._dataController;\n      var rows = dataController.items();\n      var row = rows[rowIndex];\n\n      if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n        rowIndex++;\n      }\n\n      return rowIndex;\n    },\n    _addInsertInfo: function _addInsertInfo(change, parentKey) {\n      var _this$_getInternalDat4;\n\n      var insertInfo;\n      var rowIndex;\n      var key = change.key;\n\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n\n      if (!isDefined(insertInfo)) {\n        rowIndex = this._getCorrectedInsertRowIndex(parentKey);\n        insertInfo = this._createInsertInfo();\n\n        this._setIndexes(change, rowIndex);\n      }\n\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n\n      return {\n        insertInfo: insertInfo,\n        key: key,\n        rowIndex: rowIndex\n      };\n    },\n    _setIndexes: function _setIndexes(change, rowIndex) {\n      var _change$index;\n\n      var dataController = this._dataController;\n      change.index = null !== (_change$index = change.index) && void 0 !== _change$index ? _change$index : this._calculateIndex(rowIndex);\n\n      if (\"virtual\" !== this.option(\"scrolling.mode\")) {\n        var _change$pageIndex;\n\n        change.pageIndex = null !== (_change$pageIndex = change.pageIndex) && void 0 !== _change$pageIndex ? _change$pageIndex : dataController.pageIndex();\n      }\n    },\n    _getInsertRowIndex: function _getInsertRowIndex(parentKey) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var parentRowIndex = this._dataController.getRowIndexByKey(parentKey);\n\n      if (parentRowIndex >= 0) {\n        return parentRowIndex + 1;\n      }\n\n      if (rowsView) {\n        return rowsView.getTopVisibleItemIndex(true);\n      }\n\n      return 0;\n    },\n    _getInsertIndex: function _getInsertIndex() {\n      var _this10 = this;\n\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(function (editItem) {\n        var _this$_getInternalDat5;\n\n        var insertInfo = null === (_this$_getInternalDat5 = _this10._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    addRow: function addRow(parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n\n      return this._addRow(parentKey);\n    },\n    _addRow: function _addRow(parentKey) {\n      var _this11 = this;\n\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var deferred = new Deferred();\n      this.refresh();\n\n      if (!this._allowRowAdding()) {\n        return deferred.reject(\"cancel\");\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n\n      when(this._initNewRow(param, parentKey)).done(function () {\n        if (_this11._allowRowAdding()) {\n          _this11._addRowCore(param.data, parentKey, oldEditRowIndex);\n\n          deferred.resolve();\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function _allowRowAdding() {\n      var insertIndex = this._getInsertIndex();\n\n      if (insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function _addRowCore(data, parentKey, initialOldEditRowIndex) {\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n\n      var _this$_addInsertInfo = this._addInsertInfo(change, parentKey),\n          key = _this$_addInsertInfo.key,\n          rowIndex = _this$_addInsertInfo.rowIndex;\n\n      this._setEditRowKey(key, true);\n\n      this._addChange(change);\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [initialOldEditRowIndex, oldEditRowIndex, rowIndex]\n      });\n\n      this._showAddedRow(rowIndex);\n\n      this._afterInsertRow({\n        key: key,\n        data: data\n      });\n    },\n    _showAddedRow: function _showAddedRow(rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _focusFirstEditableCellInRow: function _focusFirstEditableCellInRow(rowIndex) {\n      var _this12 = this;\n\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n\n      this._delayedInputFocus($firstCell, function () {\n        _this12._editCellInProgress = false;\n\n        var $cell = _this12.getFirstEditableCellInRow(rowIndex);\n\n        var eventToTrigger = \"dblClick\" === _this12.option(\"editing.startEditAction\") ? doubleClickEvent : clickEventName;\n        $cell && eventsEngine.trigger($cell, eventToTrigger);\n      });\n    },\n    _isEditingStart: function _isEditingStart(options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function _getVisibleEditColumnIndex() {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function _setEditColumnNameByIndex(index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function _setEditColumnName(name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function _resetEditColumnName() {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function _getEditColumn() {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function _getColumnByName(name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      isDefined(name) && visibleColumns.some(function (column) {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function _getVisibleEditRowIndex(columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function _getEditRowIndexCorrection(columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function _resetEditRowKey() {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function _resetEditIndices() {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function editRow(rowIndex) {\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function _editRowFromOptionChanged(rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex);\n    },\n    _editRowFromOptionChangedCore: function _editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex) {\n      this._needFocusEditor = true;\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function _getEditPopupHiddenHandler() {\n      var _this13 = this;\n\n      return function (e) {\n        if (_this13.isEditing()) {\n          _this13.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function _getSaveButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function _getCancelButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function _removeInternalData(key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _removeChange: function _removeChange(index) {\n      if (index >= 0) {\n        var changes = _toConsumableArray(this.getChanges());\n\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function executeOperation(deferred, func) {\n      var _this14 = this;\n\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(function () {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        _this14._lastOperation = null;\n      }).fail(function () {\n        deferred.reject();\n        _this14._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function waitForDeferredOperations() {\n      return when.apply(void 0, _toConsumableArray(this._deferreds));\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function _repaintEditCell(column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var _this15 = this;\n\n      var inputFocus = function inputFocus() {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(_this15, $focusableElement);\n        }\n\n        _this15._beforeFocusCallback = null;\n      };\n\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n\n        clearTimeout(this._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n      this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n    },\n    deleteRow: function deleteRow(rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function _checkAndDeleteRow(rowIndex) {\n      var _this16 = this;\n\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n\n      var item = this._dataController.items()[rowIndex];\n\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function (confirmResult) {\n            if (confirmResult) {\n              _this16._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function _deleteRowCore(rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function _afterDeleteRow(rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function undeleteRow(rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var data = changes[editIndex].data;\n\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function _fireOnSaving() {\n      var _this17 = this;\n\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: _toConsumableArray(this.getChanges())\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(function () {\n        d.resolve(onSavingParams);\n      }).fail(function (arg) {\n        createFailureHandler(d);\n\n        _this17._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function _executeEditingAction(actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function _processChanges(deferreds, results, dataChanges, changes) {\n      var _this18 = this;\n\n      var store = this._dataController.store();\n\n      each(changes, function (index, change) {\n        var oldData = _this18._getOldData(change.key);\n\n        var data = change.data,\n            type = change.type;\n\n        var changeCopy = _extends({}, change);\n\n        var deferred;\n        var params;\n\n        if (_this18._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this18._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = _this18._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this18._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function _processRemoveIfError(changes, editIndex) {\n      var change = changes[editIndex];\n\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n\n      return true;\n    },\n    _processRemove: function _processRemove(changes, editIndex, cancel) {\n      var change = changes[editIndex];\n\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function _processRemoveCore(changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n\n      return true;\n    },\n    _processSaveEditDataResult: function _processSaveEditDataResult(results) {\n      var hasSavedData = false;\n\n      var changes = _toConsumableArray(this.getChanges());\n\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          this._fireDataErrorOccurred(arg);\n\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function _fireSaveEditDataEvents(changes) {\n      var _this19 = this;\n\n      each(changes, function (_, _ref) {\n        var data = _ref.data,\n            key = _ref.key,\n            type = _ref.type;\n\n        var internalData = _this19._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            _this19.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            _this19.executeAction(\"onRowInserted\", params);\n\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            _this19.executeAction(\"onRowUpdated\", params);\n\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function saveEditData() {\n      var _this20 = this;\n\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(function () {\n        if (_this20.isSaving()) {\n          _this20._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        when(_this20._beforeSaveEditData()).done(function (cancel) {\n          if (cancel) {\n            _this20._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          _this20._saving = true;\n\n          _this20._saveEditDataInner().always(function () {\n            _this20._saving = false;\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function _resolveAfterSave(deferred) {\n      var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          cancel = _ref3.cancel,\n          error = _ref3.error;\n\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function _saveEditDataInner() {\n      var _this21 = this;\n\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new Deferred();\n      when(this._fireOnSaving()).done(function (_ref2) {\n        var cancel = _ref2.cancel,\n            changes = _ref2.changes;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        _this21._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when.apply(void 0, deferreds).done(function () {\n            if (_this21._processSaveEditDataResult(results)) {\n              _this21._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(function (error) {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(function () {\n            _this21._focusEditingCell();\n          }).promise();\n        }\n\n        _this21._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function _beforeEndSaving(changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function _endSaving(dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n\n      this._beforeEndSaving(changes);\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function _cancelSaving(result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function _refreshDataAfterSave(dataChanges, changes, deferred) {\n      var _this22 = this;\n\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(function () {\n        _this22._fireSaveEditDataEvents(changes);\n      }).done(function () {\n        _this22._resolveAfterSave(deferred);\n      }).fail(function (error) {\n        _this22._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function isSaving() {\n      return this._saving;\n    },\n    _updateEditColumn: function _updateEditColumn() {\n      var isEditColumnVisible = this._isEditColumnVisible();\n\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function _isEditColumnVisible() {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function _isEditButtonDisabled() {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function _updateEditButtons() {\n      var headerPanel = this.getView(\"headerPanel\");\n\n      var isButtonDisabled = this._isEditButtonDisabled();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function _applyModified($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function cancelEditData() {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function _cancelEditDataCore() {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function _afterCancelEditData(rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function hasEditData() {\n      return this.hasChanges();\n    },\n    update: function update(changeType) {\n      var dataController = this._dataController;\n\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh(true);\n        }\n\n        this._pageIndex = dataController.pageIndex();\n      }\n\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function addDeferred(deferred) {\n      var _this23 = this;\n\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(function () {\n          var index = _this23._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            _this23._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function _prepareChange(options, value, text) {\n      var _this24 = this;\n\n      var _options$row;\n\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this24._fireDataErrorOccurred(arg);\n        });\n\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        this._updateRowValues(options);\n\n        this.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function _updateRowValues(options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function updateFieldValue(options, value, text, forceUpdateRow) {\n      var _this25 = this;\n\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(function (params) {\n          when(_this25._applyChange(options, params, forceUpdateRow)).always(function () {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function _focusPreviousEditingCellIfNeed(options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n\n        this._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function _needUpdateRow(column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(function (visibleColumn) {\n        return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue;\n      });\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function _applyChange(options, params, forceUpdateRow) {\n      this._addChange(params, options.row);\n\n      this._updateEditButtons();\n\n      return this._applyChangeCore(options, forceUpdateRow);\n    },\n    _applyChangeCore: function _applyChangeCore(options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function _updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function _updateRowWithDelay(row, isCustomSetCellValue) {\n      var _this26 = this;\n\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(function () {\n        var $focusedElement = $(domAdapter.getActiveElement());\n\n        var columnIndex = _this26._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n        _this26._updateEditRowCore(row, false, isCustomSetCellValue);\n\n        _this26._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n        if (columnIndex >= 0) {\n          var $focusedItem = _this26._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n          _this26._delayedInputFocus($focusedItem, function () {\n            setTimeout(function () {\n              focusedElement = domAdapter.getActiveElement();\n\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function _addChange(options, row) {\n      var changes = _toConsumableArray(this.getChanges());\n\n      var index = gridCoreUtils.getIndexByKey(options.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: options.key,\n          oldData: options.oldData\n        });\n\n        delete options.oldData;\n        changes.push(options);\n      }\n\n      var change = _extends({}, changes[index]);\n\n      if (change) {\n        if (options.data) {\n          change.data = createObjectWithChanges(change.data, options.data);\n        }\n\n        if ((!change.type || !options.data) && options.type) {\n          change.type = options.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, options.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      return index;\n    },\n    _getFormEditItemTemplate: function _getFormEditItemTemplate(cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function getColumnTemplate(options) {\n      var _this27 = this;\n\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            this._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = function (value, text) {\n              _this27.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n\n      return template;\n    },\n    _createButton: function _createButton($container, button, options) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n          button.onClick.call(button, extend({}, e, {\n            row: options.row,\n            column: options.column\n          }));\n          e.event.preventDefault();\n          e.event.stopPropagation();\n        }));\n        $container.append($button, \"&nbsp;\");\n      }\n    },\n    getButtonLocalizationNames: function getButtonLocalizationNames() {\n      return {\n        edit: \"dxDataGrid-editingEditRow\",\n        save: \"dxDataGrid-editingSaveRowChanges\",\n        delete: \"dxDataGrid-editingDeleteRow\",\n        undelete: \"dxDataGrid-editingUndeleteRow\",\n        cancel: \"dxDataGrid-editingCancelRowChanges\"\n      };\n    },\n    prepareButtonItem: function prepareButtonItem(headerPanel, name, methodName, sortIndex) {\n      var _this28 = this;\n\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: function onInitialized(e) {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + _this28.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: function onClick() {\n            setTimeout(function () {\n              _this28[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function prepareEditButtons(headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function highlightDataCell($cell, parameters) {\n      var cellModified = this.isCellModified(parameters);\n      cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function _beforeSaveEditData(change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function _allowEditAction(actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function allowUpdating(options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function allowDeleting(options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function isCellModified(parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    }\n  };\n}());\nexport var editingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      }\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function reload(full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function repaintRows() {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function _updateEditRow(items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            var _this$_updateEditItem;\n\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function _updateItemsCore(change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items());\n        },\n        _applyChangeUpdate: function _applyChangeUpdate(change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function _applyChangesOnly(change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function _processItems(items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function _processDataItem(dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function _processItem(item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function init() {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function getCellIndex($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function publicMethods() {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function _getCellTemplate(options) {\n          var template = this._editingController.getColumnTemplate(options);\n\n          return template || this.callBase(options);\n        },\n        _isNativeClick: function _isNativeClick() {\n          return (devices.real().ios || devices.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function _getColumnIndexByElement($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function _getColumnIndexByElementCore($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function _editCellByClick(e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n\n          var row = this._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\n            editingController.closeEditCell();\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function _rowPointerDown(e) {\n          var _this29 = this;\n\n          this._pointerDownTimeout = setTimeout(function () {\n            _this29._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function _rowClick(e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function _rowDblClick(e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function _cellPrepared($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function _getCellOptions(options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function _createCell(options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function cellValue(rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function dispose() {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function _renderCore() {\n          this.callBase.apply(this, arguments);\n\n          this._editingController._focusEditorIfNeed();\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function optionChanged(args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(function (optionName) {\n                return optionName === fullName;\n              });\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function isVisible() {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js"],"names":["_extends","$","domAdapter","eventsEngine","Guid","isDefined","isObject","isFunction","isEmptyObject","each","extend","modules","name","clickEventName","doubleClickEvent","pointerEvents","gridCoreUtils","createObjectWithChanges","addNamespace","confirm","messageLocalization","devices","when","Deferred","fromPromise","equalByValue","noop","iconUtils","EDITOR_CELL_CLASS","ROW_CLASS","EDIT_FORM_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","EDITING_POPUP_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","TARGET_COMPONENT_NAME","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_ROW","EDIT_MODES","ROW_BASED_MODES","READONLY_CLASS","LINK_CLASS","ROW_SELECTED","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","INSERT_INDEX","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","CELL_FOCUS_DISABLED_CLASS","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_LINK_CLASS","save","cancel","edit","undelete","delete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_CHANGES_OPTION_NAME","NEW_SCROLLING_MODE","createFailureHandler","deferred","arg","error","Error","String","reject","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getButtonIndex","buttons","result","some","button","index","getButtonName","init","_columnsController","getController","_dataController","_rowsView","getView","_lastOperation","_deferreds","forEach","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","component","_optionsByReference","getEditMode","editMode","option","indexOf","_getDefaultEditorTemplate","container","options","$editor","appendTo","createEditor","value","setValue","row","parentType","width","readOnly","isOnForm","id","getChanges","resetChanges","changes","needReset","length","_silentOption","_getInternalData","key","filter","item","_addInternalData","params","internalData","push","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","change","type","map","getRemovedData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","_closeEditItem","_isDefaultButtonVisible","allowDeleting","_isButtonVisible","visible","call","_getButtonConfig","config","buttonName","editingTexts","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","watch","empty","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnsController","columnIndex","visibleColumns","getVisibleColumns","getFirstEditableCellInRow","rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","optionChanged","args","fullName","_handleEditRowKeyChange","_handleChangesChange","handled","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_processInsertChanges","updateItems","repaintChangesOnly","_addInsertInfo","publicMethods","refresh","isPageChanged","_pageIndex","_refreshCore","isEditRowKeyDefined","_setEditRowKey","silent","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_needInsertItem","changeType","dataSource","scrollingMode","pageIndex","beginPageIndex","endPageIndex","isLastPage","pageCount","pageSize","changePageIndex","Math","floor","needInsertOnLastPosition","_dataController$topIt","_dataController$botto","topItemIndex","bottomItemIndex","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndexOffset","getRowIndexOffset","editChange","loadedRowIndex","removeCount","processItems","update","_this$_getInternalDat3","isInsert","keys","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","done","resolve","fail","_calculateIndex","rows","_createInsertInfo","_getInsertIndex","_getCorrectedInsertRowIndex","parentKey","_getInsertRowIndex","_this$_getInternalDat4","_setIndexes","_change$index","_change$pageIndex","parentRowIndex","getTopVisibleItemIndex","maxInsertIndex","editItem","_this$_getInternalDat5","addRow","store","NAME","_addRow","param","oldEditRowIndex","_allowRowAdding","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","_addChange","rowIndices","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","$firstCell","_editCellInProgress","_delayedInputFocus","$cell","eventToTrigger","trigger","_isEditingStart","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","_editRowFromOptionChangedCore","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","saveEditData","_getCancelButtonConfig","_removeInternalData","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","loseFocus","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","_focusEditingCell","$editCell","editColumnIndex","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","arguments","_afterSaveEditData","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","headerPanel","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","getVisibleRows","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","$focusedElement","getActiveElement","getCellIndex","focusedElement","get","selectionRange","getSelectionRange","$focusedItem","selectionStart","setSelectionRange","_getFormEditItemTemplate","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","on","append","prepareButtonItem","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","element","_getToolbarButtonClass","addWidgetPrefix","disabled","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","parameters","cellModified","isCellModified","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","form","colCount","popup","controllers","extenders","_editingController","full","apply","repaintRows","editRowIndex","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","_isCellChanged","oldRow","newRow","editingController","cell","cells","views","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_isNativeClick","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","$targetElement","_editCellByClick","target","editCell","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClick","isEditForm","rowElement","hasClass","_rowDblClick","_cellPrepared","isEditableCell","toggleClass","css","_editCellPrepared","_formItemPrepared","_getCellOptions","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    name as doubleClickEvent\r\n} from \"../../events/double_click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    confirm\r\n} from \"../dialog\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as iconUtils from \"../../core/utils/icon\";\r\nimport {\r\n    EDITOR_CELL_CLASS,\r\n    ROW_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    TARGET_COMPONENT_NAME,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    ROW_BASED_MODES\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    delete: \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    delete: \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    delete: \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    delete: \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = modules.ViewController.inherit(function() {\r\n    var getButtonIndex = (buttons, name) => {\r\n        var result = -1;\r\n        buttons.some((button, index) => {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return isObject(button) ? button.name : button\r\n    }\r\n    return {\r\n        init: function() {\r\n            this._columnsController = this.getController(\"columns\");\r\n            this._dataController = this.getController(\"data\");\r\n            this._rowsView = this.getView(\"rowsView\");\r\n            this._lastOperation = null;\r\n            if (this._deferreds) {\r\n                this._deferreds.forEach(d => d.reject(\"cancel\"))\r\n            }\r\n            this._deferreds = [];\r\n            if (!this._dataChangedHandler) {\r\n                this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n                this._dataController.changed.add(this._dataChangedHandler)\r\n            }\r\n            if (!this._saveEditorHandler) {\r\n                this.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                })\r\n            }\r\n            this._updateEditColumn();\r\n            this._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getEditMode: function() {\r\n            var editMode = this.option(\"editing.mode\");\r\n            if (-1 !== EDIT_MODES.indexOf(editMode)) {\r\n                return editMode\r\n            }\r\n            return EDIT_MODE_ROW\r\n        },\r\n        _getDefaultEditorTemplate: function() {\r\n            return (container, options) => {\r\n                var $editor = $(\"<div>\").appendTo(container);\r\n                this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\r\n                    value: options.value,\r\n                    setValue: options.setValue,\r\n                    row: options.row,\r\n                    parentType: \"dataRow\",\r\n                    width: null,\r\n                    readOnly: !options.setValue,\r\n                    isOnForm: options.isOnForm,\r\n                    id: options.id\r\n                }))\r\n            }\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(item => equalByValue(item.key, key))[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return extend(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return createObjectWithChanges(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data)\r\n        },\r\n        getRemovedData: function() {\r\n            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key))\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: noop,\r\n        _closeEditItem: noop,\r\n        _handleDataChanged: noop,\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            switch (button.name) {\r\n                case \"delete\":\r\n                    result = this.allowDeleting(options);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = false\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var config = isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = (options => {\r\n                var editingTexts = options.component.option(\"editing.texts\") || {};\r\n                return {\r\n                    save: editingTexts.saveRowChanges,\r\n                    cancel: editingTexts.cancelRowChanges,\r\n                    edit: editingTexts.editRow,\r\n                    undelete: editingTexts.undeleteRow,\r\n                    delete: editingTexts.deleteRow,\r\n                    add: editingTexts.addRowToNode\r\n                }\r\n            })(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return extend({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName],\r\n                onClick: e => {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(() => {\r\n                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                    })\r\n                }\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(button => this._getButtonConfig(button, options))\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options) {\r\n            buttons.forEach(button => {\r\n                if (this._isButtonVisible(button, options)) {\r\n                    this._createButton($container, button, options)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            return (container, options) => {\r\n                var $container = $(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = this._getEditingButtons(options);\r\n                    this._renderEditingButtons($container, buttons, options);\r\n                    options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowBasedEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return -1 !== ROW_BASED_MODES.indexOf(editMode)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var columnIndex;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            each(visibleColumns, (function(index, column) {\r\n                if (column.allowEditing) {\r\n                    columnIndex = index;\r\n                    return false\r\n                }\r\n            }));\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return gridCoreUtils.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                    this._handleEditRowKeyChange(args)\r\n                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                    this._handleChangesChange(args)\r\n                } else if (!args.handled) {\r\n                    this.init();\r\n                    this.resetChanges();\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value)) {\r\n                if (args.value !== args.previousValue) {\r\n                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                }\r\n            } else {\r\n                this.cancelEditData()\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            this._processInsertChanges(args.value);\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true\r\n            })\r\n        },\r\n        _processInsertChanges: function(changes) {\r\n            changes.forEach(change => {\r\n                if (\"insert\" === change.type) {\r\n                    this._addInsertInfo(change)\r\n                }\r\n            })\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function(isPageChanged) {\r\n            if (!isDefined(this._pageIndex)) {\r\n                return\r\n            }\r\n            this._refreshCore(isPageChanged)\r\n        },\r\n        _refreshCore: noop,\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function() {\r\n            return false\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            return -1\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this._getVisibleEditRowIndex() === visibleRowIndex && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: noop,\r\n        _needInsertItem: function(change, changeType) {\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            var pageIndex = dataSource.pageIndex();\r\n            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\r\n            var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\r\n            var isLastPage = endPageIndex === dataSource.pageCount() - 1;\r\n            if (\"standard\" !== scrollingMode) {\r\n                var pageSize = dataSource.pageSize() || 1;\r\n                var changePageIndex = Math.floor(change.index / pageSize);\r\n                var needInsertOnLastPosition = isLastPage && -1 === change.index;\r\n                switch (changeType) {\r\n                    case \"append\":\r\n                        return changePageIndex === endPageIndex || needInsertOnLastPosition;\r\n                    case \"prepend\":\r\n                        return changePageIndex === beginPageIndex;\r\n                    default:\r\n                        var _dataController$topIt, _dataController$botto;\r\n                        var topItemIndex = null === (_dataController$topIt = dataController.topItemIndex) || void 0 === _dataController$topIt ? void 0 : _dataController$topIt.call(dataController);\r\n                        var bottomItemIndex = null === (_dataController$botto = dataController.bottomItemIndex) || void 0 === _dataController$botto ? void 0 : _dataController$botto.call(dataController);\r\n                        if (this.option(NEW_SCROLLING_MODE) && isDefined(topItemIndex)) {\r\n                            return change.index >= topItemIndex && change.index <= bottomItemIndex || needInsertOnLastPosition\r\n                        }\r\n                        return changePageIndex >= beginPageIndex && changePageIndex <= endPageIndex || needInsertOnLastPosition\r\n                }\r\n            }\r\n            return change.pageIndex === pageIndex || -1 === change.pageIndex && isLastPage\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var _this$_getInternalDat2;\r\n            var item = {\r\n                key: key\r\n            };\r\n            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndex: function(items, change, key) {\r\n            var dataController = this._dataController;\r\n            var loadedRowIndexOffset = dataController.getRowIndexOffset(true);\r\n            var changes = this.getChanges();\r\n            var index = change ? changes.filter(editChange => equalByValue(editChange.key, key))[0].index : 0;\r\n            var loadedRowIndex = index - loadedRowIndexOffset;\r\n            if (\"append\" === change.changeType) {\r\n                loadedRowIndex -= dataController.items(true).length;\r\n                if (change.removeCount) {\r\n                    loadedRowIndex += change.removeCount\r\n                }\r\n            }\r\n            for (var i = 0; i < loadedRowIndex; i++) {\r\n                if (items[i] && items[i][INSERT_INDEX]) {\r\n                    loadedRowIndex++\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(change => {\r\n                var _this$_getInternalDat3;\r\n                var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n                if (!isInsert) {\r\n                    return\r\n                }\r\n                var key = change.key;\r\n                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n                if (!isDefined(change.key) || !isDefined(insertInfo)) {\r\n                    var keys = this._addInsertInfo(change);\r\n                    key = keys.key;\r\n                    insertInfo = keys.insertInfo\r\n                }\r\n                var loadedRowIndex = this._getLoadedRowIndex(items, e, key);\r\n                var item = this._generateNewItem(key);\r\n                if ((loadedRowIndex >= 0 || -1 === change.index) && this._needInsertItem(change, changeType, items, item)) {\r\n                    if (-1 !== change.index) {\r\n                        items.splice(change.index ? loadedRowIndex : 0, 0, item)\r\n                    } else {\r\n                        items.push(item)\r\n                    }\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n            }\r\n        },\r\n        _processDataItemCore: function(item, change, key, columns, generateDataValues) {\r\n            var {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    item.isNewRow = true;\r\n                    item.key = key;\r\n                    item.data = data;\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    item.modified = true;\r\n                    item.oldData = item.data;\r\n                    item.data = createObjectWithChanges(item.data, data);\r\n                    item.modifiedValues = generateDataValues(data, columns, true);\r\n                    break;\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    item.removed = true\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new Deferred;\r\n                when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                return deferred\r\n            }\r\n        },\r\n        _calculateIndex: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var rows = dataController.items();\r\n            return dataController.getRowIndexOffset() + rows.filter((function(row, index) {\r\n                return index < rowIndex && (\"data\" === row.rowType && !row.isNewRow || \"group\" === row.rowType)\r\n            })).length\r\n        },\r\n        _createInsertInfo: function() {\r\n            var insertInfo = {};\r\n            insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n            return insertInfo\r\n        },\r\n        _getCorrectedInsertRowIndex: function(parentKey) {\r\n            var rowIndex = this._getInsertRowIndex(parentKey);\r\n            var dataController = this._dataController;\r\n            var rows = dataController.items();\r\n            var row = rows[rowIndex];\r\n            if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                rowIndex++\r\n            }\r\n            return rowIndex\r\n        },\r\n        _addInsertInfo: function(change, parentKey) {\r\n            var _this$_getInternalDat4;\r\n            var insertInfo;\r\n            var rowIndex;\r\n            var {\r\n                key: key\r\n            } = change;\r\n            if (!isDefined(key)) {\r\n                key = String(new Guid);\r\n                change.key = key\r\n            }\r\n            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n            if (!isDefined(insertInfo)) {\r\n                rowIndex = this._getCorrectedInsertRowIndex(parentKey);\r\n                insertInfo = this._createInsertInfo();\r\n                this._setIndexes(change, rowIndex)\r\n            }\r\n            this._addInternalData({\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            });\r\n            return {\r\n                insertInfo: insertInfo,\r\n                key: key,\r\n                rowIndex: rowIndex\r\n            }\r\n        },\r\n        _setIndexes: function(change, rowIndex) {\r\n            var _change$index;\r\n            var dataController = this._dataController;\r\n            change.index = null !== (_change$index = change.index) && void 0 !== _change$index ? _change$index : this._calculateIndex(rowIndex);\r\n            if (\"virtual\" !== this.option(\"scrolling.mode\")) {\r\n                var _change$pageIndex;\r\n                change.pageIndex = null !== (_change$pageIndex = change.pageIndex) && void 0 !== _change$pageIndex ? _change$pageIndex : dataController.pageIndex()\r\n            }\r\n        },\r\n        _getInsertRowIndex: function(parentKey) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var parentRowIndex = this._dataController.getRowIndexByKey(parentKey);\r\n            if (parentRowIndex >= 0) {\r\n                return parentRowIndex + 1\r\n            }\r\n            if (rowsView) {\r\n                return rowsView.getTopVisibleItemIndex(true)\r\n            }\r\n            return 0\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(editItem => {\r\n                var _this$_getInternalDat5;\r\n                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n                if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = insertInfo[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return (new Deferred).reject()\r\n            }\r\n            return this._addRow(parentKey)\r\n        },\r\n        _addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var deferred = new Deferred;\r\n            this.refresh();\r\n            if (!this._allowRowAdding()) {\r\n                return deferred.reject(\"cancel\")\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new Guid)\r\n            }\r\n            when(this._initNewRow(param, parentKey)).done(() => {\r\n                if (this._allowRowAdding()) {\r\n                    this._addRowCore(param.data, parentKey, oldEditRowIndex);\r\n                    deferred.resolve()\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var insertIndex = this._getInsertIndex();\r\n            if (insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var change = {\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            };\r\n            var {\r\n                key: key,\r\n                rowIndex: rowIndex\r\n            } = this._addInsertInfo(change, parentKey);\r\n            this._setEditRowKey(key, true);\r\n            this._addChange(change);\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [initialOldEditRowIndex, oldEditRowIndex, rowIndex]\r\n            });\r\n            this._showAddedRow(rowIndex);\r\n            this._afterInsertRow({\r\n                key: key,\r\n                data: data\r\n            })\r\n        },\r\n        _showAddedRow: function(rowIndex) {\r\n            this._focusFirstEditableCellInRow(rowIndex)\r\n        },\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n            this._editCellInProgress = true;\r\n            this._delayedInputFocus($firstCell, () => {\r\n                this._editCellInProgress = false;\r\n                var $cell = this.getFirstEditableCellInRow(rowIndex);\r\n                var eventToTrigger = \"dblClick\" === this.option(\"editing.startEditAction\") ? doubleClickEvent : clickEventName;\r\n                $cell && eventsEngine.trigger($cell, eventToTrigger)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeUpdateItems: noop,\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!isDefined(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            isDefined(name) && visibleColumns.some(column => {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (-1 === rowIndex) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            this._editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex)\r\n        },\r\n        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, oldRowIndex) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndices\r\n            })\r\n        },\r\n        _focusEditorIfNeed: noop,\r\n        _showEditPopup: noop,\r\n        _repaintEditPopup: noop,\r\n        _getEditPopupHiddenHandler: function() {\r\n            return e => {\r\n                if (this.isEditing()) {\r\n                    this.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: noop,\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = [...this.getChanges()];\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                this._lastOperation = null\r\n            }).fail(() => {\r\n                deferred.reject();\r\n                this._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return when(...this._deferreds)\r\n        },\r\n        _processCanceledEditingCell: noop,\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else if (column !== oldColumn) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: []\r\n                })\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var inputFocus = () => {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n                }\r\n                this._beforeFocusCallback = null\r\n            };\r\n            if (devices.real().ios || devices.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (this._beforeFocusCallback) {\r\n                    this._beforeFocusCallback()\r\n                }\r\n                clearTimeout(this._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    this._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            this._checkAndDeleteRow(rowIndex)\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var editingOptions = this.option(\"editing\");\r\n            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n            var item = this._dataController.items()[rowIndex];\r\n            var allowDeleting = !this.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (!confirmDelete || !confirmDeleteMessage) {\r\n                    this._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\r\n                        if (confirmResult) {\r\n                            this._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n        },\r\n        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n            return this.saveEditData()\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var {\r\n                        data: data\r\n                    } = changes[editIndex];\r\n                    if (isEmptyObject(data)) {\r\n                        this._removeChange(editIndex)\r\n                    } else {\r\n                        this._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: [...this.getChanges()]\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new Deferred;\r\n            when(fromPromise(onSavingParams.promise)).done(() => {\r\n                d.resolve(onSavingParams)\r\n            }).fail(arg => {\r\n                createFailureHandler(d);\r\n                this._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new Deferred;\r\n            this.executeAction(actionName, params);\r\n            when(fromPromise(params.cancel)).done((function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout((function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    }))\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            })).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var store = this._dataController.store();\r\n            each(changes, (index, change) => {\r\n                var oldData = this._getOldData(change.key);\r\n                var {\r\n                    data: data,\r\n                    type: type\r\n                } = change;\r\n                var changeCopy = _extends({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (this._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowRemoving\", params, (function() {\r\n                            return store.remove(change.key).done((function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowInserting\", params, (function() {\r\n                            return store.insert(params.data).done((function(data, key) {\r\n                                if (isDefined(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && isObject(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowUpdating\", params, (function() {\r\n                            return store.update(change.key, params.newData).done((function(data, key) {\r\n                                if (data && isObject(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            }))\r\n                        }))\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new Deferred;\r\n                    deferred.always((function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    })).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processRemoveIfError: function(changes, editIndex) {\r\n            var change = changes[editIndex];\r\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                if (editIndex >= 0) {\r\n                    changes.splice(editIndex, 1)\r\n                }\r\n            }\r\n            return true\r\n        },\r\n        _processRemove: function(changes, editIndex, cancel) {\r\n            var change = changes[editIndex];\r\n            if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n            }\r\n        },\r\n        _processRemoveCore: function(changes, editIndex) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n            return true\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var hasSavedData = false;\r\n            var changes = [...this.getChanges()];\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    this._fireDataErrorOccurred(arg);\r\n                    if (this._processRemoveIfError(changes, editIndex)) {\r\n                        break\r\n                    }\r\n                } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                    hasSavedData = !cancel\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            each(changes, (_, _ref) => {\r\n                var {\r\n                    data: data,\r\n                    key: key,\r\n                    type: type\r\n                } = _ref;\r\n                var internalData = this._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        this.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        this.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var deferred = new Deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (this.isSaving()) {\r\n                    this._resolveAfterSave(deferred);\r\n                    return\r\n                }\r\n                when(this._beforeSaveEditData()).done(cancel => {\r\n                    if (cancel) {\r\n                        this._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    this._saving = true;\r\n                    this._saveEditDataInner().always(() => {\r\n                        this._saving = false\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var {\r\n                cancel: cancel,\r\n                error: error\r\n            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n            when(this._afterSaveEditData(cancel)).done((function() {\r\n                deferred.resolve(error)\r\n            })).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function() {\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var result = new Deferred;\r\n            when(this._fireOnSaving()).done(_ref2 => {\r\n                var {\r\n                    cancel: cancel,\r\n                    changes: changes\r\n                } = _ref2;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                this._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    when(...deferreds).done(() => {\r\n                        if (this._processSaveEditDataResult(results)) {\r\n                            this._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(error => {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(() => {\r\n                        this._focusEditingCell()\r\n                    }).promise()\r\n                }\r\n                this._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _beforeEndSaving: function(changes) {\r\n            this._resetEditIndices()\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var dataSource = this._dataController.dataSource();\r\n            this._beforeEndSaving(changes);\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }\r\n            when(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(() => {\r\n                this._fireSaveEditDataEvents(changes)\r\n            }).done(() => {\r\n                this._resolveAfterSave(deferred)\r\n            }).fail(error => {\r\n                this._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var isEditColumnVisible = this._isEditColumnVisible();\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            this._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: this._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            this._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var editingOptions = this.option(\"editing\");\r\n            return editingOptions.allowDeleting\r\n        },\r\n        _isEditButtonDisabled: function() {\r\n            var hasChanges = this.hasChanges();\r\n            var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n            return !(isEditRowDefined || hasChanges)\r\n        },\r\n        _updateEditButtons: function() {\r\n            var headerPanel = this.getView(\"headerPanel\");\r\n            var isButtonDisabled = this._isEditButtonDisabled();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: noop,\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            this._afterCancelEditData(rowIndex)\r\n        },\r\n        _afterCancelEditData: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            dataController.updateItems({\r\n                repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n            })\r\n        },\r\n        _hideEditPopup: noop,\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        update: function(changeType) {\r\n            var dataController = this._dataController;\r\n            if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    this.refresh(true)\r\n                }\r\n                this._pageIndex = dataController.pageIndex()\r\n            }\r\n            this._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(() => {\r\n                    var index = this._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        this._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 !== rowKey) {\r\n                options.value = value;\r\n                var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n                setCellValueResult.done((function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                if (isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                this._updateRowValues(options);\r\n                this.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(params => {\r\n                    when(this._applyChange(options, params, forceUpdateRow)).always(() => {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                this._focusEditingCell();\r\n                this._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            this._addChange(params, options.row);\r\n            this._updateEditButtons();\r\n            return this._applyChangeCore(options, forceUpdateRow)\r\n        },\r\n        _applyChangeCore: function(options, forceUpdateRow) {\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else if (row.update) {\r\n                    row.update()\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n            })\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            if (forceUpdateRow) {\r\n                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else {\r\n                this._updateRowWithDelay(row, isCustomSetCellValue)\r\n            }\r\n        },\r\n        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (!forceUpdateRow) {\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _updateRowWithDelay: function(row, isCustomSetCellValue) {\r\n            var deferred = new Deferred;\r\n            this.addDeferred(deferred);\r\n            setTimeout(() => {\r\n                var $focusedElement = $(domAdapter.getActiveElement());\r\n                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                var focusedElement = $focusedElement.get(0);\r\n                var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n                this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n                if (columnIndex >= 0) {\r\n                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                    this._delayedInputFocus($focusedItem, () => {\r\n                        setTimeout(() => {\r\n                            focusedElement = domAdapter.getActiveElement();\r\n                            if (selectionRange.selectionStart >= 0) {\r\n                                gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            })\r\n        },\r\n        _validateEditFormAfterUpdate: noop,\r\n        _addChange: function(options, row) {\r\n            var changes = [...this.getChanges()];\r\n            var index = gridCoreUtils.getIndexByKey(options.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: options.key,\r\n                    oldData: options.oldData\r\n                });\r\n                delete options.oldData;\r\n                changes.push(options)\r\n            }\r\n            var change = _extends({}, changes[index]);\r\n            if (change) {\r\n                if (options.data) {\r\n                    change.data = createObjectWithChanges(change.data, options.data)\r\n                }\r\n                if ((!change.type || !options.data) && options.type) {\r\n                    change.type = options.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = createObjectWithChanges(row.data, options.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            return index\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = this.isRowBasedEditMode();\r\n            var isRowEditing = this.isEditRow(rowIndex);\r\n            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = this.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        this._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = (value, text) => {\r\n                            this.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n            } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options) {\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template) {\r\n                this._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((function(e) {\r\n                    button.onClick.call(button, extend({}, e, {\r\n                        row: options.row,\r\n                        column: options.column\r\n                    }));\r\n                    e.event.preventDefault();\r\n                    e.event.stopPropagation()\r\n                })));\r\n                $container.append($button, \"&nbsp;\")\r\n            }\r\n        },\r\n        getButtonLocalizationNames: () => ({\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }),\r\n        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {\r\n            var editingTexts = this.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var className = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            } [name];\r\n            var hintText = titleButtonTextByClassNames[name];\r\n            var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n            return {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: e => {\r\n                        $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"))\r\n                    },\r\n                    icon: \"edit-button-\" + className,\r\n                    disabled: isButtonDisabled,\r\n                    onClick: () => {\r\n                        setTimeout(() => {\r\n                            this[methodName]()\r\n                        })\r\n                    },\r\n                    text: hintText,\r\n                    hint: hintText\r\n                },\r\n                showText: \"inMenu\",\r\n                name: name + \"Button\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: sortIndex\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var editingOptions = this.option(\"editing\") || {};\r\n            var buttonItems = [];\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: noop,\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: noop,\r\n        _beforeCancelEditData: noop,\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        }\r\n    }\r\n}());\r\nexport var editingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        var _this$_updateEditItem;\r\n                        editItem.isEditing = true;\r\n                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items())\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        each($cellElements, (function(index, cellElement) {\r\n                            if ($(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        }));\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var template = this._editingController.getColumnTemplate(options);\r\n                    return template || this.callBase(options)\r\n                },\r\n                _isNativeClick: function() {\r\n                    return (devices.real().ios || devices.real().android) && this.option(\"editing.allowUpdating\")\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var editingController = this._editingController;\r\n                    var $targetElement = $(e.event.target);\r\n                    var columnIndex = this._getColumnIndexByElement($targetElement);\r\n                    var row = this._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\r\n                    var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n                    if (\"down\" === eventName) {\r\n                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\r\n                        editingController.closeEditCell()\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    this._pointerDownTimeout = setTimeout(() => {\r\n                        this._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    if (parameters.column && !isCommandCell) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: noop,\r\n                _formItemPrepared: noop,\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._editingController._focusEditorIfNeed()\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}