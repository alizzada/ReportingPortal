{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { isNumeric } from \"../../../core/utils/type\";\nimport dateUtils from \"../../../core/utils/date\";\nimport timeZoneUtils from \"./../utils.timeZone\";\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar VerticalRenderingStrategy = /*#__PURE__*/function (_BaseAppointmentsStra) {\n  _inherits(VerticalRenderingStrategy, _BaseAppointmentsStra);\n\n  var _super = _createSuper(VerticalRenderingStrategy);\n\n  function VerticalRenderingStrategy() {\n    _classCallCheck(this, VerticalRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VerticalRenderingStrategy, [{\n    key: \"getDeltaTime\",\n    value: function getDeltaTime(args, initialSize, appointment) {\n      var deltaTime = 0;\n\n      if (this.isAllDay(appointment)) {\n        deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\");\n      } else {\n        var deltaHeight = args.height - initialSize.height;\n        deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.getDefaultCellHeight() * this.instance.getAppointmentDurationInMinutes());\n      }\n\n      return deltaTime;\n    }\n  }, {\n    key: \"_correctCollectorCoordinatesInAdaptive\",\n    value: function _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n      if (isAllDay) {\n        _get(_getPrototypeOf(VerticalRenderingStrategy.prototype), \"_correctCollectorCoordinatesInAdaptive\", this).call(this, coordinates, isAllDay);\n      } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\n        var cellHeight = this.getDefaultCellHeight();\n        var cellWidth = this.getDefaultCellWidth();\n        coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\n        coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2;\n      }\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(coordinates) {\n      var geometry = null;\n\n      if (coordinates.allDay) {\n        geometry = this._getAllDayAppointmentGeometry(coordinates);\n      } else {\n        geometry = this._isAdaptive() && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates);\n      }\n\n      return _get(_getPrototypeOf(VerticalRenderingStrategy.prototype), \"getAppointmentGeometry\", this).call(this, geometry);\n    }\n  }, {\n    key: \"_getAdaptiveGeometry\",\n    value: function _getAdaptiveGeometry(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(appointment) {\n      var adapter = this.instance.createAppointmentAdapter(appointment);\n      var allDay = this.isAllDay(appointment);\n      var isRecurring = !!adapter.recurrenceRule;\n      var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\n      var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\n      var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\n\n      if (allDay) {\n        return _get(_getPrototypeOf(VerticalRenderingStrategy.prototype), \"_getItemPosition\", this).call(this, appointment);\n      }\n\n      var settings = this._getAppointmentCoordinates(appointment);\n\n      var result = [];\n\n      for (var j = 0; j < settings.length; j++) {\n        var currentSetting = settings[j];\n        var height = this.calculateAppointmentHeight(appointment, currentSetting);\n        var width = this.calculateAppointmentWidth(appointment, currentSetting);\n        var resultHeight = height;\n        var appointmentReduced = null;\n        var multiDaysAppointmentParts = [];\n        var currentMaxAllowedPosition = currentSetting.vMax;\n\n        if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\n          var reduceHead = dateUtils.sameDate(appointmentStartDate, currentSetting.info.appointment.startDate) || isRecurring;\n\n          if (reduceHead) {\n            resultHeight = this._reduceMultiDayAppointment(height, {\n              top: currentSetting.top,\n              bottom: currentMaxAllowedPosition\n            });\n            multiDaysAppointmentParts = this._getAppointmentParts({\n              sourceAppointmentHeight: height,\n              reducedHeight: resultHeight,\n              width: width\n            }, currentSetting);\n          }\n\n          var isMultiDay = this._isMultiDayAppointment(currentSetting, height);\n\n          if (isMultiDay) {\n            appointmentReduced = reduceHead ? \"head\" : \"tail\";\n          }\n        }\n\n        extend(currentSetting, {\n          height: resultHeight,\n          width: width,\n          allDay: allDay,\n          appointmentReduced: appointmentReduced\n        });\n        result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isMultiDayAppointment\",\n    value: function _isMultiDayAppointment(position, height) {\n      if (this.isVirtualScrolling) {\n        var maxTop = this._getGroupHeight() - this._getGroupTopOffset(position);\n\n        return height > maxTop;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_isMultiViewAppointment\",\n    value: function _isMultiViewAppointment(position, height) {\n      return height > position.vMax - position.top;\n    }\n  }, {\n    key: \"_reduceMultiDayAppointment\",\n    value: function _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\n      sourceAppointmentHeight = bound.bottom - Math.floor(bound.top);\n      return sourceAppointmentHeight;\n    }\n  }, {\n    key: \"_getGroupHeight\",\n    value: function _getGroupHeight() {\n      var workspace = this.instance.getWorkSpace();\n      return workspace.getCellHeight() * workspace._getRowCount();\n    }\n  }, {\n    key: \"_getGroupTopOffset\",\n    value: function _getGroupTopOffset(appointmentSettings) {\n      var groupTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\n      var allDayPanelOffset = this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\n      var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\n      return appointmentGroupTopOffset;\n    }\n  }, {\n    key: \"_getTailHeight\",\n    value: function _getTailHeight(appointmentGeometry, appointmentSettings) {\n      if (!this.isVirtualScrolling) {\n        return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight;\n      }\n\n      var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\n\n      var sourceAppointmentHeight = appointmentGeometry.sourceAppointmentHeight;\n\n      var groupHeight = this._getGroupHeight();\n\n      var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\n      return tailHeight;\n    }\n  }, {\n    key: \"_getAppointmentParts\",\n    value: function _getAppointmentParts(appointmentGeometry, appointmentSettings) {\n      var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\n\n      var width = appointmentGeometry.width;\n      var result = [];\n      var currentPartTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\n      var cellsDiff = this.instance.fire(\"isGroupedByDate\") ? this.instance.fire(\"getGroupCount\") : 1;\n      var offset = this.getDefaultCellWidth() * cellsDiff;\n      var left = appointmentSettings.left + offset;\n\n      if (tailHeight > 0) {\n        var minHeight = this.getAppointmentMinSize();\n\n        if (tailHeight < minHeight) {\n          tailHeight = minHeight;\n        }\n\n        currentPartTop += this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\n        result.push(extend(true, {}, appointmentSettings, {\n          top: currentPartTop,\n          left: left,\n          height: tailHeight,\n          width: width,\n          appointmentReduced: \"tail\",\n          rowIndex: 0,\n          cellIndex: appointmentSettings.cellIndex + cellsDiff\n        }));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getMinuteHeight\",\n    value: function _getMinuteHeight() {\n      return this.getDefaultCellHeight() / this.instance.getAppointmentDurationInMinutes();\n    }\n  }, {\n    key: \"_getCompactLeftCoordinate\",\n    value: function _getCompactLeftCoordinate(itemLeft, index) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      return itemLeft + (1 + cellWidth) * index;\n    }\n  }, {\n    key: \"_getVerticalAppointmentGeometry\",\n    value: function _getVerticalAppointmentGeometry(coordinates) {\n      var config = this._calculateVerticalGeometryConfig(coordinates);\n\n      return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_customizeVerticalCoordinates\",\n    value: function _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\n      var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\n      var height = coordinates.height;\n      var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\n      var top = coordinates.top;\n\n      if (coordinates.isCompact) {\n        this._markAppointmentAsVirtual(coordinates, isAllDay);\n      }\n\n      return {\n        height: height,\n        width: appointmentWidth,\n        top: top,\n        left: appointmentLeft,\n        empty: this._isAppointmentEmpty(height, width)\n      };\n    }\n  }, {\n    key: \"_calculateVerticalGeometryConfig\",\n    value: function _calculateVerticalGeometryConfig(coordinates) {\n      var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n      var offsets = this._getOffsets();\n\n      var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n\n      var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n\n      var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n\n      var maxWidth = this._getMaxWidth();\n\n      if (!appointmentCountPerCell) {\n        appointmentCountPerCell = coordinates.count;\n        ratio = (maxWidth - offsets.unlimited) / maxWidth;\n      }\n\n      var topOffset = (1 - ratio) * maxWidth;\n\n      if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n        ratio = 1;\n        maxWidth -= appointmentDefaultOffset;\n        topOffset = 0;\n      }\n\n      return {\n        width: ratio * maxWidth,\n        appointmentCountPerCell: appointmentCountPerCell,\n        offset: topOffset\n      };\n    }\n  }, {\n    key: \"_getMaxWidth\",\n    value: function _getMaxWidth() {\n      return this.getDefaultCellWidth() || this.invoke(\"getCellWidth\");\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay(appointmentData) {\n      var allDay = this.instance.fire(\"getField\", \"allDay\", appointmentData);\n\n      if (allDay) {\n        return true;\n      }\n\n      return this.instance.appointmentTakesAllDay(appointmentData);\n    }\n  }, {\n    key: \"_getAppointmentMaxWidth\",\n    value: function _getAppointmentMaxWidth() {\n      return this.getDefaultCellWidth() - this._getAppointmentDefaultOffset();\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth(appointment, position) {\n      if (!this.isAllDay(appointment)) {\n        return 0;\n      }\n\n      var startDate = dateUtils.trimTime(position.info.appointment.startDate);\n      var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      var durationInHours = (endDate.getTime() - startDate.getTime()) / toMs(\"hour\");\n      var width = Math.ceil(durationInHours / 24) * cellWidth;\n      width = this.cropAppointmentWidth(width, cellWidth);\n      return width;\n    }\n  }, {\n    key: \"calculateAppointmentHeight\",\n    value: function calculateAppointmentHeight(appointment, position) {\n      if (this.isAllDay(appointment)) {\n        return 0;\n      }\n\n      var startDate = position.info.appointment.startDate;\n      var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n      var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n\n      var fullDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n      var durationInMinutes = this._adjustDurationByDaylightDiff(fullDuration, startDate, endDate) / toMs(\"minute\");\n\n      var height = durationInMinutes * this._getMinuteHeight();\n\n      return height;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      return \"vertical\";\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition(a, b) {\n      var allDayCondition = a.allDay - b.allDay;\n      var isAllDay = a.allDay && b.allDay;\n      var condition = \"vertical\" === this.instance._groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\n      return allDayCondition ? allDayCondition : condition;\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments() {\n      return true;\n    }\n  }, {\n    key: \"_getAllDayAppointmentGeometry\",\n    value: function _getAllDayAppointmentGeometry(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true);\n    }\n  }, {\n    key: \"_calculateGeometryConfig\",\n    value: function _calculateGeometryConfig(coordinates) {\n      if (!this.instance._allowResizing() || !this.instance._allowAllDayResizing()) {\n        coordinates.skipResizing = true;\n      }\n\n      var config = _get(_getPrototypeOf(VerticalRenderingStrategy.prototype), \"_calculateGeometryConfig\", this).call(this, coordinates);\n\n      if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\n        config.offset = 0;\n      }\n\n      return config;\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function _getAppointmentCount(overlappingMode, coordinates) {\n      return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay);\n    }\n  }, {\n    key: \"_getDefaultRatio\",\n    value: function _getDefaultRatio(coordinates, appointmentCountPerCell) {\n      return coordinates.count > this.instance.option(\"_appointmentCountPerCell\") ? .65 : 1;\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\n        auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\n      };\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {\n      return this.getDefaultAllDayCellHeight() || this.getAppointmentMinSize();\n    }\n  }, {\n    key: \"_needVerticalGroupBounds\",\n    value: function _needVerticalGroupBounds(allDay) {\n      return !allDay;\n    }\n  }, {\n    key: \"_needHorizontalGroupBounds\",\n    value: function _needHorizontalGroupBounds() {\n      return false;\n    }\n  }]);\n\n  return VerticalRenderingStrategy;\n}(BaseAppointmentsStrategy);\n\nexport default VerticalRenderingStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js"],"names":["BaseAppointmentsStrategy","extend","isNumeric","dateUtils","timeZoneUtils","ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET","ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET","toMs","dateToMilliseconds","VerticalRenderingStrategy","args","initialSize","appointment","deltaTime","isAllDay","_getDeltaWidth","deltaHeight","height","Math","round","getDefaultCellHeight","instance","getAppointmentDurationInMinutes","coordinates","_getMaxAppointmentCountPerCellByType","cellHeight","cellWidth","getDefaultCellWidth","top","getDropDownButtonAdaptiveSize","left","geometry","allDay","_getAllDayAppointmentGeometry","_isAdaptive","isCompact","_getAdaptiveGeometry","_getVerticalAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","appointmentCountPerCell","offset","adapter","createAppointmentAdapter","isRecurring","recurrenceRule","appointmentStartDate","calculateStartDate","appointmentEndDate","calculateEndDate","isAppointmentTakesSeveralDays","isSameAppointmentDates","settings","_getAppointmentCoordinates","result","j","length","currentSetting","calculateAppointmentHeight","width","calculateAppointmentWidth","resultHeight","appointmentReduced","multiDaysAppointmentParts","currentMaxAllowedPosition","vMax","_isMultiViewAppointment","reduceHead","sameDate","info","startDate","_reduceMultiDayAppointment","bottom","_getAppointmentParts","sourceAppointmentHeight","reducedHeight","isMultiDay","_isMultiDayAppointment","_getAppointmentPartsPosition","position","isVirtualScrolling","maxTop","_getGroupHeight","_getGroupTopOffset","bound","floor","workspace","getWorkSpace","getCellHeight","_getRowCount","appointmentSettings","groupTop","max","fire","groupIndex","allDayPanelOffset","appointmentGroupTopOffset","appointmentGeometry","groupHeight","tailHeight","_getTailHeight","currentPartTop","cellsDiff","minHeight","getAppointmentMinSize","push","rowIndex","cellIndex","itemLeft","index","_calculateVerticalGeometryConfig","_customizeVerticalCoordinates","topOffset","appointmentWidth","count","appointmentLeft","_markAppointmentAsVirtual","empty","_isAppointmentEmpty","overlappingMode","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxWidth","_getMaxWidth","unlimited","invoke","appointmentData","appointmentTakesAllDay","trimTime","endDate","normalizeEndDateByViewEnd","durationInHours","getTime","ceil","cropAppointmentWidth","fullDuration","_getAppointmentDurationInMs","durationInMinutes","_adjustDurationByDaylightDiff","_getMinuteHeight","a","b","allDayCondition","condition","_groupOrientation","_columnCondition","_rowCondition","_allowResizing","_allowAllDayResizing","skipResizing","_getDynamicAppointmentCountPerCell","option","auto","getDefaultAllDayCellHeight"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.vertical.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../core/utils/type\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport timeZoneUtils from \"./../utils.timeZone\";\r\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\r\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    getDeltaTime(args, initialSize, appointment) {\r\n        var deltaTime = 0;\r\n        if (this.isAllDay(appointment)) {\r\n            deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\")\r\n        } else {\r\n            var deltaHeight = args.height - initialSize.height;\r\n            deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.getDefaultCellHeight() * this.instance.getAppointmentDurationInMinutes())\r\n        }\r\n        return deltaTime\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        if (isAllDay) {\r\n            super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay)\r\n        } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\r\n            var cellHeight = this.getDefaultCellHeight();\r\n            var cellWidth = this.getDefaultCellWidth();\r\n            coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\r\n            coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2\r\n        }\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var geometry = null;\r\n        if (coordinates.allDay) {\r\n            geometry = this._getAllDayAppointmentGeometry(coordinates)\r\n        } else {\r\n            geometry = this._isAdaptive() && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates)\r\n        }\r\n        return super.getAppointmentGeometry(geometry)\r\n    }\r\n    _getAdaptiveGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var adapter = this.instance.createAppointmentAdapter(appointment);\r\n        var allDay = this.isAllDay(appointment);\r\n        var isRecurring = !!adapter.recurrenceRule;\r\n        var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\r\n        var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\r\n        var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\r\n        if (allDay) {\r\n            return super._getItemPosition(appointment)\r\n        }\r\n        var settings = this._getAppointmentCoordinates(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < settings.length; j++) {\r\n            var currentSetting = settings[j];\r\n            var height = this.calculateAppointmentHeight(appointment, currentSetting);\r\n            var width = this.calculateAppointmentWidth(appointment, currentSetting);\r\n            var resultHeight = height;\r\n            var appointmentReduced = null;\r\n            var multiDaysAppointmentParts = [];\r\n            var currentMaxAllowedPosition = currentSetting.vMax;\r\n            if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\r\n                var reduceHead = dateUtils.sameDate(appointmentStartDate, currentSetting.info.appointment.startDate) || isRecurring;\r\n                if (reduceHead) {\r\n                    resultHeight = this._reduceMultiDayAppointment(height, {\r\n                        top: currentSetting.top,\r\n                        bottom: currentMaxAllowedPosition\r\n                    });\r\n                    multiDaysAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentHeight: height,\r\n                        reducedHeight: resultHeight,\r\n                        width: width\r\n                    }, currentSetting)\r\n                }\r\n                var isMultiDay = this._isMultiDayAppointment(currentSetting, height);\r\n                if (isMultiDay) {\r\n                    appointmentReduced = reduceHead ? \"head\" : \"tail\"\r\n                }\r\n            }\r\n            extend(currentSetting, {\r\n                height: resultHeight,\r\n                width: width,\r\n                allDay: allDay,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result)\r\n        }\r\n        return result\r\n    }\r\n    _isMultiDayAppointment(position, height) {\r\n        if (this.isVirtualScrolling) {\r\n            var maxTop = this._getGroupHeight() - this._getGroupTopOffset(position);\r\n            return height > maxTop\r\n        }\r\n        return false\r\n    }\r\n    _isMultiViewAppointment(position, height) {\r\n        return height > position.vMax - position.top\r\n    }\r\n    _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\r\n        sourceAppointmentHeight = bound.bottom - Math.floor(bound.top);\r\n        return sourceAppointmentHeight\r\n    }\r\n    _getGroupHeight() {\r\n        var workspace = this.instance.getWorkSpace();\r\n        return workspace.getCellHeight() * workspace._getRowCount()\r\n    }\r\n    _getGroupTopOffset(appointmentSettings) {\r\n        var groupTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\r\n        var allDayPanelOffset = this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\r\n        var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\r\n        return appointmentGroupTopOffset\r\n    }\r\n    _getTailHeight(appointmentGeometry, appointmentSettings) {\r\n        if (!this.isVirtualScrolling) {\r\n            return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight\r\n        }\r\n        var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\r\n        var {\r\n            sourceAppointmentHeight: sourceAppointmentHeight\r\n        } = appointmentGeometry;\r\n        var groupHeight = this._getGroupHeight();\r\n        var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\r\n        return tailHeight\r\n    }\r\n    _getAppointmentParts(appointmentGeometry, appointmentSettings) {\r\n        var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\r\n        var width = appointmentGeometry.width;\r\n        var result = [];\r\n        var currentPartTop = Math.max(0, this.instance.fire(\"getGroupTop\", appointmentSettings.groupIndex));\r\n        var cellsDiff = this.instance.fire(\"isGroupedByDate\") ? this.instance.fire(\"getGroupCount\") : 1;\r\n        var offset = this.getDefaultCellWidth() * cellsDiff;\r\n        var left = appointmentSettings.left + offset;\r\n        if (tailHeight > 0) {\r\n            var minHeight = this.getAppointmentMinSize();\r\n            if (tailHeight < minHeight) {\r\n                tailHeight = minHeight\r\n            }\r\n            currentPartTop += this.instance.fire(\"getOffsetByAllDayPanel\", appointmentSettings.groupIndex);\r\n            result.push(extend(true, {}, appointmentSettings, {\r\n                top: currentPartTop,\r\n                left: left,\r\n                height: tailHeight,\r\n                width: width,\r\n                appointmentReduced: \"tail\",\r\n                rowIndex: 0,\r\n                cellIndex: appointmentSettings.cellIndex + cellsDiff\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _getMinuteHeight() {\r\n        return this.getDefaultCellHeight() / this.instance.getAppointmentDurationInMinutes()\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return itemLeft + (1 + cellWidth) * index\r\n    }\r\n    _getVerticalAppointmentGeometry(coordinates) {\r\n        var config = this._calculateVerticalGeometryConfig(coordinates);\r\n        return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\r\n        var height = coordinates.height;\r\n        var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\r\n        var top = coordinates.top;\r\n        if (coordinates.isCompact) {\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: height,\r\n            width: appointmentWidth,\r\n            top: top,\r\n            left: appointmentLeft,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _calculateVerticalGeometryConfig(coordinates) {\r\n        var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxWidth = this._getMaxWidth();\r\n        if (!appointmentCountPerCell) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxWidth - offsets.unlimited) / maxWidth\r\n        }\r\n        var topOffset = (1 - ratio) * maxWidth;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxWidth -= appointmentDefaultOffset;\r\n            topOffset = 0\r\n        }\r\n        return {\r\n            width: ratio * maxWidth,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getMaxWidth() {\r\n        return this.getDefaultCellWidth() || this.invoke(\"getCellWidth\")\r\n    }\r\n    isAllDay(appointmentData) {\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointmentData);\r\n        if (allDay) {\r\n            return true\r\n        }\r\n        return this.instance.appointmentTakesAllDay(appointmentData)\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth() - this._getAppointmentDefaultOffset()\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        if (!this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = dateUtils.trimTime(position.info.appointment.startDate);\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        var durationInHours = (endDate.getTime() - startDate.getTime()) / toMs(\"hour\");\r\n        var width = Math.ceil(durationInHours / 24) * cellWidth;\r\n        width = this.cropAppointmentWidth(width, cellWidth);\r\n        return width\r\n    }\r\n    calculateAppointmentHeight(appointment, position) {\r\n        if (this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = position.info.appointment.startDate;\r\n        var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var fullDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\r\n        var durationInMinutes = this._adjustDurationByDaylightDiff(fullDuration, startDate, endDate) / toMs(\"minute\");\r\n        var height = durationInMinutes * this._getMinuteHeight();\r\n        return height\r\n    }\r\n    getDirection() {\r\n        return \"vertical\"\r\n    }\r\n    _sortCondition(a, b) {\r\n        var allDayCondition = a.allDay - b.allDay;\r\n        var isAllDay = a.allDay && b.allDay;\r\n        var condition = \"vertical\" === this.instance._groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\r\n        return allDayCondition ? allDayCondition : condition\r\n    }\r\n    hasAllDayAppointments() {\r\n        return true\r\n    }\r\n    _getAllDayAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true)\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        if (!this.instance._allowResizing() || !this.instance._allowAllDayResizing()) {\r\n            coordinates.skipResizing = true\r\n        }\r\n        var config = super._calculateGeometryConfig(coordinates);\r\n        if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\r\n            config.offset = 0\r\n        }\r\n        return config\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay)\r\n    }\r\n    _getDefaultRatio(coordinates, appointmentCountPerCell) {\r\n        return coordinates.count > this.instance.option(\"_appointmentCountPerCell\") ? .65 : 1\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\r\n            auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\r\n        }\r\n    }\r\n    _getMaxHeight() {\r\n        return this.getDefaultAllDayCellHeight() || this.getAppointmentMinSize()\r\n    }\r\n    _needVerticalGroupBounds(allDay) {\r\n        return !allDay\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n}\r\nexport default VerticalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}