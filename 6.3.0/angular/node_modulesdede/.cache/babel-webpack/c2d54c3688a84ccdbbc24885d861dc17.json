{"ast":null,"code":"import _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { NgModule, ɵɵdefineInjectable, Injectable, ɵɵinject, Injector } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\nimport { catchError, switchMap, filter, take, map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\n\nvar AbpModule = function AbpModule() {\n  _classCallCheck(this, AbpModule);\n};\n\nAbpModule.ɵfac = function AbpModule_Factory(t) {\n  return new (t || AbpModule)();\n};\n\nAbpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AbpModule\n});\nAbpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [],\n      exports: []\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar TokenService = /*#__PURE__*/function () {\n  function TokenService() {\n    _classCallCheck(this, TokenService);\n  }\n\n  _createClass(TokenService, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return abp.auth.getToken();\n    }\n  }, {\n    key: \"getTokenCookieName\",\n    value: function getTokenCookieName() {\n      return abp.auth.tokenCookieName;\n    }\n  }, {\n    key: \"clearToken\",\n    value: function clearToken() {\n      abp.auth.clearToken();\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(authToken, expireDate) {\n      abp.auth.setToken(authToken, expireDate);\n    } //refresh token\n\n  }, {\n    key: \"getRefreshToken\",\n    value: function getRefreshToken() {\n      return abp.auth.getRefreshToken();\n    }\n  }, {\n    key: \"getRefreshTokenCookieName\",\n    value: function getRefreshTokenCookieName() {\n      return abp.auth.refreshTokenCookieName;\n    }\n  }, {\n    key: \"clearRefreshToken\",\n    value: function clearRefreshToken() {\n      abp.auth.clearRefreshToken();\n    }\n  }, {\n    key: \"setRefreshToken\",\n    value: function setRefreshToken(refreshToken, expireDate) {\n      abp.auth.setRefreshToken(refreshToken, expireDate);\n    }\n  }]);\n\n  return TokenService;\n}();\n\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)();\n};\n\nTokenService.ɵprov = ɵɵdefineInjectable({\n  factory: function TokenService_Factory() {\n    return new TokenService();\n  },\n  token: TokenService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TokenService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar PermissionCheckerService = /*#__PURE__*/function () {\n  function PermissionCheckerService() {\n    _classCallCheck(this, PermissionCheckerService);\n  }\n\n  _createClass(PermissionCheckerService, [{\n    key: \"isGranted\",\n    value: function isGranted(permissionName) {\n      return abp.auth.isGranted(permissionName);\n    }\n  }]);\n\n  return PermissionCheckerService;\n}();\n\nPermissionCheckerService.ɵfac = function PermissionCheckerService_Factory(t) {\n  return new (t || PermissionCheckerService)();\n};\n\nPermissionCheckerService.ɵprov = ɵɵdefineInjectable({\n  factory: function PermissionCheckerService_Factory() {\n    return new PermissionCheckerService();\n  },\n  token: PermissionCheckerService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionCheckerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar FeatureCheckerService = /*#__PURE__*/function () {\n  function FeatureCheckerService() {\n    _classCallCheck(this, FeatureCheckerService);\n  }\n\n  _createClass(FeatureCheckerService, [{\n    key: \"get\",\n    value: function get(featureName) {\n      return abp.features.get(featureName);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(featureName) {\n      return abp.features.getValue(featureName);\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(featureName) {\n      return abp.features.isEnabled(featureName);\n    }\n  }]);\n\n  return FeatureCheckerService;\n}();\n\nFeatureCheckerService.ɵfac = function FeatureCheckerService_Factory(t) {\n  return new (t || FeatureCheckerService)();\n};\n\nFeatureCheckerService.ɵprov = ɵɵdefineInjectable({\n  factory: function FeatureCheckerService_Factory() {\n    return new FeatureCheckerService();\n  },\n  token: FeatureCheckerService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeatureCheckerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar LocalizationService = /*#__PURE__*/function () {\n  function LocalizationService() {\n    _classCallCheck(this, LocalizationService);\n  }\n\n  _createClass(LocalizationService, [{\n    key: \"languages\",\n    get: function get() {\n      return abp.localization.languages;\n    }\n  }, {\n    key: \"currentLanguage\",\n    get: function get() {\n      return abp.localization.currentLanguage;\n    }\n  }, {\n    key: \"localize\",\n    value: function localize(key, sourceName) {\n      return abp.localization.localize(key, sourceName);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceName) {\n      return abp.localization.getSource(sourceName);\n    }\n  }]);\n\n  return LocalizationService;\n}();\n\nLocalizationService.ɵfac = function LocalizationService_Factory(t) {\n  return new (t || LocalizationService)();\n};\n\nLocalizationService.ɵprov = ɵɵdefineInjectable({\n  factory: function LocalizationService_Factory() {\n    return new LocalizationService();\n  },\n  token: LocalizationService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar LogService = /*#__PURE__*/function () {\n  function LogService() {\n    _classCallCheck(this, LogService);\n  }\n\n  _createClass(LogService, [{\n    key: \"debug\",\n    value: function debug(logObject) {\n      abp.log.debug(logObject);\n    }\n  }, {\n    key: \"info\",\n    value: function info(logObject) {\n      abp.log.info(logObject);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(logObject) {\n      abp.log.warn(logObject);\n    }\n  }, {\n    key: \"error\",\n    value: function error(logObject) {\n      abp.log.error(logObject);\n    }\n  }, {\n    key: \"fatal\",\n    value: function fatal(logObject) {\n      abp.log.fatal(logObject);\n    }\n  }]);\n\n  return LogService;\n}();\n\nLogService.ɵfac = function LogService_Factory(t) {\n  return new (t || LogService)();\n};\n\nLogService.ɵprov = ɵɵdefineInjectable({\n  factory: function LogService_Factory() {\n    return new LogService();\n  },\n  token: LogService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LogService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar MessageService = /*#__PURE__*/function () {\n  function MessageService() {\n    _classCallCheck(this, MessageService);\n  }\n\n  _createClass(MessageService, [{\n    key: \"info\",\n    value: function info(message, title, options) {\n      return abp.message.info(message, title, options);\n    }\n  }, {\n    key: \"success\",\n    value: function success(message, title, options) {\n      return abp.message.success(message, title, options);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, title, options) {\n      return abp.message.warn(message, title, options);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, title, options) {\n      return abp.message.error(message, title, options);\n    }\n  }, {\n    key: \"confirm\",\n    value: function confirm(message, title, callback, options) {\n      return abp.message.confirm(message, title, callback, options);\n    }\n  }]);\n\n  return MessageService;\n}();\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)();\n};\n\nMessageService.ɵprov = ɵɵdefineInjectable({\n  factory: function MessageService_Factory() {\n    return new MessageService();\n  },\n  token: MessageService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar AbpMultiTenancyService = /*#__PURE__*/function () {\n  function AbpMultiTenancyService() {\n    _classCallCheck(this, AbpMultiTenancyService);\n  }\n\n  _createClass(AbpMultiTenancyService, [{\n    key: \"isEnabled\",\n    get: function get() {\n      return abp.multiTenancy.isEnabled;\n    }\n  }]);\n\n  return AbpMultiTenancyService;\n}();\n\nAbpMultiTenancyService.ɵfac = function AbpMultiTenancyService_Factory(t) {\n  return new (t || AbpMultiTenancyService)();\n};\n\nAbpMultiTenancyService.ɵprov = ɵɵdefineInjectable({\n  factory: function AbpMultiTenancyService_Factory() {\n    return new AbpMultiTenancyService();\n  },\n  token: AbpMultiTenancyService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpMultiTenancyService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar NotifyService = /*#__PURE__*/function () {\n  function NotifyService() {\n    _classCallCheck(this, NotifyService);\n  }\n\n  _createClass(NotifyService, [{\n    key: \"info\",\n    value: function info(message, title, options) {\n      abp.notify.info(message, title, options);\n    }\n  }, {\n    key: \"success\",\n    value: function success(message, title, options) {\n      abp.notify.success(message, title, options);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, title, options) {\n      abp.notify.warn(message, title, options);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, title, options) {\n      abp.notify.error(message, title, options);\n    }\n  }]);\n\n  return NotifyService;\n}();\n\nNotifyService.ɵfac = function NotifyService_Factory(t) {\n  return new (t || NotifyService)();\n};\n\nNotifyService.ɵprov = ɵɵdefineInjectable({\n  factory: function NotifyService_Factory() {\n    return new NotifyService();\n  },\n  token: NotifyService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifyService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar AbpSessionService = /*#__PURE__*/function () {\n  function AbpSessionService() {\n    _classCallCheck(this, AbpSessionService);\n  }\n\n  _createClass(AbpSessionService, [{\n    key: \"userId\",\n    get: function get() {\n      return abp.session.userId;\n    }\n  }, {\n    key: \"tenantId\",\n    get: function get() {\n      return abp.session.tenantId;\n    }\n  }, {\n    key: \"impersonatorUserId\",\n    get: function get() {\n      return abp.session.impersonatorUserId;\n    }\n  }, {\n    key: \"impersonatorTenantId\",\n    get: function get() {\n      return abp.session.impersonatorTenantId;\n    }\n  }, {\n    key: \"multiTenancySide\",\n    get: function get() {\n      return abp.session.multiTenancySide;\n    }\n  }]);\n\n  return AbpSessionService;\n}();\n\nAbpSessionService.ɵfac = function AbpSessionService_Factory(t) {\n  return new (t || AbpSessionService)();\n};\n\nAbpSessionService.ɵprov = ɵɵdefineInjectable({\n  factory: function AbpSessionService_Factory() {\n    return new AbpSessionService();\n  },\n  token: AbpSessionService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpSessionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar SettingService = /*#__PURE__*/function () {\n  function SettingService() {\n    _classCallCheck(this, SettingService);\n  }\n\n  _createClass(SettingService, [{\n    key: \"get\",\n    value: function get(name) {\n      return abp.setting.get(name);\n    }\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean(name) {\n      return abp.setting.getBoolean(name);\n    }\n  }, {\n    key: \"getInt\",\n    value: function getInt(name) {\n      return abp.setting.getInt(name);\n    }\n  }]);\n\n  return SettingService;\n}();\n\nSettingService.ɵfac = function SettingService_Factory(t) {\n  return new (t || SettingService)();\n};\n\nSettingService.ɵprov = ɵɵdefineInjectable({\n  factory: function SettingService_Factory() {\n    return new SettingService();\n  },\n  token: SettingService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar UtilsService = /*#__PURE__*/function () {\n  function UtilsService() {\n    _classCallCheck(this, UtilsService);\n  }\n\n  _createClass(UtilsService, [{\n    key: \"getCookieValue\",\n    value: function getCookieValue(key) {\n      return abp.utils.getCookieValue(key);\n    }\n  }, {\n    key: \"setCookieValue\",\n    value: function setCookieValue(key, value, expireDate, path, domain, attributes) {\n      abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);\n    }\n  }, {\n    key: \"deleteCookie\",\n    value: function deleteCookie(key, path) {\n      abp.utils.deleteCookie(key, path);\n    }\n  }]);\n\n  return UtilsService;\n}();\n\nUtilsService.ɵfac = function UtilsService_Factory(t) {\n  return new (t || UtilsService)();\n};\n\nUtilsService.ɵprov = ɵɵdefineInjectable({\n  factory: function UtilsService_Factory() {\n    return new UtilsService();\n  },\n  token: UtilsService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UtilsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})(); ///<reference path=\"../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\n\n\nvar AbpUserConfigurationService = /*#__PURE__*/function () {\n  function AbpUserConfigurationService(_http) {\n    _classCallCheck(this, AbpUserConfigurationService);\n\n    this._http = _http;\n  }\n\n  _createClass(AbpUserConfigurationService, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this._http.get('/AbpUserConfiguration/GetAll').subscribe(function (result) {\n        jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));\n      });\n    }\n  }]);\n\n  return AbpUserConfigurationService;\n}();\n\nAbpUserConfigurationService.ɵfac = function AbpUserConfigurationService_Factory(t) {\n  return new (t || AbpUserConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n};\n\nAbpUserConfigurationService.ɵprov = ɵɵdefineInjectable({\n  factory: function AbpUserConfigurationService_Factory() {\n    return new AbpUserConfigurationService(ɵɵinject(HttpClient));\n  },\n  token: AbpUserConfigurationService,\n  providedIn: \"root\"\n});\n\nAbpUserConfigurationService.ctorParameters = function () {\n  return [{\n    type: HttpClient\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpUserConfigurationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }];\n  }, null);\n})();\n\nvar AbpHttpConfigurationService = /*#__PURE__*/function () {\n  function AbpHttpConfigurationService(_messageService, _logService) {\n    _classCallCheck(this, AbpHttpConfigurationService);\n\n    this._messageService = _messageService;\n    this._logService = _logService;\n    this.defaultError = {\n      message: 'An error has occurred!',\n      details: 'Error details were not sent by server.'\n    };\n    this.defaultError401 = {\n      message: 'You are not authenticated!',\n      details: 'You should be authenticated (sign in) in order to perform this operation.'\n    };\n    this.defaultError403 = {\n      message: 'You are not authorized!',\n      details: 'You are not allowed to perform this operation.'\n    };\n    this.defaultError404 = {\n      message: 'Resource not found!',\n      details: 'The resource requested could not be found on the server.'\n    };\n  }\n\n  _createClass(AbpHttpConfigurationService, [{\n    key: \"logError\",\n    value: function logError(error) {\n      this._logService.error(error);\n    }\n  }, {\n    key: \"showError\",\n    value: function showError(error) {\n      if (error.details) {\n        return this._messageService.error(error.details, error.message || this.defaultError.message);\n      } else {\n        return this._messageService.error(error.message || this.defaultError.message);\n      }\n    }\n  }, {\n    key: \"handleTargetUrl\",\n    value: function handleTargetUrl(targetUrl) {\n      if (!targetUrl) {\n        location.href = '/';\n      } else {\n        location.href = targetUrl;\n      }\n    }\n  }, {\n    key: \"handleUnAuthorizedRequest\",\n    value: function handleUnAuthorizedRequest(messagePromise, targetUrl) {\n      var _this = this;\n\n      var self = this;\n\n      if (messagePromise) {\n        messagePromise.done(function () {\n          _this.handleTargetUrl(targetUrl || '/');\n        });\n      } else {\n        self.handleTargetUrl(targetUrl || '/');\n      }\n    }\n  }, {\n    key: \"handleNonAbpErrorResponse\",\n    value: function handleNonAbpErrorResponse(response) {\n      var self = this;\n\n      switch (response.status) {\n        case 401:\n          self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');\n          break;\n\n        case 403:\n          self.showError(self.defaultError403);\n          break;\n\n        case 404:\n          self.showError(self.defaultError404);\n          break;\n\n        default:\n          self.showError(self.defaultError);\n          break;\n      }\n    }\n  }, {\n    key: \"handleAbpResponse\",\n    value: function handleAbpResponse(response, ajaxResponse) {\n      var newResponse;\n\n      if (ajaxResponse.success) {\n        newResponse = response.clone({\n          body: ajaxResponse.result\n        });\n\n        if (ajaxResponse.targetUrl) {\n          this.handleTargetUrl(ajaxResponse.targetUrl);\n          ;\n        }\n      } else {\n        newResponse = response.clone({\n          body: ajaxResponse.result\n        });\n\n        if (!ajaxResponse.error) {\n          ajaxResponse.error = this.defaultError;\n        }\n\n        this.logError(ajaxResponse.error);\n        this.showError(ajaxResponse.error);\n\n        if (response.status === 401) {\n          this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);\n        }\n      }\n\n      return newResponse;\n    }\n  }, {\n    key: \"getAbpAjaxResponseOrNull\",\n    value: function getAbpAjaxResponseOrNull(response) {\n      if (!response || !response.headers) {\n        return null;\n      }\n\n      var contentType = response.headers.get('Content-Type');\n\n      if (!contentType) {\n        this._logService.warn('Content-Type is not sent!');\n\n        return null;\n      }\n\n      if (contentType.indexOf(\"application/json\") < 0) {\n        this._logService.warn('Content-Type is not application/json: ' + contentType);\n\n        return null;\n      }\n\n      var responseObj = JSON.parse(JSON.stringify(response.body));\n\n      if (!responseObj.__abp) {\n        return null;\n      }\n\n      return responseObj;\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(response) {\n      var ajaxResponse = this.getAbpAjaxResponseOrNull(response);\n\n      if (ajaxResponse == null) {\n        return response;\n      }\n\n      return this.handleAbpResponse(response, ajaxResponse);\n    }\n  }, {\n    key: \"blobToText\",\n    value: function blobToText(blob) {\n      return new Observable(function (observer) {\n        if (!blob) {\n          observer.next(\"\");\n          observer.complete();\n        } else {\n          var reader = new FileReader();\n\n          reader.onload = function () {\n            observer.next(this.result);\n            observer.complete();\n          };\n\n          reader.readAsText(blob);\n        }\n      });\n    }\n  }]);\n\n  return AbpHttpConfigurationService;\n}();\n\nAbpHttpConfigurationService.ɵfac = function AbpHttpConfigurationService_Factory(t) {\n  return new (t || AbpHttpConfigurationService)(ɵngcc0.ɵɵinject(MessageService), ɵngcc0.ɵɵinject(LogService));\n};\n\nAbpHttpConfigurationService.ɵprov = ɵɵdefineInjectable({\n  factory: function AbpHttpConfigurationService_Factory() {\n    return new AbpHttpConfigurationService(ɵɵinject(MessageService), ɵɵinject(LogService));\n  },\n  token: AbpHttpConfigurationService,\n  providedIn: \"root\"\n});\n\nAbpHttpConfigurationService.ctorParameters = function () {\n  return [{\n    type: MessageService\n  }, {\n    type: LogService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpHttpConfigurationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MessageService\n    }, {\n      type: LogService\n    }];\n  }, null);\n})();\n\nvar RefreshTokenService = function RefreshTokenService() {\n  _classCallCheck(this, RefreshTokenService);\n};\n\nRefreshTokenService.ɵfac = function RefreshTokenService_Factory(t) {\n  return new (t || RefreshTokenService)();\n};\n\nRefreshTokenService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RefreshTokenService,\n  factory: RefreshTokenService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RefreshTokenService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar AbpHttpInterceptor = /*#__PURE__*/function () {\n  function AbpHttpInterceptor(configuration, _injector) {\n    _classCallCheck(this, AbpHttpInterceptor);\n\n    this._injector = _injector;\n    this._tokenService = new TokenService();\n    this._utilsService = new UtilsService();\n    this._logService = new LogService();\n    this.isRefreshing = false;\n    this.refreshTokenSubject = new BehaviorSubject(null);\n    this.configuration = configuration;\n  }\n\n  _createClass(AbpHttpInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      var _this2 = this;\n\n      var modifiedRequest = this.normalizeRequestHeaders(request);\n      return next.handle(modifiedRequest).pipe(catchError(function (error) {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          return _this2.tryAuthWithRefreshToken(request, next, error);\n        } else {\n          return _this2.handleErrorResponse(error);\n        }\n      }), switchMap(function (event) {\n        return _this2.handleSuccessResponse(event);\n      }));\n    }\n  }, {\n    key: \"tryGetRefreshTokenService\",\n    value: function tryGetRefreshTokenService() {\n      var _refreshTokenService = this._injector.get(RefreshTokenService, null);\n\n      if (_refreshTokenService) {\n        return _refreshTokenService.tryAuthWithRefreshToken();\n      }\n\n      return of(false);\n    }\n  }, {\n    key: \"tryAuthWithRefreshToken\",\n    value: function tryAuthWithRefreshToken(request, next, error) {\n      var _this3 = this;\n\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.tryGetRefreshTokenService().pipe(switchMap(function (authResult) {\n          _this3.isRefreshing = false;\n\n          if (authResult) {\n            _this3.refreshTokenSubject.next(authResult);\n\n            var modifiedRequest = _this3.normalizeRequestHeaders(request);\n\n            return next.handle(modifiedRequest);\n          } else {\n            return _this3.handleErrorResponse(error);\n          }\n        }));\n      } else {\n        return this.refreshTokenSubject.pipe(filter(function (authResult) {\n          return authResult != null;\n        }), take(1), switchMap(function (authResult) {\n          var modifiedRequest = _this3.normalizeRequestHeaders(request);\n\n          return next.handle(modifiedRequest);\n        }));\n      }\n    }\n  }, {\n    key: \"normalizeRequestHeaders\",\n    value: function normalizeRequestHeaders(request) {\n      var modifiedHeaders = new HttpHeaders();\n      modifiedHeaders = request.headers.set(\"Pragma\", \"no-cache\").set(\"Cache-Control\", \"no-cache\").set(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\n      modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);\n      modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);\n      modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);\n      modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);\n      modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);\n      return request.clone({\n        headers: modifiedHeaders\n      });\n    }\n  }, {\n    key: \"addXRequestedWithHeader\",\n    value: function addXRequestedWithHeader(headers) {\n      if (headers) {\n        headers = headers.set('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"addAspNetCoreCultureHeader\",\n    value: function addAspNetCoreCultureHeader(headers) {\n      var cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\n\n      if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {\n        headers = headers.set('.AspNetCore.Culture', cookieLangValue);\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"addAcceptLanguageHeader\",\n    value: function addAcceptLanguageHeader(headers) {\n      var cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\n\n      if (cookieLangValue && headers && !headers.has('Accept-Language')) {\n        headers = headers.set('Accept-Language', cookieLangValue);\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"addTenantIdHeader\",\n    value: function addTenantIdHeader(headers) {\n      var cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);\n\n      if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {\n        headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"addAuthorizationHeaders\",\n    value: function addAuthorizationHeaders(headers) {\n      var authorizationHeaders = headers ? headers.getAll('Authorization') : null;\n\n      if (!authorizationHeaders) {\n        authorizationHeaders = [];\n      }\n\n      if (!this.itemExists(authorizationHeaders, function (item) {\n        return item.indexOf('Bearer ') == 0;\n      })) {\n        var token = this._tokenService.getToken();\n\n        if (headers && token) {\n          headers = headers.set('Authorization', 'Bearer ' + token);\n        }\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"handleSuccessResponse\",\n    value: function handleSuccessResponse(event) {\n      var self = this;\n\n      if (event instanceof HttpResponse) {\n        if (event.body instanceof Blob && event.body.type && event.body.type.indexOf(\"application/json\") >= 0) {\n          return self.configuration.blobToText(event.body).pipe(map(function (json) {\n            var responseBody = json == \"null\" ? {} : JSON.parse(json);\n            var modifiedResponse = self.configuration.handleResponse(event.clone({\n              body: responseBody\n            }));\n            return modifiedResponse.clone({\n              body: new Blob([JSON.stringify(modifiedResponse.body)], {\n                type: 'application/json'\n              })\n            });\n          }));\n        }\n      }\n\n      return of(event);\n    }\n  }, {\n    key: \"handleErrorResponse\",\n    value: function handleErrorResponse(error) {\n      var _this4 = this;\n\n      if (!(error.error instanceof Blob)) {\n        return throwError(error);\n      }\n\n      return this.configuration.blobToText(error.error).pipe(switchMap(function (json) {\n        var errorBody = json == \"\" || json == \"null\" ? {} : JSON.parse(json);\n        var errorResponse = new HttpResponse({\n          headers: error.headers,\n          status: error.status,\n          body: errorBody\n        });\n\n        var ajaxResponse = _this4.configuration.getAbpAjaxResponseOrNull(errorResponse);\n\n        if (ajaxResponse != null) {\n          _this4.configuration.handleAbpResponse(errorResponse, ajaxResponse);\n        } else {\n          _this4.configuration.handleNonAbpErrorResponse(errorResponse);\n        }\n\n        return throwError(error);\n      }));\n    }\n  }, {\n    key: \"itemExists\",\n    value: function itemExists(items, predicate) {\n      for (var i = 0; i < items.length; i++) {\n        if (predicate(items[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return AbpHttpInterceptor;\n}();\n\nAbpHttpInterceptor.ɵfac = function AbpHttpInterceptor_Factory(t) {\n  return new (t || AbpHttpInterceptor)(ɵngcc0.ɵɵinject(AbpHttpConfigurationService), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nAbpHttpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: AbpHttpInterceptor,\n  factory: AbpHttpInterceptor.ɵfac\n});\n\nAbpHttpInterceptor.ctorParameters = function () {\n  return [{\n    type: AbpHttpConfigurationService\n  }, {\n    type: Injector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpHttpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AbpHttpConfigurationService\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/*\r\n * Public API Surface of abp-ng2-module\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AbpHttpConfigurationService, AbpHttpInterceptor, AbpModule, AbpMultiTenancyService, AbpSessionService, AbpUserConfigurationService, FeatureCheckerService, LocalizationService, LogService, MessageService, NotifyService, PermissionCheckerService, RefreshTokenService, SettingService, TokenService, UtilsService };","map":{"version":3,"sources":["../../projects/abp-ng2-module/src/lib/abp.module.ts","../esm2015/projects/abp-ng2-module/src/lib/services/auth/token.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/auth/permission-checker.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/features/feature-checker.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/localization/localization.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/log/log.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/message/message.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/multi-tenancy/abp-multi-tenancy.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/notify/notify.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/session/abp-session.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/settings/setting.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/utils/utils.service.ts","../projects/abp-ng2-module/src/lib/services/abp-user-configuration.service.ts","../projects/abp-ng2-module/src/lib/interceptors/abp-http-configuration.service.ts","../projects/abp-ng2-module/src/lib/interceptors/refresh-token.service.ts","../projects/abp-ng2-module/src/lib/interceptors/abpHttpInterceptor.ts","../../../projects/abp-ng2-module/src/public-api.ts","../../../projects/abp-ng2-module/src/abp-ng2-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class AbpModule { }\n","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n    getToken(): string {\r\n        return abp.auth.getToken();\r\n    }\r\n\r\n    getTokenCookieName(): string {\r\n        return abp.auth.tokenCookieName;\r\n    }\r\n\r\n    clearToken(): void {\r\n        abp.auth.clearToken();\r\n    }\r\n\r\n    setToken(authToken: string, expireDate?: Date): void {\r\n        abp.auth.setToken(authToken, expireDate);\r\n    }\r\n\r\n    //refresh token\r\n    getRefreshToken(): string {\r\n        return abp.auth.getRefreshToken();\r\n    }\r\n\r\n    getRefreshTokenCookieName(): string {\r\n        return abp.auth.refreshTokenCookieName;\r\n    }\r\n\r\n    clearRefreshToken(): void {\r\n        abp.auth.clearRefreshToken();\r\n    }\r\n\r\n    setRefreshToken(refreshToken: string, expireDate?: Date): void {\r\n        abp.auth.setRefreshToken(refreshToken, expireDate);\r\n    }\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PermissionCheckerService {\r\n\r\n    isGranted(permissionName: string): boolean {\r\n        return abp.auth.isGranted(permissionName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FeatureCheckerService {\r\n\r\n    get(featureName: string): abp.features.IFeature {\r\n        return abp.features.get(featureName);\r\n    }\r\n\r\n    getValue(featureName: string): string {\r\n        return abp.features.getValue(featureName);\r\n    }\r\n\r\n    isEnabled(featureName: string): boolean {\r\n        return abp.features.isEnabled(featureName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LocalizationService {\r\n\r\n    get languages(): abp.localization.ILanguageInfo[] {\r\n        return abp.localization.languages;\r\n    }\r\n\r\n    get currentLanguage(): abp.localization.ILanguageInfo {\r\n        return abp.localization.currentLanguage;\r\n    }\r\n\r\n    localize(key: string, sourceName: string): string {\r\n        return abp.localization.localize(key, sourceName);\r\n    }\r\n    \r\n    getSource(sourceName: string): (...key: string[]) => string {\r\n        return abp.localization.getSource(sourceName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LogService {\r\n\r\n    debug(logObject?: any): void {\r\n        abp.log.debug(logObject);\r\n    }\r\n\r\n    info(logObject?: any): void {\r\n        abp.log.info(logObject);\r\n    }\r\n\r\n    warn(logObject?: any): void {\r\n        abp.log.warn(logObject);\r\n    }\r\n\r\n    error(logObject?: any): void {\r\n        abp.log.error(logObject);\r\n    }\r\n\r\n    fatal(logObject?: any): void {\r\n        abp.log.fatal(logObject);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n\r\n    info(message: string, title?: string, options?: any): any {\r\n        return abp.message.info(message, title, options);\r\n    }\r\n\r\n    success(message: string, title?: string, options?: any): any {\r\n        return abp.message.success(message, title, options);\r\n    }\r\n\r\n    warn(message: string, title?: string, options?: any): any {\r\n        return abp.message.warn(message, title, options);\r\n    }\r\n\r\n    error(message: string, title?: string, options?: any): any {\r\n        return abp.message.error(message, title, options);\r\n    }\r\n\r\n    confirm(message: string, title?: string, callback?: (result: boolean) => void, options?: any): any {\r\n        return abp.message.confirm(message, title, callback, options);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpMultiTenancyService {\r\n\r\n    get isEnabled(): boolean {\r\n        return abp.multiTenancy.isEnabled;\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotifyService {\r\n\r\n    info(message: string, title?: string, options?: any): void {\r\n        abp.notify.info(message, title, options);\r\n    }\r\n\r\n    success(message: string, title?: string, options?: any): void {\r\n        abp.notify.success(message, title, options);\r\n    }\r\n\r\n    warn(message: string, title?: string, options?: any): void {\r\n        abp.notify.warn(message, title, options);\r\n    }\r\n\r\n    error(message: string, title?: string, options?: any): void {\r\n        abp.notify.error(message, title, options);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpSessionService {\r\n\r\n    get userId(): number | undefined {\r\n        return abp.session.userId;\r\n    }\r\n\r\n    get tenantId(): number | undefined {\r\n        return abp.session.tenantId;\r\n    }\r\n\r\n    get impersonatorUserId(): number | undefined {\r\n        return abp.session.impersonatorUserId;\r\n    }\r\n\r\n    get impersonatorTenantId(): number | undefined {\r\n        return abp.session.impersonatorTenantId;\r\n    }\r\n\r\n    get multiTenancySide(): abp.multiTenancy.sides {\r\n        return abp.session.multiTenancySide;\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SettingService {\r\n\r\n    get(name: string): string {\r\n        return abp.setting.get(name);\r\n    }\r\n\r\n    getBoolean(name: string): boolean {\r\n        return abp.setting.getBoolean(name);\r\n    }\r\n    \r\n    getInt(name: string): number {\r\n        return abp.setting.getInt(name);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilsService {\r\n  getCookieValue(key: string): string {\r\n    return abp.utils.getCookieValue(key);\r\n  }\r\n\r\n  setCookieValue(key: string, value: string, expireDate?: Date, path?: string, domain?: string, attributes?: any): void {\r\n    abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);\r\n  }\r\n\r\n  deleteCookie(key: string, path?: string): void {\r\n    abp.utils.deleteCookie(key, path);\r\n  }\r\n}\r\n","///<reference path=\"../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\ndeclare var jQuery: any;\r\ndeclare var abp: any;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpUserConfigurationService {\r\n\r\n    constructor(private _http: HttpClient) {\r\n        \r\n    }\r\n\r\n    initialize(): void {\r\n        this._http.get('/AbpUserConfiguration/GetAll')\r\n            .subscribe(result => {\r\n                jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));\r\n            });\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MessageService } from '../services/message/message.service';\r\nimport { LogService } from '../services/log/log.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { IErrorInfo, IAjaxResponse } from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpHttpConfigurationService {\r\n\r\n    constructor(\r\n        private _messageService: MessageService,\r\n        private _logService: LogService) {\r\n    }\r\n\r\n    defaultError = <IErrorInfo>{\r\n        message: 'An error has occurred!',\r\n        details: 'Error details were not sent by server.'\r\n    };\r\n\r\n    defaultError401 = <IErrorInfo>{\r\n        message: 'You are not authenticated!',\r\n        details: 'You should be authenticated (sign in) in order to perform this operation.'\r\n    };\r\n\r\n    defaultError403 = <IErrorInfo>{\r\n        message: 'You are not authorized!',\r\n        details: 'You are not allowed to perform this operation.'\r\n    };\r\n\r\n    defaultError404 = <IErrorInfo>{\r\n        message: 'Resource not found!',\r\n        details: 'The resource requested could not be found on the server.'\r\n    };\r\n\r\n    logError(error: IErrorInfo): void {\r\n        this._logService.error(error);\r\n    }\r\n\r\n    showError(error: IErrorInfo): any {\r\n        if (error.details) {\r\n            return this._messageService.error(error.details, error.message || this.defaultError.message);\r\n        } else {\r\n            return this._messageService.error(error.message || this.defaultError.message);\r\n        }\r\n    }\r\n\r\n    handleTargetUrl(targetUrl: string): void {\r\n        if (!targetUrl) {\r\n            location.href = '/';\r\n        } else {\r\n            location.href = targetUrl;\r\n        }\r\n    }\r\n\r\n    handleUnAuthorizedRequest(messagePromise: any, targetUrl?: string) {\r\n        const self = this;\r\n\r\n        if (messagePromise) {\r\n            messagePromise.done(() => {\r\n                this.handleTargetUrl(targetUrl || '/');\r\n            });\r\n        } else {\r\n            self.handleTargetUrl(targetUrl || '/');\r\n        }\r\n    }\r\n\r\n    handleNonAbpErrorResponse(response: HttpResponse<any>) {\r\n        const self = this;\r\n\r\n        switch (response.status) {\r\n            case 401:\r\n                self.handleUnAuthorizedRequest(\r\n                    self.showError(self.defaultError401),\r\n                    '/'\r\n                );\r\n                break;\r\n            case 403:\r\n                self.showError(self.defaultError403);\r\n                break;\r\n            case 404:\r\n                self.showError(self.defaultError404);\r\n                break;\r\n            default:\r\n                self.showError(self.defaultError);\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleAbpResponse(response: HttpResponse<any>, ajaxResponse: IAjaxResponse): HttpResponse<any> {\r\n        var newResponse: HttpResponse<any>;\r\n\r\n        if (ajaxResponse.success) {\r\n\r\n            newResponse = response.clone({\r\n                body: ajaxResponse.result\r\n            });\r\n\r\n            if (ajaxResponse.targetUrl) {\r\n                this.handleTargetUrl(ajaxResponse.targetUrl);;\r\n            }\r\n        } else {\r\n\r\n            newResponse = response.clone({\r\n                body: ajaxResponse.result\r\n            });\r\n\r\n            if (!ajaxResponse.error) {\r\n                ajaxResponse.error = this.defaultError;\r\n            }\r\n\r\n            this.logError(ajaxResponse.error);\r\n            this.showError(ajaxResponse.error);\r\n\r\n            if (response.status === 401) {\r\n                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);\r\n            }\r\n        }\r\n\r\n        return newResponse;\r\n    }\r\n\r\n    getAbpAjaxResponseOrNull(response: HttpResponse<any>): IAjaxResponse | null {\r\n        if (!response || !response.headers) {\r\n            return null;\r\n        }\r\n\r\n        var contentType = response.headers.get('Content-Type');\r\n        if (!contentType) {\r\n            this._logService.warn('Content-Type is not sent!');\r\n            return null;\r\n        }\r\n\r\n        if (contentType.indexOf(\"application/json\") < 0) {\r\n            this._logService.warn('Content-Type is not application/json: ' + contentType);\r\n            return null;\r\n        }\r\n\r\n        var responseObj = JSON.parse(JSON.stringify(response.body));\r\n        if (!responseObj.__abp) {\r\n            return null;\r\n        }\r\n\r\n        return responseObj as IAjaxResponse;\r\n    }\r\n\r\n    handleResponse(response: HttpResponse<any>): HttpResponse<any> {\r\n        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);\r\n        if (ajaxResponse == null) {\r\n            return response;\r\n        }\r\n\r\n        return this.handleAbpResponse(response, ajaxResponse);\r\n    }\r\n\r\n    blobToText(blob: any): Observable<string> {\r\n        return new Observable<string>((observer: any) => {\r\n            if (!blob) {\r\n                observer.next(\"\");\r\n                observer.complete();\r\n            } else {\r\n                let reader = new FileReader();\r\n                reader.onload = function () {\r\n                    observer.next(this.result);\r\n                    observer.complete();\r\n                }\r\n                reader.readAsText(blob);\r\n            }\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport abstract class RefreshTokenService {\r\n    /**\r\n     * Try to authenticate with refresh token and return if auth succeed\r\n     */\r\n    abstract tryAuthWithRefreshToken(): Observable<boolean>;\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { LogService } from '../services/log/log.service';\r\nimport { TokenService } from '../services/auth/token.service';\r\nimport { UtilsService } from '../services/utils/utils.service';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { switchMap, filter, take, catchError, tap, map } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { AbpHttpConfigurationService } from './abp-http-configuration.service'\r\nimport { RefreshTokenService } from './refresh-token.service'\r\ndeclare const abp: any;\r\n\r\n@Injectable()\r\nexport class AbpHttpInterceptor implements HttpInterceptor {\r\n\r\n    protected configuration: AbpHttpConfigurationService;\r\n    private _tokenService: TokenService = new TokenService();\r\n    private _utilsService: UtilsService = new UtilsService();\r\n    private _logService: LogService = new LogService();\r\n\r\n    constructor(configuration: AbpHttpConfigurationService,\r\n        private _injector: Injector) {\r\n        this.configuration = configuration;\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        var modifiedRequest = this.normalizeRequestHeaders(request);\r\n        return next.handle(modifiedRequest)\r\n            .pipe(\r\n                catchError(error => {\r\n                    if (error instanceof HttpErrorResponse && error.status === 401) {\r\n                        return this.tryAuthWithRefreshToken(request, next, error);\r\n                    } else {\r\n                        return this.handleErrorResponse(error);\r\n                    }\r\n                }),\r\n                switchMap((event) => {\r\n                    return this.handleSuccessResponse(event);\r\n                })\r\n            );\r\n    }\r\n\r\n    protected tryGetRefreshTokenService(): Observable<boolean> {\r\n        var _refreshTokenService = this._injector.get(RefreshTokenService, null);\r\n\r\n        if (_refreshTokenService) {\r\n            return _refreshTokenService.tryAuthWithRefreshToken();\r\n        }\r\n        return of(false);\r\n    }\r\n\r\n    private isRefreshing = false;\r\n    private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n    private tryAuthWithRefreshToken(request: HttpRequest<any>, next: HttpHandler, error: any) {\r\n        if (!this.isRefreshing) {\r\n            this.isRefreshing = true;\r\n            this.refreshTokenSubject.next(null);\r\n\r\n            return this.tryGetRefreshTokenService().pipe(\r\n                switchMap((authResult: boolean) => {\r\n                    this.isRefreshing = false;\r\n                    if (authResult) {\r\n                        this.refreshTokenSubject.next(authResult);\r\n                        let modifiedRequest = this.normalizeRequestHeaders(request);\r\n                        return next.handle(modifiedRequest);\r\n                    } else {\r\n                        return this.handleErrorResponse(error);\r\n                    }\r\n                }));\r\n        } else {\r\n            return this.refreshTokenSubject.pipe(\r\n                filter(authResult => authResult != null),\r\n                take(1),\r\n                switchMap(authResult => {\r\n                    let modifiedRequest = this.normalizeRequestHeaders(request);\r\n                    return next.handle(modifiedRequest);\r\n                }));\r\n        }\r\n    }\r\n\r\n    protected normalizeRequestHeaders(request: HttpRequest<any>): HttpRequest<any> {\r\n        var modifiedHeaders = new HttpHeaders();\r\n        modifiedHeaders = request.headers.set(\"Pragma\", \"no-cache\")\r\n            .set(\"Cache-Control\", \"no-cache\")\r\n            .set(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\r\n\r\n        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);\r\n        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);\r\n\r\n        return request.clone({\r\n            headers: modifiedHeaders\r\n        });\r\n    }\r\n\r\n    protected addXRequestedWithHeader(headers: HttpHeaders): HttpHeaders {\r\n        if (headers) {\r\n            headers = headers.set('X-Requested-With', 'XMLHttpRequest');\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAspNetCoreCultureHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\r\n        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {\r\n            headers = headers.set('.AspNetCore.Culture', cookieLangValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAcceptLanguageHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\r\n        if (cookieLangValue && headers && !headers.has('Accept-Language')) {\r\n            headers = headers.set('Accept-Language', cookieLangValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addTenantIdHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);\r\n        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {\r\n            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAuthorizationHeaders(headers: HttpHeaders): HttpHeaders {\r\n        let authorizationHeaders = headers ? headers.getAll('Authorization') : null;\r\n        if (!authorizationHeaders) {\r\n            authorizationHeaders = [];\r\n        }\r\n\r\n        if (!this.itemExists(authorizationHeaders, (item: string) => item.indexOf('Bearer ') == 0)) {\r\n            let token = this._tokenService.getToken();\r\n            if (headers && token) {\r\n                headers = headers.set('Authorization', 'Bearer ' + token);\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected handleSuccessResponse(event: HttpEvent<any>): Observable<HttpEvent<any>> {\r\n        var self = this;\r\n\r\n        if (event instanceof HttpResponse) {\r\n            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf(\"application/json\") >= 0) {\r\n                return self.configuration.blobToText(event.body).pipe(\r\n                    map(\r\n                        json => {\r\n                            const responseBody = json == \"null\" ? {} : JSON.parse(json);\r\n\r\n                            var modifiedResponse = self.configuration.handleResponse(event.clone({\r\n                                body: responseBody\r\n                            }));\r\n\r\n                            return modifiedResponse.clone({\r\n                                body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })\r\n                            });\r\n                        })\r\n                );\r\n            }\r\n        }\r\n        return of(event);\r\n    }\r\n\r\n    protected handleErrorResponse(error: any): Observable<never> {\r\n        if (!(error.error instanceof Blob)) {\r\n            return throwError(error);\r\n        }\r\n\r\n        return this.configuration.blobToText(error.error).pipe(\r\n            switchMap((json) => {\r\n                const errorBody = (json == \"\" || json == \"null\") ? {} : JSON.parse(json);\r\n                const errorResponse = new HttpResponse({\r\n                    headers: error.headers,\r\n                    status: error.status,\r\n                    body: errorBody\r\n                });\r\n\r\n                var ajaxResponse = this.configuration.getAbpAjaxResponseOrNull(errorResponse);\r\n\r\n                if (ajaxResponse != null) {\r\n                    this.configuration.handleAbpResponse(errorResponse, ajaxResponse);\r\n                } else {\r\n                    this.configuration.handleNonAbpErrorResponse(errorResponse);\r\n                }\r\n\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private itemExists<T>(items: T[], predicate: (item: T) => boolean): boolean {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (predicate(items[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/*\n * Public API Surface of abp-ng2-module\n */\n\nexport * from './lib/abp.module';\nexport * from './lib/services/';\nexport * from './lib/interceptors/';\nexport * from './lib/models/';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}