{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport EventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport browser from \"../../core/utils/browser\";\nimport { inArray } from \"../../core/utils/array\";\nimport { clipboardText as getClipboardText } from \"../../core/utils/dom\";\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar EMPTY_CHAR = \" \";\n\nvar BaseMaskStrategy = /*#__PURE__*/function () {\n  function BaseMaskStrategy(editor) {\n    _classCallCheck(this, BaseMaskStrategy);\n\n    this.editor = editor;\n    this.DIRECTION = {\n      FORWARD: \"forward\",\n      BACKWARD: \"backward\"\n    };\n    this.NAME = this._getStrategyName();\n  }\n\n  _createClass(BaseMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function _getStrategyName() {\n      return \"base\";\n    }\n  }, {\n    key: \"editorOption\",\n    value: function editorOption() {\n      var _this$editor;\n\n      return (_this$editor = this.editor).option.apply(_this$editor, arguments);\n    }\n  }, {\n    key: \"editorInput\",\n    value: function editorInput() {\n      return this.editor._input();\n    }\n  }, {\n    key: \"editorCaret\",\n    value: function editorCaret(newCaret) {\n      if (!newCaret) {\n        return this.editor._caret();\n      }\n\n      this.editor._caret(newCaret);\n    }\n  }, {\n    key: \"getHandler\",\n    value: function getHandler(handlerName) {\n      var handler = this[\"_\".concat(handlerName, \"Handler\")] || function () {};\n\n      return handler.bind(this);\n    }\n  }, {\n    key: \"attachEvents\",\n    value: function attachEvents() {\n      var _this = this;\n\n      var $input = this.editorInput();\n      this.getHandleEventNames().forEach(function (eventName) {\n        var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\n        EventsEngine.on($input, subscriptionName, _this.getEventHandler(eventName));\n      });\n\n      this._attachChangeEventHandlers();\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function getHandleEventNames() {\n      return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"];\n    }\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(eventName) {\n      return this[\"_\".concat(eventName, \"Handler\")].bind(this);\n    }\n  }, {\n    key: \"detachEvents\",\n    value: function detachEvents() {\n      EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE));\n    }\n  }, {\n    key: \"_attachChangeEventHandlers\",\n    value: function _attachChangeEventHandlers() {\n      if (-1 === inArray(\"change\", this.editorOption(\"valueChangeEvent\").split(\" \"))) {\n        return;\n      }\n\n      EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n        this._suppressCaretChanging(this._changeHandler, [e]);\n\n        this._changeHandler(e);\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function _focusInHandler() {\n      this.editor._showMaskPlaceholder();\n\n      this.editor._direction(this.DIRECTION.FORWARD);\n\n      if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\n        this.editor._adjustCaret();\n      } else {\n        var caret = this.editor._maskRulesChain.first();\n\n        this._caretTimeout = setTimeout(function () {\n          this._caret({\n            start: caret,\n            end: caret\n          });\n        }.bind(this.editor), 0);\n      }\n    }\n  }, {\n    key: \"_focusOutHandler\",\n    value: function _focusOutHandler(event) {\n      this.editor._changeHandler(event);\n\n      if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n        this.editorOption(\"text\", \"\");\n\n        this.editor._renderDisplayText(\"\");\n      }\n    }\n  }, {\n    key: \"_cutHandler\",\n    value: function _cutHandler(event) {\n      var caret = this.editorCaret();\n      var selectedText = this.editorInput().val().substring(caret.start, caret.end);\n\n      this.editor._maskKeyHandler(event, function () {\n        return getClipboardText(event, selectedText);\n      });\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function _dropHandler() {\n      this._clearDragTimer();\n\n      this._dragTimer = setTimeout(function () {\n        this.option(\"value\", this._convertToValue(this._input().val()));\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_clearDragTimer\",\n    value: function _clearDragTimer() {\n      clearTimeout(this._dragTimer);\n    }\n  }, {\n    key: \"_keyDownHandler\",\n    value: function _keyDownHandler() {\n      this._keyPressHandled = false;\n    }\n  }, {\n    key: \"_pasteHandler\",\n    value: function _pasteHandler(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      var caret = this.editorCaret();\n\n      editor._maskKeyHandler(event, function () {\n        var pastedText = getClipboardText(event);\n\n        var restText = editor._maskRulesChain.text().substring(caret.end);\n\n        var accepted = editor._handleChain({\n          text: pastedText,\n          start: caret.start,\n          length: pastedText.length\n        });\n\n        var newCaret = caret.start + accepted;\n\n        editor._handleChain({\n          text: restText,\n          start: newCaret,\n          length: restText.length\n        });\n\n        editor._caret({\n          start: newCaret,\n          end: newCaret\n        });\n      });\n    }\n  }, {\n    key: \"_autoFillHandler\",\n    value: function _autoFillHandler(event) {\n      var _this2 = this;\n\n      var editor = this.editor;\n      var inputVal = this.editorInput().val();\n      this._inputHandlerTimer = setTimeout(function () {\n        _this2._keyPressHandled = true;\n\n        if (_this2._isAutoFill()) {\n          _this2._keyPressHandled = true;\n\n          editor._maskKeyHandler(event, function () {\n            editor._handleChain({\n              text: inputVal,\n              start: 0,\n              length: inputVal.length\n            });\n          });\n\n          editor._validateMask();\n        }\n      });\n    }\n  }, {\n    key: \"_isAutoFill\",\n    value: function _isAutoFill() {\n      var $input = this.editor._input();\n\n      var result = false;\n\n      if (browser.msie && browser.version > 11) {\n        result = $input.hasClass(\"edge-autofilled\");\n      } else if (browser.webkit) {\n        var input = $input.get(0);\n        result = input && input.matches(\":-webkit-autofill\");\n      }\n\n      return result;\n    }\n  }, {\n    key: \"runWithoutEventProcessing\",\n    value: function runWithoutEventProcessing(action) {\n      var keyPressHandled = this._keyPressHandled;\n      this._keyPressHandled = true;\n      action();\n      this._keyPressHandled = keyPressHandled;\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function _backspaceHandler() {}\n  }, {\n    key: \"_delHandler\",\n    value: function _delHandler(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n\n      editor._maskKeyHandler(event, function () {\n        return !editor._hasSelection() && editor._handleKey(EMPTY_CHAR);\n      });\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this._clearDragTimer();\n\n      clearTimeout(this._backspaceHandlerTimeout);\n      clearTimeout(this._caretTimeout);\n      clearTimeout(this._inputHandlerTimer);\n    }\n  }]);\n\n  return BaseMaskStrategy;\n}();\n\nexport { BaseMaskStrategy as default };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.base.js"],"names":["EventsEngine","addNamespace","browser","inArray","clipboardText","getClipboardText","MASK_EVENT_NAMESPACE","BLUR_EVENT","EMPTY_CHAR","BaseMaskStrategy","editor","DIRECTION","FORWARD","BACKWARD","NAME","_getStrategyName","option","arguments","_input","newCaret","_caret","handlerName","handler","concat","bind","$input","editorInput","getHandleEventNames","forEach","eventName","subscriptionName","toLowerCase","on","getEventHandler","_attachChangeEventHandlers","off","editorOption","split","e","_suppressCaretChanging","_changeHandler","_showMaskPlaceholder","_direction","_isValueEmpty","_adjustCaret","caret","_maskRulesChain","first","_caretTimeout","setTimeout","start","end","event","_renderDisplayText","editorCaret","selectedText","val","substring","_maskKeyHandler","_clearDragTimer","_dragTimer","_convertToValue","clearTimeout","_keyPressHandled","pastedText","restText","text","accepted","_handleChain","length","inputVal","_inputHandlerTimer","_isAutoFill","_validateMask","result","msie","version","hasClass","webkit","input","get","matches","action","keyPressHandled","_hasSelection","_handleKey","_backspaceHandlerTimeout"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport EventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    clipboardText as getClipboardText\r\n} from \"../../core/utils/dom\";\r\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\r\nvar BLUR_EVENT = \"blur beforedeactivate\";\r\nvar EMPTY_CHAR = \" \";\r\nexport default class BaseMaskStrategy {\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n        this.DIRECTION = {\r\n            FORWARD: \"forward\",\r\n            BACKWARD: \"backward\"\r\n        };\r\n        this.NAME = this._getStrategyName()\r\n    }\r\n    _getStrategyName() {\r\n        return \"base\"\r\n    }\r\n    editorOption() {\r\n        return this.editor.option(...arguments)\r\n    }\r\n    editorInput() {\r\n        return this.editor._input()\r\n    }\r\n    editorCaret(newCaret) {\r\n        if (!newCaret) {\r\n            return this.editor._caret()\r\n        }\r\n        this.editor._caret(newCaret)\r\n    }\r\n    getHandler(handlerName) {\r\n        var handler = this[\"_\".concat(handlerName, \"Handler\")] || function() {};\r\n        return handler.bind(this)\r\n    }\r\n    attachEvents() {\r\n        var $input = this.editorInput();\r\n        this.getHandleEventNames().forEach(eventName => {\r\n            var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\r\n            EventsEngine.on($input, subscriptionName, this.getEventHandler(eventName))\r\n        });\r\n        this._attachChangeEventHandlers()\r\n    }\r\n    getHandleEventNames() {\r\n        return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"]\r\n    }\r\n    getEventHandler(eventName) {\r\n        return this[\"_\".concat(eventName, \"Handler\")].bind(this)\r\n    }\r\n    detachEvents() {\r\n        EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE))\r\n    }\r\n    _attachChangeEventHandlers() {\r\n        if (-1 === inArray(\"change\", this.editorOption(\"valueChangeEvent\").split(\" \"))) {\r\n            return\r\n        }\r\n        EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function(e) {\r\n            this._suppressCaretChanging(this._changeHandler, [e]);\r\n            this._changeHandler(e)\r\n        }.bind(this.editor))\r\n    }\r\n    _focusInHandler() {\r\n        this.editor._showMaskPlaceholder();\r\n        this.editor._direction(this.DIRECTION.FORWARD);\r\n        if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\r\n            this.editor._adjustCaret()\r\n        } else {\r\n            var caret = this.editor._maskRulesChain.first();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caret({\r\n                    start: caret,\r\n                    end: caret\r\n                })\r\n            }.bind(this.editor), 0)\r\n        }\r\n    }\r\n    _focusOutHandler(event) {\r\n        this.editor._changeHandler(event);\r\n        if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\r\n            this.editorOption(\"text\", \"\");\r\n            this.editor._renderDisplayText(\"\")\r\n        }\r\n    }\r\n    _cutHandler(event) {\r\n        var caret = this.editorCaret();\r\n        var selectedText = this.editorInput().val().substring(caret.start, caret.end);\r\n        this.editor._maskKeyHandler(event, () => getClipboardText(event, selectedText))\r\n    }\r\n    _dropHandler() {\r\n        this._clearDragTimer();\r\n        this._dragTimer = setTimeout(function() {\r\n            this.option(\"value\", this._convertToValue(this._input().val()))\r\n        }.bind(this.editor))\r\n    }\r\n    _clearDragTimer() {\r\n        clearTimeout(this._dragTimer)\r\n    }\r\n    _keyDownHandler() {\r\n        this._keyPressHandled = false\r\n    }\r\n    _pasteHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        var caret = this.editorCaret();\r\n        editor._maskKeyHandler(event, () => {\r\n            var pastedText = getClipboardText(event);\r\n            var restText = editor._maskRulesChain.text().substring(caret.end);\r\n            var accepted = editor._handleChain({\r\n                text: pastedText,\r\n                start: caret.start,\r\n                length: pastedText.length\r\n            });\r\n            var newCaret = caret.start + accepted;\r\n            editor._handleChain({\r\n                text: restText,\r\n                start: newCaret,\r\n                length: restText.length\r\n            });\r\n            editor._caret({\r\n                start: newCaret,\r\n                end: newCaret\r\n            })\r\n        })\r\n    }\r\n    _autoFillHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        var inputVal = this.editorInput().val();\r\n        this._inputHandlerTimer = setTimeout(() => {\r\n            this._keyPressHandled = true;\r\n            if (this._isAutoFill()) {\r\n                this._keyPressHandled = true;\r\n                editor._maskKeyHandler(event, () => {\r\n                    editor._handleChain({\r\n                        text: inputVal,\r\n                        start: 0,\r\n                        length: inputVal.length\r\n                    })\r\n                });\r\n                editor._validateMask()\r\n            }\r\n        })\r\n    }\r\n    _isAutoFill() {\r\n        var $input = this.editor._input();\r\n        var result = false;\r\n        if (browser.msie && browser.version > 11) {\r\n            result = $input.hasClass(\"edge-autofilled\")\r\n        } else if (browser.webkit) {\r\n            var input = $input.get(0);\r\n            result = input && input.matches(\":-webkit-autofill\")\r\n        }\r\n        return result\r\n    }\r\n    runWithoutEventProcessing(action) {\r\n        var keyPressHandled = this._keyPressHandled;\r\n        this._keyPressHandled = true;\r\n        action();\r\n        this._keyPressHandled = keyPressHandled\r\n    }\r\n    _backspaceHandler() {}\r\n    _delHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        editor._maskKeyHandler(event, () => !editor._hasSelection() && editor._handleKey(EMPTY_CHAR))\r\n    }\r\n    clean() {\r\n        this._clearDragTimer();\r\n        clearTimeout(this._backspaceHandlerTimeout);\r\n        clearTimeout(this._caretTimeout);\r\n        clearTimeout(this._inputHandlerTimer)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}