{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.files_tree_view.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { noop } from \"../../core/utils/common\";\nimport Widget from \"../widget/ui.widget\";\nimport TreeViewSearch from \"../tree_view/ui.tree_view.search\";\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { isNumeric } from \"../../core/utils/type\";\nvar FILE_MANAGER_DIRS_TREE_CLASS = \"dx-filemanager-dirs-tree\";\nvar FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS = \"dx-filemanager-focused-item\";\nvar FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS = \"dx-filemanager-dirs-tree-item-text\";\nvar TREE_VIEW_ITEM_CLASS = \"dx-treeview-item\";\n\nvar FileManagerFilesTreeView = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerFilesTreeView, _Widget);\n\n  var _super = _createSuper(FileManagerFilesTreeView);\n\n  function FileManagerFilesTreeView() {\n    _classCallCheck(this, FileManagerFilesTreeView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFilesTreeView, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      this._initActions();\n\n      this._getCurrentDirectory = this.option(\"getCurrentDirectory\");\n      this._createFileActionsButton = noop;\n      this._storeExpandedState = this.option(\"storeExpandedState\") || false;\n      var $treeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_TREE_CLASS).appendTo(this.$element());\n      var treeViewOptions = {\n        dataStructure: \"plain\",\n        rootValue: \"\",\n        createChildren: this._onFilesTreeViewCreateSubDirectories.bind(this),\n        itemTemplate: this._createFilesTreeViewItemTemplate.bind(this),\n        keyExpr: \"getInternalKey\",\n        parentIdExpr: \"parentDirectory.getInternalKey\",\n        displayExpr: function displayExpr(itemInfo) {\n          return itemInfo.getDisplayName();\n        },\n        hasItemsExpr: \"fileItem.hasSubDirectories\",\n        onItemClick: function onItemClick(e) {\n          return _this._actions.onDirectoryClick(e);\n        },\n        onItemExpanded: function onItemExpanded(e) {\n          return _this._onFilesTreeViewItemExpanded(e);\n        },\n        onItemCollapsed: function onItemCollapsed(e) {\n          return _this._onFilesTreeViewItemCollapsed(e);\n        },\n        onItemRendered: function onItemRendered(e) {\n          return _this._onFilesTreeViewItemRendered(e);\n        },\n        onContentReady: function onContentReady() {\n          return _this._actions.onFilesTreeViewContentReady();\n        }\n      };\n\n      if (this._contextMenu) {\n        this._contextMenu.option(\"onContextMenuHidden\", function () {\n          return _this._onContextMenuHidden();\n        });\n\n        treeViewOptions.onItemContextMenu = function (e) {\n          return _this._onFilesTreeViewItemContextMenu(e);\n        };\n\n        this._createFileActionsButton = function (element, options) {\n          return _this._createComponent(element, FileManagerFileActionsButton, options);\n        };\n      }\n\n      this._filesTreeView = this._createComponent($treeView, TreeViewSearch, treeViewOptions);\n      eventsEngine.on($treeView, \"click\", function () {\n        return _this._actions.onClick();\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onClick: this._createActionByOption(\"onClick\"),\n        onDirectoryClick: this._createActionByOption(\"onDirectoryClick\"),\n        onFilesTreeViewContentReady: this._createActionByOption(\"onFilesTreeViewContentReady\")\n      };\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_render\", this).call(this);\n\n      var that = this;\n      setTimeout(function () {\n        that._updateFocusedElement();\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewCreateSubDirectories\",\n    value: function _onFilesTreeViewCreateSubDirectories(rootItem) {\n      var getDirectories = this.option(\"getDirectories\");\n      var directoryInfo = rootItem && rootItem.itemData || null;\n      return getDirectories && getDirectories(directoryInfo, true);\n    }\n  }, {\n    key: \"_onFilesTreeViewItemRendered\",\n    value: function _onFilesTreeViewItemRendered(_ref) {\n      var itemData = _ref.itemData;\n\n      var currentDirectory = this._getCurrentDirectory();\n\n      if (currentDirectory && currentDirectory.fileItem.equals(itemData.fileItem)) {\n        this._updateFocusedElement();\n\n        this._restoreScrollTopPosition();\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemExpanded\",\n    value: function _onFilesTreeViewItemExpanded(_ref2) {\n      var itemData = _ref2.itemData;\n\n      if (this._storeExpandedState) {\n        itemData.expanded = true;\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemCollapsed\",\n    value: function _onFilesTreeViewItemCollapsed(_ref3) {\n      var itemData = _ref3.itemData;\n\n      if (this._storeExpandedState) {\n        itemData.expanded = false;\n      }\n    }\n  }, {\n    key: \"_createFilesTreeViewItemTemplate\",\n    value: function _createFilesTreeViewItemTemplate(itemData, itemIndex, itemElement) {\n      var _this2 = this;\n\n      var $itemElement = $(itemElement);\n      var $itemWrapper = $itemElement.closest(this._filesTreeViewItemSelector);\n      $itemWrapper.data(\"item\", itemData);\n      var $image = getImageContainer(itemData.icon);\n      var $text = $(\"<span>\").text(itemData.getDisplayName()).addClass(FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS);\n      var $button = $(\"<div>\");\n      $itemElement.append($image, $text, $button);\n\n      this._createFileActionsButton($button, {\n        onClick: function onClick(e) {\n          return _this2._onFileItemActionButtonClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewItemContextMenu\",\n    value: function _onFilesTreeViewItemContextMenu(_ref4) {\n      var itemElement = _ref4.itemElement,\n          event = _ref4.event;\n      event.preventDefault();\n      var itemData = $(itemElement).data(\"item\");\n\n      this._contextMenu.showAt([itemData], itemElement, event, {\n        itemData: itemData,\n        itemElement: itemElement\n      });\n    }\n  }, {\n    key: \"_onFileItemActionButtonClick\",\n    value: function _onFileItemActionButtonClick(_ref5) {\n      var component = _ref5.component,\n          element = _ref5.element,\n          event = _ref5.event;\n      event.stopPropagation();\n      var itemElement = component.$element().closest(this._filesTreeViewItemSelector);\n      var itemData = itemElement.data(\"item\");\n      var target = {\n        itemData: itemData,\n        itemElement: itemElement,\n        isActionButton: true\n      };\n\n      this._contextMenu.showAt([itemData], element, event, target);\n\n      this._activeFileActionsButton = component;\n\n      this._activeFileActionsButton.setActive(true);\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function _onContextMenuHidden() {\n      if (this._activeFileActionsButton) {\n        this._activeFileActionsButton.setActive(false);\n      }\n    }\n  }, {\n    key: \"toggleNodeDisabledState\",\n    value: function toggleNodeDisabledState(key, state) {\n      var node = this._getNodeByKey(key);\n\n      if (!node) {\n        return;\n      }\n\n      var items = this._filesTreeView.option(\"items\");\n\n      var itemIndex = items.map(function (item) {\n        return item.getInternalKey();\n      }).indexOf(node.getInternalKey());\n\n      if (-1 !== itemIndex) {\n        this._filesTreeView.option(\"items[\".concat(itemIndex, \"].disabled\"), state);\n      }\n    }\n  }, {\n    key: \"_saveScrollTopPosition\",\n    value: function _saveScrollTopPosition() {\n      if (!hasWindow()) {\n        return;\n      }\n\n      this._scrollTopPosition = this._filesTreeView._scrollableContainer.scrollTop();\n    }\n  }, {\n    key: \"_restoreScrollTopPosition\",\n    value: function _restoreScrollTopPosition() {\n      var _this3 = this;\n\n      if (!hasWindow() || !isNumeric(this._scrollTopPosition)) {\n        return;\n      }\n\n      setTimeout(function () {\n        return _this3._filesTreeView._scrollableContainer.scrollTo(_this3._scrollTopPosition);\n      });\n    }\n  }, {\n    key: \"_updateFocusedElement\",\n    value: function _updateFocusedElement() {\n      var directoryInfo = this._getCurrentDirectory();\n\n      var $element = this._getItemElementByKey(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n\n      if (this._$focusedElement) {\n        this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, false);\n      }\n\n      this._$focusedElement = $element || $();\n\n      this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, true);\n    }\n  }, {\n    key: \"_getNodeByKey\",\n    value: function _getNodeByKey(key) {\n      var _this$_filesTreeView;\n\n      return null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView._getNode(key);\n    }\n  }, {\n    key: \"_getPublicNode\",\n    value: function _getPublicNode(key) {\n      var _this$_filesTreeView2;\n\n      var nodesQueue = _toConsumableArray(null === (_this$_filesTreeView2 = this._filesTreeView) || void 0 === _this$_filesTreeView2 ? void 0 : _this$_filesTreeView2.getNodes());\n\n      while (nodesQueue.length) {\n        var node = nodesQueue.shift();\n\n        if (node.itemData.getInternalKey() === key) {\n          return node;\n        } else if (node.children.length) {\n          nodesQueue.push.apply(nodesQueue, _toConsumableArray(node.children));\n        }\n      }\n\n      return;\n    }\n  }, {\n    key: \"_getItemElementByKey\",\n    value: function _getItemElementByKey(key) {\n      var node = this._getNodeByKey(key);\n\n      if (node) {\n        var $node = this._filesTreeView._getNodeElement(node);\n\n        if ($node) {\n          return $node.children(this._filesTreeViewItemSelector);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_getDefaultOptions\", this).call(this), {\n        storeExpandedState: false,\n        initialFolder: null,\n        contextMenu: null,\n        getItems: null,\n        getCurrentDirectory: null,\n        onDirectoryClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"storeExpandedState\":\n          this._storeExpandedState = this.option(name);\n          break;\n\n        case \"getItems\":\n        case \"rootFolderDisplayName\":\n        case \"initialFolder\":\n        case \"contextMenu\":\n          this.repaint();\n          break;\n\n        case \"getCurrentDirectory\":\n          this.getCurrentDirectory = this.option(name);\n          break;\n\n        case \"onClick\":\n        case \"onDirectoryClick\":\n        case \"onFilesTreeViewContentReady\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_filesTreeViewItemSelector\",\n    get: function get() {\n      return \".\".concat(TREE_VIEW_ITEM_CLASS);\n    }\n  }, {\n    key: \"_contextMenu\",\n    get: function get() {\n      return this.option(\"contextMenu\");\n    }\n  }, {\n    key: \"toggleDirectoryExpandedState\",\n    value: function toggleDirectoryExpandedState(directoryInfo, state) {\n      var deferred = new Deferred();\n\n      var treeViewNode = this._getPublicNode(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n\n      if (!treeViewNode) {\n        return deferred.reject().promise();\n      }\n\n      if (treeViewNode.expanded === state || treeViewNode.itemsLoaded && !treeViewNode.itemData.fileItem.hasSubDirectories) {\n        return deferred.resolve().promise();\n      }\n\n      var action = state ? \"expandItem\" : \"collapseItem\";\n      return this._filesTreeView[action](directoryInfo.getInternalKey());\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this._$focusedElement = null;\n\n      this._saveScrollTopPosition();\n\n      this._filesTreeView.option(\"dataSource\", []);\n    }\n  }, {\n    key: \"updateCurrentDirectory\",\n    value: function updateCurrentDirectory() {\n      if (this._disposed) {\n        return;\n      }\n\n      this._updateFocusedElement();\n\n      this._storeExpandedState && this._updateExpandedStateToCurrentDirectory();\n    }\n  }, {\n    key: \"_updateExpandedStateToCurrentDirectory\",\n    value: function _updateExpandedStateToCurrentDirectory() {\n      return this.toggleDirectoryExpandedStateRecursive(this._getCurrentDirectory().parentDirectory, true);\n    }\n  }, {\n    key: \"toggleDirectoryExpandedStateRecursive\",\n    value: function toggleDirectoryExpandedStateRecursive(directoryInfo, state) {\n      var dirLine = [];\n\n      for (var dirInfo = directoryInfo; dirInfo; dirInfo = dirInfo.parentDirectory) {\n        dirLine.unshift(dirInfo);\n      }\n\n      return this.toggleDirectoryLineExpandedState(dirLine, state);\n    }\n  }, {\n    key: \"toggleDirectoryLineExpandedState\",\n    value: function toggleDirectoryLineExpandedState(dirLine, state) {\n      var _this4 = this;\n\n      if (!dirLine.length) {\n        return new Deferred().resolve().promise();\n      }\n\n      return this.toggleDirectoryExpandedState(dirLine.shift(), state).then(function () {\n        return _this4.toggleDirectoryLineExpandedState(dirLine, state);\n      });\n    }\n  }]);\n\n  return FileManagerFilesTreeView;\n}(Widget);\n\nexport default FileManagerFilesTreeView;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.files_tree_view.js"],"names":["$","eventsEngine","extend","getImageContainer","noop","Widget","TreeViewSearch","FileManagerFileActionsButton","Deferred","hasWindow","isNumeric","FILE_MANAGER_DIRS_TREE_CLASS","FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS","FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS","TREE_VIEW_ITEM_CLASS","FileManagerFilesTreeView","_initActions","_getCurrentDirectory","option","_createFileActionsButton","_storeExpandedState","$treeView","addClass","appendTo","$element","treeViewOptions","dataStructure","rootValue","createChildren","_onFilesTreeViewCreateSubDirectories","bind","itemTemplate","_createFilesTreeViewItemTemplate","keyExpr","parentIdExpr","displayExpr","itemInfo","getDisplayName","hasItemsExpr","onItemClick","e","_actions","onDirectoryClick","onItemExpanded","_onFilesTreeViewItemExpanded","onItemCollapsed","_onFilesTreeViewItemCollapsed","onItemRendered","_onFilesTreeViewItemRendered","onContentReady","onFilesTreeViewContentReady","_contextMenu","_onContextMenuHidden","onItemContextMenu","_onFilesTreeViewItemContextMenu","element","options","_createComponent","_filesTreeView","on","onClick","_createActionByOption","that","setTimeout","_updateFocusedElement","rootItem","getDirectories","directoryInfo","itemData","_ref","currentDirectory","fileItem","equals","_restoreScrollTopPosition","_ref2","expanded","_ref3","itemIndex","itemElement","$itemElement","$itemWrapper","closest","_filesTreeViewItemSelector","data","$image","icon","$text","text","$button","append","_onFileItemActionButtonClick","_ref4","event","preventDefault","showAt","_ref5","component","stopPropagation","target","isActionButton","_activeFileActionsButton","setActive","key","state","node","_getNodeByKey","items","map","item","getInternalKey","indexOf","concat","_scrollTopPosition","_scrollableContainer","scrollTop","scrollTo","_getItemElementByKey","_$focusedElement","toggleClass","_this$_filesTreeView","_getNode","_this$_filesTreeView2","nodesQueue","getNodes","length","shift","children","push","$node","_getNodeElement","storeExpandedState","initialFolder","contextMenu","getItems","getCurrentDirectory","args","name","repaint","deferred","treeViewNode","_getPublicNode","reject","promise","itemsLoaded","hasSubDirectories","resolve","action","_saveScrollTopPosition","_disposed","_updateExpandedStateToCurrentDirectory","toggleDirectoryExpandedStateRecursive","parentDirectory","dirLine","dirInfo","unshift","toggleDirectoryLineExpandedState","toggleDirectoryExpandedState","then"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.files_tree_view.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getImageContainer\r\n} from \"../../core/utils/icon\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport TreeViewSearch from \"../tree_view/ui.tree_view.search\";\r\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nvar FILE_MANAGER_DIRS_TREE_CLASS = \"dx-filemanager-dirs-tree\";\r\nvar FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS = \"dx-filemanager-focused-item\";\r\nvar FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS = \"dx-filemanager-dirs-tree-item-text\";\r\nvar TREE_VIEW_ITEM_CLASS = \"dx-treeview-item\";\r\nclass FileManagerFilesTreeView extends Widget {\r\n    _initMarkup() {\r\n        this._initActions();\r\n        this._getCurrentDirectory = this.option(\"getCurrentDirectory\");\r\n        this._createFileActionsButton = noop;\r\n        this._storeExpandedState = this.option(\"storeExpandedState\") || false;\r\n        var $treeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_TREE_CLASS).appendTo(this.$element());\r\n        var treeViewOptions = {\r\n            dataStructure: \"plain\",\r\n            rootValue: \"\",\r\n            createChildren: this._onFilesTreeViewCreateSubDirectories.bind(this),\r\n            itemTemplate: this._createFilesTreeViewItemTemplate.bind(this),\r\n            keyExpr: \"getInternalKey\",\r\n            parentIdExpr: \"parentDirectory.getInternalKey\",\r\n            displayExpr: itemInfo => itemInfo.getDisplayName(),\r\n            hasItemsExpr: \"fileItem.hasSubDirectories\",\r\n            onItemClick: e => this._actions.onDirectoryClick(e),\r\n            onItemExpanded: e => this._onFilesTreeViewItemExpanded(e),\r\n            onItemCollapsed: e => this._onFilesTreeViewItemCollapsed(e),\r\n            onItemRendered: e => this._onFilesTreeViewItemRendered(e),\r\n            onContentReady: () => this._actions.onFilesTreeViewContentReady()\r\n        };\r\n        if (this._contextMenu) {\r\n            this._contextMenu.option(\"onContextMenuHidden\", () => this._onContextMenuHidden());\r\n            treeViewOptions.onItemContextMenu = e => this._onFilesTreeViewItemContextMenu(e);\r\n            this._createFileActionsButton = (element, options) => this._createComponent(element, FileManagerFileActionsButton, options)\r\n        }\r\n        this._filesTreeView = this._createComponent($treeView, TreeViewSearch, treeViewOptions);\r\n        eventsEngine.on($treeView, \"click\", () => this._actions.onClick())\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onClick: this._createActionByOption(\"onClick\"),\r\n            onDirectoryClick: this._createActionByOption(\"onDirectoryClick\"),\r\n            onFilesTreeViewContentReady: this._createActionByOption(\"onFilesTreeViewContentReady\")\r\n        }\r\n    }\r\n    _render() {\r\n        super._render();\r\n        var that = this;\r\n        setTimeout(() => {\r\n            that._updateFocusedElement()\r\n        })\r\n    }\r\n    _onFilesTreeViewCreateSubDirectories(rootItem) {\r\n        var getDirectories = this.option(\"getDirectories\");\r\n        var directoryInfo = rootItem && rootItem.itemData || null;\r\n        return getDirectories && getDirectories(directoryInfo, true)\r\n    }\r\n    _onFilesTreeViewItemRendered(_ref) {\r\n        var {\r\n            itemData: itemData\r\n        } = _ref;\r\n        var currentDirectory = this._getCurrentDirectory();\r\n        if (currentDirectory && currentDirectory.fileItem.equals(itemData.fileItem)) {\r\n            this._updateFocusedElement();\r\n            this._restoreScrollTopPosition()\r\n        }\r\n    }\r\n    _onFilesTreeViewItemExpanded(_ref2) {\r\n        var {\r\n            itemData: itemData\r\n        } = _ref2;\r\n        if (this._storeExpandedState) {\r\n            itemData.expanded = true\r\n        }\r\n    }\r\n    _onFilesTreeViewItemCollapsed(_ref3) {\r\n        var {\r\n            itemData: itemData\r\n        } = _ref3;\r\n        if (this._storeExpandedState) {\r\n            itemData.expanded = false\r\n        }\r\n    }\r\n    _createFilesTreeViewItemTemplate(itemData, itemIndex, itemElement) {\r\n        var $itemElement = $(itemElement);\r\n        var $itemWrapper = $itemElement.closest(this._filesTreeViewItemSelector);\r\n        $itemWrapper.data(\"item\", itemData);\r\n        var $image = getImageContainer(itemData.icon);\r\n        var $text = $(\"<span>\").text(itemData.getDisplayName()).addClass(FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS);\r\n        var $button = $(\"<div>\");\r\n        $itemElement.append($image, $text, $button);\r\n        this._createFileActionsButton($button, {\r\n            onClick: e => this._onFileItemActionButtonClick(e)\r\n        })\r\n    }\r\n    _onFilesTreeViewItemContextMenu(_ref4) {\r\n        var {\r\n            itemElement: itemElement,\r\n            event: event\r\n        } = _ref4;\r\n        event.preventDefault();\r\n        var itemData = $(itemElement).data(\"item\");\r\n        this._contextMenu.showAt([itemData], itemElement, event, {\r\n            itemData: itemData,\r\n            itemElement: itemElement\r\n        })\r\n    }\r\n    _onFileItemActionButtonClick(_ref5) {\r\n        var {\r\n            component: component,\r\n            element: element,\r\n            event: event\r\n        } = _ref5;\r\n        event.stopPropagation();\r\n        var itemElement = component.$element().closest(this._filesTreeViewItemSelector);\r\n        var itemData = itemElement.data(\"item\");\r\n        var target = {\r\n            itemData: itemData,\r\n            itemElement: itemElement,\r\n            isActionButton: true\r\n        };\r\n        this._contextMenu.showAt([itemData], element, event, target);\r\n        this._activeFileActionsButton = component;\r\n        this._activeFileActionsButton.setActive(true)\r\n    }\r\n    _onContextMenuHidden() {\r\n        if (this._activeFileActionsButton) {\r\n            this._activeFileActionsButton.setActive(false)\r\n        }\r\n    }\r\n    toggleNodeDisabledState(key, state) {\r\n        var node = this._getNodeByKey(key);\r\n        if (!node) {\r\n            return\r\n        }\r\n        var items = this._filesTreeView.option(\"items\");\r\n        var itemIndex = items.map(item => item.getInternalKey()).indexOf(node.getInternalKey());\r\n        if (-1 !== itemIndex) {\r\n            this._filesTreeView.option(\"items[\".concat(itemIndex, \"].disabled\"), state)\r\n        }\r\n    }\r\n    _saveScrollTopPosition() {\r\n        if (!hasWindow()) {\r\n            return\r\n        }\r\n        this._scrollTopPosition = this._filesTreeView._scrollableContainer.scrollTop()\r\n    }\r\n    _restoreScrollTopPosition() {\r\n        if (!hasWindow() || !isNumeric(this._scrollTopPosition)) {\r\n            return\r\n        }\r\n        setTimeout(() => this._filesTreeView._scrollableContainer.scrollTo(this._scrollTopPosition))\r\n    }\r\n    _updateFocusedElement() {\r\n        var directoryInfo = this._getCurrentDirectory();\r\n        var $element = this._getItemElementByKey(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\r\n        if (this._$focusedElement) {\r\n            this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, false)\r\n        }\r\n        this._$focusedElement = $element || $();\r\n        this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, true)\r\n    }\r\n    _getNodeByKey(key) {\r\n        var _this$_filesTreeView;\r\n        return null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView._getNode(key)\r\n    }\r\n    _getPublicNode(key) {\r\n        var _this$_filesTreeView2;\r\n        var nodesQueue = [...null === (_this$_filesTreeView2 = this._filesTreeView) || void 0 === _this$_filesTreeView2 ? void 0 : _this$_filesTreeView2.getNodes()];\r\n        while (nodesQueue.length) {\r\n            var node = nodesQueue.shift();\r\n            if (node.itemData.getInternalKey() === key) {\r\n                return node\r\n            } else if (node.children.length) {\r\n                nodesQueue.push(...node.children)\r\n            }\r\n        }\r\n        return\r\n    }\r\n    _getItemElementByKey(key) {\r\n        var node = this._getNodeByKey(key);\r\n        if (node) {\r\n            var $node = this._filesTreeView._getNodeElement(node);\r\n            if ($node) {\r\n                return $node.children(this._filesTreeViewItemSelector)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            storeExpandedState: false,\r\n            initialFolder: null,\r\n            contextMenu: null,\r\n            getItems: null,\r\n            getCurrentDirectory: null,\r\n            onDirectoryClick: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"storeExpandedState\":\r\n                this._storeExpandedState = this.option(name);\r\n                break;\r\n            case \"getItems\":\r\n            case \"rootFolderDisplayName\":\r\n            case \"initialFolder\":\r\n            case \"contextMenu\":\r\n                this.repaint();\r\n                break;\r\n            case \"getCurrentDirectory\":\r\n                this.getCurrentDirectory = this.option(name);\r\n                break;\r\n            case \"onClick\":\r\n            case \"onDirectoryClick\":\r\n            case \"onFilesTreeViewContentReady\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    get _filesTreeViewItemSelector() {\r\n        return \".\".concat(TREE_VIEW_ITEM_CLASS)\r\n    }\r\n    get _contextMenu() {\r\n        return this.option(\"contextMenu\")\r\n    }\r\n    toggleDirectoryExpandedState(directoryInfo, state) {\r\n        var deferred = new Deferred;\r\n        var treeViewNode = this._getPublicNode(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\r\n        if (!treeViewNode) {\r\n            return deferred.reject().promise()\r\n        }\r\n        if (treeViewNode.expanded === state || treeViewNode.itemsLoaded && !treeViewNode.itemData.fileItem.hasSubDirectories) {\r\n            return deferred.resolve().promise()\r\n        }\r\n        var action = state ? \"expandItem\" : \"collapseItem\";\r\n        return this._filesTreeView[action](directoryInfo.getInternalKey())\r\n    }\r\n    refresh() {\r\n        this._$focusedElement = null;\r\n        this._saveScrollTopPosition();\r\n        this._filesTreeView.option(\"dataSource\", [])\r\n    }\r\n    updateCurrentDirectory() {\r\n        if (this._disposed) {\r\n            return\r\n        }\r\n        this._updateFocusedElement();\r\n        this._storeExpandedState && this._updateExpandedStateToCurrentDirectory()\r\n    }\r\n    _updateExpandedStateToCurrentDirectory() {\r\n        return this.toggleDirectoryExpandedStateRecursive(this._getCurrentDirectory().parentDirectory, true)\r\n    }\r\n    toggleDirectoryExpandedStateRecursive(directoryInfo, state) {\r\n        var dirLine = [];\r\n        for (var dirInfo = directoryInfo; dirInfo; dirInfo = dirInfo.parentDirectory) {\r\n            dirLine.unshift(dirInfo)\r\n        }\r\n        return this.toggleDirectoryLineExpandedState(dirLine, state)\r\n    }\r\n    toggleDirectoryLineExpandedState(dirLine, state) {\r\n        if (!dirLine.length) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this.toggleDirectoryExpandedState(dirLine.shift(), state).then(() => this.toggleDirectoryLineExpandedState(dirLine, state))\r\n    }\r\n}\r\nexport default FileManagerFilesTreeView;\r\n"]},"metadata":{},"sourceType":"module"}