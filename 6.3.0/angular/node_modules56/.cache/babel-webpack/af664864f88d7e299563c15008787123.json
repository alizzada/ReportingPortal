{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport dateLocalization from \"../../../localization/date\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerWorkSpaceMonth = /*#__PURE__*/function (_SchedulerWorkSpace) {\n  _inherits(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);\n\n  var _super = _createSuper(SchedulerWorkSpaceMonth);\n\n  function SchedulerWorkSpaceMonth() {\n    _classCallCheck(this, SchedulerWorkSpaceMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpaceMonth, [{\n    key: \"isDateAndTimeView\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"_toggleFixedScrollableClass\",\n    value: function _toggleFixedScrollableClass() {\n      this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return MONTH_CLASS;\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return DAYS_IN_WEEK;\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(headerIndex) {\n      var resultDate = new Date(this._firstViewDate);\n      resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n      return resultDate;\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return this._formatWeekday;\n    }\n  }, {\n    key: \"_calculateCellIndex\",\n    value: function _calculateCellIndex(rowIndex, cellIndex) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        rowIndex %= this._getRowCount();\n      } else {\n        cellIndex %= this._getCellCount();\n      }\n\n      return rowIndex * this._getCellCount() + cellIndex;\n    }\n  }, {\n    key: \"_getInterval\",\n    value: function _getInterval() {\n      return DAY_IN_MILLISECONDS;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate) {\n      var firstViewDate = this.getStartViewDate();\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n    }\n  }, {\n    key: \"_getDateByCellIndexes\",\n    value: function _getDateByCellIndexes(rowIndex, cellIndex) {\n      var date = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_getDateByCellIndexes\", this).call(this, rowIndex, cellIndex);\n\n      this._setStartDayHour(date);\n\n      return date;\n    }\n  }, {\n    key: \"getCellWidth\",\n    value: function getCellWidth() {\n      var _this = this;\n\n      return this.cache.get(\"cellWidth\", function () {\n        var averageWidth = 0;\n\n        var cells = _this._getCells().slice(0, 7);\n\n        cells.each(function (index, element) {\n          averageWidth += getBoundingRect(element).width;\n        });\n        return 0 === cells.length ? void 0 : averageWidth / 7;\n      });\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_insertAllDayRowsIntoDateTable\",\n    value: function _insertAllDayRowsIntoDateTable() {\n      return false;\n    }\n  }, {\n    key: \"_getCellCoordinatesByIndex\",\n    value: function _getCellCoordinatesByIndex(index) {\n      var rowIndex = Math.floor(index / this._getCellCount());\n      var cellIndex = index - this._getCellCount() * rowIndex;\n      return {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      };\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this._createWorkSpaceScrollableElements();\n      } else {\n        _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_createWorkSpaceElements\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_needCreateCrossScrolling\",\n    value: function _needCreateCrossScrolling() {\n      return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      return noop();\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_getTableAllDay\",\n    value: function _getTableAllDay() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_changeAllDayVisibility\",\n    value: function _changeAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n\n      var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n      this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n\n      this._setStartDayHour(this._firstViewDate);\n\n      var date = this._getViewStartByOptions();\n\n      this._minVisibleDate = new Date(date.setDate(1));\n      this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n    }\n  }, {\n    key: \"_getViewStartByOptions\",\n    value: function _getViewStartByOptions() {\n      if (!this.option(\"startDate\")) {\n        return new Date(this.option(\"currentDate\").getTime());\n      } else {\n        var startDate = this._getStartViewDate();\n\n        var currentDate = this.option(\"currentDate\");\n        var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n        var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\n\n        while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n          startDate = new Date(endDate);\n\n          if (diff > 0) {\n            startDate.setDate(1);\n          }\n\n          endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))));\n        }\n\n        return diff > 0 ? startDate : endDate;\n      }\n    }\n  }, {\n    key: \"_getStartViewDate\",\n    value: function _getStartViewDate() {\n      var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n      return firstMonthDate;\n    }\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options) {\n      options.getCellText = this._getCellText.bind(this);\n      options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n\n      _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_renderTableBody\", this).call(this, options);\n    }\n  }, {\n    key: \"_getCellText\",\n    value: function _getCellText(rowIndex, cellIndex) {\n      if (this.isGroupedByDate()) {\n        cellIndex = Math.floor(cellIndex / this._getGroupCount());\n      } else {\n        cellIndex %= this._getCellCount();\n      }\n\n      var date = this._getDate(rowIndex, cellIndex);\n\n      if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n        return this._formatMonthAndDay(date);\n      }\n\n      return dateLocalization.format(date, \"dd\");\n    }\n  }, {\n    key: \"_formatMonthAndDay\",\n    value: function _formatMonthAndDay(date) {\n      var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n      return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n    }\n  }, {\n    key: \"_getDate\",\n    value: function _getDate(week, day) {\n      var result = new Date(this._firstViewDate);\n\n      var lastRowInDay = this._getRowCount();\n\n      result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n      return result;\n    }\n  }, {\n    key: \"_updateIndex\",\n    value: function _updateIndex(index) {\n      return index;\n    }\n  }, {\n    key: \"_prepareCellData\",\n    value: function _prepareCellData(rowIndex, cellIndex, cell) {\n      var data = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_prepareCellData\", this).call(this, rowIndex, cellIndex, cell);\n\n      var $cell = $(cell);\n      $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n      return data;\n    }\n  }, {\n    key: \"_isCurrentDate\",\n    value: function _isCurrentDate(cellDate) {\n      return dateUtils.sameDate(cellDate, this._getToday());\n    }\n  }, {\n    key: \"_isFirstDayOfMonth\",\n    value: function _isFirstDayOfMonth(cellDate) {\n      return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n    }\n  }, {\n    key: \"_isOtherMonth\",\n    value: function _isOtherMonth(cellDate) {\n      return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      return false;\n    }\n  }, {\n    key: \"getCellDuration\",\n    value: function getCellDuration() {\n      return 36e5 * this._calculateDayDuration();\n    }\n  }, {\n    key: \"getIntervalDuration\",\n    value: function getIntervalDuration() {\n      return toMs(\"day\");\n    }\n  }, {\n    key: \"getTimePanelWidth\",\n    value: function getTimePanelWidth() {\n      return 0;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift) {\n      return {\n        cellPosition: timeShift * this.getCellWidth(),\n        top: 0,\n        left: 0\n      };\n    }\n  }, {\n    key: \"getCellCountToLastViewDate\",\n    value: function getCellCountToLastViewDate(date) {\n      var firstDateTime = date.getTime();\n      var lastDateTime = this.getEndViewDate().getTime();\n      var dayDurationInMs = this.getCellDuration();\n      return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"keepOriginalHours\",\n    value: function keepOriginalHours() {\n      return true;\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate) {\n      var startDateCopy = new Date(startDate);\n      return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n    }\n  }, {\n    key: \"getWorkSpaceLeftOffset\",\n    value: function getWorkSpaceLeftOffset() {\n      return 0;\n    }\n  }, {\n    key: \"needApplyCollectorOffset\",\n    value: function needApplyCollectorOffset() {\n      return true;\n    }\n  }, {\n    key: \"_getDateTableBorderOffset\",\n    value: function _getDateTableBorderOffset() {\n      return this._getDateTableBorder();\n    }\n  }, {\n    key: \"_getCellPositionByIndex\",\n    value: function _getCellPositionByIndex(index, groupIndex) {\n      var position = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_getCellPositionByIndex\", this).call(this, index, groupIndex);\n\n      var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n      var calculatedTopOffset;\n\n      if (!this._isVerticalGroupedWorkSpace()) {\n        calculatedTopOffset = this.getCellHeight() * rowIndex;\n      } else {\n        calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n      }\n\n      if (calculatedTopOffset) {\n        position.top = calculatedTopOffset;\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_getHeaderDate\",\n    value: function _getHeaderDate() {\n      return this._getViewStartByOptions();\n    }\n  }, {\n    key: \"_supportCompactDropDownAppointments\",\n    value: function _supportCompactDropDownAppointments() {\n      return false;\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime() {\n      return noop();\n    }\n  }, {\n    key: \"_createAllDayPanelElements\",\n    value: function _createAllDayPanelElements() {}\n  }, {\n    key: \"_getRowCountWithAllDayRows\",\n    value: function _getRowCountWithAllDayRows() {\n      return this._getRowCount();\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return true;\n    }\n  }, {\n    key: \"renderRAllDayPanel\",\n    value: function renderRAllDayPanel() {}\n  }, {\n    key: \"renderRTimeTable\",\n    value: function renderRTimeTable() {}\n  }, {\n    key: \"renderRDateTable\",\n    value: function renderRDateTable() {\n      this.renderRComponent(this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n    }\n  }, {\n    key: \"generateRenderOptions\",\n    value: function generateRenderOptions() {\n      var _this2 = this;\n\n      var options = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"generateRenderOptions\", this).call(this);\n\n      options.cellDataGetters.push(function (_, rowIndex, cellIndex) {\n        return {\n          value: {\n            text: _this2._getCellText(rowIndex, cellIndex)\n          }\n        };\n      });\n      options.cellDataGetters.push(function (_, rowIndex, cellIndex, groupIndex, startDate) {\n        return {\n          value: {\n            today: _this2._isCurrentDate(startDate),\n            otherMonth: _this2._isOtherMonth(startDate),\n            firstDayOfMonth: _this2._isFirstDayOfMonth(startDate)\n          }\n        };\n      });\n      return options;\n    }\n  }]);\n\n  return SchedulerWorkSpaceMonth;\n}(SchedulerWorkSpace);\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js"],"names":["$","noop","registerComponent","SchedulerWorkSpace","dateUtils","getBoundingRect","dateLocalization","dxrMonthDateTableLayout","MONTH_CLASS","DATE_TABLE_CURRENT_DATE_CLASS","DATE_TABLE_CELL_TEXT_CLASS","DATE_TABLE_FIRST_OF_MONTH_CLASS","DATE_TABLE_OTHER_MONTH_DATE_CLASS","DATE_TABLE_SCROLLABLE_FIXED_CLASS","DAYS_IN_WEEK","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerWorkSpaceMonth","_dateTableScrollable","$content","toggleClass","_isWorkSpaceWithCount","_isVerticalGroupedWorkSpace","option","headerIndex","resultDate","Date","_firstViewDate","setDate","getDate","_formatWeekday","rowIndex","cellIndex","_getRowCount","_getCellCount","currentDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","getTime","date","_setStartDayHour","cache","get","averageWidth","cells","_getCells","slice","each","index","element","width","length","Math","floor","_createWorkSpaceScrollableElements","firstMonthDate","getFirstMonthDate","_getViewStartByOptions","firstDayOfWeek","_getCalculatedFirstDayOfWeek","getFirstWeekDate","_minVisibleDate","_maxVisibleDate","setMonth","getMonth","startDate","_getStartViewDate","diff","endDate","_dateInRange","options","getCellText","_getCellText","bind","getCellTextClass","isGroupedByDate","_getGroupCount","_getDate","_isFirstDayOfMonth","_formatMonthAndDay","format","monthName","getMonthNames","join","week","day","result","lastRowInDay","cell","data","$cell","_isCurrentDate","_isOtherMonth","cellDate","sameDate","_getToday","dateInRange","_calculateDayDuration","timeShift","cellPosition","getCellWidth","top","left","firstDateTime","lastDateTime","getEndViewDate","dayDurationInMs","getCellDuration","ceil","startDateCopy","setHours","_getDateTableBorder","groupIndex","position","_getCellCoordinatesByIndex","calculatedTopOffset","getCellHeight","renderRComponent","_$dateTable","_getRDateTableProps","cellDataGetters","push","_","value","text","today","otherMonth","firstDayOfMonth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\r\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\r\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\r\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\r\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\r\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\r\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\r\nvar DAYS_IN_WEEK = 7;\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\r\n    get isDateAndTimeView() {\r\n        return false\r\n    }\r\n    _toggleFixedScrollableClass() {\r\n        this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getElementClass() {\r\n        return MONTH_CLASS\r\n    }\r\n    _getRowCount() {\r\n        return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6\r\n    }\r\n    _getCellCount() {\r\n        return DAYS_IN_WEEK\r\n    }\r\n    _getDateByIndex(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    }\r\n    _getFormat() {\r\n        return this._formatWeekday\r\n    }\r\n    _calculateCellIndex(rowIndex, cellIndex) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            rowIndex %= this._getRowCount()\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        return rowIndex * this._getCellCount() + cellIndex\r\n    }\r\n    _getInterval() {\r\n        return DAY_IN_MILLISECONDS\r\n    }\r\n    _getIntervalBetween(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex) {\r\n        var date = super._getDateByCellIndexes(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    }\r\n    getCellWidth() {\r\n        return this.cache.get(\"cellWidth\", () => {\r\n            var averageWidth = 0;\r\n            var cells = this._getCells().slice(0, 7);\r\n            cells.each((index, element) => {\r\n                averageWidth += getBoundingRect(element).width\r\n            });\r\n            return 0 === cells.length ? void 0 : averageWidth / 7\r\n        })\r\n    }\r\n    _calculateHiddenInterval() {\r\n        return 0\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var rowIndex = Math.floor(index / this._getCellCount());\r\n        var cellIndex = index - this._getCellCount() * rowIndex;\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            super._createWorkSpaceElements()\r\n        }\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _getTableAllDay() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _setFirstViewDate() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\r\n        var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\r\n        this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\r\n        this._setStartDayHour(this._firstViewDate);\r\n        var date = this._getViewStartByOptions();\r\n        this._minVisibleDate = new Date(date.setDate(1));\r\n        this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0))\r\n    }\r\n    _getViewStartByOptions() {\r\n        if (!this.option(\"startDate\")) {\r\n            return new Date(this.option(\"currentDate\").getTime())\r\n        } else {\r\n            var startDate = this._getStartViewDate();\r\n            var currentDate = this.option(\"currentDate\");\r\n            var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n            var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\r\n            while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\r\n                startDate = new Date(endDate);\r\n                if (diff > 0) {\r\n                    startDate.setDate(1)\r\n                }\r\n                endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))))\r\n            }\r\n            return diff > 0 ? startDate : endDate\r\n        }\r\n    }\r\n    _getStartViewDate() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\r\n        return firstMonthDate\r\n    }\r\n    _renderTableBody(options) {\r\n        options.getCellText = this._getCellText.bind(this);\r\n        options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\r\n        super._renderTableBody(options)\r\n    }\r\n    _getCellText(rowIndex, cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        var date = this._getDate(rowIndex, cellIndex);\r\n        if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\r\n            return this._formatMonthAndDay(date)\r\n        }\r\n        return dateLocalization.format(date, \"dd\")\r\n    }\r\n    _formatMonthAndDay(date) {\r\n        var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, dateLocalization.format(date, \"day\")].join(\" \")\r\n    }\r\n    _getDate(week, day) {\r\n        var result = new Date(this._firstViewDate);\r\n        var lastRowInDay = this._getRowCount();\r\n        result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\r\n        return result\r\n    }\r\n    _updateIndex(index) {\r\n        return index\r\n    }\r\n    _prepareCellData(rowIndex, cellIndex, cell) {\r\n        var data = super._prepareCellData(rowIndex, cellIndex, cell);\r\n        var $cell = $(cell);\r\n        $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\r\n        return data\r\n    }\r\n    _isCurrentDate(cellDate) {\r\n        return dateUtils.sameDate(cellDate, this._getToday())\r\n    }\r\n    _isFirstDayOfMonth(cellDate) {\r\n        return this._isWorkSpaceWithCount() && 1 === cellDate.getDate()\r\n    }\r\n    _isOtherMonth(cellDate) {\r\n        return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\")\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    getCellDuration() {\r\n        return 36e5 * this._calculateDayDuration()\r\n    }\r\n    getIntervalDuration() {\r\n        return toMs(\"day\")\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getPositionShift(timeShift) {\r\n        return {\r\n            cellPosition: timeShift * this.getCellWidth(),\r\n            top: 0,\r\n            left: 0\r\n        }\r\n    }\r\n    getCellCountToLastViewDate(date) {\r\n        var firstDateTime = date.getTime();\r\n        var lastDateTime = this.getEndViewDate().getTime();\r\n        var dayDurationInMs = this.getCellDuration();\r\n        return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs)\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    keepOriginalHours() {\r\n        return true\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return true\r\n    }\r\n    _getDateTableBorderOffset() {\r\n        return this._getDateTableBorder()\r\n    }\r\n    _getCellPositionByIndex(index, groupIndex) {\r\n        var position = super._getCellPositionByIndex(index, groupIndex);\r\n        var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\r\n        var calculatedTopOffset;\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            calculatedTopOffset = this.getCellHeight() * rowIndex\r\n        } else {\r\n            calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount())\r\n        }\r\n        if (calculatedTopOffset) {\r\n            position.top = calculatedTopOffset\r\n        }\r\n        return position\r\n    }\r\n    _getHeaderDate() {\r\n        return this._getViewStartByOptions()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n    scrollToTime() {\r\n        return noop()\r\n    }\r\n    _createAllDayPanelElements() {}\r\n    _getRowCountWithAllDayRows() {\r\n        return this._getRowCount()\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    renderRDateTable() {\r\n        this.renderRComponent(this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions();\r\n        options.cellDataGetters.push((_, rowIndex, cellIndex) => ({\r\n            value: {\r\n                text: this._getCellText(rowIndex, cellIndex)\r\n            }\r\n        }));\r\n        options.cellDataGetters.push((_, rowIndex, cellIndex, groupIndex, startDate) => ({\r\n            value: {\r\n                today: this._isCurrentDate(startDate),\r\n                otherMonth: this._isOtherMonth(startDate),\r\n                firstDayOfMonth: this._isFirstDayOfMonth(startDate)\r\n            }\r\n        }));\r\n        return options\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\r\nexport default SchedulerWorkSpaceMonth;\r\n"]},"metadata":{},"sourceType":"module"}