{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_area.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { noop, ensureDefined } from \"../core/utils/common\";\nimport { getWindow } from \"../core/utils/window\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { isDefined } from \"../core/utils/type\";\nimport { addNamespace, eventData } from \"../events/utils/index\";\nimport pointerEvents from \"../events/pointer\";\nimport scrollEvents from \"../ui/scroll_view/ui.events.emitter.gesture.scroll\";\nimport { getVerticalOffsets, getElementBoxParams, parseHeight } from \"../core/utils/size\";\nimport { allowScroll, prepareScrollData } from \"./text_box/utils.scroll\";\nimport TextBox from \"./text_box\";\nvar TEXTAREA_CLASS = \"dx-textarea\";\nvar TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\nvar TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE = \"dx-texteditor-input-auto-resize\";\nvar TextArea = TextBox.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      spellcheck: true,\n      minHeight: void 0,\n      maxHeight: void 0,\n      autoResizeEnabled: false\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(TEXTAREA_CLASS);\n    this.callBase();\n    this.setAria(\"multiline\", \"true\");\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._updateInputHeight();\n\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderScrollHandler();\n  },\n  _createInput: function _createInput() {\n    var $input = $(\"<textarea>\");\n\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n\n    this._updateInputAutoResizeAppearance($input);\n\n    return $input;\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS);\n  },\n  _renderScrollHandler: function _renderScrollHandler() {\n    this._eventY = 0;\n\n    var $input = this._input();\n\n    var initScrollData = prepareScrollData($input, true);\n    eventsEngine.on($input, addNamespace(scrollEvents.init, this.NAME), initScrollData, noop);\n    eventsEngine.on($input, addNamespace(pointerEvents.down, this.NAME), this._pointerDownHandler.bind(this));\n    eventsEngine.on($input, addNamespace(pointerEvents.move, this.NAME), this._pointerMoveHandler.bind(this));\n  },\n  _pointerDownHandler: function _pointerDownHandler(e) {\n    this._eventY = eventData(e).y;\n  },\n  _pointerMoveHandler: function _pointerMoveHandler(e) {\n    var currentEventY = eventData(e).y;\n    var delta = this._eventY - currentEventY;\n\n    if (allowScroll(this._input(), delta)) {\n      e.isScrollingEvent = true;\n      e.stopPropagation();\n    }\n\n    this._eventY = currentEventY;\n  },\n  _renderDimensions: function _renderDimensions() {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    var minHeight = this.option(\"minHeight\");\n    var maxHeight = this.option(\"maxHeight\");\n    $element.css({\n      minHeight: void 0 !== minHeight ? minHeight : \"\",\n      maxHeight: void 0 !== maxHeight ? maxHeight : \"\",\n      width: width,\n      height: height\n    });\n  },\n  _resetDimensions: function _resetDimensions() {\n    this.$element().css({\n      height: \"\",\n      minHeight: \"\",\n      maxHeight: \"\"\n    });\n  },\n  _renderEvents: function _renderEvents() {\n    if (this.option(\"autoResizeEnabled\")) {\n      eventsEngine.on(this._input(), addNamespace(\"input paste\", this.NAME), this._updateInputHeight.bind(this));\n    }\n\n    this.callBase();\n  },\n  _refreshEvents: function _refreshEvents() {\n    eventsEngine.off(this._input(), addNamespace(\"input paste\", this.NAME));\n    this.callBase();\n  },\n  _getHeightDifference: function _getHeightDifference($input) {\n    return getVerticalOffsets(this._$element.get(0), false) + getVerticalOffsets(this._$textEditorContainer.get(0), false) + getVerticalOffsets(this._$textEditorInputContainer.get(0), false) + getElementBoxParams(\"height\", getWindow().getComputedStyle($input.get(0))).margin;\n  },\n  _updateInputHeight: function _updateInputHeight() {\n    var $input = this._input();\n\n    var autoHeightResizing = void 0 === this.option(\"height\") && this.option(\"autoResizeEnabled\");\n\n    if (!autoHeightResizing) {\n      $input.css(\"height\", \"\");\n      return;\n    } else {\n      this._resetDimensions();\n\n      this._$element.css(\"height\", this._$element.outerHeight());\n    }\n\n    $input.css(\"height\", 0);\n\n    var heightDifference = this._getHeightDifference($input);\n\n    this._renderDimensions();\n\n    var minHeight = this._getBoundaryHeight(\"minHeight\");\n\n    var maxHeight = this._getBoundaryHeight(\"maxHeight\");\n\n    var inputHeight = $input[0].scrollHeight;\n\n    if (void 0 !== minHeight) {\n      inputHeight = Math.max(inputHeight, minHeight - heightDifference);\n    }\n\n    if (void 0 !== maxHeight) {\n      var adjustedMaxHeight = maxHeight - heightDifference;\n      var needScroll = inputHeight > adjustedMaxHeight;\n      inputHeight = Math.min(inputHeight, adjustedMaxHeight);\n\n      this._updateInputAutoResizeAppearance($input, !needScroll);\n    }\n\n    $input.css(\"height\", inputHeight);\n\n    if (autoHeightResizing) {\n      this._$element.css(\"height\", \"auto\");\n    }\n  },\n  _getBoundaryHeight: function _getBoundaryHeight(optionName) {\n    var boundaryValue = this.option(optionName);\n\n    if (isDefined(boundaryValue)) {\n      return \"number\" === typeof boundaryValue ? boundaryValue : parseHeight(boundaryValue, this._$textEditorContainer.get(0));\n    }\n  },\n  _renderInputType: noop,\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._updateInputHeight();\n    }\n  },\n  _updateInputAutoResizeAppearance: function _updateInputAutoResizeAppearance($input, isAutoResizeEnabled) {\n    if ($input) {\n      var autoResizeEnabled = ensureDefined(isAutoResizeEnabled, this.option(\"autoResizeEnabled\"));\n      $input.toggleClass(TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE, autoResizeEnabled);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"autoResizeEnabled\":\n        this._updateInputAutoResizeAppearance(this._input(), args.value);\n\n        this._refreshEvents();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"value\":\n      case \"height\":\n        this.callBase(args);\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"minHeight\":\n      case \"maxHeight\":\n        this._renderDimensions();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n        args.value && this._updateInputHeight();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxTextArea\", TextArea);\nexport default TextArea;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/text_area.js"],"names":["$","eventsEngine","noop","ensureDefined","getWindow","registerComponent","extend","isDefined","addNamespace","eventData","pointerEvents","scrollEvents","getVerticalOffsets","getElementBoxParams","parseHeight","allowScroll","prepareScrollData","TextBox","TEXTAREA_CLASS","TEXTEDITOR_INPUT_CLASS","TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE","TextArea","inherit","_getDefaultOptions","callBase","spellcheck","minHeight","maxHeight","autoResizeEnabled","_initMarkup","$element","addClass","setAria","_renderContentImpl","_updateInputHeight","_renderInput","_renderScrollHandler","_createInput","$input","_applyInputAttributes","option","_updateInputAutoResizeAppearance","customAttributes","attr","_eventY","_input","initScrollData","on","init","NAME","down","_pointerDownHandler","bind","move","_pointerMoveHandler","e","y","currentEventY","delta","isScrollingEvent","stopPropagation","_renderDimensions","element","get","width","_getOptionValue","height","css","_resetDimensions","_renderEvents","_refreshEvents","off","_getHeightDifference","_$element","_$textEditorContainer","_$textEditorInputContainer","getComputedStyle","margin","autoHeightResizing","outerHeight","heightDifference","_getBoundaryHeight","inputHeight","scrollHeight","Math","max","adjustedMaxHeight","needScroll","min","optionName","boundaryValue","_renderInputType","_visibilityChanged","visible","isAutoResizeEnabled","toggleClass","_optionChanged","args","name","value"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_area.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../core/renderer\";\r\nimport eventsEngine from \"../events/core/events_engine\";\r\nimport {\r\n    noop,\r\n    ensureDefined\r\n} from \"../core/utils/common\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    isDefined\r\n} from \"../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    eventData\r\n} from \"../events/utils/index\";\r\nimport pointerEvents from \"../events/pointer\";\r\nimport scrollEvents from \"../ui/scroll_view/ui.events.emitter.gesture.scroll\";\r\nimport {\r\n    getVerticalOffsets,\r\n    getElementBoxParams,\r\n    parseHeight\r\n} from \"../core/utils/size\";\r\nimport {\r\n    allowScroll,\r\n    prepareScrollData\r\n} from \"./text_box/utils.scroll\";\r\nimport TextBox from \"./text_box\";\r\nvar TEXTAREA_CLASS = \"dx-textarea\";\r\nvar TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\r\nvar TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE = \"dx-texteditor-input-auto-resize\";\r\nvar TextArea = TextBox.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            spellcheck: true,\r\n            minHeight: void 0,\r\n            maxHeight: void 0,\r\n            autoResizeEnabled: false\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.$element().addClass(TEXTAREA_CLASS);\r\n        this.callBase();\r\n        this.setAria(\"multiline\", \"true\")\r\n    },\r\n    _renderContentImpl: function() {\r\n        this._updateInputHeight();\r\n        this.callBase()\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderScrollHandler()\r\n    },\r\n    _createInput: function() {\r\n        var $input = $(\"<textarea>\");\r\n        this._applyInputAttributes($input, this.option(\"inputAttr\"));\r\n        this._updateInputAutoResizeAppearance($input);\r\n        return $input\r\n    },\r\n    _applyInputAttributes: function($input, customAttributes) {\r\n        $input.attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS)\r\n    },\r\n    _renderScrollHandler: function() {\r\n        this._eventY = 0;\r\n        var $input = this._input();\r\n        var initScrollData = prepareScrollData($input, true);\r\n        eventsEngine.on($input, addNamespace(scrollEvents.init, this.NAME), initScrollData, noop);\r\n        eventsEngine.on($input, addNamespace(pointerEvents.down, this.NAME), this._pointerDownHandler.bind(this));\r\n        eventsEngine.on($input, addNamespace(pointerEvents.move, this.NAME), this._pointerMoveHandler.bind(this))\r\n    },\r\n    _pointerDownHandler: function(e) {\r\n        this._eventY = eventData(e).y\r\n    },\r\n    _pointerMoveHandler: function(e) {\r\n        var currentEventY = eventData(e).y;\r\n        var delta = this._eventY - currentEventY;\r\n        if (allowScroll(this._input(), delta)) {\r\n            e.isScrollingEvent = true;\r\n            e.stopPropagation()\r\n        }\r\n        this._eventY = currentEventY\r\n    },\r\n    _renderDimensions: function() {\r\n        var $element = this.$element();\r\n        var element = $element.get(0);\r\n        var width = this._getOptionValue(\"width\", element);\r\n        var height = this._getOptionValue(\"height\", element);\r\n        var minHeight = this.option(\"minHeight\");\r\n        var maxHeight = this.option(\"maxHeight\");\r\n        $element.css({\r\n            minHeight: void 0 !== minHeight ? minHeight : \"\",\r\n            maxHeight: void 0 !== maxHeight ? maxHeight : \"\",\r\n            width: width,\r\n            height: height\r\n        })\r\n    },\r\n    _resetDimensions: function() {\r\n        this.$element().css({\r\n            height: \"\",\r\n            minHeight: \"\",\r\n            maxHeight: \"\"\r\n        })\r\n    },\r\n    _renderEvents: function() {\r\n        if (this.option(\"autoResizeEnabled\")) {\r\n            eventsEngine.on(this._input(), addNamespace(\"input paste\", this.NAME), this._updateInputHeight.bind(this))\r\n        }\r\n        this.callBase()\r\n    },\r\n    _refreshEvents: function() {\r\n        eventsEngine.off(this._input(), addNamespace(\"input paste\", this.NAME));\r\n        this.callBase()\r\n    },\r\n    _getHeightDifference($input) {\r\n        return getVerticalOffsets(this._$element.get(0), false) + getVerticalOffsets(this._$textEditorContainer.get(0), false) + getVerticalOffsets(this._$textEditorInputContainer.get(0), false) + getElementBoxParams(\"height\", getWindow().getComputedStyle($input.get(0))).margin\r\n    },\r\n    _updateInputHeight: function() {\r\n        var $input = this._input();\r\n        var autoHeightResizing = void 0 === this.option(\"height\") && this.option(\"autoResizeEnabled\");\r\n        if (!autoHeightResizing) {\r\n            $input.css(\"height\", \"\");\r\n            return\r\n        } else {\r\n            this._resetDimensions();\r\n            this._$element.css(\"height\", this._$element.outerHeight())\r\n        }\r\n        $input.css(\"height\", 0);\r\n        var heightDifference = this._getHeightDifference($input);\r\n        this._renderDimensions();\r\n        var minHeight = this._getBoundaryHeight(\"minHeight\");\r\n        var maxHeight = this._getBoundaryHeight(\"maxHeight\");\r\n        var inputHeight = $input[0].scrollHeight;\r\n        if (void 0 !== minHeight) {\r\n            inputHeight = Math.max(inputHeight, minHeight - heightDifference)\r\n        }\r\n        if (void 0 !== maxHeight) {\r\n            var adjustedMaxHeight = maxHeight - heightDifference;\r\n            var needScroll = inputHeight > adjustedMaxHeight;\r\n            inputHeight = Math.min(inputHeight, adjustedMaxHeight);\r\n            this._updateInputAutoResizeAppearance($input, !needScroll)\r\n        }\r\n        $input.css(\"height\", inputHeight);\r\n        if (autoHeightResizing) {\r\n            this._$element.css(\"height\", \"auto\")\r\n        }\r\n    },\r\n    _getBoundaryHeight: function(optionName) {\r\n        var boundaryValue = this.option(optionName);\r\n        if (isDefined(boundaryValue)) {\r\n            return \"number\" === typeof boundaryValue ? boundaryValue : parseHeight(boundaryValue, this._$textEditorContainer.get(0))\r\n        }\r\n    },\r\n    _renderInputType: noop,\r\n    _visibilityChanged: function(visible) {\r\n        if (visible) {\r\n            this._updateInputHeight()\r\n        }\r\n    },\r\n    _updateInputAutoResizeAppearance: function($input, isAutoResizeEnabled) {\r\n        if ($input) {\r\n            var autoResizeEnabled = ensureDefined(isAutoResizeEnabled, this.option(\"autoResizeEnabled\"));\r\n            $input.toggleClass(TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE, autoResizeEnabled)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"autoResizeEnabled\":\r\n                this._updateInputAutoResizeAppearance(this._input(), args.value);\r\n                this._refreshEvents();\r\n                this._updateInputHeight();\r\n                break;\r\n            case \"value\":\r\n            case \"height\":\r\n                this.callBase(args);\r\n                this._updateInputHeight();\r\n                break;\r\n            case \"minHeight\":\r\n            case \"maxHeight\":\r\n                this._renderDimensions();\r\n                this._updateInputHeight();\r\n                break;\r\n            case \"visible\":\r\n                this.callBase(args);\r\n                args.value && this._updateInputHeight();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxTextArea\", TextArea);\r\nexport default TextArea;\r\n"]},"metadata":{},"sourceType":"module"}