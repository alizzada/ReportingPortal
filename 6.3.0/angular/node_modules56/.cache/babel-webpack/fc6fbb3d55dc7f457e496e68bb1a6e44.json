{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointmentsPositioning.strategy.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../core/utils/type\";\nvar COLLECTOR_DEFAULT_WIDTH = 24;\nvar COLLECTOR_DEFAULT_OFFSET = 3;\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_OFFSET = 22;\nvar APPOINTMENT_MIN_COUNT = 1;\nvar APPOINTMENT_DEFAULT_WIDTH = 40;\nvar COLLECTOR_WIDTH_IN_PERCENTS = 75;\nvar APPOINTMENT_INCREASED_WIDTH = 50;\n\nvar AppointmentPositioningStrategy = /*#__PURE__*/function () {\n  function AppointmentPositioningStrategy(renderingStrategy) {\n    _classCallCheck(this, AppointmentPositioningStrategy);\n\n    this._renderingStrategy = renderingStrategy;\n  }\n\n  _createClass(AppointmentPositioningStrategy, [{\n    key: \"getRenderingStrategy\",\n    value: function getRenderingStrategy() {\n      return this._renderingStrategy;\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth(intervalCount, isAllDay) {\n      if (isAllDay || !isDefined(isAllDay)) {\n        return COLLECTOR_WIDTH_IN_PERCENTS * this.getRenderingStrategy().getDefaultCellWidth() / 100;\n      } else {\n        return COLLECTOR_DEFAULT_WIDTH;\n      }\n    }\n  }, {\n    key: \"getCollectorTopOffset\",\n    value: function getCollectorTopOffset() {\n      return COLLECTOR_DEFAULT_OFFSET;\n    }\n  }, {\n    key: \"getCollectorLeftOffset\",\n    value: function getCollectorLeftOffset() {\n      return COLLECTOR_DEFAULT_OFFSET;\n    }\n  }, {\n    key: \"getAppointmentDefaultOffset\",\n    value: function getAppointmentDefaultOffset() {\n      if (this.getRenderingStrategy()._isCompactTheme()) {\n        return COMPACT_THEME_APPOINTMENT_DEFAULT_OFFSET;\n      }\n\n      return this.getRenderingStrategy().instance.option(\"_appointmentOffset\");\n    }\n  }, {\n    key: \"getDynamicAppointmentCountPerCell\",\n    value: function getDynamicAppointmentCountPerCell() {\n      var renderingStrategy = this.getRenderingStrategy();\n      var cellHeight = renderingStrategy.instance.fire(\"getCellHeight\");\n\n      var allDayCount = Math.floor((cellHeight - renderingStrategy._getAppointmentDefaultOffset()) / renderingStrategy._getAppointmentDefaultHeight()) || this._getAppointmentMinCount();\n\n      if (renderingStrategy.hasAllDayAppointments()) {\n        return {\n          allDay: \"vertical\" === renderingStrategy.instance._groupOrientation ? allDayCount : renderingStrategy.instance.option(\"_appointmentCountPerCell\"),\n          simple: this._calculateDynamicAppointmentCountPerCell() || this._getAppointmentMinCount()\n        };\n      } else {\n        return allDayCount;\n      }\n    }\n  }, {\n    key: \"getDropDownAppointmentHeight\",\n    value: function getDropDownAppointmentHeight() {\n      return;\n    }\n  }, {\n    key: \"_getAppointmentMinCount\",\n    value: function _getAppointmentMinCount() {\n      return APPOINTMENT_MIN_COUNT;\n    }\n  }, {\n    key: \"_calculateDynamicAppointmentCountPerCell\",\n    value: function _calculateDynamicAppointmentCountPerCell() {\n      return Math.floor(this.getRenderingStrategy()._getAppointmentMaxWidth() / APPOINTMENT_INCREASED_WIDTH);\n    }\n  }, {\n    key: \"_getAppointmentDefaultWidth\",\n    value: function _getAppointmentDefaultWidth() {\n      return APPOINTMENT_DEFAULT_WIDTH;\n    }\n  }]);\n\n  return AppointmentPositioningStrategy;\n}();\n\nexport default AppointmentPositioningStrategy;","map":null,"metadata":{},"sourceType":"module"}