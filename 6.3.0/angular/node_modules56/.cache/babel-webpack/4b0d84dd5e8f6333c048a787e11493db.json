{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.details.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { extendAttributes, getDisplayFileSize } from \"./ui.file_manager.common\";\nimport { isString, isFunction, isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport DataGrid from \"../data_grid/ui.data_grid\";\nimport FileManagerItemListBase from \"./ui.file_manager.item_list\";\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar FILE_MANAGER_DETAILS_ITEM_LIST_CLASS = \"dx-filemanager-details\";\nvar FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS = \"dx-filemanager-details-item-thumbnail\";\nvar FILE_MANAGER_DETAILS_ITEM_NAME_CLASS = \"dx-filemanager-details-item-name\";\nvar FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS = \"dx-filemanager-details-item-name-wrapper\";\nvar FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS = \"dx-filemanager-details-item-is-directory\";\nvar FILE_MANAGER_PARENT_DIRECTORY_ITEM = \"dx-filemanager-parent-directory-item\";\nvar DATA_GRID_DATA_ROW_CLASS = \"dx-data-row\";\nvar DEFAULT_COLUMN_CONFIGS = {\n  thumbnail: {\n    caption: \"\",\n    calculateSortValue: \"isDirectory\",\n    width: 36,\n    alignment: \"center\",\n    cssClass: FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS\n  },\n  name: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\")\n  },\n  dateModified: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\"),\n    width: 110,\n    hidingPriority: 1\n  },\n  size: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\"),\n    width: 90,\n    alignment: \"right\",\n    hidingPriority: 0\n  },\n  isParentFolder: {\n    caption: \"isParentFolder\",\n    visible: false,\n    sortIndex: 0,\n    sortOrder: \"asc\"\n  }\n};\n\nvar FileManagerDetailsItemList = /*#__PURE__*/function (_FileManagerItemListB) {\n  _inherits(FileManagerDetailsItemList, _FileManagerItemListB);\n\n  var _super = _createSuper(FileManagerDetailsItemList);\n\n  function FileManagerDetailsItemList() {\n    _classCallCheck(this, FileManagerDetailsItemList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerDetailsItemList, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      this._itemCount = 0;\n      this._focusedItem = null;\n      this._hasParentDirectoryItem = false;\n      this._parentDirectoryItemKey = null;\n      this._selectAllCheckBox = null;\n      this._selectAllCheckBoxUpdating = false;\n      this.$element().addClass(FILE_MANAGER_DETAILS_ITEM_LIST_CLASS);\n\n      this._createFilesView();\n\n      this._contextMenu.option(\"onContextMenuHidden\", function () {\n        return _this._onContextMenuHidden();\n      });\n\n      _get(_getPrototypeOf(FileManagerDetailsItemList.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_createFilesView\",\n    value: function _createFilesView() {\n      var _this2 = this;\n\n      var $filesView = $(\"<div>\").appendTo(this.$element());\n      var selectionMode = this._isMultipleSelectionMode() ? \"multiple\" : \"none\";\n      this._filesView = this._createComponent($filesView, DataGrid, {\n        dataSource: this._createDataSource(),\n        hoverStateEnabled: true,\n        selection: {\n          mode: selectionMode,\n          showCheckBoxesMode: this._isDesktop() ? \"onClick\" : \"none\"\n        },\n        selectedRowKeys: this.option(\"selectedItemKeys\"),\n        focusedRowKey: this.option(\"focusedItemKey\"),\n        focusedRowEnabled: true,\n        allowColumnResizing: true,\n        scrolling: {\n          mode: \"virtual\"\n        },\n        sorting: {\n          mode: \"single\",\n          showSortIndexes: false\n        },\n        showColumnLines: false,\n        showRowLines: false,\n        columnHidingEnabled: false,\n        columns: this._createColumns(),\n        onEditorPreparing: this._onEditorPreparing.bind(this),\n        onRowPrepared: this._onRowPrepared.bind(this),\n        onContextMenuPreparing: this._onContextMenuPreparing.bind(this),\n        onSelectionChanged: this._onFilesViewSelectionChanged.bind(this),\n        onFocusedRowChanged: this._onFilesViewFocusedRowChanged.bind(this),\n        onOptionChanged: this._onFilesViewOptionChanged.bind(this),\n        onContentReady: function onContentReady() {\n          var _this$_refreshDeferre;\n\n          return null === (_this$_refreshDeferre = _this2._refreshDeferred) || void 0 === _this$_refreshDeferre ? void 0 : _this$_refreshDeferre.resolve();\n        }\n      });\n    }\n  }, {\n    key: \"_createColumns\",\n    value: function _createColumns() {\n      var _this3 = this;\n\n      var columns = this.option(\"detailColumns\");\n      columns = columns.slice(0);\n      columns = columns.map(function (column) {\n        var extendedItem = column;\n\n        if (isString(column)) {\n          extendedItem = {\n            dataField: column\n          };\n        }\n\n        return _this3._getPreparedColumn(extendedItem);\n      });\n      var customizeDetailColumns = this.option(\"customizeDetailColumns\");\n\n      if (isFunction(customizeDetailColumns)) {\n        columns = customizeDetailColumns(columns);\n      }\n\n      columns.push(this._getPreparedColumn({\n        dataField: \"isParentFolder\"\n      }));\n      columns.forEach(function (column) {\n        return _this3._updateColumnDataField(column);\n      });\n      return columns;\n    }\n  }, {\n    key: \"_getPreparedColumn\",\n    value: function _getPreparedColumn(columnOptions) {\n      var result = {};\n      var resultCssClass = \"\";\n\n      if (this._isDefaultColumn(columnOptions.dataField)) {\n        var defaultConfig = extend(true, {}, DEFAULT_COLUMN_CONFIGS[columnOptions.dataField]);\n        resultCssClass = defaultConfig.cssClass || \"\";\n\n        switch (columnOptions.dataField) {\n          case \"thumbnail\":\n            defaultConfig.cellTemplate = this._createThumbnailColumnCell.bind(this);\n            defaultConfig.calculateSortValue = \"fileItem.\".concat(defaultConfig.calculateSortValue);\n            break;\n\n          case \"name\":\n            defaultConfig.cellTemplate = this._createNameColumnCell.bind(this);\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\");\n            break;\n\n          case \"size\":\n            defaultConfig.calculateCellValue = this._calculateSizeColumnCellValue.bind(this);\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\");\n\n            defaultConfig.calculateSortValue = function (rowData) {\n              return rowData.fileItem.isDirectory ? -1 : rowData.fileItem.size;\n            };\n\n            break;\n\n          case \"dateModified\":\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\");\n        }\n\n        extend(true, result, defaultConfig);\n      }\n\n      extendAttributes(result, columnOptions, [\"alignment\", \"caption\", \"dataField\", \"dataType\", \"hidingPriority\", \"sortIndex\", \"sortOrder\", \"visible\", \"visibleIndex\", \"width\"]);\n\n      if (columnOptions.cssClass) {\n        resultCssClass = \"\".concat(resultCssClass, \" \").concat(columnOptions.cssClass);\n      }\n\n      if (resultCssClass) {\n        result.cssClass = resultCssClass;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateColumnDataField\",\n    value: function _updateColumnDataField(column) {\n      var dataItemSuffix = this._isDefaultColumn(column.dataField) ? \"\" : \"dataItem.\";\n      column.dataField = \"fileItem.\" + dataItemSuffix + column.dataField;\n      return column;\n    }\n  }, {\n    key: \"_isDefaultColumn\",\n    value: function _isDefaultColumn(columnDataField) {\n      return !!DEFAULT_COLUMN_CONFIGS[columnDataField];\n    }\n  }, {\n    key: \"_onFileItemActionButtonClick\",\n    value: function _onFileItemActionButtonClick(_ref) {\n      var component = _ref.component,\n          element = _ref.element,\n          event = _ref.event;\n      event.stopPropagation();\n      var $row = component.$element().closest(this._getItemSelector());\n      var fileItemInfo = $row.data(\"item\");\n\n      this._selectItem(fileItemInfo);\n\n      var target = {\n        itemData: fileItemInfo,\n        itemElement: $row,\n        isActionButton: true\n      };\n\n      var items = this._getFileItemsForContextMenu(fileItemInfo);\n\n      this._showContextMenu(items, element, event, target);\n\n      this._activeFileActionsButton = component;\n\n      this._activeFileActionsButton.setActive(true);\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function _onContextMenuHidden() {\n      if (this._activeFileActionsButton) {\n        this._activeFileActionsButton.setActive(false);\n      }\n    }\n  }, {\n    key: \"_getItemThumbnailCssClass\",\n    value: function _getItemThumbnailCssClass() {\n      return FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS;\n    }\n  }, {\n    key: \"_getItemSelector\",\n    value: function _getItemSelector() {\n      return \".\".concat(DATA_GRID_DATA_ROW_CLASS);\n    }\n  }, {\n    key: \"_onItemDblClick\",\n    value: function _onItemDblClick(e) {\n      var $row = $(e.currentTarget);\n      var fileItemInfo = $row.data(\"item\");\n\n      this._raiseSelectedItemOpened(fileItemInfo);\n    }\n  }, {\n    key: \"_isAllItemsSelected\",\n    value: function _isAllItemsSelected() {\n      var selectableItemsCount = this._hasParentDirectoryItem ? this._itemCount - 1 : this._itemCount;\n\n      var selectedRowKeys = this._filesView.option(\"selectedRowKeys\");\n\n      if (!selectedRowKeys.length) {\n        return false;\n      }\n\n      return selectedRowKeys.length >= selectableItemsCount ? true : void 0;\n    }\n  }, {\n    key: \"_onEditorPreparing\",\n    value: function _onEditorPreparing(_ref2) {\n      var _this4 = this;\n\n      var component = _ref2.component,\n          command = _ref2.command,\n          row = _ref2.row,\n          parentType = _ref2.parentType,\n          editorOptions = _ref2.editorOptions;\n\n      if (!this._filesView) {\n        this._filesView = component;\n      }\n\n      if (\"select\" === command && row) {\n        if (this._isParentDirectoryItem(row.data)) {\n          editorOptions.disabled = true;\n        }\n      } else if (\"headerRow\" === parentType) {\n        editorOptions.onInitialized = function (_ref3) {\n          var component = _ref3.component;\n          _this4._selectAllCheckBox = component;\n        };\n\n        editorOptions.value = this._isAllItemsSelected();\n\n        editorOptions.onValueChanged = function (args) {\n          return _this4._onSelectAllCheckBoxValueChanged(args);\n        };\n      }\n    }\n  }, {\n    key: \"_onSelectAllCheckBoxValueChanged\",\n    value: function _onSelectAllCheckBoxValueChanged(_ref4) {\n      var event = _ref4.event,\n          previousValue = _ref4.previousValue,\n          value = _ref4.value;\n\n      if (!event) {\n        if (previousValue && !this._selectAllCheckBoxUpdating && this._selectAllCheckBox) {\n          this._selectAllCheckBox.option(\"value\", previousValue);\n        }\n\n        return;\n      }\n\n      if (this._isAllItemsSelected() === value) {\n        return;\n      }\n\n      if (value) {\n        this._filesView.selectAll();\n      } else {\n        this._filesView.deselectAll();\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"_onRowPrepared\",\n    value: function _onRowPrepared(_ref5) {\n      var rowType = _ref5.rowType,\n          rowElement = _ref5.rowElement,\n          data = _ref5.data;\n\n      if (\"data\" === rowType) {\n        var $row = $(rowElement);\n        $row.data(\"item\", data);\n\n        if (this._isParentDirectoryItem(data)) {\n          $row.addClass(FILE_MANAGER_PARENT_DIRECTORY_ITEM);\n        }\n      }\n    }\n  }, {\n    key: \"_onContextMenuPreparing\",\n    value: function _onContextMenuPreparing(e) {\n      if (!this._isDesktop()) {\n        return;\n      }\n\n      var fileItems = null;\n      var item = {};\n\n      if (e.row && \"data\" === e.row.rowType) {\n        item = e.row.data;\n\n        this._selectItem(item);\n\n        fileItems = this._getFileItemsForContextMenu(item);\n      }\n\n      var eventArgs = extend({}, {\n        targetElement: \"content\" === e.target && isDefined(e.row) ? this._filesView.getRowElement(e.rowIndex) : void 0,\n        itemData: item,\n        options: this._contextMenu.option(),\n        event: e.event,\n        isActionButton: false,\n        cancel: false\n      });\n\n      this._raiseContextMenuShowing(eventArgs);\n\n      e.items = eventArgs.cancel ? [] : this._contextMenu.createContextMenuItems(fileItems, null, item);\n    }\n  }, {\n    key: \"_onFilesViewSelectionChanged\",\n    value: function _onFilesViewSelectionChanged(_ref6) {\n      var component = _ref6.component,\n          selectedRowsData = _ref6.selectedRowsData,\n          selectedRowKeys = _ref6.selectedRowKeys,\n          currentSelectedRowKeys = _ref6.currentSelectedRowKeys,\n          currentDeselectedRowKeys = _ref6.currentDeselectedRowKeys;\n      this._filesView = this._filesView || component;\n\n      if (this._selectAllCheckBox) {\n        this._selectAllCheckBoxUpdating = true;\n\n        this._selectAllCheckBox.option(\"value\", this._isAllItemsSelected());\n\n        this._selectAllCheckBoxUpdating = false;\n      }\n\n      var selectedItems = selectedRowsData.map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n\n      this._tryRaiseSelectionChanged({\n        selectedItemInfos: selectedRowsData,\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedRowKeys,\n        currentSelectedItemKeys: currentSelectedRowKeys,\n        currentDeselectedItemKeys: currentDeselectedRowKeys\n      });\n    }\n  }, {\n    key: \"_onFilesViewFocusedRowChanged\",\n    value: function _onFilesViewFocusedRowChanged(e) {\n      var _e$row2;\n\n      if (!this._isMultipleSelectionMode()) {\n        var _e$row;\n\n        this._selectItemSingleSelection(null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.data);\n      }\n\n      var fileSystemItem = (null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.data.fileItem) || null;\n\n      this._onFocusedItemChanged({\n        item: fileSystemItem,\n        itemKey: null === fileSystemItem || void 0 === fileSystemItem ? void 0 : fileSystemItem.key,\n        itemElement: e.rowElement\n      });\n    }\n  }, {\n    key: \"_onFilesViewOptionChanged\",\n    value: function _onFilesViewOptionChanged(_ref7) {\n      var fullName = _ref7.fullName;\n\n      if (fullName.indexOf(\"sortOrder\") > -1) {\n        this._filesView.columnOption(\"isParentFolder\", {\n          sortOrder: \"asc\",\n          sortIndex: 0\n        });\n      }\n    }\n  }, {\n    key: \"_resetFocus\",\n    value: function _resetFocus() {\n      this._setFocusedItemKey(void 0);\n    }\n  }, {\n    key: \"_createThumbnailColumnCell\",\n    value: function _createThumbnailColumnCell(container, cellInfo) {\n      this._getItemThumbnailContainer(cellInfo.data).appendTo(container);\n    }\n  }, {\n    key: \"_createNameColumnCell\",\n    value: function _createNameColumnCell(container, cellInfo) {\n      var _this5 = this;\n\n      var $button = $(\"<div>\");\n      var $name = $(\"<span>\").text(cellInfo.data.fileItem.name).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_CLASS);\n      var $wrapper = $(\"<div>\").append($name, $button).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS);\n      $(container).append($wrapper);\n\n      this._createComponent($button, FileManagerFileActionsButton, {\n        onClick: function onClick(e) {\n          return _this5._onFileItemActionButtonClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_calculateSizeColumnCellValue\",\n    value: function _calculateSizeColumnCellValue(rowData) {\n      return rowData.fileItem.isDirectory ? \"\" : getDisplayFileSize(rowData.fileItem.size);\n    }\n  }, {\n    key: \"_selectItem\",\n    value: function _selectItem(fileItemInfo) {\n      var selectItemFunc = this._isMultipleSelectionMode() ? this._selectItemMultipleSelection : this._selectItemSingleSelection;\n      selectItemFunc.call(this, fileItemInfo);\n    }\n  }, {\n    key: \"_deselectItem\",\n    value: function _deselectItem(item) {\n      this._filesView.deselectRows([item.fileItem.key]);\n    }\n  }, {\n    key: \"_selectItemSingleSelection\",\n    value: function _selectItemSingleSelection(fileItemInfo) {\n      if (!this._focusedItem || !fileItemInfo || this._focusedItem.fileItem.key !== fileItemInfo.fileItem.key) {\n        var oldFocusedItem = this._focusedItem;\n        this._focusedItem = fileItemInfo;\n        var deselectedKeys = [];\n\n        if (oldFocusedItem) {\n          deselectedKeys.push(oldFocusedItem.fileItem.key);\n        }\n\n        var selectedItems = [];\n        var selectedKeys = [];\n\n        if (fileItemInfo && !this._isParentDirectoryItem(fileItemInfo)) {\n          selectedItems.push(fileItemInfo.fileItem);\n          selectedKeys.push(fileItemInfo.fileItem.key);\n        }\n\n        this._raiseSelectionChanged({\n          selectedItems: selectedItems,\n          selectedItemKeys: selectedKeys,\n          currentSelectedItemKeys: [].concat(selectedKeys),\n          currentDeselectedItemKeys: deselectedKeys\n        });\n      }\n    }\n  }, {\n    key: \"_selectItemMultipleSelection\",\n    value: function _selectItemMultipleSelection(_ref8) {\n      var fileItem = _ref8.fileItem;\n\n      if (!this._filesView.isRowSelected(fileItem.key)) {\n        var selectionController = this._filesView.getController(\"selection\");\n\n        var preserve = selectionController.isSelectionWithCheckboxes();\n\n        this._filesView.selectRows([fileItem.key], preserve);\n      }\n    }\n  }, {\n    key: \"_setSelectedItemKeys\",\n    value: function _setSelectedItemKeys(itemKeys) {\n      this._filesView.option(\"selectedRowKeys\", itemKeys);\n    }\n  }, {\n    key: \"_setFocusedItemKey\",\n    value: function _setFocusedItemKey(itemKey) {\n      var _this$_filesView;\n\n      null === (_this$_filesView = this._filesView) || void 0 === _this$_filesView ? void 0 : _this$_filesView.option(\"focusedRowKey\", itemKey);\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (this._isMultipleSelectionMode()) {\n        this._filesView.clearSelection();\n      } else {\n        this._filesView.option(\"focusedRowIndex\", -1);\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(options) {\n      var actualOptions = {\n        dataSource: this._createDataSource()\n      };\n\n      if (options && Object.prototype.hasOwnProperty.call(options, \"focusedItemKey\")) {\n        if (isDefined(options.focusedItemKey)) {\n          actualOptions.focusedRowKey = options.focusedItemKey;\n        } else {\n          actualOptions.focusedRowIndex = -1;\n        }\n      }\n\n      this._filesView.option(actualOptions);\n\n      this._refreshDeferred = new Deferred();\n      return this._refreshDeferred.promise();\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {\n      if (this._isMultipleSelectionMode()) {\n        return this._filesView.getSelectedRowsData();\n      }\n\n      return this._focusedItem && !this._isParentDirectoryItem(this._focusedItem) ? [this._focusedItem] : [];\n    }\n  }]);\n\n  return FileManagerDetailsItemList;\n}(FileManagerItemListBase);\n\nexport default FileManagerDetailsItemList;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.item_list.details.js"],"names":["$","extend","extendAttributes","getDisplayFileSize","isString","isFunction","isDefined","messageLocalization","DataGrid","FileManagerItemListBase","FileManagerFileActionsButton","Deferred","FILE_MANAGER_DETAILS_ITEM_LIST_CLASS","FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS","FILE_MANAGER_DETAILS_ITEM_NAME_CLASS","FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS","FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS","FILE_MANAGER_PARENT_DIRECTORY_ITEM","DATA_GRID_DATA_ROW_CLASS","DEFAULT_COLUMN_CONFIGS","thumbnail","caption","calculateSortValue","width","alignment","cssClass","name","format","dateModified","hidingPriority","size","isParentFolder","visible","sortIndex","sortOrder","FileManagerDetailsItemList","_itemCount","_focusedItem","_hasParentDirectoryItem","_parentDirectoryItemKey","_selectAllCheckBox","_selectAllCheckBoxUpdating","$element","addClass","_createFilesView","_contextMenu","option","_onContextMenuHidden","$filesView","appendTo","selectionMode","_isMultipleSelectionMode","_filesView","_createComponent","dataSource","_createDataSource","hoverStateEnabled","selection","mode","showCheckBoxesMode","_isDesktop","selectedRowKeys","focusedRowKey","focusedRowEnabled","allowColumnResizing","scrolling","sorting","showSortIndexes","showColumnLines","showRowLines","columnHidingEnabled","columns","_createColumns","onEditorPreparing","_onEditorPreparing","bind","onRowPrepared","_onRowPrepared","onContextMenuPreparing","_onContextMenuPreparing","onSelectionChanged","_onFilesViewSelectionChanged","onFocusedRowChanged","_onFilesViewFocusedRowChanged","onOptionChanged","_onFilesViewOptionChanged","onContentReady","_this$_refreshDeferre","_refreshDeferred","resolve","slice","map","column","extendedItem","dataField","_getPreparedColumn","customizeDetailColumns","push","forEach","_updateColumnDataField","columnOptions","result","resultCssClass","_isDefaultColumn","defaultConfig","cellTemplate","_createThumbnailColumnCell","concat","_createNameColumnCell","calculateCellValue","_calculateSizeColumnCellValue","rowData","fileItem","isDirectory","dataItemSuffix","columnDataField","_ref","component","element","event","stopPropagation","$row","closest","_getItemSelector","fileItemInfo","data","_selectItem","target","itemData","itemElement","isActionButton","items","_getFileItemsForContextMenu","_showContextMenu","_activeFileActionsButton","setActive","e","currentTarget","_raiseSelectedItemOpened","selectableItemsCount","length","_ref2","command","row","parentType","editorOptions","_isParentDirectoryItem","disabled","onInitialized","_ref3","value","_isAllItemsSelected","onValueChanged","args","_onSelectAllCheckBoxValueChanged","_ref4","previousValue","selectAll","deselectAll","preventDefault","_ref5","rowType","rowElement","fileItems","item","eventArgs","targetElement","getRowElement","rowIndex","options","cancel","_raiseContextMenuShowing","createContextMenuItems","_ref6","selectedRowsData","currentSelectedRowKeys","currentDeselectedRowKeys","selectedItems","itemInfo","_tryRaiseSelectionChanged","selectedItemInfos","selectedItemKeys","currentSelectedItemKeys","currentDeselectedItemKeys","_e$row2","_e$row","_selectItemSingleSelection","fileSystemItem","_onFocusedItemChanged","itemKey","key","_ref7","fullName","indexOf","columnOption","_setFocusedItemKey","container","cellInfo","_getItemThumbnailContainer","$button","$name","text","$wrapper","append","onClick","_onFileItemActionButtonClick","selectItemFunc","_selectItemMultipleSelection","call","deselectRows","oldFocusedItem","deselectedKeys","selectedKeys","_raiseSelectionChanged","_ref8","isRowSelected","selectionController","getController","preserve","isSelectionWithCheckboxes","selectRows","itemKeys","_this$_filesView","clearSelection","actualOptions","Object","prototype","hasOwnProperty","focusedItemKey","focusedRowIndex","promise","getSelectedRowsData"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.details.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    extendAttributes,\r\n    getDisplayFileSize\r\n} from \"./ui.file_manager.common\";\r\nimport {\r\n    isString,\r\n    isFunction,\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport DataGrid from \"../data_grid/ui.data_grid\";\r\nimport FileManagerItemListBase from \"./ui.file_manager.item_list\";\r\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar FILE_MANAGER_DETAILS_ITEM_LIST_CLASS = \"dx-filemanager-details\";\r\nvar FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS = \"dx-filemanager-details-item-thumbnail\";\r\nvar FILE_MANAGER_DETAILS_ITEM_NAME_CLASS = \"dx-filemanager-details-item-name\";\r\nvar FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS = \"dx-filemanager-details-item-name-wrapper\";\r\nvar FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS = \"dx-filemanager-details-item-is-directory\";\r\nvar FILE_MANAGER_PARENT_DIRECTORY_ITEM = \"dx-filemanager-parent-directory-item\";\r\nvar DATA_GRID_DATA_ROW_CLASS = \"dx-data-row\";\r\nvar DEFAULT_COLUMN_CONFIGS = {\r\n    thumbnail: {\r\n        caption: \"\",\r\n        calculateSortValue: \"isDirectory\",\r\n        width: 36,\r\n        alignment: \"center\",\r\n        cssClass: FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS\r\n    },\r\n    name: {\r\n        caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\")\r\n    },\r\n    dateModified: {\r\n        caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\"),\r\n        width: 110,\r\n        hidingPriority: 1\r\n    },\r\n    size: {\r\n        caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\"),\r\n        width: 90,\r\n        alignment: \"right\",\r\n        hidingPriority: 0\r\n    },\r\n    isParentFolder: {\r\n        caption: \"isParentFolder\",\r\n        visible: false,\r\n        sortIndex: 0,\r\n        sortOrder: \"asc\"\r\n    }\r\n};\r\nclass FileManagerDetailsItemList extends FileManagerItemListBase {\r\n    _initMarkup() {\r\n        this._itemCount = 0;\r\n        this._focusedItem = null;\r\n        this._hasParentDirectoryItem = false;\r\n        this._parentDirectoryItemKey = null;\r\n        this._selectAllCheckBox = null;\r\n        this._selectAllCheckBoxUpdating = false;\r\n        this.$element().addClass(FILE_MANAGER_DETAILS_ITEM_LIST_CLASS);\r\n        this._createFilesView();\r\n        this._contextMenu.option(\"onContextMenuHidden\", () => this._onContextMenuHidden());\r\n        super._initMarkup()\r\n    }\r\n    _createFilesView() {\r\n        var $filesView = $(\"<div>\").appendTo(this.$element());\r\n        var selectionMode = this._isMultipleSelectionMode() ? \"multiple\" : \"none\";\r\n        this._filesView = this._createComponent($filesView, DataGrid, {\r\n            dataSource: this._createDataSource(),\r\n            hoverStateEnabled: true,\r\n            selection: {\r\n                mode: selectionMode,\r\n                showCheckBoxesMode: this._isDesktop() ? \"onClick\" : \"none\"\r\n            },\r\n            selectedRowKeys: this.option(\"selectedItemKeys\"),\r\n            focusedRowKey: this.option(\"focusedItemKey\"),\r\n            focusedRowEnabled: true,\r\n            allowColumnResizing: true,\r\n            scrolling: {\r\n                mode: \"virtual\"\r\n            },\r\n            sorting: {\r\n                mode: \"single\",\r\n                showSortIndexes: false\r\n            },\r\n            showColumnLines: false,\r\n            showRowLines: false,\r\n            columnHidingEnabled: false,\r\n            columns: this._createColumns(),\r\n            onEditorPreparing: this._onEditorPreparing.bind(this),\r\n            onRowPrepared: this._onRowPrepared.bind(this),\r\n            onContextMenuPreparing: this._onContextMenuPreparing.bind(this),\r\n            onSelectionChanged: this._onFilesViewSelectionChanged.bind(this),\r\n            onFocusedRowChanged: this._onFilesViewFocusedRowChanged.bind(this),\r\n            onOptionChanged: this._onFilesViewOptionChanged.bind(this),\r\n            onContentReady: () => {\r\n                var _this$_refreshDeferre;\r\n                return null === (_this$_refreshDeferre = this._refreshDeferred) || void 0 === _this$_refreshDeferre ? void 0 : _this$_refreshDeferre.resolve()\r\n            }\r\n        })\r\n    }\r\n    _createColumns() {\r\n        var columns = this.option(\"detailColumns\");\r\n        columns = columns.slice(0);\r\n        columns = columns.map(column => {\r\n            var extendedItem = column;\r\n            if (isString(column)) {\r\n                extendedItem = {\r\n                    dataField: column\r\n                }\r\n            }\r\n            return this._getPreparedColumn(extendedItem)\r\n        });\r\n        var customizeDetailColumns = this.option(\"customizeDetailColumns\");\r\n        if (isFunction(customizeDetailColumns)) {\r\n            columns = customizeDetailColumns(columns)\r\n        }\r\n        columns.push(this._getPreparedColumn({\r\n            dataField: \"isParentFolder\"\r\n        }));\r\n        columns.forEach(column => this._updateColumnDataField(column));\r\n        return columns\r\n    }\r\n    _getPreparedColumn(columnOptions) {\r\n        var result = {};\r\n        var resultCssClass = \"\";\r\n        if (this._isDefaultColumn(columnOptions.dataField)) {\r\n            var defaultConfig = extend(true, {}, DEFAULT_COLUMN_CONFIGS[columnOptions.dataField]);\r\n            resultCssClass = defaultConfig.cssClass || \"\";\r\n            switch (columnOptions.dataField) {\r\n                case \"thumbnail\":\r\n                    defaultConfig.cellTemplate = this._createThumbnailColumnCell.bind(this);\r\n                    defaultConfig.calculateSortValue = \"fileItem.\".concat(defaultConfig.calculateSortValue);\r\n                    break;\r\n                case \"name\":\r\n                    defaultConfig.cellTemplate = this._createNameColumnCell.bind(this);\r\n                    defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\");\r\n                    break;\r\n                case \"size\":\r\n                    defaultConfig.calculateCellValue = this._calculateSizeColumnCellValue.bind(this);\r\n                    defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\");\r\n                    defaultConfig.calculateSortValue = rowData => rowData.fileItem.isDirectory ? -1 : rowData.fileItem.size;\r\n                    break;\r\n                case \"dateModified\":\r\n                    defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\")\r\n            }\r\n            extend(true, result, defaultConfig)\r\n        }\r\n        extendAttributes(result, columnOptions, [\"alignment\", \"caption\", \"dataField\", \"dataType\", \"hidingPriority\", \"sortIndex\", \"sortOrder\", \"visible\", \"visibleIndex\", \"width\"]);\r\n        if (columnOptions.cssClass) {\r\n            resultCssClass = \"\".concat(resultCssClass, \" \").concat(columnOptions.cssClass)\r\n        }\r\n        if (resultCssClass) {\r\n            result.cssClass = resultCssClass\r\n        }\r\n        return result\r\n    }\r\n    _updateColumnDataField(column) {\r\n        var dataItemSuffix = this._isDefaultColumn(column.dataField) ? \"\" : \"dataItem.\";\r\n        column.dataField = \"fileItem.\" + dataItemSuffix + column.dataField;\r\n        return column\r\n    }\r\n    _isDefaultColumn(columnDataField) {\r\n        return !!DEFAULT_COLUMN_CONFIGS[columnDataField]\r\n    }\r\n    _onFileItemActionButtonClick(_ref) {\r\n        var {\r\n            component: component,\r\n            element: element,\r\n            event: event\r\n        } = _ref;\r\n        event.stopPropagation();\r\n        var $row = component.$element().closest(this._getItemSelector());\r\n        var fileItemInfo = $row.data(\"item\");\r\n        this._selectItem(fileItemInfo);\r\n        var target = {\r\n            itemData: fileItemInfo,\r\n            itemElement: $row,\r\n            isActionButton: true\r\n        };\r\n        var items = this._getFileItemsForContextMenu(fileItemInfo);\r\n        this._showContextMenu(items, element, event, target);\r\n        this._activeFileActionsButton = component;\r\n        this._activeFileActionsButton.setActive(true)\r\n    }\r\n    _onContextMenuHidden() {\r\n        if (this._activeFileActionsButton) {\r\n            this._activeFileActionsButton.setActive(false)\r\n        }\r\n    }\r\n    _getItemThumbnailCssClass() {\r\n        return FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS\r\n    }\r\n    _getItemSelector() {\r\n        return \".\".concat(DATA_GRID_DATA_ROW_CLASS)\r\n    }\r\n    _onItemDblClick(e) {\r\n        var $row = $(e.currentTarget);\r\n        var fileItemInfo = $row.data(\"item\");\r\n        this._raiseSelectedItemOpened(fileItemInfo)\r\n    }\r\n    _isAllItemsSelected() {\r\n        var selectableItemsCount = this._hasParentDirectoryItem ? this._itemCount - 1 : this._itemCount;\r\n        var selectedRowKeys = this._filesView.option(\"selectedRowKeys\");\r\n        if (!selectedRowKeys.length) {\r\n            return false\r\n        }\r\n        return selectedRowKeys.length >= selectableItemsCount ? true : void 0\r\n    }\r\n    _onEditorPreparing(_ref2) {\r\n        var {\r\n            component: component,\r\n            command: command,\r\n            row: row,\r\n            parentType: parentType,\r\n            editorOptions: editorOptions\r\n        } = _ref2;\r\n        if (!this._filesView) {\r\n            this._filesView = component\r\n        }\r\n        if (\"select\" === command && row) {\r\n            if (this._isParentDirectoryItem(row.data)) {\r\n                editorOptions.disabled = true\r\n            }\r\n        } else if (\"headerRow\" === parentType) {\r\n            editorOptions.onInitialized = _ref3 => {\r\n                var {\r\n                    component: component\r\n                } = _ref3;\r\n                this._selectAllCheckBox = component\r\n            };\r\n            editorOptions.value = this._isAllItemsSelected();\r\n            editorOptions.onValueChanged = args => this._onSelectAllCheckBoxValueChanged(args)\r\n        }\r\n    }\r\n    _onSelectAllCheckBoxValueChanged(_ref4) {\r\n        var {\r\n            event: event,\r\n            previousValue: previousValue,\r\n            value: value\r\n        } = _ref4;\r\n        if (!event) {\r\n            if (previousValue && !this._selectAllCheckBoxUpdating && this._selectAllCheckBox) {\r\n                this._selectAllCheckBox.option(\"value\", previousValue)\r\n            }\r\n            return\r\n        }\r\n        if (this._isAllItemsSelected() === value) {\r\n            return\r\n        }\r\n        if (value) {\r\n            this._filesView.selectAll()\r\n        } else {\r\n            this._filesView.deselectAll()\r\n        }\r\n        event.preventDefault()\r\n    }\r\n    _onRowPrepared(_ref5) {\r\n        var {\r\n            rowType: rowType,\r\n            rowElement: rowElement,\r\n            data: data\r\n        } = _ref5;\r\n        if (\"data\" === rowType) {\r\n            var $row = $(rowElement);\r\n            $row.data(\"item\", data);\r\n            if (this._isParentDirectoryItem(data)) {\r\n                $row.addClass(FILE_MANAGER_PARENT_DIRECTORY_ITEM)\r\n            }\r\n        }\r\n    }\r\n    _onContextMenuPreparing(e) {\r\n        if (!this._isDesktop()) {\r\n            return\r\n        }\r\n        var fileItems = null;\r\n        var item = {};\r\n        if (e.row && \"data\" === e.row.rowType) {\r\n            item = e.row.data;\r\n            this._selectItem(item);\r\n            fileItems = this._getFileItemsForContextMenu(item)\r\n        }\r\n        var eventArgs = extend({}, {\r\n            targetElement: \"content\" === e.target && isDefined(e.row) ? this._filesView.getRowElement(e.rowIndex) : void 0,\r\n            itemData: item,\r\n            options: this._contextMenu.option(),\r\n            event: e.event,\r\n            isActionButton: false,\r\n            cancel: false\r\n        });\r\n        this._raiseContextMenuShowing(eventArgs);\r\n        e.items = eventArgs.cancel ? [] : this._contextMenu.createContextMenuItems(fileItems, null, item)\r\n    }\r\n    _onFilesViewSelectionChanged(_ref6) {\r\n        var {\r\n            component: component,\r\n            selectedRowsData: selectedRowsData,\r\n            selectedRowKeys: selectedRowKeys,\r\n            currentSelectedRowKeys: currentSelectedRowKeys,\r\n            currentDeselectedRowKeys: currentDeselectedRowKeys\r\n        } = _ref6;\r\n        this._filesView = this._filesView || component;\r\n        if (this._selectAllCheckBox) {\r\n            this._selectAllCheckBoxUpdating = true;\r\n            this._selectAllCheckBox.option(\"value\", this._isAllItemsSelected());\r\n            this._selectAllCheckBoxUpdating = false\r\n        }\r\n        var selectedItems = selectedRowsData.map(itemInfo => itemInfo.fileItem);\r\n        this._tryRaiseSelectionChanged({\r\n            selectedItemInfos: selectedRowsData,\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedRowKeys,\r\n            currentSelectedItemKeys: currentSelectedRowKeys,\r\n            currentDeselectedItemKeys: currentDeselectedRowKeys\r\n        })\r\n    }\r\n    _onFilesViewFocusedRowChanged(e) {\r\n        var _e$row2;\r\n        if (!this._isMultipleSelectionMode()) {\r\n            var _e$row;\r\n            this._selectItemSingleSelection(null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.data)\r\n        }\r\n        var fileSystemItem = (null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.data.fileItem) || null;\r\n        this._onFocusedItemChanged({\r\n            item: fileSystemItem,\r\n            itemKey: null === fileSystemItem || void 0 === fileSystemItem ? void 0 : fileSystemItem.key,\r\n            itemElement: e.rowElement\r\n        })\r\n    }\r\n    _onFilesViewOptionChanged(_ref7) {\r\n        var {\r\n            fullName: fullName\r\n        } = _ref7;\r\n        if (fullName.indexOf(\"sortOrder\") > -1) {\r\n            this._filesView.columnOption(\"isParentFolder\", {\r\n                sortOrder: \"asc\",\r\n                sortIndex: 0\r\n            })\r\n        }\r\n    }\r\n    _resetFocus() {\r\n        this._setFocusedItemKey(void 0)\r\n    }\r\n    _createThumbnailColumnCell(container, cellInfo) {\r\n        this._getItemThumbnailContainer(cellInfo.data).appendTo(container)\r\n    }\r\n    _createNameColumnCell(container, cellInfo) {\r\n        var $button = $(\"<div>\");\r\n        var $name = $(\"<span>\").text(cellInfo.data.fileItem.name).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_CLASS);\r\n        var $wrapper = $(\"<div>\").append($name, $button).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS);\r\n        $(container).append($wrapper);\r\n        this._createComponent($button, FileManagerFileActionsButton, {\r\n            onClick: e => this._onFileItemActionButtonClick(e)\r\n        })\r\n    }\r\n    _calculateSizeColumnCellValue(rowData) {\r\n        return rowData.fileItem.isDirectory ? \"\" : getDisplayFileSize(rowData.fileItem.size)\r\n    }\r\n    _selectItem(fileItemInfo) {\r\n        var selectItemFunc = this._isMultipleSelectionMode() ? this._selectItemMultipleSelection : this._selectItemSingleSelection;\r\n        selectItemFunc.call(this, fileItemInfo)\r\n    }\r\n    _deselectItem(item) {\r\n        this._filesView.deselectRows([item.fileItem.key])\r\n    }\r\n    _selectItemSingleSelection(fileItemInfo) {\r\n        if (!this._focusedItem || !fileItemInfo || this._focusedItem.fileItem.key !== fileItemInfo.fileItem.key) {\r\n            var oldFocusedItem = this._focusedItem;\r\n            this._focusedItem = fileItemInfo;\r\n            var deselectedKeys = [];\r\n            if (oldFocusedItem) {\r\n                deselectedKeys.push(oldFocusedItem.fileItem.key)\r\n            }\r\n            var selectedItems = [];\r\n            var selectedKeys = [];\r\n            if (fileItemInfo && !this._isParentDirectoryItem(fileItemInfo)) {\r\n                selectedItems.push(fileItemInfo.fileItem);\r\n                selectedKeys.push(fileItemInfo.fileItem.key)\r\n            }\r\n            this._raiseSelectionChanged({\r\n                selectedItems: selectedItems,\r\n                selectedItemKeys: selectedKeys,\r\n                currentSelectedItemKeys: [...selectedKeys],\r\n                currentDeselectedItemKeys: deselectedKeys\r\n            })\r\n        }\r\n    }\r\n    _selectItemMultipleSelection(_ref8) {\r\n        var {\r\n            fileItem: fileItem\r\n        } = _ref8;\r\n        if (!this._filesView.isRowSelected(fileItem.key)) {\r\n            var selectionController = this._filesView.getController(\"selection\");\r\n            var preserve = selectionController.isSelectionWithCheckboxes();\r\n            this._filesView.selectRows([fileItem.key], preserve)\r\n        }\r\n    }\r\n    _setSelectedItemKeys(itemKeys) {\r\n        this._filesView.option(\"selectedRowKeys\", itemKeys)\r\n    }\r\n    _setFocusedItemKey(itemKey) {\r\n        var _this$_filesView;\r\n        null === (_this$_filesView = this._filesView) || void 0 === _this$_filesView ? void 0 : _this$_filesView.option(\"focusedRowKey\", itemKey)\r\n    }\r\n    clearSelection() {\r\n        if (this._isMultipleSelectionMode()) {\r\n            this._filesView.clearSelection()\r\n        } else {\r\n            this._filesView.option(\"focusedRowIndex\", -1)\r\n        }\r\n    }\r\n    refresh(options) {\r\n        var actualOptions = {\r\n            dataSource: this._createDataSource()\r\n        };\r\n        if (options && Object.prototype.hasOwnProperty.call(options, \"focusedItemKey\")) {\r\n            if (isDefined(options.focusedItemKey)) {\r\n                actualOptions.focusedRowKey = options.focusedItemKey\r\n            } else {\r\n                actualOptions.focusedRowIndex = -1\r\n            }\r\n        }\r\n        this._filesView.option(actualOptions);\r\n        this._refreshDeferred = new Deferred;\r\n        return this._refreshDeferred.promise()\r\n    }\r\n    getSelectedItems() {\r\n        if (this._isMultipleSelectionMode()) {\r\n            return this._filesView.getSelectedRowsData()\r\n        }\r\n        return this._focusedItem && !this._isParentDirectoryItem(this._focusedItem) ? [this._focusedItem] : []\r\n    }\r\n}\r\nexport default FileManagerDetailsItemList;\r\n"]},"metadata":{},"sourceType":"module"}