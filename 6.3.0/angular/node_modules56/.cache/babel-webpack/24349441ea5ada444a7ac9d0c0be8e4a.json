{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../core/component_registrator\";\nimport { noop, deferRender } from \"../../core/utils/common\";\nimport { isFunction, isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Widget from \"../widget/ui.widget\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport { isMaterial } from \"../themes\";\nvar callModuleItemsMethod = treeListCore.callModuleItemsMethod;\nvar DATAGRID_ROW_SELECTOR = \".dx-row\";\nvar TREELIST_CLASS = \"dx-treelist\";\nimport \"./ui.tree_list.column_headers\";\nimport \"./ui.tree_list.columns_controller\";\nimport \"./ui.tree_list.data_controller\";\nimport \"./ui.tree_list.sorting\";\nimport \"./ui.tree_list.rows\";\nimport \"./ui.tree_list.context_menu\";\nimport \"./ui.tree_list.error_handling\";\nimport \"./ui.tree_list.grid_view\";\nimport \"./ui.tree_list.header_panel\";\ntreeListCore.registerModulesOrder([\"stateStoring\", \"columns\", \"selection\", \"editorFactory\", \"columnChooser\", \"editingRowBased\", \"editingFormBased\", \"editingCellBased\", \"editing\", \"grouping\", \"masterDetail\", \"validating\", \"adaptivity\", \"data\", \"virtualScrolling\", \"columnHeaders\", \"filterRow\", \"headerPanel\", \"headerFilter\", \"sorting\", \"search\", \"rows\", \"pager\", \"columnsResizingReordering\", \"contextMenu\", \"keyboardNavigation\", \"errorHandling\", \"summary\", \"columnFixing\", \"export\", \"gridView\"]);\nvar TreeList = Widget.inherit({\n  _activeStateUnit: DATAGRID_ROW_SELECTOR,\n  _getDefaultOptions: function _getDefaultOptions() {\n    var result = this.callBase();\n    each(treeListCore.modules, function () {\n      if (isFunction(this.defaultOptions)) {\n        extend(true, result, this.defaultOptions());\n      }\n    });\n    return result;\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return isMaterial();\n      },\n      options: {\n        showRowLines: true,\n        showColumnLines: false,\n        headerFilter: {\n          height: 315\n        },\n        editing: {\n          useIcons: true\n        }\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n    treeListCore.processModules(this, treeListCore);\n    callModuleItemsMethod(this, \"init\");\n  },\n  _clean: noop,\n  _optionChanged: function _optionChanged(args) {\n    callModuleItemsMethod(this, \"optionChanged\", [args]);\n\n    if (!args.handled) {\n      this.callBase(args);\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.updateDimensions(true);\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this.updateDimensions();\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase.apply(this, arguments);\n    this.$element().addClass(TREELIST_CLASS);\n    this.getView(\"gridView\").render(this.$element());\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.getView(\"gridView\").update();\n  },\n  _renderContent: function _renderContent() {\n    var that = this;\n    deferRender(function () {\n      that._renderContentImpl();\n    });\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n    callModuleItemsMethod(this, \"dispose\");\n  },\n  isReady: function isReady() {\n    return this.getController(\"data\").isReady();\n  },\n  beginUpdate: function beginUpdate() {\n    this.callBase();\n    callModuleItemsMethod(this, \"beginUpdate\");\n  },\n  endUpdate: function endUpdate() {\n    callModuleItemsMethod(this, \"endUpdate\");\n    this.callBase();\n  },\n  getController: function getController(name) {\n    return this._controllers[name];\n  },\n  getView: function getView(name) {\n    return this._views[name];\n  },\n  focus: function focus(element) {\n    this.callBase();\n\n    if (isDefined(element)) {\n      this.getController(\"keyboardNavigation\").focus(element);\n    }\n  }\n});\nTreeList.registerModule = treeListCore.registerModule.bind(treeListCore);\nregisterComponent(\"dxTreeList\", TreeList);\nexport default TreeList;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/tree_list/ui.tree_list.base.js"],"names":["registerComponent","noop","deferRender","isFunction","isDefined","each","extend","Widget","treeListCore","isMaterial","callModuleItemsMethod","DATAGRID_ROW_SELECTOR","TREELIST_CLASS","registerModulesOrder","TreeList","inherit","_activeStateUnit","_getDefaultOptions","result","callBase","modules","defaultOptions","_defaultOptionsRules","concat","device","options","showRowLines","showColumnLines","headerFilter","height","editing","useIcons","_init","processModules","_clean","_optionChanged","args","handled","_dimensionChanged","updateDimensions","_visibilityChanged","visible","_initMarkup","apply","arguments","$element","addClass","getView","render","_renderContentImpl","update","_renderContent","that","_dispose","isReady","getController","beginUpdate","endUpdate","name","_controllers","_views","focus","element","registerModule","bind"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport {\r\n    noop,\r\n    deferRender\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isFunction,\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport treeListCore from \"./ui.tree_list.core\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nvar callModuleItemsMethod = treeListCore.callModuleItemsMethod;\r\nvar DATAGRID_ROW_SELECTOR = \".dx-row\";\r\nvar TREELIST_CLASS = \"dx-treelist\";\r\nimport \"./ui.tree_list.column_headers\";\r\nimport \"./ui.tree_list.columns_controller\";\r\nimport \"./ui.tree_list.data_controller\";\r\nimport \"./ui.tree_list.sorting\";\r\nimport \"./ui.tree_list.rows\";\r\nimport \"./ui.tree_list.context_menu\";\r\nimport \"./ui.tree_list.error_handling\";\r\nimport \"./ui.tree_list.grid_view\";\r\nimport \"./ui.tree_list.header_panel\";\r\ntreeListCore.registerModulesOrder([\"stateStoring\", \"columns\", \"selection\", \"editorFactory\", \"columnChooser\", \"editingRowBased\", \"editingFormBased\", \"editingCellBased\", \"editing\", \"grouping\", \"masterDetail\", \"validating\", \"adaptivity\", \"data\", \"virtualScrolling\", \"columnHeaders\", \"filterRow\", \"headerPanel\", \"headerFilter\", \"sorting\", \"search\", \"rows\", \"pager\", \"columnsResizingReordering\", \"contextMenu\", \"keyboardNavigation\", \"errorHandling\", \"summary\", \"columnFixing\", \"export\", \"gridView\"]);\r\nvar TreeList = Widget.inherit({\r\n    _activeStateUnit: DATAGRID_ROW_SELECTOR,\r\n    _getDefaultOptions: function() {\r\n        var result = this.callBase();\r\n        each(treeListCore.modules, (function() {\r\n            if (isFunction(this.defaultOptions)) {\r\n                extend(true, result, this.defaultOptions())\r\n            }\r\n        }));\r\n        return result\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return isMaterial()\r\n            },\r\n            options: {\r\n                showRowLines: true,\r\n                showColumnLines: false,\r\n                headerFilter: {\r\n                    height: 315\r\n                },\r\n                editing: {\r\n                    useIcons: true\r\n                }\r\n            }\r\n        }])\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        treeListCore.processModules(this, treeListCore);\r\n        callModuleItemsMethod(this, \"init\")\r\n    },\r\n    _clean: noop,\r\n    _optionChanged: function(args) {\r\n        callModuleItemsMethod(this, \"optionChanged\", [args]);\r\n        if (!args.handled) {\r\n            this.callBase(args)\r\n        }\r\n    },\r\n    _dimensionChanged: function() {\r\n        this.updateDimensions(true)\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible) {\r\n            this.updateDimensions()\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this.$element().addClass(TREELIST_CLASS);\r\n        this.getView(\"gridView\").render(this.$element())\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.getView(\"gridView\").update()\r\n    },\r\n    _renderContent: function() {\r\n        var that = this;\r\n        deferRender((function() {\r\n            that._renderContentImpl()\r\n        }))\r\n    },\r\n    _dispose: function() {\r\n        this.callBase();\r\n        callModuleItemsMethod(this, \"dispose\")\r\n    },\r\n    isReady: function() {\r\n        return this.getController(\"data\").isReady()\r\n    },\r\n    beginUpdate: function() {\r\n        this.callBase();\r\n        callModuleItemsMethod(this, \"beginUpdate\")\r\n    },\r\n    endUpdate: function() {\r\n        callModuleItemsMethod(this, \"endUpdate\");\r\n        this.callBase()\r\n    },\r\n    getController: function(name) {\r\n        return this._controllers[name]\r\n    },\r\n    getView: function(name) {\r\n        return this._views[name]\r\n    },\r\n    focus: function(element) {\r\n        this.callBase();\r\n        if (isDefined(element)) {\r\n            this.getController(\"keyboardNavigation\").focus(element)\r\n        }\r\n    }\r\n});\r\nTreeList.registerModule = treeListCore.registerModule.bind(treeListCore);\r\nregisterComponent(\"dxTreeList\", TreeList);\r\nexport default TreeList;\r\n"]},"metadata":{},"sourceType":"module"}