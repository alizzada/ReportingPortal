{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/timeZoneCalculator.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nexport var PathTimeZoneConversion = {\n  fromSourceToAppointment: \"toAppointment\",\n  fromAppointmentToSource: \"fromAppointment\",\n  fromSourceToGrid: \"toGrid\",\n  fromGridToSource: \"fromGrid\"\n};\nexport var TimeZoneCalculator = /*#__PURE__*/function () {\n  function TimeZoneCalculator(options) {\n    _classCallCheck(this, TimeZoneCalculator);\n\n    this.options = options;\n  }\n\n  _createClass(TimeZoneCalculator, [{\n    key: \"createDate\",\n    value: function createDate(sourceDate, info) {\n      var date = new Date(sourceDate);\n\n      switch (info.path) {\n        case PathTimeZoneConversion.fromSourceToAppointment:\n          return this._getConvertedDate(date, info.appointmentTimeZone, true);\n\n        case PathTimeZoneConversion.fromAppointmentToSource:\n          return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n        case PathTimeZoneConversion.fromSourceToGrid:\n          return this._getConvertedDate(date, info.appointmentTimeZone, false);\n\n        case PathTimeZoneConversion.fromGridToSource:\n          return this._getConvertedDate(date, info.appointmentTimeZone, false, true);\n      }\n\n      throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }, {\n    key: \"getOffsets\",\n    value: function getOffsets(date, appointmentTimezone) {\n      var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\n\n      var commonOffset = this._getCommonOffset(date);\n\n      var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\n\n      return {\n        client: clientOffset,\n        common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n        appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n      };\n    }\n  }, {\n    key: \"_getClientOffset\",\n    value: function _getClientOffset(date) {\n      return this.options.getClientOffset(date);\n    }\n  }, {\n    key: \"_getCommonOffset\",\n    value: function _getCommonOffset(date) {\n      return this.options.getCommonOffset(date);\n    }\n  }, {\n    key: \"_getAppointmentOffset\",\n    value: function _getAppointmentOffset(date, appointmentTimezone) {\n      return this.options.getAppointmentOffset(date, appointmentTimezone);\n    }\n  }, {\n    key: \"_getConvertedDate\",\n    value: function _getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n      var newDate = new Date(date.getTime());\n      var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n      if (useAppointmentTimeZone && !!appointmentTimezone) {\n        return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n      }\n\n      return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n    }\n  }, {\n    key: \"_getConvertedDateByOffsets\",\n    value: function _getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n      var direction = isBack ? -1 : 1;\n      var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\n      return new Date(utcDate + direction * targetOffset * toMs(\"hour\"));\n    }\n  }]);\n\n  return TimeZoneCalculator;\n}();","map":null,"metadata":{},"sourceType":"module"}