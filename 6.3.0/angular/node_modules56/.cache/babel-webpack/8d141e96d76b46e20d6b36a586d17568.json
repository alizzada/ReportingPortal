{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport { merge } from \"../../core/utils/array\";\nimport dataGridCore from \"./ui.data_grid.core\";\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\nimport { export as clientExport, excel } from \"../../exporter\";\nimport messageLocalization from \"../../localization/message\";\nimport Button from \"../button\";\nimport List from \"../list\";\nimport ContextMenu from \"../context_menu\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\nvar DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\nvar DATAGRID_EXPORT_ICON = \"export-to\";\nvar DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\nvar DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\nvar DATAGRID_EXPORT_EXCEL_BUTTON_ICON = \"export-excel-button\";\nvar TOOLBAR_ITEM_AUTO_HIDE_CLASS = \"dx-toolbar-item-auto-hide\";\nvar TOOLBAR_HIDDEN_BUTTON_CLASS = \"dx-toolbar-hidden-button\";\nvar BUTTON_CLASS = \"dx-button\";\nexport var DataProvider = Class.inherit({\n  _getGroupValue: function _getGroupValue(item) {\n    var key = item.key,\n        data = item.data,\n        rowType = item.rowType,\n        groupIndex = item.groupIndex,\n        summaryCells = item.summaryCells;\n    var groupColumn = this._options.groupColumns[groupIndex];\n    var value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\n    var result = groupColumn.caption + \": \" + dataGridCore.formatValue(value, groupColumn);\n\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);\n    }\n\n    return result;\n  },\n  _correctCellIndex: function _correctCellIndex(cellIndex) {\n    return cellIndex;\n  },\n  _initOptions: function _initOptions() {\n    var exportController = this._exportController;\n\n    var groupColumns = exportController._columnsController.getGroupColumns();\n\n    var excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      customizeExportData: exportController.option(\"customizeExportData\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\n    };\n  },\n  hasCustomizeExcelCell: function hasCustomizeExcelCell() {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function customizeExcelCell(e, cellSourceData) {\n    if (this._options.customizeExcelCell) {\n      e.gridCell = cellSourceData;\n\n      if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\n        e.component = this._exportController.component;\n      }\n\n      this._options.customizeExcelCell(e);\n    }\n  },\n  ctor: function ctor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  },\n  getHeaderStyles: function getHeaderStyles() {\n    return [{\n      bold: true,\n      alignment: \"center\",\n      wrapText: true\n    }, {\n      bold: true,\n      alignment: \"left\",\n      wrapText: true\n    }, {\n      bold: true,\n      alignment: \"right\",\n      wrapText: true\n    }];\n  },\n  getGroupRowStyle: function getGroupRowStyle() {\n    return {\n      bold: true,\n      wrapText: false,\n      alignment: getDefaultAlignment(this._options.rtlEnabled)\n    };\n  },\n  getColumnStyles: function getColumnStyles() {\n    var wrapTextEnabled = this._options.wrapTextEnabled;\n    var columnStyles = [];\n    this.getColumns().forEach(function (column) {\n      columnStyles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        wrapText: wrapTextEnabled,\n        dataType: column.dataType\n      });\n    });\n    return columnStyles;\n  },\n  getStyles: function getStyles() {\n    return [].concat(_toConsumableArray(this.getHeaderStyles()), _toConsumableArray(this.getColumnStyles()), [this.getGroupRowStyle()]);\n  },\n  _getTotalCellStyleId: function _getTotalCellStyleId(cellIndex) {\n    var _this$getColumns$cell;\n\n    var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\n    return this.getHeaderStyles().map(function (style) {\n      return style.alignment;\n    }).indexOf(alignment);\n  },\n  getStyleId: function getStyleId(rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n      return this._getTotalCellStyleId(cellIndex);\n    } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n      return this.getHeaderStyles().length + this.getColumns().length;\n    } else {\n      return cellIndex + this.getHeaderStyles().length;\n    }\n  },\n  getColumns: function getColumns(getColumnsByAllRows) {\n    var columns = this._options.columns;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  },\n  getColumnsWidths: function getColumnsWidths() {\n    var columns = this.getColumns();\n    return isDefined(columns) ? columns.map(function (c) {\n      return c.width;\n    }) : void 0;\n  },\n  getRowsCount: function getRowsCount() {\n    return this._options.items.length + this.getHeaderRowCount();\n  },\n  getHeaderRowCount: function getHeaderRowCount() {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n\n    return 0;\n  },\n  isGroupRow: function isGroupRow(rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  },\n  getGroupLevel: function getGroupLevel(rowIndex) {\n    var item = this._options.items[rowIndex - this.getHeaderRowCount()];\n\n    var groupIndex = item && item.groupIndex;\n\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n\n    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  },\n  getCellType: function getCellType(rowIndex, cellIndex) {\n    var columns = this.getColumns();\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n    }\n\n    if (cellIndex < columns.length) {\n      var item = this._options.items.length && this._options.items[rowIndex];\n      var column = columns[cellIndex];\n\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\n          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n\n      return \"string\";\n    }\n  },\n  ready: function ready() {\n    var that = this;\n\n    that._initOptions();\n\n    var options = that._options;\n    return when(options.items).done(function (items) {\n      options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\n      options.items = items;\n    }).fail(function () {\n      options.items = [];\n    });\n  },\n  _convertFromGridGroupSummaryItems: function _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\n    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      return gridGroupSummaryItems.map(function (item) {\n        return {\n          value: item.value,\n          name: item.name\n        };\n      });\n    }\n  },\n  getCellData: function getCellData(rowIndex, cellIndex, isExcelJS) {\n    var value;\n    var column;\n    var result = {\n      cellSourceData: {},\n      value: value\n    };\n    var columns = this.getColumns();\n\n    var correctedCellIndex = this._correctCellIndex(cellIndex);\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      var columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      var item = this._options.items.length && this._options.items[rowIndex];\n\n      if (item) {\n        var itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n\n              if (isDefined(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              var summaryItems = item.values[correctedCellIndex];\n\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n\n                for (var i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          default:\n            column = columns[cellIndex];\n\n            if (column) {\n              var _value = itemValues[correctedCellIndex];\n              var displayValue = dataGridCore.getDisplayValue(column, _value, item.data, item.rowType);\n\n              if (!isFinite(displayValue) || isDefined(column.customizeText)) {\n                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\n                  result.value = displayValue;\n                } else {\n                  result.value = dataGridCore.formatValue(displayValue, column);\n                }\n              } else {\n                result.value = displayValue;\n              }\n\n              result.cellSourceData.value = _value;\n            }\n\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n\n    return result;\n  },\n  isHeadersVisible: function isHeadersVisible() {\n    return this._options.isHeadersVisible;\n  },\n  isTotalCell: function isTotalCell(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex];\n\n    var correctCellIndex = this._correctCellIndex(cellIndex);\n\n    var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  },\n  getCellMerging: function getCellMerging(rowIndex, cellIndex) {\n    var columns = this._options.columns;\n    var column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function getFrozenArea() {\n    return {\n      x: 0,\n      y: this.getHeaderRowCount()\n    };\n  }\n});\nexport var ExportController = dataGridCore.ViewController.inherit({}).include(exportMixin).inherit({\n  _getEmptyCell: function _getEmptyCell() {\n    return {\n      caption: \"\",\n      colspan: 1,\n      rowspan: 1\n    };\n  },\n  _updateColumnWidth: function _updateColumnWidth(column, width) {\n    column.width = width;\n  },\n  _getColumns: function _getColumns(initialColumnWidthsByColumnIndex) {\n    var result = [];\n    var i;\n    var columns;\n    var columnsController = this._columnsController;\n    var rowCount = columnsController.getRowCount();\n\n    for (i = 0; i <= rowCount; i++) {\n      var currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      var columnWidthsByColumnIndex = void 0;\n\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n\n            for (var _i = 0; _i < columns.length; _i++) {\n              columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i];\n            }\n          }\n        }\n      }\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = extend({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n\n        if (this._needColumnExporting(column)) {\n          var currentColspan = this._calculateExportColspan(column);\n\n          if (isDefined(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n\n          currentHeaderRow.push(column);\n        }\n      }\n\n      result.push(currentHeaderRow);\n    }\n\n    columns = result[rowCount];\n    result = this._prepareItems(result.slice(0, -1));\n    result.push(columns);\n    return result;\n  },\n  _calculateExportColspan: function _calculateExportColspan(column) {\n    var _this = this;\n\n    if (!column.isBand) {\n      return;\n    }\n\n    var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n\n    if (!isDefined(childColumns)) {\n      return;\n    }\n\n    return childColumns.reduce(function (result, childColumn) {\n      if (_this._needColumnExporting(childColumn)) {\n        return result + (_this._calculateExportColspan(childColumn) || 1);\n      } else {\n        return result;\n      }\n    }, 0);\n  },\n  _needColumnExporting: function _needColumnExporting(column) {\n    return !column.command && (column.allowExporting || void 0 === column.allowExporting);\n  },\n  _getFooterSummaryItems: function _getFooterSummaryItems(summaryCells, isTotal) {\n    var result = [];\n    var estimatedItemsCount = 1;\n    var i = 0;\n\n    do {\n      var values = [];\n\n      for (var j = 0; j < summaryCells.length; j++) {\n        var summaryCell = summaryCells[j];\n        var itemsLength = summaryCell.length;\n\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n\n        values.push(summaryCell[i]);\n      }\n\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n\n    return result;\n  },\n  _hasSummaryGroupFooters: function _hasSummaryGroupFooters() {\n    var groupItems = this.option(\"summary.groupItems\");\n\n    if (isDefined(groupItems)) {\n      for (var i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n  _getItemsWithSummaryGroupFooters: function _getItemsWithSummaryGroupFooters(sourceItems) {\n    var result = [];\n    var beforeGroupFooterItems = [];\n    var groupFooterItems = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n\n    return result.length ? result : beforeGroupFooterItems;\n  },\n  _updateGroupValuesWithSummaryByColumn: function _updateGroupValuesWithSummaryByColumn(sourceItems) {\n    var summaryValues = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n      var summaryCells = item.summaryCells;\n\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        var groupColumnCount = item.values.length;\n\n        for (var j = 1; j < summaryCells.length; j++) {\n          for (var k = 0; k < summaryCells[j].length; k++) {\n            var summaryItem = summaryCells[j][k];\n\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n\n        if (summaryValues.length > 0) {\n          merge(item.values, summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  },\n  _processUnExportedItems: function _processUnExportedItems(items) {\n    var columns = this._columnsController.getVisibleColumns(null, true);\n\n    var groupColumns = this._columnsController.getGroupColumns();\n\n    var values;\n    var summaryCells;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var isDetailExpandColumn = false;\n      values = [];\n      summaryCells = [];\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = columns[j];\n        isDetailExpandColumn = isDetailExpandColumn || \"detailExpand\" === column.type;\n\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              var index = j - groupColumns.length + item.groupIndex;\n              summaryCells.push(item.summaryCells[isDetailExpandColumn ? index - 1 : index]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n\n      if (values.length) {\n        item.values = values;\n      }\n\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  },\n  _getAllItems: function _getAllItems(data) {\n    var that = this;\n    var d = new Deferred();\n    var dataController = this.getController(\"data\");\n    var footerItems = dataController.footerItems();\n    var totalItem = footerItems.length && footerItems[0];\n    var summaryTotalItems = that.option(\"summary.totalItems\");\n    var summaryCells;\n    when(data).done(function (data) {\n      dataController.loadAll(data).done(function (sourceItems, totalAggregates) {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n\n        summaryCells = totalItem && totalItem.summaryCells;\n\n        if (isDefined(totalAggregates) && summaryTotalItems) {\n          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n\n        var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n\n        that._processUnExportedItems(sourceItems);\n\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  },\n  _getSummaryCells: function _getSummaryCells(summaryTotalItems, totalAggregates) {\n    var dataController = this.getController(\"data\");\n    var columnsController = dataController._columnsController;\n    return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), function (summaryItem, column) {\n      return dataController._isDataColumn(column) ? column.index : -1;\n    });\n  },\n  _getSelectedItems: function _getSelectedItems() {\n    var selectionController = this.getController(\"selection\");\n    var selectedRowData = selectionController.getSelectedRowsData();\n    return this._getAllItems(selectedRowData);\n  },\n  _getColumnWidths: function _getColumnWidths(headersView, rowsView) {\n    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();\n  },\n  init: function init() {\n    this._columnsController = this.getController(\"columns\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onExported\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFileSaving\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  callbackNames: function callbackNames() {\n    return [\"selectionOnlyChanged\"];\n  },\n  getExportFormat: function getExportFormat() {\n    return [\"EXCEL\"];\n  },\n  getDataProvider: function getDataProvider(selectedRowsOnly) {\n    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n    var initialColumnWidthsByColumnIndex;\n\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n\n      var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n\n      for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n\n    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  },\n  exportToExcel: function exportToExcel(selectionOnly) {\n    this._selectionOnly = selectionOnly;\n    clientExport(this.component.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      proxyUrl: this.option(\"export.proxyUrl\"),\n      format: \"EXCEL\",\n      autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\n      exportingAction: this.getAction(\"onExporting\"),\n      exportedAction: this.getAction(\"onExported\"),\n      fileSavingAction: this.getAction(\"onFileSaving\")\n    }, excel.getData);\n  },\n  publicMethods: function publicMethods() {\n    return [\"getDataProvider\", \"getExportFormat\", \"exportToExcel\"];\n  },\n  selectionOnly: function selectionOnly(value) {\n    if (isDefined(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n});\ndataGridCore.registerModule(\"export\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      export: {\n        enabled: false,\n        fileName: \"DataGrid\",\n        excelFilterEnabled: false,\n        excelWrapTextEnabled: void 0,\n        proxyUrl: void 0,\n        allowExportSelectedData: false,\n        ignoreExcelErrors: true,\n        texts: {\n          exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\n          exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\n          exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\n        }\n      }\n    };\n  },\n  controllers: {\n    export: ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        callbackNames: function callbackNames() {\n          var callbackList = this.callBase();\n          return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"];\n        },\n        _updateEditButtons: function _updateEditButtons() {\n          this.callBase();\n          this.editingChanged.fire(this.hasChanges());\n        }\n      }\n    },\n    views: {\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          return this._appendExportItems(items);\n        },\n        _appendExportItems: function _appendExportItems(items) {\n          var that = this;\n          var exportOptions = that.option(\"export\");\n\n          if (exportOptions.enabled) {\n            var exportItems = [];\n\n            if (exportOptions.allowExportSelectedData) {\n              exportItems.push({\n                template: function template(data, index, container) {\n                  var $container = $(container);\n\n                  that._renderButton(data, $container);\n\n                  that._renderExportMenu($container);\n                },\n                menuItemTemplate: function menuItemTemplate(data, index, container) {\n                  that._renderList(data, $(container));\n                },\n                name: \"exportButton\",\n                allowExportSelected: true,\n                location: \"after\",\n                locateInMenu: \"auto\",\n                sortIndex: 30\n              });\n            } else {\n              exportItems.push({\n                template: function template(data, index, container) {\n                  that._renderButton(data, $(container));\n                },\n                menuItemTemplate: function menuItemTemplate(data, index, container) {\n                  that._renderButton(data, $(container), true);\n                },\n                name: \"exportButton\",\n                location: \"after\",\n                locateInMenu: \"auto\",\n                sortIndex: 30\n              });\n            }\n\n            items = items.concat(exportItems);\n\n            that._correctItemsPosition(items);\n          }\n\n          return items;\n        },\n        _renderButton: function _renderButton(data, $container, withText) {\n          var buttonOptions = this._getButtonOptions(data.allowExportSelected);\n\n          var $buttonContainer = this._getButtonContainer().addClass(DATAGRID_EXPORT_BUTTON_CLASS).appendTo($container);\n\n          if (withText) {\n            var wrapperNode = $(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS);\n            $container.wrapInner(wrapperNode).parent().addClass(\"dx-toolbar-menu-action dx-toolbar-menu-button \" + TOOLBAR_HIDDEN_BUTTON_CLASS);\n            buttonOptions.text = buttonOptions.hint;\n          }\n\n          this._createComponent($buttonContainer, Button, buttonOptions);\n        },\n        _renderList: function _renderList(data, $container) {\n          var that = this;\n          var texts = that.option(\"export.texts\");\n          var items = [{\n            template: function template(data, index, container) {\n              that._renderFakeButton(data, $(container), DATAGRID_EXPORT_EXCEL_ICON);\n            },\n            text: texts.exportAll\n          }, {\n            template: function template(data, index, container) {\n              that._renderFakeButton(data, $(container), DATAGRID_EXPORT_SELECTED_ICON);\n            },\n            text: texts.exportSelectedRows,\n            exportSelected: true\n          }];\n\n          that._createComponent($container, List, {\n            items: items,\n            onItemClick: function onItemClick(e) {\n              that._exportController.exportToExcel(e.itemData.exportSelected);\n            },\n            scrollingEnabled: false\n          });\n        },\n        _renderFakeButton: function _renderFakeButton(data, $container, iconName) {\n          var $icon = $(\"<div>\").addClass(\"dx-icon dx-icon-\" + iconName);\n          var $text = $(\"<span>\").addClass(\"dx-button-text\").text(data.text);\n          var $content = $(\"<div>\").addClass(\"dx-button-content\").append($icon).append($text);\n          var $button = $(\"<div>\").addClass(BUTTON_CLASS + \" dx-button-has-text dx-button-has-icon dx-datagrid-toolbar-button\").append($content);\n          var $toolbarItem = $(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS).append($button);\n          $container.append($toolbarItem).parent().addClass(\"dx-toolbar-menu-custom \" + TOOLBAR_HIDDEN_BUTTON_CLASS);\n        },\n        _correctItemsPosition: function _correctItemsPosition(items) {\n          items.sort(function (itemA, itemB) {\n            return itemA.sortIndex - itemB.sortIndex;\n          });\n        },\n        _renderExportMenu: function _renderExportMenu($buttonContainer) {\n          var that = this;\n          var $button = $buttonContainer.find(\".\" + BUTTON_CLASS);\n          var texts = that.option(\"export.texts\");\n          var menuItems = [{\n            text: texts.exportAll,\n            icon: DATAGRID_EXPORT_EXCEL_ICON\n          }, {\n            text: texts.exportSelectedRows,\n            exportSelected: true,\n            icon: DATAGRID_EXPORT_SELECTED_ICON\n          }];\n          var $menuContainer = $(\"<div>\").appendTo($buttonContainer);\n          that._contextMenu = that._createComponent($menuContainer, ContextMenu, {\n            showEvent: \"dxclick\",\n            items: menuItems,\n            cssClass: DATAGRID_EXPORT_MENU_CLASS,\n            onItemClick: function onItemClick(e) {\n              that._exportController.exportToExcel(e.itemData.exportSelected);\n            },\n            target: $button,\n            position: {\n              at: \"left bottom\",\n              my: \"left top\",\n              offset: \"0 3\",\n              collision: \"fit\",\n              boundary: that._$parent,\n              boundaryOffset: \"1 1\"\n            }\n          });\n        },\n        _isExportButtonVisible: function _isExportButtonVisible() {\n          return this.option(\"export.enabled\");\n        },\n        _getButtonOptions: function _getButtonOptions(allowExportSelected) {\n          var that = this;\n          var texts = that.option(\"export.texts\");\n          var options;\n\n          if (allowExportSelected) {\n            options = {\n              hint: texts.exportTo,\n              icon: DATAGRID_EXPORT_ICON\n            };\n          } else {\n            options = {\n              hint: texts.exportAll,\n              icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,\n              onClick: function onClick() {\n                that._exportController.exportToExcel();\n              }\n            };\n          }\n\n          return options;\n        },\n        optionChanged: function optionChanged(args) {\n          this.callBase(args);\n\n          if (\"export\" === args.name) {\n            args.handled = true;\n\n            this._invalidate();\n          }\n        },\n        init: function init() {\n          var that = this;\n          this.callBase();\n          this._exportController = this.getController(\"export\");\n          this._editingController = this.getController(\"editing\");\n\n          this._editingController.editingChanged.add(function (hasChanges) {\n            that.setToolbarItemDisabled(\"exportButton\", hasChanges);\n          });\n        },\n        isVisible: function isVisible() {\n          return this.callBase() || this._isExportButtonVisible();\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js"],"names":["$","Class","isDefined","extend","getDefaultAlignment","merge","dataGridCore","exportMixin","export","clientExport","excel","messageLocalization","Button","List","ContextMenu","when","Deferred","DATAGRID_EXPORT_MENU_CLASS","DATAGRID_EXPORT_BUTTON_CLASS","DATAGRID_EXPORT_ICON","DATAGRID_EXPORT_EXCEL_ICON","DATAGRID_EXPORT_SELECTED_ICON","DATAGRID_EXPORT_EXCEL_BUTTON_ICON","TOOLBAR_ITEM_AUTO_HIDE_CLASS","TOOLBAR_HIDDEN_BUTTON_CLASS","BUTTON_CLASS","DataProvider","inherit","_getGroupValue","item","key","data","rowType","groupIndex","summaryCells","groupColumn","_options","groupColumns","value","getDisplayValue","deserializeValue","result","caption","formatValue","length","getGroupRowSummaryText","summaryTexts","_correctCellIndex","cellIndex","_initOptions","exportController","_exportController","_columnsController","getGroupColumns","excelWrapTextEnabled","option","columns","_getColumns","_initialColumnWidthsByColumnIndex","items","_selectedRowsOnly","_selectionOnly","_getSelectedItems","_getAllItems","getVisibleIndex","bind","isHeadersVisible","customizeExportData","rtlEnabled","wrapTextEnabled","customizeExcelCell","hasCustomizeExcelCell","e","cellSourceData","gridCell","component","ctor","initialColumnWidthsByColumnIndex","selectedRowsOnly","getHeaderStyles","bold","alignment","wrapText","getGroupRowStyle","getColumnStyles","columnStyles","getColumns","forEach","column","push","format","dataType","getStyles","_getTotalCellStyleId","_this$getColumns$cell","map","style","indexOf","getStyleId","rowIndex","getHeaderRowCount","isTotalCell","isGroupRow","getColumnsByAllRows","getColumnsWidths","c","width","getRowsCount","getGroupLevel","getCellType","isFinite","values","customizeText","lookup","ready","that","options","done","fail","_convertFromGridGroupSummaryItems","gridGroupSummaryItems","name","getCellData","isExcelJS","correctedCellIndex","columnsRow","gridColumn","itemValues","totalSummaryItemName","getSummaryText","groupSummaryItems","summaryItems","Array","isArray","i","_value","displayValue","getCustomizeTextByDataType","correctCellIndex","isSummaryAlignByColumn","alignByColumn","getCellMerging","colspan","exportColspan","rowspan","getFrozenArea","x","y","ExportController","ViewController","include","_getEmptyCell","_updateColumnWidth","columnsController","rowCount","getRowCount","currentHeaderRow","getVisibleColumns","columnWidthsByColumnIndex","_updateLockCount","columnWidths","_getColumnWidths","_headersView","_rowsView","_i","index","j","_needColumnExporting","currentColspan","_calculateExportColspan","_prepareItems","slice","isBand","childColumns","getChildrenByBandColumn","reduce","childColumn","command","allowExporting","_getFooterSummaryItems","isTotal","estimatedItemsCount","summaryCell","itemsLength","_hasSummaryGroupFooters","groupItems","showInGroupFooter","_getItemsWithSummaryGroupFooters","sourceItems","beforeGroupFooterItems","groupFooterItems","concat","_updateGroupValuesWithSummaryByColumn","summaryValues","groupColumnCount","k","summaryItem","_processUnExportedItems","isDetailExpandColumn","type","d","dataController","getController","footerItems","totalItem","summaryTotalItems","loadAll","totalAggregates","_getSummaryCells","resolve","reject","_calculateSummaryCells","_isDataColumn","selectionController","selectedRowData","getSelectedRowsData","headersView","rowsView","isVisible","getColumnWidths","init","getView","createAction","excludeValidators","callbackNames","getExportFormat","getDataProvider","columnsLastRowVisibleColumns","exportToExcel","selectionOnly","fileName","proxyUrl","autoFilterEnabled","ignoreErrors","exportingAction","getAction","exportedAction","fileSavingAction","getData","publicMethods","_isSelectedRows","selectionOnlyChanged","fire","registerModule","defaultOptions","enabled","excelFilterEnabled","allowExportSelectedData","ignoreExcelErrors","texts","exportTo","exportAll","exportSelectedRows","controllers","extenders","editing","callbackList","callBase","_updateEditButtons","editingChanged","hasChanges","views","headerPanel","_getToolbarItems","_appendExportItems","exportOptions","exportItems","template","container","$container","_renderButton","_renderExportMenu","menuItemTemplate","_renderList","allowExportSelected","location","locateInMenu","sortIndex","_correctItemsPosition","withText","buttonOptions","_getButtonOptions","$buttonContainer","_getButtonContainer","addClass","appendTo","wrapperNode","wrapInner","parent","text","hint","_createComponent","_renderFakeButton","exportSelected","onItemClick","itemData","scrollingEnabled","iconName","$icon","$text","$content","append","$button","$toolbarItem","sort","itemA","itemB","find","menuItems","icon","$menuContainer","_contextMenu","showEvent","cssClass","target","position","at","my","offset","collision","boundary","_$parent","boundaryOffset","_isExportButtonVisible","onClick","optionChanged","args","handled","_invalidate","_editingController","add","setToolbarItemDisabled"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport Class from \"../../core/class\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    merge\r\n} from \"../../core/utils/array\";\r\nimport dataGridCore from \"./ui.data_grid.core\";\r\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\r\nimport {\r\n    export as clientExport,\r\n    excel\r\n} from \"../../exporter\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Button from \"../button\";\r\nimport List from \"../list\";\r\nimport ContextMenu from \"../context_menu\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\r\nvar DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\r\nvar DATAGRID_EXPORT_ICON = \"export-to\";\r\nvar DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\r\nvar DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\r\nvar DATAGRID_EXPORT_EXCEL_BUTTON_ICON = \"export-excel-button\";\r\nvar TOOLBAR_ITEM_AUTO_HIDE_CLASS = \"dx-toolbar-item-auto-hide\";\r\nvar TOOLBAR_HIDDEN_BUTTON_CLASS = \"dx-toolbar-hidden-button\";\r\nvar BUTTON_CLASS = \"dx-button\";\r\nexport var DataProvider = Class.inherit({\r\n    _getGroupValue: function(item) {\r\n        var {\r\n            key: key,\r\n            data: data,\r\n            rowType: rowType,\r\n            groupIndex: groupIndex,\r\n            summaryCells: summaryCells\r\n        } = item;\r\n        var groupColumn = this._options.groupColumns[groupIndex];\r\n        var value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\r\n        var result = groupColumn.caption + \": \" + dataGridCore.formatValue(value, groupColumn);\r\n        if (summaryCells && summaryCells[0] && summaryCells[0].length) {\r\n            result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts)\r\n        }\r\n        return result\r\n    },\r\n    _correctCellIndex: function(cellIndex) {\r\n        return cellIndex\r\n    },\r\n    _initOptions: function() {\r\n        var exportController = this._exportController;\r\n        var groupColumns = exportController._columnsController.getGroupColumns();\r\n        var excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\r\n        this._options = {\r\n            columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\r\n            groupColumns: groupColumns,\r\n            items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\r\n            getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\r\n            isHeadersVisible: exportController.option(\"showColumnHeaders\"),\r\n            summaryTexts: exportController.option(\"summary.texts\"),\r\n            customizeExportData: exportController.option(\"customizeExportData\"),\r\n            rtlEnabled: exportController.option(\"rtlEnabled\"),\r\n            wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\r\n            customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\r\n        }\r\n    },\r\n    hasCustomizeExcelCell: function() {\r\n        return isDefined(this._options.customizeExcelCell)\r\n    },\r\n    customizeExcelCell: function(e, cellSourceData) {\r\n        if (this._options.customizeExcelCell) {\r\n            e.gridCell = cellSourceData;\r\n            if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\r\n                e.component = this._exportController.component\r\n            }\r\n            this._options.customizeExcelCell(e)\r\n        }\r\n    },\r\n    ctor: function(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\r\n        this._exportController = exportController;\r\n        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\r\n        this._selectedRowsOnly = selectedRowsOnly\r\n    },\r\n    getHeaderStyles: () => [{\r\n        bold: true,\r\n        alignment: \"center\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"left\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"right\",\r\n        wrapText: true\r\n    }],\r\n    getGroupRowStyle() {\r\n        return {\r\n            bold: true,\r\n            wrapText: false,\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled)\r\n        }\r\n    },\r\n    getColumnStyles() {\r\n        var wrapTextEnabled = this._options.wrapTextEnabled;\r\n        var columnStyles = [];\r\n        this.getColumns().forEach(column => {\r\n            columnStyles.push({\r\n                alignment: column.alignment || \"left\",\r\n                format: column.format,\r\n                wrapText: wrapTextEnabled,\r\n                dataType: column.dataType\r\n            })\r\n        });\r\n        return columnStyles\r\n    },\r\n    getStyles: function() {\r\n        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()]\r\n    },\r\n    _getTotalCellStyleId: function(cellIndex) {\r\n        var _this$getColumns$cell;\r\n        var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\r\n        return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment)\r\n    },\r\n    getStyleId: function(rowIndex, cellIndex) {\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return 0\r\n        } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\r\n            return this._getTotalCellStyleId(cellIndex)\r\n        } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\r\n            return this.getHeaderStyles().length + this.getColumns().length\r\n        } else {\r\n            return cellIndex + this.getHeaderStyles().length\r\n        }\r\n    },\r\n    getColumns: function(getColumnsByAllRows) {\r\n        var {\r\n            columns: columns\r\n        } = this._options;\r\n        return getColumnsByAllRows ? columns : columns[columns.length - 1]\r\n    },\r\n    getColumnsWidths: function() {\r\n        var columns = this.getColumns();\r\n        return isDefined(columns) ? columns.map(c => c.width) : void 0\r\n    },\r\n    getRowsCount: function() {\r\n        return this._options.items.length + this.getHeaderRowCount()\r\n    },\r\n    getHeaderRowCount: function() {\r\n        if (this.isHeadersVisible()) {\r\n            return this._options.columns.length - 1\r\n        }\r\n        return 0\r\n    },\r\n    isGroupRow: function(rowIndex) {\r\n        return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType\r\n    },\r\n    getGroupLevel: function(rowIndex) {\r\n        var item = this._options.items[rowIndex - this.getHeaderRowCount()];\r\n        var groupIndex = item && item.groupIndex;\r\n        if (item && \"totalFooter\" === item.rowType) {\r\n            return 0\r\n        }\r\n        return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length\r\n    },\r\n    getCellType: function(rowIndex, cellIndex) {\r\n        var columns = this.getColumns();\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return \"string\"\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount()\r\n        }\r\n        if (cellIndex < columns.length) {\r\n            var item = this._options.items.length && this._options.items[rowIndex];\r\n            var column = columns[cellIndex];\r\n            if (item && \"data\" === item.rowType) {\r\n                if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\r\n                    return isDefined(column.lookup) ? column.lookup.dataType : column.dataType\r\n                }\r\n            }\r\n            return \"string\"\r\n        }\r\n    },\r\n    ready: function() {\r\n        var that = this;\r\n        that._initOptions();\r\n        var options = that._options;\r\n        return when(options.items).done((function(items) {\r\n            options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\r\n            options.items = items\r\n        })).fail((function() {\r\n            options.items = []\r\n        }))\r\n    },\r\n    _convertFromGridGroupSummaryItems: function(gridGroupSummaryItems) {\r\n        if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\r\n            return gridGroupSummaryItems.map((function(item) {\r\n                return {\r\n                    value: item.value,\r\n                    name: item.name\r\n                }\r\n            }))\r\n        }\r\n    },\r\n    getCellData: function(rowIndex, cellIndex, isExcelJS) {\r\n        var value;\r\n        var column;\r\n        var result = {\r\n            cellSourceData: {},\r\n            value: value\r\n        };\r\n        var columns = this.getColumns();\r\n        var correctedCellIndex = this._correctCellIndex(cellIndex);\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            var columnsRow = this.getColumns(true)[rowIndex];\r\n            column = columnsRow[cellIndex];\r\n            result.cellSourceData.rowType = \"header\";\r\n            result.cellSourceData.column = column && column.gridColumn;\r\n            result.value = column && column.caption\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount();\r\n            var item = this._options.items.length && this._options.items[rowIndex];\r\n            if (item) {\r\n                var itemValues = item.values;\r\n                result.cellSourceData.rowType = item.rowType;\r\n                result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\r\n                switch (item.rowType) {\r\n                    case \"groupFooter\":\r\n                    case \"totalFooter\":\r\n                        if (correctedCellIndex < itemValues.length) {\r\n                            value = itemValues[correctedCellIndex];\r\n                            if (isDefined(value)) {\r\n                                result.cellSourceData.value = value.value;\r\n                                result.cellSourceData.totalSummaryItemName = value.name;\r\n                                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts)\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"group\":\r\n                        result.cellSourceData.groupIndex = item.groupIndex;\r\n                        if (cellIndex < 1) {\r\n                            result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\r\n                            result.cellSourceData.value = item.key[item.groupIndex];\r\n                            result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\r\n                            result.value = this._getGroupValue(item)\r\n                        } else {\r\n                            var summaryItems = item.values[correctedCellIndex];\r\n                            if (Array.isArray(summaryItems)) {\r\n                                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\r\n                                value = \"\";\r\n                                for (var i = 0; i < summaryItems.length; i++) {\r\n                                    value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts)\r\n                                }\r\n                                result.value = value\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        column = columns[cellIndex];\r\n                        if (column) {\r\n                            var _value = itemValues[correctedCellIndex];\r\n                            var displayValue = dataGridCore.getDisplayValue(column, _value, item.data, item.rowType);\r\n                            if (!isFinite(displayValue) || isDefined(column.customizeText)) {\r\n                                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\r\n                                    result.value = displayValue\r\n                                } else {\r\n                                    result.value = dataGridCore.formatValue(displayValue, column)\r\n                                }\r\n                            } else {\r\n                                result.value = displayValue\r\n                            }\r\n                            result.cellSourceData.value = _value\r\n                        }\r\n                        result.cellSourceData.data = item.data\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    isHeadersVisible: function() {\r\n        return this._options.isHeadersVisible\r\n    },\r\n    isTotalCell: function(rowIndex, cellIndex) {\r\n        var items = this._options.items;\r\n        var item = items[rowIndex];\r\n        var correctCellIndex = this._correctCellIndex(cellIndex);\r\n        var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\r\n        return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn\r\n    },\r\n    getCellMerging: function(rowIndex, cellIndex) {\r\n        var columns = this._options.columns;\r\n        var column = columns[rowIndex] && columns[rowIndex][cellIndex];\r\n        return column ? {\r\n            colspan: (column.exportColspan || 1) - 1,\r\n            rowspan: (column.rowspan || 1) - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    },\r\n    getFrozenArea: function() {\r\n        return {\r\n            x: 0,\r\n            y: this.getHeaderRowCount()\r\n        }\r\n    }\r\n});\r\nexport var ExportController = dataGridCore.ViewController.inherit({}).include(exportMixin).inherit({\r\n    _getEmptyCell: function() {\r\n        return {\r\n            caption: \"\",\r\n            colspan: 1,\r\n            rowspan: 1\r\n        }\r\n    },\r\n    _updateColumnWidth: function(column, width) {\r\n        column.width = width\r\n    },\r\n    _getColumns: function(initialColumnWidthsByColumnIndex) {\r\n        var result = [];\r\n        var i;\r\n        var columns;\r\n        var columnsController = this._columnsController;\r\n        var rowCount = columnsController.getRowCount();\r\n        for (i = 0; i <= rowCount; i++) {\r\n            var currentHeaderRow = [];\r\n            columns = columnsController.getVisibleColumns(i, true);\r\n            var columnWidthsByColumnIndex = void 0;\r\n            if (i === rowCount) {\r\n                if (this._updateLockCount) {\r\n                    columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex\r\n                } else {\r\n                    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n                    if (columnWidths && columnWidths.length) {\r\n                        columnWidthsByColumnIndex = {};\r\n                        for (var _i = 0; _i < columns.length; _i++) {\r\n                            columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (var j = 0; j < columns.length; j++) {\r\n                var column = extend({}, columns[j], {\r\n                    dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\r\n                    gridColumn: columns[j]\r\n                });\r\n                if (this._needColumnExporting(column)) {\r\n                    var currentColspan = this._calculateExportColspan(column);\r\n                    if (isDefined(currentColspan)) {\r\n                        column.exportColspan = currentColspan\r\n                    }\r\n                    if (columnWidthsByColumnIndex) {\r\n                        this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index])\r\n                    }\r\n                    currentHeaderRow.push(column)\r\n                }\r\n            }\r\n            result.push(currentHeaderRow)\r\n        }\r\n        columns = result[rowCount];\r\n        result = this._prepareItems(result.slice(0, -1));\r\n        result.push(columns);\r\n        return result\r\n    },\r\n    _calculateExportColspan: function(column) {\r\n        if (!column.isBand) {\r\n            return\r\n        }\r\n        var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\r\n        if (!isDefined(childColumns)) {\r\n            return\r\n        }\r\n        return childColumns.reduce((result, childColumn) => {\r\n            if (this._needColumnExporting(childColumn)) {\r\n                return result + (this._calculateExportColspan(childColumn) || 1)\r\n            } else {\r\n                return result\r\n            }\r\n        }, 0)\r\n    },\r\n    _needColumnExporting: function(column) {\r\n        return !column.command && (column.allowExporting || void 0 === column.allowExporting)\r\n    },\r\n    _getFooterSummaryItems: function(summaryCells, isTotal) {\r\n        var result = [];\r\n        var estimatedItemsCount = 1;\r\n        var i = 0;\r\n        do {\r\n            var values = [];\r\n            for (var j = 0; j < summaryCells.length; j++) {\r\n                var summaryCell = summaryCells[j];\r\n                var itemsLength = summaryCell.length;\r\n                if (estimatedItemsCount < itemsLength) {\r\n                    estimatedItemsCount = itemsLength\r\n                }\r\n                values.push(summaryCell[i])\r\n            }\r\n            result.push({\r\n                values: values,\r\n                rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\r\n            })\r\n        } while (i++ < estimatedItemsCount - 1);\r\n        return result\r\n    },\r\n    _hasSummaryGroupFooters: function() {\r\n        var groupItems = this.option(\"summary.groupItems\");\r\n        if (isDefined(groupItems)) {\r\n            for (var i = 0; i < groupItems.length; i++) {\r\n                if (groupItems[i].showInGroupFooter) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _getItemsWithSummaryGroupFooters: function(sourceItems) {\r\n        var result = [];\r\n        var beforeGroupFooterItems = [];\r\n        var groupFooterItems = [];\r\n        for (var i = 0; i < sourceItems.length; i++) {\r\n            var item = sourceItems[i];\r\n            if (\"groupFooter\" === item.rowType) {\r\n                groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\r\n                result = result.concat(beforeGroupFooterItems, groupFooterItems);\r\n                beforeGroupFooterItems = []\r\n            } else {\r\n                beforeGroupFooterItems.push(item)\r\n            }\r\n        }\r\n        return result.length ? result : beforeGroupFooterItems\r\n    },\r\n    _updateGroupValuesWithSummaryByColumn: function(sourceItems) {\r\n        var summaryValues = [];\r\n        for (var i = 0; i < sourceItems.length; i++) {\r\n            var item = sourceItems[i];\r\n            var summaryCells = item.summaryCells;\r\n            if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\r\n                var groupColumnCount = item.values.length;\r\n                for (var j = 1; j < summaryCells.length; j++) {\r\n                    for (var k = 0; k < summaryCells[j].length; k++) {\r\n                        var summaryItem = summaryCells[j][k];\r\n                        if (summaryItem && summaryItem.alignByColumn) {\r\n                            if (!Array.isArray(summaryValues[j - groupColumnCount])) {\r\n                                summaryValues[j - groupColumnCount] = []\r\n                            }\r\n                            summaryValues[j - groupColumnCount].push(summaryItem)\r\n                        }\r\n                    }\r\n                }\r\n                if (summaryValues.length > 0) {\r\n                    merge(item.values, summaryValues);\r\n                    summaryValues = []\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _processUnExportedItems: function(items) {\r\n        var columns = this._columnsController.getVisibleColumns(null, true);\r\n        var groupColumns = this._columnsController.getGroupColumns();\r\n        var values;\r\n        var summaryCells;\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            var isDetailExpandColumn = false;\r\n            values = [];\r\n            summaryCells = [];\r\n            for (var j = 0; j < columns.length; j++) {\r\n                var column = columns[j];\r\n                isDetailExpandColumn = isDetailExpandColumn || \"detailExpand\" === column.type;\r\n                if (this._needColumnExporting(column)) {\r\n                    if (item.values) {\r\n                        if (\"group\" === item.rowType && !values.length) {\r\n                            values.push(item.key[item.groupIndex])\r\n                        } else {\r\n                            values.push(item.values[j])\r\n                        }\r\n                    }\r\n                    if (item.summaryCells) {\r\n                        if (\"group\" === item.rowType && !summaryCells.length) {\r\n                            var index = j - groupColumns.length + item.groupIndex;\r\n                            summaryCells.push(item.summaryCells[isDetailExpandColumn ? index - 1 : index])\r\n                        } else {\r\n                            summaryCells.push(item.summaryCells[j])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (values.length) {\r\n                item.values = values\r\n            }\r\n            if (summaryCells.length) {\r\n                item.summaryCells = summaryCells\r\n            }\r\n        }\r\n    },\r\n    _getAllItems: function(data) {\r\n        var that = this;\r\n        var d = new Deferred;\r\n        var dataController = this.getController(\"data\");\r\n        var footerItems = dataController.footerItems();\r\n        var totalItem = footerItems.length && footerItems[0];\r\n        var summaryTotalItems = that.option(\"summary.totalItems\");\r\n        var summaryCells;\r\n        when(data).done((function(data) {\r\n            dataController.loadAll(data).done((function(sourceItems, totalAggregates) {\r\n                that._updateGroupValuesWithSummaryByColumn(sourceItems);\r\n                if (that._hasSummaryGroupFooters()) {\r\n                    sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems)\r\n                }\r\n                summaryCells = totalItem && totalItem.summaryCells;\r\n                if (isDefined(totalAggregates) && summaryTotalItems) {\r\n                    summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates)\r\n                }\r\n                var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\r\n                if (summaryItems) {\r\n                    sourceItems = sourceItems.concat(summaryItems)\r\n                }\r\n                that._processUnExportedItems(sourceItems);\r\n                d.resolve(sourceItems)\r\n            })).fail(d.reject)\r\n        })).fail(d.reject);\r\n        return d\r\n    },\r\n    _getSummaryCells: function(summaryTotalItems, totalAggregates) {\r\n        var dataController = this.getController(\"data\");\r\n        var columnsController = dataController._columnsController;\r\n        return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (function(summaryItem, column) {\r\n            return dataController._isDataColumn(column) ? column.index : -1\r\n        }))\r\n    },\r\n    _getSelectedItems: function() {\r\n        var selectionController = this.getController(\"selection\");\r\n        var selectedRowData = selectionController.getSelectedRowsData();\r\n        return this._getAllItems(selectedRowData)\r\n    },\r\n    _getColumnWidths: function(headersView, rowsView) {\r\n        return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths()\r\n    },\r\n    init: function() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._headersView = this.getView(\"columnHeadersView\");\r\n        this.createAction(\"onExporting\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onExported\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFileSaving\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    },\r\n    callbackNames: function() {\r\n        return [\"selectionOnlyChanged\"]\r\n    },\r\n    getExportFormat: function() {\r\n        return [\"EXCEL\"]\r\n    },\r\n    getDataProvider: function(selectedRowsOnly) {\r\n        var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n        var initialColumnWidthsByColumnIndex;\r\n        if (columnWidths && columnWidths.length) {\r\n            initialColumnWidthsByColumnIndex = {};\r\n            var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\r\n            for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\r\n                initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i]\r\n            }\r\n        }\r\n        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly)\r\n    },\r\n    exportToExcel: function(selectionOnly) {\r\n        this._selectionOnly = selectionOnly;\r\n        clientExport(this.component.getDataProvider(), {\r\n            fileName: this.option(\"export.fileName\"),\r\n            proxyUrl: this.option(\"export.proxyUrl\"),\r\n            format: \"EXCEL\",\r\n            autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\r\n            exportingAction: this.getAction(\"onExporting\"),\r\n            exportedAction: this.getAction(\"onExported\"),\r\n            fileSavingAction: this.getAction(\"onFileSaving\")\r\n        }, excel.getData)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"getDataProvider\", \"getExportFormat\", \"exportToExcel\"]\r\n    },\r\n    selectionOnly: function(value) {\r\n        if (isDefined(value)) {\r\n            this._isSelectedRows = value;\r\n            this.selectionOnlyChanged.fire()\r\n        } else {\r\n            return this._isSelectedRows\r\n        }\r\n    }\r\n});\r\ndataGridCore.registerModule(\"export\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            export: {\r\n                enabled: false,\r\n                fileName: \"DataGrid\",\r\n                excelFilterEnabled: false,\r\n                excelWrapTextEnabled: void 0,\r\n                proxyUrl: void 0,\r\n                allowExportSelectedData: false,\r\n                ignoreExcelErrors: true,\r\n                texts: {\r\n                    exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\r\n                    exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\r\n                    exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        export: ExportController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                callbackNames: function() {\r\n                    var callbackList = this.callBase();\r\n                    return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"]\r\n                },\r\n                _updateEditButtons: function() {\r\n                    this.callBase();\r\n                    this.editingChanged.fire(this.hasChanges())\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    return this._appendExportItems(items)\r\n                },\r\n                _appendExportItems: function(items) {\r\n                    var that = this;\r\n                    var exportOptions = that.option(\"export\");\r\n                    if (exportOptions.enabled) {\r\n                        var exportItems = [];\r\n                        if (exportOptions.allowExportSelectedData) {\r\n                            exportItems.push({\r\n                                template: function(data, index, container) {\r\n                                    var $container = $(container);\r\n                                    that._renderButton(data, $container);\r\n                                    that._renderExportMenu($container)\r\n                                },\r\n                                menuItemTemplate: function(data, index, container) {\r\n                                    that._renderList(data, $(container))\r\n                                },\r\n                                name: \"exportButton\",\r\n                                allowExportSelected: true,\r\n                                location: \"after\",\r\n                                locateInMenu: \"auto\",\r\n                                sortIndex: 30\r\n                            })\r\n                        } else {\r\n                            exportItems.push({\r\n                                template: function(data, index, container) {\r\n                                    that._renderButton(data, $(container))\r\n                                },\r\n                                menuItemTemplate: function(data, index, container) {\r\n                                    that._renderButton(data, $(container), true)\r\n                                },\r\n                                name: \"exportButton\",\r\n                                location: \"after\",\r\n                                locateInMenu: \"auto\",\r\n                                sortIndex: 30\r\n                            })\r\n                        }\r\n                        items = items.concat(exportItems);\r\n                        that._correctItemsPosition(items)\r\n                    }\r\n                    return items\r\n                },\r\n                _renderButton: function(data, $container, withText) {\r\n                    var buttonOptions = this._getButtonOptions(data.allowExportSelected);\r\n                    var $buttonContainer = this._getButtonContainer().addClass(DATAGRID_EXPORT_BUTTON_CLASS).appendTo($container);\r\n                    if (withText) {\r\n                        var wrapperNode = $(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS);\r\n                        $container.wrapInner(wrapperNode).parent().addClass(\"dx-toolbar-menu-action dx-toolbar-menu-button \" + TOOLBAR_HIDDEN_BUTTON_CLASS);\r\n                        buttonOptions.text = buttonOptions.hint\r\n                    }\r\n                    this._createComponent($buttonContainer, Button, buttonOptions)\r\n                },\r\n                _renderList: function(data, $container) {\r\n                    var that = this;\r\n                    var texts = that.option(\"export.texts\");\r\n                    var items = [{\r\n                        template: function(data, index, container) {\r\n                            that._renderFakeButton(data, $(container), DATAGRID_EXPORT_EXCEL_ICON)\r\n                        },\r\n                        text: texts.exportAll\r\n                    }, {\r\n                        template: function(data, index, container) {\r\n                            that._renderFakeButton(data, $(container), DATAGRID_EXPORT_SELECTED_ICON)\r\n                        },\r\n                        text: texts.exportSelectedRows,\r\n                        exportSelected: true\r\n                    }];\r\n                    that._createComponent($container, List, {\r\n                        items: items,\r\n                        onItemClick: function(e) {\r\n                            that._exportController.exportToExcel(e.itemData.exportSelected)\r\n                        },\r\n                        scrollingEnabled: false\r\n                    })\r\n                },\r\n                _renderFakeButton: function(data, $container, iconName) {\r\n                    var $icon = $(\"<div>\").addClass(\"dx-icon dx-icon-\" + iconName);\r\n                    var $text = $(\"<span>\").addClass(\"dx-button-text\").text(data.text);\r\n                    var $content = $(\"<div>\").addClass(\"dx-button-content\").append($icon).append($text);\r\n                    var $button = $(\"<div>\").addClass(BUTTON_CLASS + \" dx-button-has-text dx-button-has-icon dx-datagrid-toolbar-button\").append($content);\r\n                    var $toolbarItem = $(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS).append($button);\r\n                    $container.append($toolbarItem).parent().addClass(\"dx-toolbar-menu-custom \" + TOOLBAR_HIDDEN_BUTTON_CLASS)\r\n                },\r\n                _correctItemsPosition: function(items) {\r\n                    items.sort((function(itemA, itemB) {\r\n                        return itemA.sortIndex - itemB.sortIndex\r\n                    }))\r\n                },\r\n                _renderExportMenu: function($buttonContainer) {\r\n                    var that = this;\r\n                    var $button = $buttonContainer.find(\".\" + BUTTON_CLASS);\r\n                    var texts = that.option(\"export.texts\");\r\n                    var menuItems = [{\r\n                        text: texts.exportAll,\r\n                        icon: DATAGRID_EXPORT_EXCEL_ICON\r\n                    }, {\r\n                        text: texts.exportSelectedRows,\r\n                        exportSelected: true,\r\n                        icon: DATAGRID_EXPORT_SELECTED_ICON\r\n                    }];\r\n                    var $menuContainer = $(\"<div>\").appendTo($buttonContainer);\r\n                    that._contextMenu = that._createComponent($menuContainer, ContextMenu, {\r\n                        showEvent: \"dxclick\",\r\n                        items: menuItems,\r\n                        cssClass: DATAGRID_EXPORT_MENU_CLASS,\r\n                        onItemClick: function(e) {\r\n                            that._exportController.exportToExcel(e.itemData.exportSelected)\r\n                        },\r\n                        target: $button,\r\n                        position: {\r\n                            at: \"left bottom\",\r\n                            my: \"left top\",\r\n                            offset: \"0 3\",\r\n                            collision: \"fit\",\r\n                            boundary: that._$parent,\r\n                            boundaryOffset: \"1 1\"\r\n                        }\r\n                    })\r\n                },\r\n                _isExportButtonVisible: function() {\r\n                    return this.option(\"export.enabled\")\r\n                },\r\n                _getButtonOptions: function(allowExportSelected) {\r\n                    var that = this;\r\n                    var texts = that.option(\"export.texts\");\r\n                    var options;\r\n                    if (allowExportSelected) {\r\n                        options = {\r\n                            hint: texts.exportTo,\r\n                            icon: DATAGRID_EXPORT_ICON\r\n                        }\r\n                    } else {\r\n                        options = {\r\n                            hint: texts.exportAll,\r\n                            icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,\r\n                            onClick: function() {\r\n                                that._exportController.exportToExcel()\r\n                            }\r\n                        }\r\n                    }\r\n                    return options\r\n                },\r\n                optionChanged: function(args) {\r\n                    this.callBase(args);\r\n                    if (\"export\" === args.name) {\r\n                        args.handled = true;\r\n                        this._invalidate()\r\n                    }\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    this.callBase();\r\n                    this._exportController = this.getController(\"export\");\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this._editingController.editingChanged.add((function(hasChanges) {\r\n                        that.setToolbarItemDisabled(\"exportButton\", hasChanges)\r\n                    }))\r\n                },\r\n                isVisible: function() {\r\n                    return this.callBase() || this._isExportButtonVisible()\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}