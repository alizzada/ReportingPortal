{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { noop } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getPublicElement } from \"../../../core/element\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport WorkSpace from \"./ui.scheduler.work_space\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateLocalization from \"../../../localization/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar tableCreator = tableCreatorModule.tableCreator;\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar AGENDA_GROUPED_ATTR = \"dx-group-column-count\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\n\nvar SchedulerAgenda = /*#__PURE__*/function (_WorkSpace) {\n  _inherits(SchedulerAgenda, _WorkSpace);\n\n  var _super = _createSuper(SchedulerAgenda);\n\n  function SchedulerAgenda() {\n    _classCallCheck(this, SchedulerAgenda);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerAgenda, [{\n    key: \"renderingStrategy\",\n    get: function get() {\n      return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance();\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_init\", this).call(this);\n\n      this._activeStateUnit = void 0;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerAgenda.prototype), \"_getDefaultOptions\", this).call(this), {\n        agendaDuration: 7,\n        rowHeight: 60,\n        noDataText: \"\"\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n      var value = args.value;\n\n      switch (name) {\n        case \"agendaDuration\":\n          break;\n\n        case \"noDataText\":\n        case \"rowHeight\":\n          this._recalculateAgenda(this._rows);\n\n          break;\n\n        case \"groups\":\n          if (!value || !value.length) {\n            if (this._$groupTable) {\n              this._$groupTable.remove();\n\n              this._$groupTable = null;\n\n              this._detachGroupCountAttr();\n            }\n          } else if (!this._$groupTable) {\n            this._initGroupTable();\n\n            this._dateTableScrollable.$content().prepend(this._$groupTable);\n          }\n\n          _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_renderFocusState\",\n    value: function _renderFocusState() {\n      return noop();\n    }\n  }, {\n    key: \"_renderFocusTarget\",\n    value: function _renderFocusTarget() {\n      return noop();\n    }\n  }, {\n    key: \"_cleanFocusState\",\n    value: function _cleanFocusState() {\n      return noop();\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"_isVerticalGroupedWorkSpace\",\n    value: function _isVerticalGroupedWorkSpace() {\n      return false;\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return AGENDA_CLASS;\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      this._firstViewDate = new Date(this.option(\"currentDate\"));\n\n      this._setStartDayHour(this._firstViewDate);\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return this.option(\"agendaDuration\");\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return 1;\n    }\n  }, {\n    key: \"_getTimePanelRowCount\",\n    value: function _getTimePanelRowCount() {\n      return this.option(\"agendaDuration\");\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex() {\n      return noop();\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return \"d ddd\";\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_initWorkSpaceUnits\",\n    value: function _initWorkSpaceUnits() {\n      this._initGroupTable();\n\n      this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\n      this._$dateTable = $(\"<table>\").addClass(this._getDateTableClass());\n    }\n  }, {\n    key: \"_initGroupTable\",\n    value: function _initGroupTable() {\n      var groups = this.option(\"groups\");\n\n      if (groups && groups.length) {\n        this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n      }\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._setFirstViewDate();\n\n      this._rows = [];\n    }\n  }, {\n    key: \"_recalculateAgenda\",\n    value: function _recalculateAgenda(rows) {\n      var cellTemplates = [];\n\n      this._cleanView();\n\n      if (this._rowsIsEmpty(rows)) {\n        this._renderNoData();\n\n        return;\n      }\n\n      this._rows = rows;\n\n      if (this._$groupTable) {\n        cellTemplates = this._renderGroupHeader();\n\n        this._setGroupHeaderCellsHeight();\n      }\n\n      this._renderTimePanel();\n\n      this._renderDateTable();\n\n      this.invoke(\"onAgendaReady\", rows);\n\n      this._applyCellTemplates(cellTemplates);\n\n      this._dateTableScrollable.update();\n    }\n  }, {\n    key: \"_renderNoData\",\n    value: function _renderNoData() {\n      this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n\n      this._dateTableScrollable.$content().append(this._$noDataContainer);\n    }\n  }, {\n    key: \"_setTableSizes\",\n    value: function _setTableSizes() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleHorizontalScrollClass\",\n    value: function _toggleHorizontalScrollClass() {\n      return noop();\n    }\n  }, {\n    key: \"_createCrossScrollingConfig\",\n    value: function _createCrossScrollingConfig() {\n      return noop();\n    }\n  }, {\n    key: \"_setGroupHeaderCellsHeight\",\n    value: function _setGroupHeaderCellsHeight() {\n      var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n        return !element.getAttribute(\"rowSpan\");\n      });\n\n      var rows = this._removeEmptyRows(this._rows);\n\n      if (!rows.length) {\n        return;\n      }\n\n      for (var i = 0; i < $cells.length; i++) {\n        var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n        $cellContent.outerHeight(this._getGroupRowHeight(rows[i]));\n      }\n    }\n  }, {\n    key: \"_rowsIsEmpty\",\n    value: function _rowsIsEmpty(rows) {\n      var result = true;\n\n      for (var i = 0; i < rows.length; i++) {\n        var groupRow = rows[i];\n\n        for (var j = 0; j < groupRow.length; j++) {\n          if (groupRow[j]) {\n            result = false;\n            break;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_detachGroupCountAttr\",\n    value: function _detachGroupCountAttr() {\n      this.$element().removeAttr(AGENDA_GROUPED_ATTR);\n    }\n  }, {\n    key: \"_attachGroupCountAttr\",\n    value: function _attachGroupCountAttr() {\n      this.$element().attr(AGENDA_GROUPED_ATTR, this.option(\"groups\").length);\n    }\n  }, {\n    key: \"_removeEmptyRows\",\n    value: function _removeEmptyRows(rows) {\n      var result = [];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].length && !(data = rows[i], !data.some(function (value) {\n          return value > 0;\n        }))) {\n          result.push(rows[i]);\n        }\n      }\n\n      var data;\n      return result;\n    }\n  }, {\n    key: \"_getGroupHeaderContainer\",\n    value: function _getGroupHeaderContainer() {\n      return this._$groupTable;\n    }\n  }, {\n    key: \"_makeGroupRows\",\n    value: function _makeGroupRows() {\n      var tree = this.invoke(\"createReducedResourcesTree\");\n      var cellTemplate = this.option(\"resourceCellTemplate\");\n\n      var getGroupHeaderContentClass = this._getGroupHeaderContentClass();\n\n      var cellTemplates = [];\n      var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n        cellTag: \"th\",\n        groupTableClass: GROUP_TABLE_CLASS,\n        groupRowClass: this._getGroupRowClass(),\n        groupCellClass: this._getGroupHeaderClass(),\n        groupCellCustomContent: function groupCellCustomContent(cell, cellText, index, data) {\n          var container = domAdapter.createElement(\"div\");\n          var contentWrapper = domAdapter.createElement(\"div\");\n          container.className = getGroupHeaderContentClass;\n          contentWrapper.appendChild(cellText);\n          container.appendChild(contentWrapper);\n          container.className = getGroupHeaderContentClass;\n\n          if (cellTemplate && cellTemplate.render) {\n            cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n              model: {\n                data: data.data,\n                id: data.value,\n                color: data.color,\n                text: cellText.textContent\n              },\n              container: getPublicElement($(container)),\n              index: index\n            }));\n          } else {\n            contentWrapper.appendChild(cellText);\n            container.appendChild(contentWrapper);\n          }\n\n          cell.appendChild(container);\n        },\n        cellTemplate: cellTemplate\n      });\n      return {\n        elements: $(table).find(\".\" + this._getGroupRowClass()),\n        cellTemplates: cellTemplates\n      };\n    }\n  }, {\n    key: \"_cleanView\",\n    value: function _cleanView() {\n      this._$dateTable.empty();\n\n      this._$timePanel.empty();\n\n      if (this._$groupTable) {\n        this._$groupTable.empty();\n      }\n\n      if (this._$noDataContainer) {\n        this._$noDataContainer.empty();\n\n        this._$noDataContainer.remove();\n\n        delete this._$noDataContainer;\n      }\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      this._createWorkSpaceStaticElements();\n    }\n  }, {\n    key: \"_createWorkSpaceStaticElements\",\n    value: function _createWorkSpaceStaticElements() {\n      if (this._$groupTable) {\n        this._dateTableScrollable.$content().prepend(this._$groupTable);\n      }\n\n      this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\n\n      this.$element().append(this._dateTableScrollable.$element());\n    }\n  }, {\n    key: \"_renderDateTable\",\n    value: function _renderDateTable() {\n      this._renderTableBody({\n        container: getPublicElement(this._$dateTable),\n        rowClass: this._getDateTableRowClass(),\n        cellClass: this._getDateTableCellClass()\n      });\n    }\n  }, {\n    key: \"_attachTablesEvents\",\n    value: function _attachTablesEvents() {\n      return noop();\n    }\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      return noop();\n    }\n  }, {\n    key: \"_cleanCellDataCache\",\n    value: function _cleanCellDataCache() {\n      return noop();\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      return false;\n    }\n  }, {\n    key: \"_prepareCellTemplateOptions\",\n    value: function _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n      var groupsOpt = this.option(\"groups\");\n      var groups = {};\n      var isGroupedView = !!groupsOpt.length;\n      var path = isGroupedView && this._getPathToLeaf(rowIndex) || [];\n      path.forEach(function (resourceValue, resourceIndex) {\n        var resourceName = groupsOpt[resourceIndex].name;\n        groups[resourceName] = resourceValue;\n      });\n      var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\n      return {\n        model: {\n          text: text,\n          date: date,\n          groups: groups,\n          groupIndex: groupIndex\n        },\n        container: getPublicElement($cell),\n        index: rowIndex\n      };\n    }\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options) {\n      var cellTemplates = [];\n      var cellTemplateOpt = options.cellTemplate;\n      this._$rows = [];\n      var i;\n\n      var fillTableBody = function (rowIndex, rowSize) {\n        if (rowSize) {\n          var date;\n          var cellDateNumber;\n          var cellDayName;\n          var $row = $(\"<tr>\");\n          var $td = $(\"<td>\").height(this._getRowHeight(rowSize));\n\n          if (options.getStartDate) {\n            date = options.getStartDate && options.getStartDate(rowIndex);\n            cellDateNumber = dateLocalization.format(date, \"d\");\n            cellDayName = dateLocalization.format(date, this._formatWeekday);\n          }\n\n          if (cellTemplateOpt && cellTemplateOpt.render) {\n            var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n\n            cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n          } else if (cellDateNumber && cellDayName) {\n            $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n          }\n\n          if (options.rowClass) {\n            $row.addClass(options.rowClass);\n          }\n\n          if (options.cellClass) {\n            $td.addClass(options.cellClass);\n          }\n\n          $row.append($td);\n\n          this._$rows.push($row);\n        }\n      }.bind(this);\n\n      for (i = 0; i < this._rows.length; i++) {\n        each(this._rows[i], fillTableBody);\n\n        this._setLastRowClass();\n      }\n\n      $(options.container).append($(\"<tbody>\").append(this._$rows));\n\n      this._applyCellTemplates(cellTemplates);\n    }\n  }, {\n    key: \"_setLastRowClass\",\n    value: function _setLastRowClass() {\n      if (this._rows.length > 1 && this._$rows.length) {\n        var $lastRow = this._$rows[this._$rows.length - 1];\n        $lastRow.addClass(LAST_ROW_CLASS);\n      }\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      this._renderTableBody({\n        container: getPublicElement(this._$timePanel),\n        rowCount: this._getTimePanelRowCount(),\n        cellCount: 1,\n        rowClass: TIME_PANEL_ROW_CLASS,\n        cellClass: TIME_PANEL_CELL_CLASS,\n        cellTemplate: this.option(\"dateCellTemplate\"),\n        getStartDate: this._getTimePanelStartDate.bind(this)\n      });\n    }\n  }, {\n    key: \"_getTimePanelStartDate\",\n    value: function _getTimePanelStartDate(rowIndex) {\n      var current = new Date(this.option(\"currentDate\"));\n      var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n      return cellDate;\n    }\n  }, {\n    key: \"_getRowHeight\",\n    value: function _getRowHeight(rowSize) {\n      var baseHeight = this.option(\"rowHeight\");\n      var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n      return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n    }\n  }, {\n    key: \"_getGroupRowHeight\",\n    value: function _getGroupRowHeight(groupRows) {\n      if (!groupRows) {\n        return;\n      }\n\n      var result = 0;\n\n      for (var i = 0; i < groupRows.length; i++) {\n        result += this._getRowHeight(groupRows[i]);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_calculateRows\",\n    value: function _calculateRows(appointments) {\n      return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"));\n    }\n  }, {\n    key: \"preRenderAppointments\",\n    value: function preRenderAppointments(options) {\n      _get(_getPrototypeOf(SchedulerAgenda.prototype), \"preRenderAppointments\", this).call(this, options);\n\n      this._calculateRows(options.appointments);\n    }\n  }, {\n    key: \"onDataSourceChanged\",\n    value: function onDataSourceChanged(appointments) {\n      _get(_getPrototypeOf(SchedulerAgenda.prototype), \"onDataSourceChanged\", this).call(this);\n\n      this._renderView();\n\n      var rows = this._calculateRows(appointments);\n\n      this._recalculateAgenda(rows);\n    }\n  }, {\n    key: \"getAgendaVerticalStepHeight\",\n    value: function getAgendaVerticalStepHeight() {\n      return this.option(\"rowHeight\");\n    }\n  }, {\n    key: \"getEndViewDate\",\n    value: function getEndViewDate() {\n      var currentDate = new Date(this.option(\"currentDate\"));\n      var agendaDuration = this.option(\"agendaDuration\");\n      currentDate.setHours(this.option(\"endDayHour\"));\n      var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n      return new Date(result);\n    }\n  }, {\n    key: \"getEndViewDateByEndDayHour\",\n    value: function getEndViewDateByEndDayHour() {\n      return this.getEndViewDate();\n    }\n  }, {\n    key: \"getCoordinatesByDate\",\n    value: function getCoordinatesByDate() {\n      return {\n        top: 0,\n        left: 0,\n        max: 0,\n        groupIndex: 0\n      };\n    }\n  }, {\n    key: \"getCellDataByCoordinates\",\n    value: function getCellDataByCoordinates() {\n      return {\n        startDate: null,\n        endDate: null\n      };\n    }\n  }, {\n    key: \"updateScrollPosition\",\n    value: function updateScrollPosition(date) {\n      var scheduler = this.option(\"observer\");\n      var newDate = scheduler.timeZoneCalculator.createDate(date, {\n        path: \"toGrid\"\n      });\n      var bounds = this.getVisibleBounds();\n      var startDateHour = newDate.getHours();\n      var startDateMinutes = newDate.getMinutes();\n\n      if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\n        this.scrollToTime(startDateHour, startDateMinutes, newDate);\n      }\n    }\n  }, {\n    key: \"needUpdateScrollPosition\",\n    value: function needUpdateScrollPosition(hours, minutes, bounds) {\n      var isUpdateNeeded = false;\n\n      if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\n        isUpdateNeeded = true;\n      }\n\n      if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\n        isUpdateNeeded = true;\n      }\n\n      if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\n        isUpdateNeeded = true;\n      }\n\n      return isUpdateNeeded;\n    }\n  }]);\n\n  return SchedulerAgenda;\n}(WorkSpace);\n\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nexport default SchedulerAgenda;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.agenda.js"],"names":["$","domAdapter","noop","each","getPublicElement","registerComponent","WorkSpace","extend","dateLocalization","tableCreatorModule","tableCreator","AGENDA_CLASS","AGENDA_DATE_CLASS","GROUP_TABLE_CLASS","AGENDA_GROUPED_ATTR","TIME_PANEL_ROW_CLASS","TIME_PANEL_CELL_CLASS","NODATA_CONTAINER_CLASS","LAST_ROW_CLASS","INNER_CELL_MARGIN","OUTER_CELL_MARGIN","SchedulerAgenda","invoke","getRenderingStrategyInstance","_activeStateUnit","agendaDuration","rowHeight","noDataText","args","name","value","_recalculateAgenda","_rows","length","_$groupTable","remove","_detachGroupCountAttr","_initGroupTable","_dateTableScrollable","$content","prepend","_firstViewDate","Date","option","_setStartDayHour","_$timePanel","addClass","_getTimePanelClass","_$dateTable","_getDateTableClass","groups","_setFirstViewDate","rows","cellTemplates","_cleanView","_rowsIsEmpty","_renderNoData","_renderGroupHeader","_setGroupHeaderCellsHeight","_renderTimePanel","_renderDateTable","_applyCellTemplates","update","_$noDataContainer","html","append","$cells","_getGroupHeaderCells","filter","_","element","getAttribute","_removeEmptyRows","i","$cellContent","eq","find","outerHeight","_getGroupRowHeight","result","groupRow","j","$element","removeAttr","attr","data","some","push","tree","cellTemplate","getGroupHeaderContentClass","_getGroupHeaderContentClass","table","makeGroupedTableFromJSON","VERTICAL","cellTag","groupTableClass","groupRowClass","_getGroupRowClass","groupCellClass","_getGroupHeaderClass","groupCellCustomContent","cell","cellText","index","container","createElement","contentWrapper","className","appendChild","render","bind","model","id","color","text","textContent","elements","empty","_createWorkSpaceStaticElements","_renderTableBody","rowClass","_getDateTableRowClass","cellClass","_getDateTableCellClass","date","rowIndex","$cell","groupsOpt","isGroupedView","path","_getPathToLeaf","forEach","resourceValue","resourceIndex","resourceName","groupIndex","_getGroupIndexByResourceId","options","cellTemplateOpt","_$rows","fillTableBody","rowSize","cellDateNumber","cellDayName","$row","$td","height","_getRowHeight","getStartDate","format","_formatWeekday","templateOptions","_prepareCellTemplateOptions","_setLastRowClass","$lastRow","rowCount","_getTimePanelRowCount","cellCount","_getTimePanelStartDate","current","cellDate","setDate","getDate","baseHeight","innerOffset","groupRows","appointments","renderingStrategy","calculateRows","_calculateRows","_renderView","currentDate","setHours","getEndViewDate","top","left","max","startDate","endDate","scheduler","newDate","timeZoneCalculator","createDate","bounds","getVisibleBounds","startDateHour","getHours","startDateMinutes","getMinutes","needUpdateScrollPosition","scrollToTime","hours","minutes","isUpdateNeeded","bottom"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport WorkSpace from \"./ui.scheduler.work_space\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\r\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar AGENDA_GROUPED_ATTR = \"dx-group-column-count\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\r\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\r\nvar INNER_CELL_MARGIN = 5;\r\nvar OUTER_CELL_MARGIN = 20;\r\nclass SchedulerAgenda extends WorkSpace {\r\n    get renderingStrategy() {\r\n        return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance()\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._activeStateUnit = void 0\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            agendaDuration: 7,\r\n            rowHeight: 60,\r\n            noDataText: \"\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        var value = args.value;\r\n        switch (name) {\r\n            case \"agendaDuration\":\r\n                break;\r\n            case \"noDataText\":\r\n            case \"rowHeight\":\r\n                this._recalculateAgenda(this._rows);\r\n                break;\r\n            case \"groups\":\r\n                if (!value || !value.length) {\r\n                    if (this._$groupTable) {\r\n                        this._$groupTable.remove();\r\n                        this._$groupTable = null;\r\n                        this._detachGroupCountAttr()\r\n                    }\r\n                } else if (!this._$groupTable) {\r\n                    this._initGroupTable();\r\n                    this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n                }\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _renderFocusState() {\r\n        return noop()\r\n    }\r\n    _renderFocusTarget() {\r\n        return noop()\r\n    }\r\n    _cleanFocusState() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return false\r\n    }\r\n    _getElementClass() {\r\n        return AGENDA_CLASS\r\n    }\r\n    _setFirstViewDate() {\r\n        this._firstViewDate = new Date(this.option(\"currentDate\"));\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getCellCount() {\r\n        return 1\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getDateByIndex() {\r\n        return noop()\r\n    }\r\n    _getFormat() {\r\n        return \"d ddd\"\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._initGroupTable();\r\n        this._$timePanel = $(\"<table>\").addClass(this._getTimePanelClass());\r\n        this._$dateTable = $(\"<table>\").addClass(this._getDateTableClass())\r\n    }\r\n    _initGroupTable() {\r\n        var groups = this.option(\"groups\");\r\n        if (groups && groups.length) {\r\n            this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS)\r\n        }\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        this._rows = []\r\n    }\r\n    _recalculateAgenda(rows) {\r\n        var cellTemplates = [];\r\n        this._cleanView();\r\n        if (this._rowsIsEmpty(rows)) {\r\n            this._renderNoData();\r\n            return\r\n        }\r\n        this._rows = rows;\r\n        if (this._$groupTable) {\r\n            cellTemplates = this._renderGroupHeader();\r\n            this._setGroupHeaderCellsHeight()\r\n        }\r\n        this._renderTimePanel();\r\n        this._renderDateTable();\r\n        this.invoke(\"onAgendaReady\", rows);\r\n        this._applyCellTemplates(cellTemplates);\r\n        this._dateTableScrollable.update()\r\n    }\r\n    _renderNoData() {\r\n        this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\r\n        this._dateTableScrollable.$content().append(this._$noDataContainer)\r\n    }\r\n    _setTableSizes() {\r\n        return noop()\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        return noop()\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        return noop()\r\n    }\r\n    _setGroupHeaderCellsHeight() {\r\n        var $cells = this._getGroupHeaderCells().filter((function(_, element) {\r\n            return !element.getAttribute(\"rowSpan\")\r\n        }));\r\n        var rows = this._removeEmptyRows(this._rows);\r\n        if (!rows.length) {\r\n            return\r\n        }\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\r\n            $cellContent.outerHeight(this._getGroupRowHeight(rows[i]))\r\n        }\r\n    }\r\n    _rowsIsEmpty(rows) {\r\n        var result = true;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var groupRow = rows[i];\r\n            for (var j = 0; j < groupRow.length; j++) {\r\n                if (groupRow[j]) {\r\n                    result = false;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _detachGroupCountAttr() {\r\n        this.$element().removeAttr(AGENDA_GROUPED_ATTR)\r\n    }\r\n    _attachGroupCountAttr() {\r\n        this.$element().attr(AGENDA_GROUPED_ATTR, this.option(\"groups\").length)\r\n    }\r\n    _removeEmptyRows(rows) {\r\n        var result = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n            if (rows[i].length && !(data = rows[i], !data.some((function(value) {\r\n                    return value > 0\r\n                })))) {\r\n                result.push(rows[i])\r\n            }\r\n        }\r\n        var data;\r\n        return result\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        return this._$groupTable\r\n    }\r\n    _makeGroupRows() {\r\n        var tree = this.invoke(\"createReducedResourcesTree\");\r\n        var cellTemplate = this.option(\"resourceCellTemplate\");\r\n        var getGroupHeaderContentClass = this._getGroupHeaderContentClass();\r\n        var cellTemplates = [];\r\n        var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\r\n            cellTag: \"th\",\r\n            groupTableClass: GROUP_TABLE_CLASS,\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupCellClass: this._getGroupHeaderClass(),\r\n            groupCellCustomContent(cell, cellText, index, data) {\r\n                var container = domAdapter.createElement(\"div\");\r\n                var contentWrapper = domAdapter.createElement(\"div\");\r\n                container.className = getGroupHeaderContentClass;\r\n                contentWrapper.appendChild(cellText);\r\n                container.appendChild(contentWrapper);\r\n                container.className = getGroupHeaderContentClass;\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\r\n                        model: {\r\n                            data: data.data,\r\n                            id: data.value,\r\n                            color: data.color,\r\n                            text: cellText.textContent\r\n                        },\r\n                        container: getPublicElement($(container)),\r\n                        index: index\r\n                    }))\r\n                } else {\r\n                    contentWrapper.appendChild(cellText);\r\n                    container.appendChild(contentWrapper)\r\n                }\r\n                cell.appendChild(container)\r\n            },\r\n            cellTemplate: cellTemplate\r\n        });\r\n        return {\r\n            elements: $(table).find(\".\" + this._getGroupRowClass()),\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _cleanView() {\r\n        this._$dateTable.empty();\r\n        this._$timePanel.empty();\r\n        if (this._$groupTable) {\r\n            this._$groupTable.empty()\r\n        }\r\n        if (this._$noDataContainer) {\r\n            this._$noDataContainer.empty();\r\n            this._$noDataContainer.remove();\r\n            delete this._$noDataContainer\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceStaticElements()\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        if (this._$groupTable) {\r\n            this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n        }\r\n        this._dateTableScrollable.$content().append(this._$timePanel, this._$dateTable);\r\n        this.$element().append(this._dateTableScrollable.$element())\r\n    }\r\n    _renderDateTable() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowClass: this._getDateTableRowClass(),\r\n            cellClass: this._getDateTableCellClass()\r\n        })\r\n    }\r\n    _attachTablesEvents() {\r\n        return noop()\r\n    }\r\n    _attachEvents() {\r\n        return noop()\r\n    }\r\n    _cleanCellDataCache() {\r\n        return noop()\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\r\n        var groupsOpt = this.option(\"groups\");\r\n        var groups = {};\r\n        var isGroupedView = !!groupsOpt.length;\r\n        var path = isGroupedView && this._getPathToLeaf(rowIndex) || [];\r\n        path.forEach((function(resourceValue, resourceIndex) {\r\n            var resourceName = groupsOpt[resourceIndex].name;\r\n            groups[resourceName] = resourceValue\r\n        }));\r\n        var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\r\n        return {\r\n            model: {\r\n                text: text,\r\n                date: date,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: rowIndex\r\n        }\r\n    }\r\n    _renderTableBody(options) {\r\n        var cellTemplates = [];\r\n        var cellTemplateOpt = options.cellTemplate;\r\n        this._$rows = [];\r\n        var i;\r\n        var fillTableBody = function(rowIndex, rowSize) {\r\n            if (rowSize) {\r\n                var date;\r\n                var cellDateNumber;\r\n                var cellDayName;\r\n                var $row = $(\"<tr>\");\r\n                var $td = $(\"<td>\").height(this._getRowHeight(rowSize));\r\n                if (options.getStartDate) {\r\n                    date = options.getStartDate && options.getStartDate(rowIndex);\r\n                    cellDateNumber = dateLocalization.format(date, \"d\");\r\n                    cellDayName = dateLocalization.format(date, this._formatWeekday)\r\n                }\r\n                if (cellTemplateOpt && cellTemplateOpt.render) {\r\n                    var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\r\n                    cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions))\r\n                } else if (cellDateNumber && cellDayName) {\r\n                    $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName)\r\n                }\r\n                if (options.rowClass) {\r\n                    $row.addClass(options.rowClass)\r\n                }\r\n                if (options.cellClass) {\r\n                    $td.addClass(options.cellClass)\r\n                }\r\n                $row.append($td);\r\n                this._$rows.push($row)\r\n            }\r\n        }.bind(this);\r\n        for (i = 0; i < this._rows.length; i++) {\r\n            each(this._rows[i], fillTableBody);\r\n            this._setLastRowClass()\r\n        }\r\n        $(options.container).append($(\"<tbody>\").append(this._$rows));\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _setLastRowClass() {\r\n        if (this._rows.length > 1 && this._$rows.length) {\r\n            var $lastRow = this._$rows[this._$rows.length - 1];\r\n            $lastRow.addClass(LAST_ROW_CLASS)\r\n        }\r\n    }\r\n    _renderTimePanel() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount(),\r\n            cellCount: 1,\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellClass: TIME_PANEL_CELL_CLASS,\r\n            cellTemplate: this.option(\"dateCellTemplate\"),\r\n            getStartDate: this._getTimePanelStartDate.bind(this)\r\n        })\r\n    }\r\n    _getTimePanelStartDate(rowIndex) {\r\n        var current = new Date(this.option(\"currentDate\"));\r\n        var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\r\n        return cellDate\r\n    }\r\n    _getRowHeight(rowSize) {\r\n        var baseHeight = this.option(\"rowHeight\");\r\n        var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\r\n        return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0\r\n    }\r\n    _getGroupRowHeight(groupRows) {\r\n        if (!groupRows) {\r\n            return\r\n        }\r\n        var result = 0;\r\n        for (var i = 0; i < groupRows.length; i++) {\r\n            result += this._getRowHeight(groupRows[i])\r\n        }\r\n        return result\r\n    }\r\n    _calculateRows(appointments) {\r\n        return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"))\r\n    }\r\n    preRenderAppointments(options) {\r\n        super.preRenderAppointments(options);\r\n        this._calculateRows(options.appointments)\r\n    }\r\n    onDataSourceChanged(appointments) {\r\n        super.onDataSourceChanged();\r\n        this._renderView();\r\n        var rows = this._calculateRows(appointments);\r\n        this._recalculateAgenda(rows)\r\n    }\r\n    getAgendaVerticalStepHeight() {\r\n        return this.option(\"rowHeight\")\r\n    }\r\n    getEndViewDate() {\r\n        var currentDate = new Date(this.option(\"currentDate\"));\r\n        var agendaDuration = this.option(\"agendaDuration\");\r\n        currentDate.setHours(this.option(\"endDayHour\"));\r\n        var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\r\n        return new Date(result)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.getEndViewDate()\r\n    }\r\n    getCoordinatesByDate() {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            max: 0,\r\n            groupIndex: 0\r\n        }\r\n    }\r\n    getCellDataByCoordinates() {\r\n        return {\r\n            startDate: null,\r\n            endDate: null\r\n        }\r\n    }\r\n    updateScrollPosition(date) {\r\n        var scheduler = this.option(\"observer\");\r\n        var newDate = scheduler.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var bounds = this.getVisibleBounds();\r\n        var startDateHour = newDate.getHours();\r\n        var startDateMinutes = newDate.getMinutes();\r\n        if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\r\n            this.scrollToTime(startDateHour, startDateMinutes, newDate)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(hours, minutes, bounds) {\r\n        var isUpdateNeeded = false;\r\n        if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\r\nexport default SchedulerAgenda;\r\n"]},"metadata":{},"sourceType":"module"}