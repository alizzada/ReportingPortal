{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport dateLocalization from \"../../../localization/date\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerWorkSpaceMonth = /*#__PURE__*/function (_SchedulerWorkSpace) {\n  _inherits(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);\n\n  var _super = _createSuper(SchedulerWorkSpaceMonth);\n\n  function SchedulerWorkSpaceMonth() {\n    _classCallCheck(this, SchedulerWorkSpaceMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpaceMonth, [{\n    key: \"isDateAndTimeView\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"_toggleFixedScrollableClass\",\n    value: function _toggleFixedScrollableClass() {\n      this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return MONTH_CLASS;\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return DAYS_IN_WEEK;\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(headerIndex) {\n      var resultDate = new Date(this._firstViewDate);\n      resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n      return resultDate;\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return this._formatWeekday;\n    }\n  }, {\n    key: \"_calculateCellIndex\",\n    value: function _calculateCellIndex(rowIndex, cellIndex) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        rowIndex %= this._getRowCount();\n      } else {\n        cellIndex %= this._getCellCount();\n      }\n\n      return rowIndex * this._getCellCount() + cellIndex;\n    }\n  }, {\n    key: \"_getInterval\",\n    value: function _getInterval() {\n      return DAY_IN_MILLISECONDS;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate) {\n      var firstViewDate = this.getStartViewDate();\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n    }\n  }, {\n    key: \"_getDateByCellIndexes\",\n    value: function _getDateByCellIndexes(rowIndex, cellIndex) {\n      var date = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_getDateByCellIndexes\", this).call(this, rowIndex, cellIndex);\n\n      this._setStartDayHour(date);\n\n      return date;\n    }\n  }, {\n    key: \"getCellWidth\",\n    value: function getCellWidth() {\n      var _this = this;\n\n      return this.cache.get(\"cellWidth\", function () {\n        var averageWidth = 0;\n\n        var cells = _this._getCells().slice(0, 7);\n\n        cells.each(function (index, element) {\n          averageWidth += getBoundingRect(element).width;\n        });\n        return 0 === cells.length ? void 0 : averageWidth / 7;\n      });\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_insertAllDayRowsIntoDateTable\",\n    value: function _insertAllDayRowsIntoDateTable() {\n      return false;\n    }\n  }, {\n    key: \"_getCellCoordinatesByIndex\",\n    value: function _getCellCoordinatesByIndex(index) {\n      var rowIndex = Math.floor(index / this._getCellCount());\n      var cellIndex = index - this._getCellCount() * rowIndex;\n      return {\n        rowIndex: rowIndex,\n        cellIndex: cellIndex\n      };\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this._createWorkSpaceScrollableElements();\n      } else {\n        _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_createWorkSpaceElements\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_needCreateCrossScrolling\",\n    value: function _needCreateCrossScrolling() {\n      return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      return noop();\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_getTableAllDay\",\n    value: function _getTableAllDay() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_changeAllDayVisibility\",\n    value: function _changeAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n\n      var firstDayOfWeek = this._getCalculatedFirstDayOfWeek();\n\n      this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n\n      this._setStartDayHour(this._firstViewDate);\n\n      var date = this._getViewStartByOptions();\n\n      this._minVisibleDate = new Date(date.setDate(1));\n      this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n    }\n  }, {\n    key: \"_getViewStartByOptions\",\n    value: function _getViewStartByOptions() {\n      if (!this.option(\"startDate\")) {\n        return new Date(this.option(\"currentDate\").getTime());\n      } else {\n        var startDate = this._getStartViewDate();\n\n        var currentDate = this.option(\"currentDate\");\n        var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n        var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\n\n        while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n          startDate = new Date(endDate);\n\n          if (diff > 0) {\n            startDate.setDate(1);\n          }\n\n          endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))));\n        }\n\n        return diff > 0 ? startDate : endDate;\n      }\n    }\n  }, {\n    key: \"_getStartViewDate\",\n    value: function _getStartViewDate() {\n      var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n      return firstMonthDate;\n    }\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options) {\n      options.getCellText = this._getCellText.bind(this);\n      options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n\n      _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_renderTableBody\", this).call(this, options);\n    }\n  }, {\n    key: \"_getCellText\",\n    value: function _getCellText(rowIndex, cellIndex) {\n      if (this.isGroupedByDate()) {\n        cellIndex = Math.floor(cellIndex / this._getGroupCount());\n      } else {\n        cellIndex %= this._getCellCount();\n      }\n\n      var date = this._getDate(rowIndex, cellIndex);\n\n      if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n        return this._formatMonthAndDay(date);\n      }\n\n      return dateLocalization.format(date, \"dd\");\n    }\n  }, {\n    key: \"_formatMonthAndDay\",\n    value: function _formatMonthAndDay(date) {\n      var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n      return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n    }\n  }, {\n    key: \"_getDate\",\n    value: function _getDate(week, day) {\n      var result = new Date(this._firstViewDate);\n\n      var lastRowInDay = this._getRowCount();\n\n      result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n      return result;\n    }\n  }, {\n    key: \"_updateIndex\",\n    value: function _updateIndex(index) {\n      return index;\n    }\n  }, {\n    key: \"_prepareCellData\",\n    value: function _prepareCellData(rowIndex, cellIndex, cell) {\n      var data = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_prepareCellData\", this).call(this, rowIndex, cellIndex, cell);\n\n      var $cell = $(cell);\n      $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n      return data;\n    }\n  }, {\n    key: \"_isCurrentDate\",\n    value: function _isCurrentDate(cellDate) {\n      return dateUtils.sameDate(cellDate, this._getToday());\n    }\n  }, {\n    key: \"_isFirstDayOfMonth\",\n    value: function _isFirstDayOfMonth(cellDate) {\n      return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n    }\n  }, {\n    key: \"_isOtherMonth\",\n    value: function _isOtherMonth(cellDate) {\n      return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      return false;\n    }\n  }, {\n    key: \"getCellDuration\",\n    value: function getCellDuration() {\n      return 36e5 * this._calculateDayDuration();\n    }\n  }, {\n    key: \"getIntervalDuration\",\n    value: function getIntervalDuration() {\n      return toMs(\"day\");\n    }\n  }, {\n    key: \"getTimePanelWidth\",\n    value: function getTimePanelWidth() {\n      return 0;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift) {\n      return {\n        cellPosition: timeShift * this.getCellWidth(),\n        top: 0,\n        left: 0\n      };\n    }\n  }, {\n    key: \"getCellCountToLastViewDate\",\n    value: function getCellCountToLastViewDate(date) {\n      var firstDateTime = date.getTime();\n      var lastDateTime = this.getEndViewDate().getTime();\n      var dayDurationInMs = this.getCellDuration();\n      return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"keepOriginalHours\",\n    value: function keepOriginalHours() {\n      return true;\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate) {\n      var startDateCopy = new Date(startDate);\n      return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n    }\n  }, {\n    key: \"getWorkSpaceLeftOffset\",\n    value: function getWorkSpaceLeftOffset() {\n      return 0;\n    }\n  }, {\n    key: \"needApplyCollectorOffset\",\n    value: function needApplyCollectorOffset() {\n      return true;\n    }\n  }, {\n    key: \"_getDateTableBorderOffset\",\n    value: function _getDateTableBorderOffset() {\n      return this._getDateTableBorder();\n    }\n  }, {\n    key: \"_getCellPositionByIndex\",\n    value: function _getCellPositionByIndex(index, groupIndex) {\n      var position = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_getCellPositionByIndex\", this).call(this, index, groupIndex);\n\n      var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n      var calculatedTopOffset;\n\n      if (!this._isVerticalGroupedWorkSpace()) {\n        calculatedTopOffset = this.getCellHeight() * rowIndex;\n      } else {\n        calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n      }\n\n      if (calculatedTopOffset) {\n        position.top = calculatedTopOffset;\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_getHeaderDate\",\n    value: function _getHeaderDate() {\n      return this._getViewStartByOptions();\n    }\n  }, {\n    key: \"_supportCompactDropDownAppointments\",\n    value: function _supportCompactDropDownAppointments() {\n      return false;\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime() {\n      return noop();\n    }\n  }, {\n    key: \"_createAllDayPanelElements\",\n    value: function _createAllDayPanelElements() {}\n  }, {\n    key: \"_getRowCountWithAllDayRows\",\n    value: function _getRowCountWithAllDayRows() {\n      return this._getRowCount();\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return true;\n    }\n  }, {\n    key: \"renderRAllDayPanel\",\n    value: function renderRAllDayPanel() {}\n  }, {\n    key: \"renderRTimeTable\",\n    value: function renderRTimeTable() {}\n  }, {\n    key: \"renderRDateTable\",\n    value: function renderRDateTable() {\n      this.renderRComponent(this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n    }\n  }, {\n    key: \"generateRenderOptions\",\n    value: function generateRenderOptions() {\n      var _this2 = this;\n\n      var options = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"generateRenderOptions\", this).call(this);\n\n      options.cellDataGetters.push(function (_, rowIndex, cellIndex) {\n        return {\n          value: {\n            text: _this2._getCellText(rowIndex, cellIndex)\n          }\n        };\n      });\n      options.cellDataGetters.push(function (_, rowIndex, cellIndex, groupIndex, startDate) {\n        return {\n          value: {\n            today: _this2._isCurrentDate(startDate),\n            otherMonth: _this2._isOtherMonth(startDate),\n            firstDayOfMonth: _this2._isFirstDayOfMonth(startDate)\n          }\n        };\n      });\n      return options;\n    }\n  }]);\n\n  return SchedulerWorkSpaceMonth;\n}(SchedulerWorkSpace);\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":null,"metadata":{},"sourceType":"module"}