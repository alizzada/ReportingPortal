{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport DiagramBar from \"./diagram.bar\";\nimport { getDiagram } from \"./diagram.importer\";\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\n\nvar DiagramContextMenuWrapper = /*#__PURE__*/function (_Widget) {\n  _inherits(DiagramContextMenuWrapper, _Widget);\n\n  var _super = _createSuper(DiagramContextMenuWrapper);\n\n  function DiagramContextMenuWrapper() {\n    _classCallCheck(this, DiagramContextMenuWrapper);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramContextMenuWrapper, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_init\", this).call(this);\n\n      this._createOnVisibilityChangingAction();\n\n      this._createOnInternalCommand();\n\n      this._createOnCustomCommand();\n\n      this._createOnItemClickAction();\n\n      this._tempState = void 0;\n      this._commands = [];\n      this._commandToIndexMap = {};\n      this.bar = new DiagramContextMenuBar(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_initMarkup\", this).call(this);\n\n      this._commands = this._getCommands();\n      this._commandToIndexMap = {};\n\n      this._fillCommandToIndexMap(this._commands, []);\n\n      this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\n      var $contextMenu = $(\"<div>\").appendTo(this.$element());\n      this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\n        isTouchBarMode: this._isTouchBarMode(),\n        cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\n        closeOnOutsideClick: false,\n        showEvent: \"\",\n        focusStateEnabled: false,\n        items: this._commands,\n        position: this._isTouchBarMode() ? {\n          my: {\n            x: \"center\",\n            y: \"bottom\"\n          },\n          at: {\n            x: \"center\",\n            y: \"top\"\n          },\n          of: this._$contextMenuTargetElement\n        } : {},\n        itemTemplate: function itemTemplate(itemData, itemIndex, itemElement) {\n          DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n        },\n        onItemClick: function onItemClick(_ref) {\n          var itemData = _ref.itemData;\n          return _this._onItemClick(itemData);\n        },\n        onShowing: function onShowing(e) {\n          if (true === _this._inOnShowing) {\n            return;\n          }\n\n          _this._inOnShowing = true;\n\n          _this._onVisibilityChangingAction({\n            visible: true,\n            component: _this\n          });\n\n          e.component.option(\"items\", e.component.option(\"items\"));\n          delete _this._inOnShowing;\n        }\n      });\n    }\n  }, {\n    key: \"_show\",\n    value: function _show(x, y, selection) {\n      this._contextMenuInstance.hide();\n\n      if (this._isTouchBarMode()) {\n        this._$contextMenuTargetElement.show();\n\n        if (!selection) {\n          selection = {\n            x: x,\n            y: y,\n            width: 0,\n            height: 0\n          };\n        }\n\n        var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\n\n        this._$contextMenuTargetElement.css({\n          left: selection.x - widthCorrection,\n          top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\n          width: selection.width + 2 * widthCorrection,\n          height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\n        });\n\n        this._contextMenuInstance.show();\n      } else {\n        this._contextMenuInstance.option(\"position\", {\n          offset: x + \" \" + y\n        });\n\n        this._contextMenuInstance.show();\n      }\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      this._$contextMenuTargetElement.hide();\n\n      this._contextMenuInstance.hide();\n    }\n  }, {\n    key: \"_isTouchBarMode\",\n    value: function _isTouchBarMode() {\n      var _getDiagram = getDiagram(),\n          Browser = _getDiagram.Browser;\n\n      return Browser.TouchUI;\n    }\n  }, {\n    key: \"_onItemClick\",\n    value: function _onItemClick(itemData) {\n      var processed = false;\n\n      if (this._onItemClickAction) {\n        processed = this._onItemClickAction(itemData);\n      }\n\n      if (!processed) {\n        DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\n\n        this._contextMenuInstance.hide();\n      }\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function _executeCommand(command, name, value) {\n      if (\"number\" === typeof command) {\n        this.bar.raiseBarCommandExecuted(command, value);\n      } else if (\"string\" === typeof command) {\n        this._onInternalCommandAction({\n          command: command\n        });\n      }\n\n      if (void 0 !== name) {\n        this._onCustomCommandAction({\n          name: name\n        });\n      }\n    }\n  }, {\n    key: \"_createOnInternalCommand\",\n    value: function _createOnInternalCommand() {\n      this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n    }\n  }, {\n    key: \"_createOnCustomCommand\",\n    value: function _createOnCustomCommand() {\n      this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n    }\n  }, {\n    key: \"_getCommands\",\n    value: function _getCommands() {\n      return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"));\n    }\n  }, {\n    key: \"_fillCommandToIndexMap\",\n    value: function _fillCommandToIndexMap(commands, indexPath) {\n      var _this2 = this;\n\n      commands.forEach(function (command, index) {\n        var commandIndexPath = indexPath.concat([index]);\n\n        if (void 0 !== command.command) {\n          _this2._commandToIndexMap[command.command] = commandIndexPath;\n        }\n\n        if (Array.isArray(command.items)) {\n          _this2._fillCommandToIndexMap(command.items, commandIndexPath);\n        }\n      });\n    }\n  }, {\n    key: \"_setItemEnabled\",\n    value: function _setItemEnabled(key, enabled) {\n      this._setItemVisible(key, enabled);\n    }\n  }, {\n    key: \"_setItemVisible\",\n    value: function _setItemVisible(key, visible) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible);\n    }\n  }, {\n    key: \"_setItemValue\",\n    value: function _setItemValue(key, value) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value);\n    }\n  }, {\n    key: \"_setItemSubItems\",\n    value: function _setItemSubItems(key, items) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items);\n    }\n  }, {\n    key: \"_setEnabled\",\n    value: function _setEnabled(enabled) {\n      this._contextMenuInstance.option(\"disabled\", !enabled);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._inOnShowing;\n    }\n  }, {\n    key: \"_createOnVisibilityChangingAction\",\n    value: function _createOnVisibilityChangingAction() {\n      this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\");\n    }\n  }, {\n    key: \"_createOnItemClickAction\",\n    value: function _createOnItemClickAction() {\n      this._onItemClickAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"onVisibilityChanging\":\n          this._createOnVisibilityChangingAction();\n\n          break;\n\n        case \"onInternalCommand\":\n          this._createOnInternalCommand();\n\n          break;\n\n        case \"onCustomCommand\":\n          this._createOnCustomCommand();\n\n          break;\n\n        case \"onItemClick\":\n          this._createOnItemClickAction();\n\n          break;\n\n        case \"commands\":\n          this._invalidate();\n\n          break;\n\n        case \"export\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return DiagramContextMenuWrapper;\n}(Widget);\n\nvar DiagramContextMenu = /*#__PURE__*/function (_ContextMenu) {\n  _inherits(DiagramContextMenu, _ContextMenu);\n\n  var _super2 = _createSuper(DiagramContextMenu);\n\n  function DiagramContextMenu() {\n    _classCallCheck(this, DiagramContextMenu);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(DiagramContextMenu, [{\n    key: \"_renderContextMenuOverlay\",\n    value: function _renderContextMenuOverlay() {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(DiagramContextMenu.prototype), \"_renderContextMenuOverlay\", this).call(this);\n\n      if (this._overlay && this.option(\"isTouchBarMode\")) {\n        this._overlay && this._overlay.option(\"onShown\", function () {\n          var $content = $(_this3._overlay.$content());\n          $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS);\n        });\n      }\n    }\n  }]);\n\n  return DiagramContextMenu;\n}(ContextMenu);\n\nvar DiagramContextMenuBar = /*#__PURE__*/function (_DiagramBar) {\n  _inherits(DiagramContextMenuBar, _DiagramBar);\n\n  var _super3 = _createSuper(DiagramContextMenuBar);\n\n  function DiagramContextMenuBar(owner) {\n    _classCallCheck(this, DiagramContextMenuBar);\n\n    return _super3.call(this, owner);\n  }\n\n  _createClass(DiagramContextMenuBar, [{\n    key: \"getCommandKeys\",\n    value: function getCommandKeys() {\n      return this._getKeys(this._owner._commands);\n    }\n  }, {\n    key: \"setItemValue\",\n    value: function setItemValue(key, value) {\n      this._owner._setItemValue(key, value);\n    }\n  }, {\n    key: \"setItemEnabled\",\n    value: function setItemEnabled(key, enabled) {\n      this._owner._setItemEnabled(key, enabled);\n    }\n  }, {\n    key: \"setItemVisible\",\n    value: function setItemVisible(key, visible) {\n      this._owner._setItemVisible(key, visible);\n    }\n  }, {\n    key: \"setItemSubItems\",\n    value: function setItemSubItems(key, items) {\n      this._owner._setItemSubItems(key, items);\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._owner._setEnabled(enabled);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._owner.isVisible();\n    }\n  }]);\n\n  return DiagramContextMenuBar;\n}(DiagramBar);\n\nexport default {\n  DiagramContextMenuWrapper: DiagramContextMenuWrapper,\n  DiagramContextMenu: DiagramContextMenu\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/diagram/ui.diagram.context_menu.js"],"names":["$","Widget","ContextMenu","DiagramCommandsManager","DiagramMenuHelper","DiagramBar","getDiagram","DIAGRAM_TOUCHBAR_CLASS","DIAGRAM_TOUCHBAR_OVERLAY_CLASS","DIAGRAM_TOUCHBAR_TARGET_CLASS","DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH","DIAGRAM_TOUCHBAR_Y_OFFSET","DiagramContextMenuWrapper","_createOnVisibilityChangingAction","_createOnInternalCommand","_createOnCustomCommand","_createOnItemClickAction","_tempState","_commands","_commandToIndexMap","bar","DiagramContextMenuBar","_getCommands","_fillCommandToIndexMap","_$contextMenuTargetElement","addClass","appendTo","$element","$contextMenu","_contextMenuInstance","_createComponent","DiagramContextMenu","isTouchBarMode","_isTouchBarMode","cssClass","getContextMenuCssClass","closeOnOutsideClick","showEvent","focusStateEnabled","items","position","my","x","y","at","of","itemTemplate","itemData","itemIndex","itemElement","getContextMenuItemTemplate","onItemClick","_ref","_onItemClick","onShowing","e","_inOnShowing","_onVisibilityChangingAction","visible","component","option","selection","hide","show","width","height","widthCorrection","css","left","top","offset","Browser","TouchUI","processed","_onItemClickAction","onContextMenuItemClick","_executeCommand","bind","command","name","value","raiseBarCommandExecuted","_onInternalCommandAction","_onCustomCommandAction","_createActionByOption","getContextMenuCommands","commands","indexPath","forEach","index","commandIndexPath","concat","Array","isArray","key","enabled","_setItemVisible","itemOptionText","getItemOptionText","updateContextMenuItemVisible","updateContextMenuItemValue","updateContextMenuItems","args","_invalidate","_overlay","$content","parent","owner","_getKeys","_owner","_setItemValue","_setItemEnabled","_setItemSubItems","_setEnabled","isVisible"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport ContextMenu from \"../context_menu\";\r\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\r\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\r\nimport DiagramBar from \"./diagram.bar\";\r\nimport {\r\n    getDiagram\r\n} from \"./diagram.importer\";\r\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\r\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\r\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\r\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\r\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\r\nclass DiagramContextMenuWrapper extends Widget {\r\n    _init() {\r\n        super._init();\r\n        this._createOnVisibilityChangingAction();\r\n        this._createOnInternalCommand();\r\n        this._createOnCustomCommand();\r\n        this._createOnItemClickAction();\r\n        this._tempState = void 0;\r\n        this._commands = [];\r\n        this._commandToIndexMap = {};\r\n        this.bar = new DiagramContextMenuBar(this)\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._commands = this._getCommands();\r\n        this._commandToIndexMap = {};\r\n        this._fillCommandToIndexMap(this._commands, []);\r\n        this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\r\n        var $contextMenu = $(\"<div>\").appendTo(this.$element());\r\n        this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\r\n            isTouchBarMode: this._isTouchBarMode(),\r\n            cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\r\n            closeOnOutsideClick: false,\r\n            showEvent: \"\",\r\n            focusStateEnabled: false,\r\n            items: this._commands,\r\n            position: this._isTouchBarMode() ? {\r\n                my: {\r\n                    x: \"center\",\r\n                    y: \"bottom\"\r\n                },\r\n                at: {\r\n                    x: \"center\",\r\n                    y: \"top\"\r\n                },\r\n                of: this._$contextMenuTargetElement\r\n            } : {},\r\n            itemTemplate: function(itemData, itemIndex, itemElement) {\r\n                DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement)\r\n            },\r\n            onItemClick: _ref => {\r\n                var {\r\n                    itemData: itemData\r\n                } = _ref;\r\n                return this._onItemClick(itemData)\r\n            },\r\n            onShowing: e => {\r\n                if (true === this._inOnShowing) {\r\n                    return\r\n                }\r\n                this._inOnShowing = true;\r\n                this._onVisibilityChangingAction({\r\n                    visible: true,\r\n                    component: this\r\n                });\r\n                e.component.option(\"items\", e.component.option(\"items\"));\r\n                delete this._inOnShowing\r\n            }\r\n        })\r\n    }\r\n    _show(x, y, selection) {\r\n        this._contextMenuInstance.hide();\r\n        if (this._isTouchBarMode()) {\r\n            this._$contextMenuTargetElement.show();\r\n            if (!selection) {\r\n                selection = {\r\n                    x: x,\r\n                    y: y,\r\n                    width: 0,\r\n                    height: 0\r\n                }\r\n            }\r\n            var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\r\n            this._$contextMenuTargetElement.css({\r\n                left: selection.x - widthCorrection,\r\n                top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\r\n                width: selection.width + 2 * widthCorrection,\r\n                height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\r\n            });\r\n            this._contextMenuInstance.show()\r\n        } else {\r\n            this._contextMenuInstance.option(\"position\", {\r\n                offset: x + \" \" + y\r\n            });\r\n            this._contextMenuInstance.show()\r\n        }\r\n    }\r\n    _hide() {\r\n        this._$contextMenuTargetElement.hide();\r\n        this._contextMenuInstance.hide()\r\n    }\r\n    _isTouchBarMode() {\r\n        var {\r\n            Browser: Browser\r\n        } = getDiagram();\r\n        return Browser.TouchUI\r\n    }\r\n    _onItemClick(itemData) {\r\n        var processed = false;\r\n        if (this._onItemClickAction) {\r\n            processed = this._onItemClickAction(itemData)\r\n        }\r\n        if (!processed) {\r\n            DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\r\n            this._contextMenuInstance.hide()\r\n        }\r\n    }\r\n    _executeCommand(command, name, value) {\r\n        if (\"number\" === typeof command) {\r\n            this.bar.raiseBarCommandExecuted(command, value)\r\n        } else if (\"string\" === typeof command) {\r\n            this._onInternalCommandAction({\r\n                command: command\r\n            })\r\n        }\r\n        if (void 0 !== name) {\r\n            this._onCustomCommandAction({\r\n                name: name\r\n            })\r\n        }\r\n    }\r\n    _createOnInternalCommand() {\r\n        this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\")\r\n    }\r\n    _createOnCustomCommand() {\r\n        this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\")\r\n    }\r\n    _getCommands() {\r\n        return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"))\r\n    }\r\n    _fillCommandToIndexMap(commands, indexPath) {\r\n        commands.forEach((command, index) => {\r\n            var commandIndexPath = indexPath.concat([index]);\r\n            if (void 0 !== command.command) {\r\n                this._commandToIndexMap[command.command] = commandIndexPath\r\n            }\r\n            if (Array.isArray(command.items)) {\r\n                this._fillCommandToIndexMap(command.items, commandIndexPath)\r\n            }\r\n        })\r\n    }\r\n    _setItemEnabled(key, enabled) {\r\n        this._setItemVisible(key, enabled)\r\n    }\r\n    _setItemVisible(key, visible) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible)\r\n    }\r\n    _setItemValue(key, value) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value)\r\n    }\r\n    _setItemSubItems(key, items) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items)\r\n    }\r\n    _setEnabled(enabled) {\r\n        this._contextMenuInstance.option(\"disabled\", !enabled)\r\n    }\r\n    isVisible() {\r\n        return this._inOnShowing\r\n    }\r\n    _createOnVisibilityChangingAction() {\r\n        this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\")\r\n    }\r\n    _createOnItemClickAction() {\r\n        this._onItemClickAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"onVisibilityChanging\":\r\n                this._createOnVisibilityChangingAction();\r\n                break;\r\n            case \"onInternalCommand\":\r\n                this._createOnInternalCommand();\r\n                break;\r\n            case \"onCustomCommand\":\r\n                this._createOnCustomCommand();\r\n                break;\r\n            case \"onItemClick\":\r\n                this._createOnItemClickAction();\r\n                break;\r\n            case \"commands\":\r\n                this._invalidate();\r\n                break;\r\n            case \"export\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nclass DiagramContextMenu extends ContextMenu {\r\n    _renderContextMenuOverlay() {\r\n        super._renderContextMenuOverlay();\r\n        if (this._overlay && this.option(\"isTouchBarMode\")) {\r\n            this._overlay && this._overlay.option(\"onShown\", () => {\r\n                var $content = $(this._overlay.$content());\r\n                $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS)\r\n            })\r\n        }\r\n    }\r\n}\r\nclass DiagramContextMenuBar extends DiagramBar {\r\n    constructor(owner) {\r\n        super(owner)\r\n    }\r\n    getCommandKeys() {\r\n        return this._getKeys(this._owner._commands)\r\n    }\r\n    setItemValue(key, value) {\r\n        this._owner._setItemValue(key, value)\r\n    }\r\n    setItemEnabled(key, enabled) {\r\n        this._owner._setItemEnabled(key, enabled)\r\n    }\r\n    setItemVisible(key, visible) {\r\n        this._owner._setItemVisible(key, visible)\r\n    }\r\n    setItemSubItems(key, items) {\r\n        this._owner._setItemSubItems(key, items)\r\n    }\r\n    setEnabled(enabled) {\r\n        this._owner._setEnabled(enabled)\r\n    }\r\n    isVisible() {\r\n        return this._owner.isVisible()\r\n    }\r\n}\r\nexport default {\r\n    DiagramContextMenuWrapper: DiagramContextMenuWrapper,\r\n    DiagramContextMenu: DiagramContextMenu\r\n};\r\n"]},"metadata":{},"sourceType":"module"}