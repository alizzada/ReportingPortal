{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.bing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../../core/utils/common\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport Promise from \"../../core/polyfills/promise\";\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport { map, each } from \"../../core/utils/iterator\";\nimport DynamicProvider from \"./provider.dynamic\";\nimport Color from \"../../color\";\nimport ajax from \"../../core/utils/ajax\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BING_MAP_READY = \"_bingScriptReady\";\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\nvar INFOBOX_V_OFFSET_V8 = 13;\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\n\nvar msMapsLoaded = function msMapsLoaded() {\n  return window.Microsoft && window.Microsoft.Maps;\n};\n\nvar msMapsLoader;\nvar BingProvider = DynamicProvider.inherit({\n  _mapType: function _mapType(type) {\n    var mapTypes = {\n      roadmap: Microsoft.Maps.MapTypeId.road,\n      hybrid: Microsoft.Maps.MapTypeId.aerial,\n      satellite: Microsoft.Maps.MapTypeId.aerial\n    };\n    return mapTypes[type] || mapTypes.road;\n  },\n  _movementMode: function _movementMode(type) {\n    var movementTypes = {\n      driving: Microsoft.Maps.Directions.RouteMode.driving,\n      walking: Microsoft.Maps.Directions.RouteMode.walking\n    };\n    return movementTypes[type] || movementTypes.driving;\n  },\n  _resolveLocation: function _resolveLocation(location) {\n    return new Promise(function (resolve) {\n      var latLng = this._getLatLng(location);\n\n      if (latLng) {\n        resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng));\n      } else {\n        this._geocodeLocation(location).then(function (geocodedLocation) {\n          resolve(geocodedLocation);\n        });\n      }\n    }.bind(this));\n  },\n  _geocodedLocations: {},\n  _geocodeLocationImpl: function _geocodeLocationImpl(location) {\n    return new Promise(function (resolve) {\n      if (!isDefined(location)) {\n        resolve(new Microsoft.Maps.Location(0, 0));\n        return;\n      }\n\n      var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\n      var searchRequest = {\n        where: location,\n        count: 1,\n        callback: function callback(searchResponse) {\n          var result = searchResponse.results[0];\n\n          if (result) {\n            var boundsBox = searchResponse.results[0].location;\n            resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude));\n          } else {\n            resolve(new Microsoft.Maps.Location(0, 0));\n          }\n        }\n      };\n      searchManager.geocode(searchRequest);\n    }.bind(this));\n  },\n  _normalizeLocation: function _normalizeLocation(location) {\n    return {\n      lat: location.latitude,\n      lng: location.longitude\n    };\n  },\n  _normalizeLocationRect: function _normalizeLocationRect(locationRect) {\n    var northWest = this._normalizeLocation(locationRect.getNorthwest());\n\n    var southEast = this._normalizeLocation(locationRect.getSoutheast());\n\n    return {\n      northEast: {\n        lat: northWest.lat,\n        lng: southEast.lng\n      },\n      southWest: {\n        lat: southEast.lat,\n        lng: northWest.lng\n      }\n    };\n  },\n  _loadImpl: function _loadImpl() {\n    return new Promise(function (resolve) {\n      if (msMapsLoaded()) {\n        resolve();\n      } else {\n        if (!msMapsLoader) {\n          msMapsLoader = this._loadMapScript();\n        }\n\n        msMapsLoader.then(function () {\n          if (msMapsLoaded()) {\n            resolve();\n            return;\n          }\n\n          this._loadMapScript().then(resolve);\n        }.bind(this));\n      }\n    }.bind(this)).then(function () {\n      return Promise.all([new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\n          callback: resolve\n        });\n      }), new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\n          callback: resolve\n        });\n      })]);\n    });\n  },\n  _loadMapScript: function _loadMapScript() {\n    return new Promise(function (resolve) {\n      window[BING_MAP_READY] = resolve;\n      ajax.sendRequest({\n        url: BING_URL_V8,\n        dataType: \"script\"\n      });\n    }).then(function () {\n      try {\n        delete window[BING_MAP_READY];\n      } catch (e) {\n        window[BING_MAP_READY] = void 0;\n      }\n    });\n  },\n  _init: function _init() {\n    this._createMap();\n\n    return Promise.resolve();\n  },\n  _createMap: function _createMap() {\n    var controls = this._option(\"controls\");\n\n    this._map = new Microsoft.Maps.Map(this._$container[0], {\n      credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\n      zoom: this._option(\"zoom\"),\n      showDashboard: controls,\n      showMapTypeSelector: controls,\n      showScalebar: controls\n    });\n  },\n  _attachHandlers: function _attachHandlers() {\n    this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\n    this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this));\n  },\n  _viewChangeHandler: function _viewChangeHandler() {\n    var bounds = this._map.getBounds();\n\n    this._option(\"bounds\", this._normalizeLocationRect(bounds));\n\n    var center = this._map.getCenter();\n\n    this._option(\"center\", this._normalizeLocation(center));\n\n    if (!this._preventZoomChangeEvent) {\n      this._option(\"zoom\", this._map.getZoom());\n    }\n  },\n  _clickActionHandler: function _clickActionHandler(e) {\n    if (\"map\" === e.targetType) {\n      this._fireClickAction({\n        location: this._normalizeLocation(e.location)\n      });\n    }\n  },\n  updateDimensions: function updateDimensions() {\n    var $container = this._$container;\n\n    this._map.setOptions({\n      width: $container.width(),\n      height: $container.height()\n    });\n\n    return Promise.resolve();\n  },\n  updateMapType: function updateMapType() {\n    var type = this._option(\"type\");\n\n    var labelOverlay = Microsoft.Maps.LabelOverlay;\n\n    this._map.setView({\n      animate: false,\n      mapTypeId: this._mapType(type),\n      labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\n    });\n\n    return Promise.resolve();\n  },\n  updateBounds: function updateBounds() {\n    return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function (result) {\n      var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds\n      });\n    }.bind(this));\n  },\n  updateCenter: function updateCenter() {\n    return this._resolveLocation(this._option(\"center\")).then(function (center) {\n      this._map.setView({\n        animate: false,\n        center: center\n      });\n    }.bind(this));\n  },\n  updateZoom: function updateZoom() {\n    this._map.setView({\n      animate: false,\n      zoom: this._option(\"zoom\")\n    });\n\n    return Promise.resolve();\n  },\n  updateControls: function updateControls() {\n    this.clean();\n    return this.render.apply(this, arguments);\n  },\n  _renderMarker: function _renderMarker(options) {\n    return this._resolveLocation(options.location).then(function (location) {\n      var pushpinOptions = {\n        icon: options.iconSrc || this._option(\"markerIconSrc\")\n      };\n\n      if (options.html) {\n        extend(pushpinOptions, {\n          htmlContent: options.html,\n          width: null,\n          height: null\n        });\n        var htmlOffset = options.htmlOffset;\n\n        if (htmlOffset) {\n          pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top);\n        }\n      }\n\n      var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\n\n      this._map.entities.push(pushpin);\n\n      var infobox = this._renderTooltip(location, options.tooltip);\n\n      var handler;\n\n      if (options.onClick || options.tooltip) {\n        var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\n\n        var markerNormalizedLocation = this._normalizeLocation(location);\n\n        handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", function () {\n          markerClickAction({\n            location: markerNormalizedLocation\n          });\n\n          if (infobox) {\n            infobox.setOptions({\n              visible: true\n            });\n          }\n        });\n      }\n\n      return {\n        location: location,\n        marker: pushpin,\n        infobox: infobox,\n        handler: handler\n      };\n    }.bind(this));\n  },\n  _renderTooltip: function _renderTooltip(location, options) {\n    if (!options) {\n      return;\n    }\n\n    options = this._parseTooltipOptions(options);\n    var infobox = new Microsoft.Maps.Infobox(location, {\n      description: options.text,\n      offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\n      visible: options.visible\n    });\n    infobox.setMap(this._map);\n    return infobox;\n  },\n  _destroyMarker: function _destroyMarker(marker) {\n    this._map.entities.remove(marker.marker);\n\n    if (marker.infobox) {\n      marker.infobox.setMap(null);\n    }\n\n    if (marker.handler) {\n      Microsoft.Maps.Events.removeHandler(marker.handler);\n    }\n  },\n  _renderRoute: function _renderRoute(options) {\n    return Promise.all(map(options.locations, function (point) {\n      return this._resolveLocation(point);\n    }.bind(this))).then(function (locations) {\n      return new Promise(function (resolve) {\n        var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\n        var color = new Color(options.color || this._defaultRouteColor()).toHex();\n        var routeColor = new Microsoft.Maps.Color.fromHex(color);\n        routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\n        direction.setRenderOptions({\n          autoUpdateMapView: false,\n          displayRouteSelector: false,\n          waypointPushpinOptions: {\n            visible: false\n          },\n          drivingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          },\n          walkingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          }\n        });\n        direction.setRequestOptions({\n          routeMode: this._movementMode(options.mode),\n          routeDraggable: false\n        });\n        each(locations, function (_, location) {\n          var waypoint = new Microsoft.Maps.Directions.Waypoint({\n            location: location\n          });\n          direction.addWaypoint(waypoint);\n        });\n        var directionHandlers = [];\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var routeSummary = args.routeSummary[0];\n          resolve({\n            instance: direction,\n            northEast: routeSummary.northEast,\n            southWest: routeSummary.southWest\n          });\n        }));\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\n          errors.log(\"W1006\", status);\n          resolve({\n            instance: direction\n          });\n        }));\n        direction.calculateDirections();\n      }.bind(this));\n    }.bind(this));\n  },\n  _destroyRoute: function _destroyRoute(routeObject) {\n    routeObject.instance.dispose();\n  },\n  _fitBounds: function _fitBounds() {\n    this._updateBounds();\n\n    if (this._bounds && this._option(\"autoAdjust\")) {\n      var zoomBeforeFitting = this._map.getZoom();\n\n      this._preventZoomChangeEvent = true;\n\n      var bounds = this._bounds.clone();\n\n      bounds.height = 1.1 * bounds.height;\n      bounds.width = 1.1 * bounds.width;\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds,\n        zoom: zoomBeforeFitting\n      });\n\n      var zoomAfterFitting = this._map.getZoom();\n\n      if (zoomBeforeFitting < zoomAfterFitting) {\n        this._map.setView({\n          animate: false,\n          zoom: zoomBeforeFitting\n        });\n      } else {\n        this._option(\"zoom\", zoomAfterFitting);\n      }\n\n      delete this._preventZoomChangeEvent;\n    }\n\n    return Promise.resolve();\n  },\n  _extendBounds: function _extendBounds(location) {\n    if (this._bounds) {\n      this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location);\n    } else {\n      this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH);\n    }\n  },\n  clean: function clean() {\n    if (this._map) {\n      Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\n      Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\n\n      this._clearMarkers();\n\n      this._clearRoutes();\n\n      this._map.dispose();\n    }\n\n    return Promise.resolve();\n  }\n});\nexport default BingProvider;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/map/provider.dynamic.bing.js"],"names":["noop","getWindow","window","Promise","extend","errors","map","each","DynamicProvider","Color","ajax","isDefined","BING_MAP_READY","BING_URL_V8","INFOBOX_V_OFFSET_V8","BING_CREDENTIALS","MIN_LOCATION_RECT_LENGTH","msMapsLoaded","Microsoft","Maps","msMapsLoader","BingProvider","inherit","_mapType","type","mapTypes","roadmap","MapTypeId","road","hybrid","aerial","satellite","_movementMode","movementTypes","driving","Directions","RouteMode","walking","_resolveLocation","location","resolve","latLng","_getLatLng","Location","lat","lng","_geocodeLocation","then","geocodedLocation","bind","_geocodedLocations","_geocodeLocationImpl","searchManager","Search","SearchManager","_map","searchRequest","where","count","callback","searchResponse","result","results","boundsBox","latitude","longitude","geocode","_normalizeLocation","_normalizeLocationRect","locationRect","northWest","getNorthwest","southEast","getSoutheast","northEast","southWest","_loadImpl","_loadMapScript","all","loadModule","sendRequest","url","dataType","e","_init","_createMap","controls","_option","Map","_$container","credentials","_keyOption","zoom","showDashboard","showMapTypeSelector","showScalebar","_attachHandlers","_providerViewChangeHandler","Events","addHandler","_viewChangeHandler","_providerClickHandler","_clickActionHandler","bounds","getBounds","center","getCenter","_preventZoomChangeEvent","getZoom","targetType","_fireClickAction","updateDimensions","$container","setOptions","width","height","updateMapType","labelOverlay","LabelOverlay","setView","animate","mapTypeId","hidden","visible","updateBounds","LocationRect","fromLocations","updateCenter","updateZoom","updateControls","clean","render","apply","arguments","_renderMarker","options","pushpinOptions","icon","iconSrc","html","htmlContent","htmlOffset","anchor","Point","left","top","pushpin","Pushpin","entities","push","infobox","_renderTooltip","tooltip","handler","onClick","markerClickAction","_mapWidget","_createAction","markerNormalizedLocation","marker","_parseTooltipOptions","Infobox","description","text","offset","setMap","_destroyMarker","remove","removeHandler","_renderRoute","locations","point","direction","DirectionsManager","color","_defaultRouteColor","toHex","routeColor","fromHex","a","opacity","_defaultRouteOpacity","setRenderOptions","autoUpdateMapView","displayRouteSelector","waypointPushpinOptions","drivingPolylineOptions","strokeColor","strokeThickness","weight","_defaultRouteWeight","walkingPolylineOptions","setRequestOptions","routeMode","mode","routeDraggable","_","waypoint","Waypoint","addWaypoint","directionHandlers","args","length","pop","routeSummary","instance","status","responseCode","message","log","calculateDirections","_destroyRoute","routeObject","dispose","_fitBounds","_updateBounds","_bounds","zoomBeforeFitting","clone","zoomAfterFitting","_extendBounds","_clearMarkers","_clearRoutes"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.bing.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nvar window = getWindow();\r\nimport Promise from \"../../core/polyfills/promise\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport DynamicProvider from \"./provider.dynamic\";\r\nimport Color from \"../../color\";\r\nimport ajax from \"../../core/utils/ajax\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar BING_MAP_READY = \"_bingScriptReady\";\r\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\r\nvar INFOBOX_V_OFFSET_V8 = 13;\r\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\r\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\r\nvar msMapsLoaded = function() {\r\n    return window.Microsoft && window.Microsoft.Maps\r\n};\r\nvar msMapsLoader;\r\nvar BingProvider = DynamicProvider.inherit({\r\n    _mapType: function(type) {\r\n        var mapTypes = {\r\n            roadmap: Microsoft.Maps.MapTypeId.road,\r\n            hybrid: Microsoft.Maps.MapTypeId.aerial,\r\n            satellite: Microsoft.Maps.MapTypeId.aerial\r\n        };\r\n        return mapTypes[type] || mapTypes.road\r\n    },\r\n    _movementMode: function(type) {\r\n        var movementTypes = {\r\n            driving: Microsoft.Maps.Directions.RouteMode.driving,\r\n            walking: Microsoft.Maps.Directions.RouteMode.walking\r\n        };\r\n        return movementTypes[type] || movementTypes.driving\r\n    },\r\n    _resolveLocation: function(location) {\r\n        return new Promise(function(resolve) {\r\n            var latLng = this._getLatLng(location);\r\n            if (latLng) {\r\n                resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng))\r\n            } else {\r\n                this._geocodeLocation(location).then((function(geocodedLocation) {\r\n                    resolve(geocodedLocation)\r\n                }))\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _geocodedLocations: {},\r\n    _geocodeLocationImpl: function(location) {\r\n        return new Promise(function(resolve) {\r\n            if (!isDefined(location)) {\r\n                resolve(new Microsoft.Maps.Location(0, 0));\r\n                return\r\n            }\r\n            var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\r\n            var searchRequest = {\r\n                where: location,\r\n                count: 1,\r\n                callback: function(searchResponse) {\r\n                    var result = searchResponse.results[0];\r\n                    if (result) {\r\n                        var boundsBox = searchResponse.results[0].location;\r\n                        resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude))\r\n                    } else {\r\n                        resolve(new Microsoft.Maps.Location(0, 0))\r\n                    }\r\n                }\r\n            };\r\n            searchManager.geocode(searchRequest)\r\n        }.bind(this))\r\n    },\r\n    _normalizeLocation: function(location) {\r\n        return {\r\n            lat: location.latitude,\r\n            lng: location.longitude\r\n        }\r\n    },\r\n    _normalizeLocationRect: function(locationRect) {\r\n        var northWest = this._normalizeLocation(locationRect.getNorthwest());\r\n        var southEast = this._normalizeLocation(locationRect.getSoutheast());\r\n        return {\r\n            northEast: {\r\n                lat: northWest.lat,\r\n                lng: southEast.lng\r\n            },\r\n            southWest: {\r\n                lat: southEast.lat,\r\n                lng: northWest.lng\r\n            }\r\n        }\r\n    },\r\n    _loadImpl: function() {\r\n        return new Promise(function(resolve) {\r\n            if (msMapsLoaded()) {\r\n                resolve()\r\n            } else {\r\n                if (!msMapsLoader) {\r\n                    msMapsLoader = this._loadMapScript()\r\n                }\r\n                msMapsLoader.then(function() {\r\n                    if (msMapsLoaded()) {\r\n                        resolve();\r\n                        return\r\n                    }\r\n                    this._loadMapScript().then(resolve)\r\n                }.bind(this))\r\n            }\r\n        }.bind(this)).then((function() {\r\n            return Promise.all([new Promise((function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\r\n                    callback: resolve\r\n                })\r\n            })), new Promise((function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\r\n                    callback: resolve\r\n                })\r\n            }))])\r\n        }))\r\n    },\r\n    _loadMapScript: function() {\r\n        return new Promise((function(resolve) {\r\n            window[BING_MAP_READY] = resolve;\r\n            ajax.sendRequest({\r\n                url: BING_URL_V8,\r\n                dataType: \"script\"\r\n            })\r\n        })).then((function() {\r\n            try {\r\n                delete window[BING_MAP_READY]\r\n            } catch (e) {\r\n                window[BING_MAP_READY] = void 0\r\n            }\r\n        }))\r\n    },\r\n    _init: function() {\r\n        this._createMap();\r\n        return Promise.resolve()\r\n    },\r\n    _createMap: function() {\r\n        var controls = this._option(\"controls\");\r\n        this._map = new Microsoft.Maps.Map(this._$container[0], {\r\n            credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\r\n            zoom: this._option(\"zoom\"),\r\n            showDashboard: controls,\r\n            showMapTypeSelector: controls,\r\n            showScalebar: controls\r\n        })\r\n    },\r\n    _attachHandlers: function() {\r\n        this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\r\n        this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this))\r\n    },\r\n    _viewChangeHandler: function() {\r\n        var bounds = this._map.getBounds();\r\n        this._option(\"bounds\", this._normalizeLocationRect(bounds));\r\n        var center = this._map.getCenter();\r\n        this._option(\"center\", this._normalizeLocation(center));\r\n        if (!this._preventZoomChangeEvent) {\r\n            this._option(\"zoom\", this._map.getZoom())\r\n        }\r\n    },\r\n    _clickActionHandler: function(e) {\r\n        if (\"map\" === e.targetType) {\r\n            this._fireClickAction({\r\n                location: this._normalizeLocation(e.location)\r\n            })\r\n        }\r\n    },\r\n    updateDimensions: function() {\r\n        var $container = this._$container;\r\n        this._map.setOptions({\r\n            width: $container.width(),\r\n            height: $container.height()\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateMapType: function() {\r\n        var type = this._option(\"type\");\r\n        var labelOverlay = Microsoft.Maps.LabelOverlay;\r\n        this._map.setView({\r\n            animate: false,\r\n            mapTypeId: this._mapType(type),\r\n            labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateBounds: function() {\r\n        return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function(result) {\r\n            var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateCenter: function() {\r\n        return this._resolveLocation(this._option(\"center\")).then(function(center) {\r\n            this._map.setView({\r\n                animate: false,\r\n                center: center\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateZoom: function() {\r\n        this._map.setView({\r\n            animate: false,\r\n            zoom: this._option(\"zoom\")\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateControls: function() {\r\n        this.clean();\r\n        return this.render.apply(this, arguments)\r\n    },\r\n    _renderMarker: function(options) {\r\n        return this._resolveLocation(options.location).then(function(location) {\r\n            var pushpinOptions = {\r\n                icon: options.iconSrc || this._option(\"markerIconSrc\")\r\n            };\r\n            if (options.html) {\r\n                extend(pushpinOptions, {\r\n                    htmlContent: options.html,\r\n                    width: null,\r\n                    height: null\r\n                });\r\n                var htmlOffset = options.htmlOffset;\r\n                if (htmlOffset) {\r\n                    pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top)\r\n                }\r\n            }\r\n            var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\r\n            this._map.entities.push(pushpin);\r\n            var infobox = this._renderTooltip(location, options.tooltip);\r\n            var handler;\r\n            if (options.onClick || options.tooltip) {\r\n                var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\r\n                var markerNormalizedLocation = this._normalizeLocation(location);\r\n                handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", (function() {\r\n                    markerClickAction({\r\n                        location: markerNormalizedLocation\r\n                    });\r\n                    if (infobox) {\r\n                        infobox.setOptions({\r\n                            visible: true\r\n                        })\r\n                    }\r\n                }))\r\n            }\r\n            return {\r\n                location: location,\r\n                marker: pushpin,\r\n                infobox: infobox,\r\n                handler: handler\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _renderTooltip: function(location, options) {\r\n        if (!options) {\r\n            return\r\n        }\r\n        options = this._parseTooltipOptions(options);\r\n        var infobox = new Microsoft.Maps.Infobox(location, {\r\n            description: options.text,\r\n            offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\r\n            visible: options.visible\r\n        });\r\n        infobox.setMap(this._map);\r\n        return infobox\r\n    },\r\n    _destroyMarker: function(marker) {\r\n        this._map.entities.remove(marker.marker);\r\n        if (marker.infobox) {\r\n            marker.infobox.setMap(null)\r\n        }\r\n        if (marker.handler) {\r\n            Microsoft.Maps.Events.removeHandler(marker.handler)\r\n        }\r\n    },\r\n    _renderRoute: function(options) {\r\n        return Promise.all(map(options.locations, function(point) {\r\n            return this._resolveLocation(point)\r\n        }.bind(this))).then(function(locations) {\r\n            return new Promise(function(resolve) {\r\n                var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\r\n                var color = new Color(options.color || this._defaultRouteColor()).toHex();\r\n                var routeColor = new Microsoft.Maps.Color.fromHex(color);\r\n                routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\r\n                direction.setRenderOptions({\r\n                    autoUpdateMapView: false,\r\n                    displayRouteSelector: false,\r\n                    waypointPushpinOptions: {\r\n                        visible: false\r\n                    },\r\n                    drivingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    },\r\n                    walkingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    }\r\n                });\r\n                direction.setRequestOptions({\r\n                    routeMode: this._movementMode(options.mode),\r\n                    routeDraggable: false\r\n                });\r\n                each(locations, (function(_, location) {\r\n                    var waypoint = new Microsoft.Maps.Directions.Waypoint({\r\n                        location: location\r\n                    });\r\n                    direction.addWaypoint(waypoint)\r\n                }));\r\n                var directionHandlers = [];\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", (function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var routeSummary = args.routeSummary[0];\r\n                    resolve({\r\n                        instance: direction,\r\n                        northEast: routeSummary.northEast,\r\n                        southWest: routeSummary.southWest\r\n                    })\r\n                })));\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", (function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\r\n                    errors.log(\"W1006\", status);\r\n                    resolve({\r\n                        instance: direction\r\n                    })\r\n                })));\r\n                direction.calculateDirections()\r\n            }.bind(this))\r\n        }.bind(this))\r\n    },\r\n    _destroyRoute: function(routeObject) {\r\n        routeObject.instance.dispose()\r\n    },\r\n    _fitBounds: function() {\r\n        this._updateBounds();\r\n        if (this._bounds && this._option(\"autoAdjust\")) {\r\n            var zoomBeforeFitting = this._map.getZoom();\r\n            this._preventZoomChangeEvent = true;\r\n            var bounds = this._bounds.clone();\r\n            bounds.height = 1.1 * bounds.height;\r\n            bounds.width = 1.1 * bounds.width;\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds,\r\n                zoom: zoomBeforeFitting\r\n            });\r\n            var zoomAfterFitting = this._map.getZoom();\r\n            if (zoomBeforeFitting < zoomAfterFitting) {\r\n                this._map.setView({\r\n                    animate: false,\r\n                    zoom: zoomBeforeFitting\r\n                })\r\n            } else {\r\n                this._option(\"zoom\", zoomAfterFitting)\r\n            }\r\n            delete this._preventZoomChangeEvent\r\n        }\r\n        return Promise.resolve()\r\n    },\r\n    _extendBounds: function(location) {\r\n        if (this._bounds) {\r\n            this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location)\r\n        } else {\r\n            this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH)\r\n        }\r\n    },\r\n    clean: function() {\r\n        if (this._map) {\r\n            Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\r\n            Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\r\n            this._clearMarkers();\r\n            this._clearRoutes();\r\n            this._map.dispose()\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n});\r\nexport default BingProvider;\r\n"]},"metadata":{},"sourceType":"module"}