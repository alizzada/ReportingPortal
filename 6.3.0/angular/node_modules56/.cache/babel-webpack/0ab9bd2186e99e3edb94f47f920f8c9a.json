{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { VirtualScrollController, subscribeToExternalScrollers } from \"./ui.grid_core.virtual_scrolling_core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nvar TABLE_CLASS = \"table\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar ROW_CLASS = \"dx-row\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar SCROLLING_MODE_STANDARD = \"standard\";\nvar PIXELS_LIMIT = 25e4;\nvar LOAD_TIMEOUT = 300;\nvar NEW_SCROLLING_MODE = \"scrolling.newMode\";\n\nvar isVirtualMode = function isVirtualMode(that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function isAppendMode(that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualRowRendering = function isVirtualRowRendering(that) {\n  var rowRenderingMode = that.option(\"scrolling.rowRenderingMode\");\n\n  if (rowRenderingMode === SCROLLING_MODE_VIRTUAL) {\n    return true;\n  } else if (rowRenderingMode === SCROLLING_MODE_STANDARD) {\n    return false;\n  }\n};\n\nvar _correctCount = function _correctCount(items, count, fromEnd, isItemCountableFunc) {\n  for (var i = 0; i < count + 1; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar isItemCountableByDataSource = function isItemCountableByDataSource(item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\n\nvar updateItemIndices = function updateItemIndices(items) {\n  items.forEach(function (item, index) {\n    item.rowIndex = index;\n  });\n  return items;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function _updateLoading(that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else if (that._isLoading) {\n        that._isLoading = false;\n        that.loadingChanged.fire(false);\n      }\n    }\n  };\n\n  var result = {\n    init: function init() {\n      this.callBase.apply(this, arguments);\n      this._items = [];\n      this._isLoaded = true;\n      this._loadPageCount = 1;\n      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n    },\n    _getVirtualScrollDataOptions: function _getVirtualScrollDataOptions() {\n      var that = this;\n      return {\n        pageSize: function pageSize() {\n          return that.pageSize();\n        },\n        totalItemsCount: function totalItemsCount() {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function hasKnownLastPage() {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function pageIndex(index) {\n          return that._dataSource.pageIndex(index);\n        },\n        isLoading: function isLoading() {\n          return that._dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function pageCount() {\n          return that.pageCount();\n        },\n        load: function load() {\n          return that._dataSource.load();\n        },\n        updateLoading: function updateLoading() {\n          _updateLoading(that);\n        },\n        itemsCount: function itemsCount() {\n          return that.itemsCount(true);\n        },\n        items: function items() {\n          return that._dataSource.items();\n        },\n        viewportItems: function viewportItems(items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function onChanged(e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function changingDuration(e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      };\n    },\n    _handleLoadingChanged: function _handleLoadingChanged(isLoading) {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function _handleLoadError() {\n      if (!this.option(NEW_SCROLLING_MODE)) {\n        this._isLoading = false;\n        this.loadingChanged.fire(false);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataChanged: function _handleDataChanged(e) {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function _customizeRemoteOperations(options, operationTypes) {\n      if (isVirtualMode(this) && !operationTypes.reload && (operationTypes.skip || this.option(NEW_SCROLLING_MODE)) && this._renderTime < this.option(\"scrolling.renderingThreshold\")) {\n        options.delay = void 0;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    items: function items() {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        return this._dataSource.items();\n      }\n\n      return this._items;\n    },\n    itemsCount: function itemsCount(isBase) {\n      if (isBase) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function load(loadOptions) {\n      if (this.option(NEW_SCROLLING_MODE) || loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function isLoading() {\n      return this._isLoading;\n    },\n    isLoaded: function isLoaded() {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function resetPagesCache(isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function _changeRowExpandCore() {\n      var result = this.callBase.apply(this, arguments);\n\n      if (this.option(NEW_SCROLLING_MODE)) {\n        return result;\n      }\n\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function reload() {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (!this.option(NEW_SCROLLING_MODE) && virtualScrollController) {\n        var d = new Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController.getDelayDeferred();\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function refresh(options, operationTypes) {\n      if (!this.option(NEW_SCROLLING_MODE)) {\n        var storeLoadOptions = options.storeLoadOptions;\n        var dataSource = this._dataSource;\n\n        if (operationTypes.reload) {\n          this._virtualScrollController.reset();\n\n          dataSource.items().length = 0;\n          this._isLoaded = false;\n\n          _updateLoading(this);\n\n          this._isLoaded = true;\n\n          if (isAppendMode(this)) {\n            this.pageIndex(0);\n            dataSource.pageIndex(0);\n            storeLoadOptions.pageIndex = 0;\n            options.pageIndex = 0;\n            storeLoadOptions.skip = 0;\n          } else {\n            dataSource.pageIndex(this.pageIndex());\n\n            if (dataSource.paginate()) {\n              options.pageIndex = this.pageIndex();\n              storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n            }\n          }\n        } else if (isAppendMode(this) && storeLoadOptions.skip && this._skipCorrection < 0) {\n          storeLoadOptions.skip += this._skipCorrection;\n        }\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    dispose: function dispose() {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    },\n    loadPageCount: function loadPageCount(count) {\n      if (!isDefined(count)) {\n        return this._loadPageCount;\n      }\n\n      this._loadPageCount = count;\n    },\n    _handleDataLoading: function _handleDataLoading(options) {\n      var loadPageCount = this.loadPageCount();\n      options.loadPageCount = loadPageCount;\n\n      if (this.option(NEW_SCROLLING_MODE) && loadPageCount > 1) {\n        options.storeLoadOptions.take = loadPageCount * this.pageSize();\n      }\n\n      this.callBase.apply(this, arguments);\n    }\n  };\n  [\"beginPageIndex\", \"endPageIndex\"].forEach(function (name) {\n    result[name] = function () {\n      if (this.option(NEW_SCROLLING_MODE)) {\n        var dataSource = this._dataSource;\n        return dataSource.pageIndex.apply(dataSource, arguments);\n      }\n\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"pageIndex\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function removeEmptyRows($emptyRows, className) {\n    var tBodies = $emptyRows.toArray().map(function (row) {\n      return $(row).parent(\".\" + className).get(0);\n    }).filter(function (row) {\n      return row;\n    });\n\n    if (tBodies.length) {\n      $emptyRows = $(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function init() {\n      var _this = this;\n\n      var _dataController$state;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(function () {\n        _this.scrollToPage(dataController.pageIndex());\n      });\n      dataController.dataSourceChanged.add(function () {\n        !_this._scrollTop && _this._scrollToCurrentPageOnResize();\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(function () {\n        _this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function _scrollToCurrentPageOnResize() {\n      var _this2 = this;\n\n      var dataController = this.getController(\"data\");\n\n      if (dataController.pageIndex() > 0) {\n        var resizeHandler = function resizeHandler() {\n          _this2.resizeCompleted.remove(resizeHandler);\n\n          _this2.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function scrollToPage(pageIndex) {\n      var dataController = this._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index < itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      this.scrollTo({\n        y: scrollPosition,\n        x: this._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function renderDelayedTemplates(e) {\n      this._updateContentPosition(true);\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function _renderCore(e) {\n      var that = this;\n      var startRenderTime = new Date();\n      that.callBase.apply(that, arguments);\n      var dataSource = that._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = that._dataController.viewportSize() || 20;\n\n        if (isVirtualRowRendering(that) && itemCount > 0) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n    },\n    _getRowElements: function _getRowElements(tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _removeRowsElements: function _removeRowsElements(contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(function (rowElement) {\n        var $rowElement = $(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _restoreErrorRow: function _restoreErrorRow(contentTable) {\n      var editingController = this.getController(\"editing\");\n      editingController && editingController.hasChanges() && this._getRowElements(contentTable).each(function (_, item) {\n        var rowOptions = $(item).data(\"options\");\n\n        if (rowOptions) {\n          var change = editingController.getChangeByKey(rowOptions.key);\n          change && editingController._showErrorRow(change);\n        }\n      });\n    },\n    _updateContent: function _updateContent(tableElement, change) {\n      var $freeSpaceRowElements;\n\n      var contentElement = this._findContentElement();\n\n      var changeType = change && change.changeType;\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        var contentTable = contentElement.children().first();\n\n        var $tBodies = this._getBodies(tableElement);\n\n        if (1 === $tBodies.length) {\n          this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n\n        tableElement.remove();\n        $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n        if (change.removeCount) {\n          this._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n\n        this._restoreErrorRow(contentTable);\n      } else {\n        this.callBase.apply(this, arguments);\n      }\n\n      this._updateBottomLoading();\n    },\n    _addVirtualRow: function _addVirtualRow($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _getRowHeights: function _getRowHeights() {\n      var rowHeights = this._getRowElements(this._tableElement).toArray().map(function (row) {\n        return getBoundingRect(row).height;\n      });\n\n      return rowHeights;\n    },\n    _correctRowHeights: function _correctRowHeights(rowHeights) {\n      var dataController = this._dataController;\n      var dataSource = dataController._dataSource;\n      var correctedRowHeights = [];\n      var visibleRows = dataController.getVisibleRows();\n      var itemSize = 0;\n      var firstCountableItem = true;\n\n      for (var i = 0; i < rowHeights.length; i++) {\n        var currentItem = visibleRows[i];\n\n        if (!isDefined(currentItem)) {\n          continue;\n        }\n\n        if (isItemCountableByDataSource(currentItem, dataSource)) {\n          if (firstCountableItem) {\n            firstCountableItem = false;\n          } else {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n        }\n\n        itemSize += rowHeights[i];\n      }\n\n      itemSize > 0 && correctedRowHeights.push(itemSize);\n      return correctedRowHeights;\n    },\n    _updateContentPosition: function _updateContentPosition(isRender) {\n      var _this3 = this;\n\n      var dataController = this._dataController;\n      var rowHeight = this._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (isVirtualMode(this) || isVirtualRowRendering(this)) {\n        if (!isRender) {\n          var rowHeights = this._getRowHeights();\n\n          var correctedRowHeights = this._correctRowHeights(rowHeights);\n\n          dataController.setContentItemSizes(correctedRowHeights);\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = this.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each(function (index, element) {\n          var isFixed = index > 0;\n          _this3._isFixedTableRendering = isFixed;\n\n          _this3._addVirtualRow($(element), isFixed, \"top\", top);\n\n          _this3._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n\n          _this3._isFixedTableRendering = false;\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function _isTableLinesDisplaysCorrect(table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function _isColumnElementsEqual($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        each($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _renderVirtualTableContent: function _renderVirtualTableContent(container, height) {\n      var columns = this._columnsController.getVisibleColumns();\n\n      var html = this._createColGroup(columns).prop(\"outerHTML\");\n\n      var freeSpaceCellsHtml = \"\";\n      var columnLinesClass = this.option(\"showColumnLines\") ? COLUMN_LINES_CLASS : \"\";\n\n      var createFreeSpaceRowHtml = function createFreeSpaceRowHtml(height) {\n        return \"<tr style='height:\" + height + \"px;' class='\" + FREESPACE_CLASS + \" \" + ROW_CLASS + \" \" + columnLinesClass + \"' >\" + freeSpaceCellsHtml + \"</tr>\";\n      };\n\n      for (var i = 0; i < columns.length; i++) {\n        var classes = this._getCellClasses(columns[i]);\n\n        var classString = classes.length ? \" class='\" + classes.join(\" \") + \"'\" : \"\";\n        freeSpaceCellsHtml += \"<td\" + classString + \"/>\";\n      }\n\n      while (height > PIXELS_LIMIT) {\n        html += createFreeSpaceRowHtml(PIXELS_LIMIT);\n        height -= PIXELS_LIMIT;\n      }\n\n      html += createFreeSpaceRowHtml(height);\n      container.addClass(this.addWidgetPrefix(TABLE_CLASS));\n      container.html(html);\n    },\n    _getCellClasses: function _getCellClasses(column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function _findBottomLoadPanel($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function _updateBottomLoading() {\n      var scrollingMode = this.option(\"scrolling.mode\");\n      var virtualMode = scrollingMode === SCROLLING_MODE_VIRTUAL;\n      var appendMode = scrollingMode === SCROLLING_MODE_INFINITE;\n      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = this._findContentElement();\n\n      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement);\n        }\n      } else if (bottomLoadPanelElement) {\n        bottomLoadPanelElement.remove();\n      }\n    },\n    _handleScroll: function _handleScroll(e) {\n      var that = this;\n\n      if (that._hasHeight && that._rowHeight) {\n        that._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      that.callBase.apply(that, arguments);\n    },\n    _needUpdateRowHeight: function _needUpdateRowHeight(itemsCount) {\n      var that = this;\n      return that.callBase.apply(that, arguments) || itemsCount > 0 && that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE && that.option(\"scrolling.rowRenderingMode\") !== SCROLLING_MODE_VIRTUAL;\n    },\n    _updateRowHeight: function _updateRowHeight() {\n      this.callBase.apply(this, arguments);\n\n      if (this._rowHeight) {\n        this._updateContentPosition();\n\n        var viewportHeight = this._hasHeight ? this.element().outerHeight() : $(getWindow()).outerHeight();\n        var dataController = this._dataController;\n        dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n\n        if (this.option(NEW_SCROLLING_MODE) && !isDefined(dataController._loadViewportParams)) {\n          var viewportSize = dataController.viewportSize();\n          var viewportIsNotFilled = viewportSize > dataController._items.length && dataController.totalItemsCount() > viewportSize;\n          viewportIsNotFilled && dataController.loadViewport();\n        }\n      }\n    },\n    updateFreeSpaceRowHeight: function updateFreeSpaceRowHeight() {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function setLoading(isLoading, messageText) {\n      var dataController = this._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n\n      if (this.option(NEW_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n        return;\n      }\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      this.callBase.call(this, isLoading, messageText);\n    },\n    _resizeCore: function _resizeCore() {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && $element.closest(getWindow().document).length) {\n        that._windowScroll = subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      that.loadIfNeed();\n    },\n    loadIfNeed: function loadIfNeed() {\n      var _dataController$loadI;\n\n      var dataController = this._dataController;\n      null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController);\n    },\n    setColumnWidths: function setColumnWidths(widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? $(scrollable.content()) : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    dispose: function dispose() {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nexport var virtualScrollingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\",\n        loadTwoPagesOnStart: false,\n        newMode: false,\n        minGap: 1\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function _refreshDataSource() {\n            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          getRowPageSize: function getRowPageSize() {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function reload() {\n            var _this4 = this;\n\n            var rowsScrollController = this._rowsScrollController || this._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(function () {\n              if (isVirtualMode(_this4) || isVirtualRowRendering(_this4)) {\n                var rowIndexOffset = _this4.getRowIndexOffset();\n\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = _this4.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n\n                var isSortingOperation = _this4.dataSource().operationTypes().sorting;\n\n                if (scrollable && !isSortingOperation) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var allowedTopOffset = browser.mozilla || browser.msie ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + $rowElement.outerHeight() * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function initVirtualRows() {\n            var _this5 = this;\n\n            var virtualRowsRendering = isVirtualRowRendering(this);\n\n            if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || !this.option(\"scrolling.rowPageSize\")) {\n              this._visibleItems = null;\n              this._rowsScrollController = null;\n              return;\n            }\n\n            var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n            this._uncountableItemCount = 0;\n            this._visibleItems = this.option(NEW_SCROLLING_MODE) ? null : [];\n            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n            this._viewportChanging = false;\n\n            this._rowsScrollController.positionChanged.add(function () {\n              var _this$_dataSource;\n\n              if (_this5.option(NEW_SCROLLING_MODE)) {\n                _this5._viewportChanging = true;\n\n                _this5.loadViewport();\n\n                _this5._viewportChanging = false;\n                return;\n              }\n\n              null === (_this$_dataSource = _this5._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.setViewportItemIndex(_this5._rowsScrollController.getViewportItemIndex());\n            });\n\n            if (this.isLoaded() && !this.option(NEW_SCROLLING_MODE)) {\n              this._rowsScrollController.load();\n            }\n          },\n          isViewportChanging: function isViewportChanging() {\n            return this._viewportChanging;\n          },\n          _getRowsScrollDataOptions: function _getRowsScrollDataOptions() {\n            var that = this;\n\n            var isItemCountable = function isItemCountable(item) {\n              return isItemCountableByDataSource(item, that._dataSource);\n            };\n\n            return {\n              pageSize: function pageSize() {\n                return that.getRowPageSize();\n              },\n              totalItemsCount: function totalItemsCount() {\n                if (that.option(NEW_SCROLLING_MODE)) {\n                  return that.totalItemsCount() + that._uncountableItemCount;\n                }\n\n                return isVirtualMode(that) ? that.totalItemsCount() : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function hasKnownLastPage() {\n                return true;\n              },\n              pageIndex: function pageIndex(index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function isLoading() {\n                return that.isLoading();\n              },\n              pageCount: function pageCount() {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function load() {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!this.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(function (change) {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach(function (item, index) {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function updateLoading() {},\n              itemsCount: function itemsCount() {\n                return this.items().filter(isItemCountable).length;\n              },\n              correctCount: function correctCount(items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, function (item, isNextAfterLast, fromEnd) {\n                  if (item.isNewRow) {\n                    return isNextAfterLast && !fromEnd;\n                  }\n\n                  if (isNextAfterLast && fromEnd) {\n                    return !item.isNewRow;\n                  }\n\n                  return isItemCountable(item);\n                });\n              },\n              items: function items(countableOnly) {\n                var dataSource = that.dataSource();\n                var virtualItemsCount = dataSource && dataSource.virtualItemsCount();\n                var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                var rowPageSize = that.getRowPageSize();\n                var skip = that._rowPageIndex * rowPageSize - begin;\n                var take = rowPageSize;\n                var result = that._items;\n\n                if (skip < 0) {\n                  return [];\n                }\n\n                if (skip) {\n                  skip = this.correctCount(result, skip);\n                  result = result.slice(skip);\n                }\n\n                if (take) {\n                  take = this.correctCount(result, take);\n                  result = result.slice(0, take);\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function viewportItems(items) {\n                if (items && !that.option(NEW_SCROLLING_MODE)) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function onChanged() {},\n              changingDuration: function changingDuration(e) {\n                var dataSource = that.dataSource();\n\n                if (dataSource.isLoading() && !that.option(NEW_SCROLLING_MODE)) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            };\n          },\n          _updateItemsCore: function _updateItemsCore(change) {\n            var _this6 = this;\n\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE) && isVirtualRowRendering(this)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach(function (rowIndex, index) {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else if (\"insert\" === changeType) {\n                      visibleItems.splice(rowIndex, 0, newItem);\n                    } else if (\"remove\" === changeType) {\n                      visibleItems.splice(rowIndex, 1);\n                    }\n                  });\n                } else {\n                  visibleItems.forEach(function (item, index) {\n                    visibleItems[index] = _this6._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                updateItemIndices(visibleItems);\n              }\n            }\n          },\n          _updateLoadViewportParams: function _updateLoadViewportParams() {\n            this._loadViewportParams = this._rowsScrollController.getViewportParams();\n          },\n          _afterProcessItems: function _afterProcessItems(items, change) {\n            var _this7 = this;\n\n            this._uncountableItemCount = 0;\n\n            if (isDefined(this._loadViewportParams)) {\n              this._uncountableItemCount = items.filter(function (item) {\n                return !isItemCountableByDataSource(item, _this7._dataSource);\n              }).length;\n\n              this._updateLoadViewportParams();\n\n              var _this$getLoadPagePara = this.getLoadPageParams(),\n                  skipForCurrentPage = _this$getLoadPagePara.skipForCurrentPage;\n\n              change.repaintChangesOnly = \"refresh\" === change.changeType;\n              return items.slice(skipForCurrentPage, skipForCurrentPage + this._loadViewportParams.take);\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _applyChange: function _applyChange(change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function items(allItems) {\n            return allItems ? this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function getRowIndexDelta() {\n            var visibleItems = this._visibleItems;\n            var delta = 0;\n\n            if (visibleItems && visibleItems[0]) {\n              delta = this._items.indexOf(visibleItems[0]);\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function getRowIndexOffset(byLoadedRows) {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController && !byLoadedRows) {\n              if (this.option(NEW_SCROLLING_MODE) && isDefined(this._loadViewportParams)) {\n                var _this$getLoadPagePara2 = this.getLoadPageParams(),\n                    skipForCurrentPage = _this$getLoadPagePara2.skipForCurrentPage,\n                    pageIndex = _this$getLoadPagePara2.pageIndex;\n\n                offset = pageIndex * this.pageSize() + skipForCurrentPage;\n              } else {\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n              }\n            } else if (\"virtual\" === this.option(\"scrolling.mode\") && dataSource) {\n              offset = dataSource.beginPageIndex() * dataSource.pageSize();\n            }\n\n            return offset;\n          },\n          viewportSize: function viewportSize() {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportItemSize: function viewportItemSize() {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function setViewportPosition() {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentItemSizes: function setContentItemSizes(sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n          },\n          getLoadPageParams: function getLoadPageParams() {\n            var viewportParams = this._loadViewportParams;\n            var pageIndex = Math.floor(viewportParams.skip / this.pageSize());\n            var skipForCurrentPage = viewportParams.skip - pageIndex * this.pageSize();\n            var loadPageCount = Math.ceil((skipForCurrentPage + viewportParams.take) / this.pageSize());\n            return {\n              pageIndex: pageIndex,\n              loadPageCount: loadPageCount,\n              skipForCurrentPage: skipForCurrentPage\n            };\n          },\n          loadViewport: function loadViewport() {\n            if (isVirtualMode(this)) {\n              this._updateLoadViewportParams();\n\n              var _this$getLoadPagePara3 = this.getLoadPageParams(),\n                  pageIndex = _this$getLoadPagePara3.pageIndex,\n                  loadPageCount = _this$getLoadPagePara3.loadPageCount;\n\n              var dataSourceAdapter = this._dataSource;\n\n              if (pageIndex !== dataSourceAdapter.pageIndex() || loadPageCount !== dataSourceAdapter.loadPageCount()) {\n                dataSourceAdapter.pageIndex(pageIndex);\n                dataSourceAdapter.loadPageCount(loadPageCount);\n                this.load();\n              } else if (!this._isLoading) {\n                this.updateItems();\n              }\n            }\n          },\n          loadIfNeed: function loadIfNeed() {\n            if (this.option(NEW_SCROLLING_MODE)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function getItemSize() {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function getItemSizes() {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function getContentOffset() {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function refresh(options) {\n            var dataSource = this._dataSource;\n\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function dispose() {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          },\n          topItemIndex: function topItemIndex() {\n            var _this$_loadViewportPa;\n\n            return null === (_this$_loadViewportPa = this._loadViewportParams) || void 0 === _this$_loadViewportPa ? void 0 : _this$_loadViewportPa.skip;\n          },\n          bottomItemIndex: function bottomItemIndex() {\n            var viewportParams = this._loadViewportParams;\n            return viewportParams && viewportParams.skip + viewportParams.take;\n          }\n        };\n        gridCoreUtils.proxyMethod(members, \"virtualItemsCount\");\n        gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\n        gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\n        return members;\n      }(),\n      resizing: {\n        resize: function resize() {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (isVirtualMode(that) || isVirtualRowRendering(that)) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function dispose() {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}