{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Guid from \"../../core/guid\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { isDefined, isEmptyObject, isObject, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport browser from \"../../core/utils/browser\";\nimport { triggerResizeEvent, triggerShownEvent } from \"../../events/visibility_change\";\nimport { getPublicElement } from \"../../core/element\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Editor from \"../editor/editor\";\nimport { defaultScreenFactorFunc, getCurrentScreenFactor, hasWindow } from \"../../core/utils/window\";\nimport ValidationEngine from \"../validation_engine\";\nimport { default as FormItemsRunTimeInfo } from \"./ui.form.items_runtime_info\";\nimport TabPanel from \"../tab_panel\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isMaterial } from \"../themes\";\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\nimport \"./ui.form.layout_manager\";\nimport { concatPaths, createItemPathByIndex, getFullOptionName, getOptionNameFromFullName, tryGetTabPath, getTextWithoutSpaces, isExpectedItem, isFullPathContainsTabs, getItemPath } from \"./ui.form.utils\";\nimport \"../validation_summary\";\nimport \"../validation_group\";\nimport { FORM_CLASS, FIELD_ITEM_CLASS, FIELD_ITEM_LABEL_TEXT_CLASS, FORM_GROUP_CLASS, FORM_GROUP_CONTENT_CLASS, FIELD_ITEM_CONTENT_HAS_GROUP_CLASS, FIELD_ITEM_CONTENT_HAS_TABS_CLASS, FORM_GROUP_WITH_CAPTION_CLASS, FORM_GROUP_CAPTION_CLASS, HIDDEN_LABEL_CLASS, FIELD_ITEM_LABEL_CLASS, FIELD_ITEM_LABEL_CONTENT_CLASS, FIELD_ITEM_TAB_CLASS, FORM_FIELD_ITEM_COL_CLASS, GROUP_COL_COUNT_CLASS, GROUP_COL_COUNT_ATTR, FIELD_ITEM_CONTENT_CLASS, FORM_VALIDATION_SUMMARY, ROOT_SIMPLE_ITEM_CLASS } from \"./constants\";\nimport { TOOLBAR_CLASS } from \"../toolbar/constants\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\nvar Form = Widget.inherit({\n  _init: function _init() {\n    this.callBase();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._groupsColCount = [];\n\n    this._attachSyncSubscriptions();\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      formID: \"dx-\" + new Guid(),\n      formData: {},\n      colCount: 1,\n      screenByWidth: defaultScreenFactorFunc,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      alignRootItemLabels: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      items: void 0,\n      scrollingEnabled: false,\n      validationGroup: void 0,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return isMaterial();\n      },\n      options: {\n        showColonAfterLabel: false,\n        labelLocation: \"top\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  },\n  _getGroupColCount: function _getGroupColCount($element) {\n    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));\n  },\n  _createHiddenElement: function _createHiddenElement(rootLayoutManager) {\n    this._$hiddenElement = $(\"<div>\").addClass(WIDGET_CLASS).addClass(HIDDEN_LABEL_CLASS).appendTo(\"body\");\n\n    var $hiddenLabel = rootLayoutManager._renderLabel({\n      text: \" \",\n      location: this._labelLocation()\n    }).appendTo(this._$hiddenElement);\n\n    this._hiddenLabelText = $hiddenLabel.find(\".\" + FIELD_ITEM_LABEL_TEXT_CLASS)[0];\n  },\n  _removeHiddenElement: function _removeHiddenElement() {\n    this._$hiddenElement.remove();\n\n    this._hiddenLabelText = null;\n  },\n  _getLabelWidthByText: function _getLabelWidthByText(text) {\n    this._hiddenLabelText.innerHTML = text;\n    return this._hiddenLabelText.offsetWidth;\n  },\n  _getLabelsSelectorByCol: function _getLabelsSelectorByCol(index, options) {\n    options = options || {};\n    var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\n    var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\" + FIELD_ITEM_TAB_CLASS + \")\" : \"\";\n    var childLabelContentSelector = \"> .\" + FIELD_ITEM_LABEL_CLASS + \" > .\" + FIELD_ITEM_LABEL_CONTENT_CLASS;\n    return \".\" + fieldItemClass + cssExcludeTabbedSelector + childLabelContentSelector;\n  },\n  _getLabelText: function _getLabelText(labelText) {\n    var length = labelText.children.length;\n    var child;\n    var result = \"\";\n    var i;\n\n    for (i = 0; i < length; i++) {\n      child = labelText.children[i];\n      result += !isEmpty(child.innerText) ? child.innerText : child.innerHTML;\n    }\n\n    return result;\n  },\n  _applyLabelsWidthByCol: function _applyLabelsWidthByCol($container, index, options) {\n    var $labelTexts = $container.find(this._getLabelsSelectorByCol(index, options));\n    var $labelTextsLength = $labelTexts.length;\n    var labelWidth;\n    var i;\n    var maxWidth = 0;\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      labelWidth = this._getLabelWidthByText(this._getLabelText($labelTexts[i]));\n\n      if (labelWidth > maxWidth) {\n        maxWidth = labelWidth;\n      }\n    }\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      $labelTexts[i].style.width = maxWidth + \"px\";\n    }\n  },\n  _applyLabelsWidth: function _applyLabelsWidth($container, excludeTabbed, inOneColumn, colCount) {\n    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n    var i;\n\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions);\n    }\n  },\n  _getGroupElementsInColumn: function _getGroupElementsInColumn($container, columnIndex, colCount) {\n    var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\n    var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\n    return $container.find(groupSelector);\n  },\n  _applyLabelsWidthWithGroups: function _applyLabelsWidthWithGroups($container, colCount, excludeTabbed) {\n    if (true === this.option(\"alignRootItemLabels\")) {\n      this._alignRootSimpleItems($container, colCount, excludeTabbed);\n    }\n\n    var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed);\n    } else {\n      var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\n      var i;\n\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed);\n      }\n    }\n  },\n  _alignRootSimpleItems: function _alignRootSimpleItems($container, colCount, excludeTabbed) {\n    var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\n\n    for (var colIndex = 0; colIndex < colCount; colIndex++) {\n      this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed);\n    }\n  },\n  _applyLabelsWidthWithNestedGroups: function _applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed) {\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n    var colIndex;\n    var groupsColIndex;\n    var groupColIndex;\n    var $groupsByCol;\n\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions);\n\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n\n        var groupColCount = this._getGroupColCount($groupsByCol);\n\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions);\n        }\n      }\n    }\n  },\n  _labelLocation: function _labelLocation() {\n    return this.option(\"labelLocation\");\n  },\n  _alignLabelsInColumn: function _alignLabelsInColumn(_ref) {\n    var layoutManager = _ref.layoutManager,\n        inOneColumn = _ref.inOneColumn,\n        $container = _ref.$container,\n        excludeTabbed = _ref.excludeTabbed,\n        items = _ref.items;\n\n    if (!hasWindow() || \"top\" === this._labelLocation()) {\n      return;\n    }\n\n    this._createHiddenElement(layoutManager);\n\n    if (inOneColumn) {\n      this._applyLabelsWidth($container, excludeTabbed, true);\n    } else if (this._checkGrouping(items)) {\n      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed);\n    } else {\n      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount());\n    }\n\n    this._removeHiddenElement();\n  },\n  _prepareFormData: function _prepareFormData() {\n    if (!isDefined(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    ValidationEngine.addGroup(this._getValidationGroup());\n\n    this._clearCachedInstances();\n\n    this._prepareFormData();\n\n    this.$element().addClass(FORM_CLASS);\n    this.callBase();\n    this.setAria(\"role\", \"form\", this.$element());\n\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n\n    this._renderLayout();\n\n    this._renderValidationSummary();\n\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n  },\n  _getCurrentScreenFactor: function _getCurrentScreenFactor() {\n    return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n  },\n  _clearCachedInstances: function _clearCachedInstances() {\n    this._itemsRunTimeInfo.clear();\n\n    this._cachedLayoutManagers = [];\n  },\n  _alignLabels: function _alignLabels(layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n\n    triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)));\n  },\n  _clean: function _clean() {\n    this.callBase();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n  },\n  _renderScrollable: function _renderScrollable() {\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new Scrollable(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  },\n  _getContent: function _getContent() {\n    return this.option(\"scrollingEnabled\") ? this._scrollable.$content() : this.$element();\n  },\n  _renderValidationSummary: function _renderValidationSummary() {\n    var $validationSummary = this.$element().find(\".\" + FORM_VALIDATION_SUMMARY);\n\n    if ($validationSummary.length > 0) {\n      $validationSummary.remove();\n    }\n\n    if (this.option(\"showValidationSummary\")) {\n      var _$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\n\n      this._validationSummary = _$validationSummary.dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).dxValidationSummary(\"instance\");\n    }\n  },\n  _prepareItems: function _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\n    if (items) {\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\n\n        var guid = this._itemsRunTimeInfo.add({\n          item: item,\n          itemIndex: i,\n          path: path\n        });\n\n        if (isString(item)) {\n          item = {\n            dataField: item\n          };\n        }\n\n        if (isObject(item)) {\n          var itemCopy = extend({}, item);\n          itemCopy.guid = guid;\n\n          this._tryPrepareGroupItem(itemCopy);\n\n          this._tryPrepareTabbedItem(itemCopy, path);\n\n          this._tryPrepareItemTemplate(itemCopy);\n\n          if (parentIsTabbedItem) {\n            itemCopy.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n\n          if (itemCopy.items) {\n            itemCopy.items = this._prepareItems(itemCopy.items, parentIsTabbedItem, path);\n          }\n\n          result.push(itemCopy);\n        } else {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  },\n  _tryPrepareGroupItem: function _tryPrepareGroupItem(item) {\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\n\n      if (item.template) {\n        item.groupContentTemplate = this._getTemplate(item.template);\n      }\n\n      item.template = this._itemGroupTemplate.bind(this, item);\n    }\n  },\n  _tryPrepareTabbedItem: function _tryPrepareTabbedItem(item, path) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true, path, true);\n    }\n  },\n  _tryPrepareItemTemplate: function _tryPrepareItemTemplate(item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  },\n  _checkGrouping: function _checkGrouping(items) {\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  },\n  _renderLayout: function _renderLayout() {\n    var that = this;\n    var items = that.option(\"items\");\n\n    var $content = that._getContent();\n\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager(items, $content, {\n      isRoot: true,\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged: function onLayoutChanged(inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady: function onContentReady(e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    });\n  },\n  _tryGetItemsForTemplate: function _tryGetItemsForTemplate(item) {\n    return item.items || [];\n  },\n  _itemTabbedTemplate: function _itemTabbedTemplate(item, e, $container) {\n    var _this = this;\n\n    var $tabPanel = $(\"<div>\").appendTo($container);\n    var tabPanelOptions = extend({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: function onItemRendered(args) {\n        return triggerShownEvent(args.itemElement);\n      },\n      itemTemplate: function itemTemplate(itemData, e, container) {\n        var $container = $(container);\n        var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\n\n        var layoutManager = _this._renderLayoutManager(_this._tryGetItemsForTemplate(itemData), $container, {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: _this.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: function onLayoutChanged(inOneColumn) {\n            _this._alignLabelsInColumn({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        });\n\n        if (_this._itemsRunTimeInfo) {\n          _this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\n            layoutManager: layoutManager\n          });\n        }\n\n        if (alignItemLabels) {\n          _this._alignLabelsInColumn({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n\n    var tryUpdateTabPanelInstance = function tryUpdateTabPanelInstance(items, instance) {\n      if (Array.isArray(items)) {\n        items.forEach(function (item) {\n          return _this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n            widgetInstance: instance\n          });\n        });\n      }\n    };\n\n    var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\n\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\n    tabPanel.on(\"optionChanged\", function (e) {\n      if (\"dataSource\" === e.fullName) {\n        tryUpdateTabPanelInstance(e.value, e.component);\n      }\n    });\n    tryUpdateTabPanelInstance([{\n      guid: item.guid\n    }].concat(_toConsumableArray(item.tabs)), tabPanel);\n  },\n  _itemGroupTemplate: function _itemGroupTemplate(item, e, $container) {\n    var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\n    var colCount;\n    var layoutManager;\n\n    if (item.caption) {\n      $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group);\n    }\n\n    var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n\n    if (item.groupContentTemplate) {\n      var data = {\n        formData: this.option(\"formData\"),\n        component: this\n      };\n      item.groupContentTemplate.render({\n        model: data,\n        container: getPublicElement($groupContent)\n      });\n    } else {\n      layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(item), $groupContent, {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      });\n      this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n        layoutManager: layoutManager\n      });\n      colCount = layoutManager._getColCount();\n\n      if (-1 === inArray(colCount, this._groupsColCount)) {\n        this._groupsColCount.push(colCount);\n      }\n\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n      $group.attr(GROUP_COL_COUNT_ATTR, colCount);\n    }\n  },\n  _renderLayoutManager: function _renderLayoutManager(items, $rootElement, options) {\n    var $element = $(\"<div>\");\n    var that = this;\n\n    var config = that._getLayoutManagerConfig(items, options);\n\n    var baseColCountByScreen = {\n      lg: options.colCount,\n      md: options.colCount,\n      sm: options.colCount,\n      xs: 1\n    };\n\n    that._cachedColCountOptions.push({\n      colCountByScreen: extend(baseColCountByScreen, options.colCountByScreen)\n    });\n\n    $element.appendTo($rootElement);\n\n    var instance = that._createComponent($element, \"dxLayoutManager\", config);\n\n    instance.on(\"autoColCountChanged\", function () {\n      that._refresh();\n    });\n\n    that._cachedLayoutManagers.push(instance);\n\n    return instance;\n  },\n  _getValidationGroup: function _getValidationGroup() {\n    return this.option(\"validationGroup\") || this;\n  },\n  _getLayoutManagerConfig: function _getLayoutManagerConfig(items, options) {\n    var _this2 = this;\n\n    var baseConfig = {\n      form: this,\n      isRoot: options.isRoot,\n      validationGroup: this._getValidationGroup(),\n      showRequiredMark: this.option(\"showRequiredMark\"),\n      showOptionalMark: this.option(\"showOptionalMark\"),\n      requiredMark: this.option(\"requiredMark\"),\n      optionalMark: this.option(\"optionalMark\"),\n      requiredMessage: this.option(\"requiredMessage\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      layoutData: this.option(\"formData\"),\n      labelLocation: this.option(\"labelLocation\"),\n      customizeItem: this.option(\"customizeItem\"),\n      minColWidth: this.option(\"minColWidth\"),\n      showColonAfterLabel: this.option(\"showColonAfterLabel\"),\n      onEditorEnterKey: this.option(\"onEditorEnterKey\"),\n      onFieldDataChanged: function onFieldDataChanged(args) {\n        if (!_this2._isDataUpdating) {\n          _this2._triggerOnFieldDataChanged(args);\n        }\n      },\n      validationBoundary: this.option(\"scrollingEnabled\") ? this.$element() : void 0\n    };\n    return extend(baseConfig, {\n      items: items,\n      onContentReady: function onContentReady(args) {\n        _this2._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n\n        options.onContentReady && options.onContentReady(args);\n      },\n      onDisposing: function onDisposing(_ref2) {\n        var component = _ref2.component;\n        var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\n\n        _this2._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);\n      },\n      colCount: options.colCount,\n      alignItemLabels: options.alignItemLabels,\n      cssItemClass: options.cssItemClass,\n      colCountByScreen: options.colCountByScreen,\n      onLayoutChanged: options.onLayoutChanged,\n      width: options.width\n    });\n  },\n  _createComponent: function _createComponent($element, type, config) {\n    config = config || {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return this.callBase($element, type, config);\n  },\n  _attachSyncSubscriptions: function _attachSyncSubscriptions() {\n    var that = this;\n    that.on(\"optionChanged\", function (args) {\n      var optionFullName = args.fullName;\n\n      if (\"formData\" === optionFullName) {\n        if (!isDefined(args.value)) {\n          that._options.silent(\"formData\", args.value = {});\n        }\n\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n\n      if (that._cachedLayoutManagers.length) {\n        each(that._cachedLayoutManagers, function (index, layoutManager) {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var rootNameOfComplexOption = this._getRootLevelOfExpectedComplexOption(args.fullName, [\"formData\", \"items\"]);\n\n    if (rootNameOfComplexOption) {\n      this._customHandlerOfComplexOption(args, rootNameOfComplexOption);\n\n      return;\n    }\n\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else if (isEmptyObject(args.value)) {\n          this._resetValues();\n        }\n\n        break;\n\n      case \"items\":\n      case \"colCount\":\n      case \"onFieldDataChanged\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"alignRootItemLabels\":\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._rootLayoutManager.option(args.name, args.value);\n\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        if (args.value) {\n          triggerShownEvent(this.$element());\n        }\n\n        break;\n\n      case \"validationGroup\":\n        ValidationEngine.removeGroup(args.previousValue || this);\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getRootLevelOfExpectedComplexOption: function _getRootLevelOfExpectedComplexOption(fullOptionName, expectedRootNames) {\n    var splitFullName = fullOptionName.split(\".\");\n    var result;\n\n    if (splitFullName.length > 1) {\n      var i;\n      var rootOptionName = splitFullName[0];\n\n      for (i = 0; i < expectedRootNames.length; i++) {\n        if (-1 !== rootOptionName.search(expectedRootNames[i])) {\n          result = expectedRootNames[i];\n        }\n      }\n    }\n\n    return result;\n  },\n  _tryCreateItemOptionAction: function _tryCreateItemOptionAction(optionName, item, value, previousValue, itemPath) {\n    if (\"tabs\" === optionName) {\n      this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\n\n      value = this._prepareItems(value, true, itemPath, true);\n    }\n\n    return tryCreateItemOptionAction(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  },\n  _tryExecuteItemOptionAction: function _tryExecuteItemOptionAction(action) {\n    return action && action.tryExecute();\n  },\n  _updateValidationGroupAndSummaryIfNeeded: function _updateValidationGroupAndSummaryIfNeeded(fullName) {\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\n      ValidationEngine.addGroup(this._getValidationGroup());\n\n      if (this.option(\"showValidationSummary\")) {\n        this._validationSummary && this._validationSummary._initGroupRegistration();\n      }\n    }\n  },\n  _setLayoutManagerItemOption: function _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\n    var _this3 = this;\n\n    if (this._updateLockCount > 0) {\n      !layoutManager._updateLockCount && layoutManager.beginUpdate();\n\n      var key = this._itemsRunTimeInfo.getKeyByPath(path);\n\n      this.postponedOperations.add(key, function () {\n        !layoutManager._disposed && layoutManager.endUpdate();\n        return new Deferred().resolve();\n      });\n    }\n\n    var contentReadyHandler = function contentReadyHandler(e) {\n      e.component.off(\"contentReady\", contentReadyHandler);\n\n      if (isFullPathContainsTabs(path)) {\n        var tabPath = tryGetTabPath(path);\n\n        var tabLayoutManager = _this3._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(tabPath);\n\n        _this3._alignLabelsInColumn({\n          items: tabLayoutManager.option(\"items\"),\n          layoutManager: tabLayoutManager,\n          $container: tabLayoutManager.$element(),\n          inOneColumn: tabLayoutManager.isSingleColumnMode()\n        });\n      } else {\n        _this3._alignLabels(_this3._rootLayoutManager, _this3._rootLayoutManager.isSingleColumnMode());\n      }\n    };\n\n    layoutManager.on(\"contentReady\", contentReadyHandler);\n    layoutManager.option(optionName, value);\n\n    this._updateValidationGroupAndSummaryIfNeeded(optionName);\n  },\n  _tryChangeLayoutManagerItemOption: function _tryChangeLayoutManagerItemOption(fullName, value) {\n    var nameParts = fullName.split(\".\");\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (\"items\" === optionName && nameParts.length > 1) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(itemPath);\n\n      if (layoutManager) {\n        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\n\n        var items = this._prepareItems(value, false, itemPath);\n\n        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\n\n        return true;\n      }\n    } else if (nameParts.length > 2) {\n      var endPartIndex = nameParts.length - 2;\n\n      var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\n\n      var _layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(_itemPath);\n\n      if (_layoutManager) {\n        var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\n\n        if (\"editorType\" === optionName) {\n          if (_layoutManager.option(fullOptionName) !== value) {\n            return false;\n          }\n        }\n\n        if (\"visible\" === optionName) {\n          var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\n\n          if (formItems && formItems.length) {\n            var layoutManagerItems = _layoutManager.option(\"items\");\n\n            formItems.forEach(function (item, index) {\n              var layoutItem = layoutManagerItems[index];\n              layoutItem.visibleIndex = item.visibleIndex;\n            });\n          }\n        }\n\n        this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _tryChangeLayoutManagerItemOptions: function _tryChangeLayoutManagerItemOptions(itemPath, options) {\n    var _this4 = this;\n\n    var result;\n    this.beginUpdate();\n    each(options, function (optionName, optionValue) {\n      result = _this4._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\n\n      if (!result) {\n        return false;\n      }\n    });\n    this.endUpdate();\n    return result;\n  },\n  _customHandlerOfComplexOption: function _customHandlerOfComplexOption(args, rootOptionName) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n\n    if (\"items\" === rootOptionName) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var item = this.option(itemPath);\n      var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\n      var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n\n      var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\n\n      if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(args.fullName, value)) {\n        if (item) {\n          this._changeItemOption(item, optionNameWithoutPath, value);\n\n          var items = this._generateItemsFromData(this.option(\"items\"));\n\n          this.option(\"items\", items);\n        }\n      }\n    }\n\n    if (\"formData\" === rootOptionName) {\n      var dataField = nameParts.slice(1).join(\".\");\n      var editor = this.getEditor(dataField);\n\n      if (editor) {\n        editor.option(\"value\", value);\n      } else {\n        this._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      }\n    }\n  },\n  _getItemPath: function _getItemPath(nameParts) {\n    var itemPath = nameParts[0];\n    var i;\n\n    for (i = 1; i < nameParts.length; i++) {\n      if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\n        itemPath += \".\" + nameParts[i];\n      } else {\n        break;\n      }\n    }\n\n    return itemPath;\n  },\n  _triggerOnFieldDataChanged: function _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _triggerOnFieldDataChangedByDataSet: function _triggerOnFieldDataChangedByDataSet(data) {\n    var that = this;\n\n    if (data && isObject(data)) {\n      each(data, function (dataField, value) {\n        that._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      });\n    }\n  },\n  _updateFieldValue: function _updateFieldValue(dataField, value) {\n    if (isDefined(this.option(\"formData\"))) {\n      var editor = this.getEditor(dataField);\n      this.option(\"formData.\" + dataField, value);\n\n      if (editor) {\n        var editorValue = editor.option(\"value\");\n\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  },\n  _generateItemsFromData: function _generateItemsFromData(items) {\n    var formData = this.option(\"formData\");\n    var result = [];\n\n    if (!items && isDefined(formData)) {\n      each(formData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    if (items) {\n      each(items, function (index, item) {\n        if (isObject(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n\n    return result;\n  },\n  _getItemByField: function _getItemByField(field, items) {\n    var that = this;\n    var fieldParts = isObject(field) ? field : that._getFieldParts(field);\n    var fieldName = fieldParts.fieldName;\n    var fieldPath = fieldParts.fieldPath;\n    var resultItem;\n\n    if (items.length) {\n      each(items, function (index, item) {\n        var itemType = item.itemType;\n\n        if (fieldPath.length) {\n          var path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\n          var subItemsField = that._getSubItemField(itemType);\n\n          item.items = that._generateItemsFromData(item.items);\n          item = that._getItemByField({\n            fieldName: fieldName,\n            fieldPath: fieldPath\n          }, item[subItemsField]);\n        }\n\n        if (isExpectedItem(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n\n    return resultItem;\n  },\n  _getFieldParts: function _getFieldParts(field) {\n    var fieldName = field;\n    var separatorIndex = fieldName.indexOf(\".\");\n    var resultPath = [];\n\n    while (-1 !== separatorIndex) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(\".\");\n    }\n\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  },\n  _getItemByFieldPath: function _getItemByFieldPath(path, fieldName, item) {\n    var itemType = item.itemType;\n\n    var subItemsField = this._getSubItemField(itemType);\n\n    var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n    var result;\n\n    do {\n      if (isItemWithSubItems) {\n        var name = item.name || item.caption || item.title;\n        var isGroupWithName = isDefined(name);\n        var nameWithoutSpaces = getTextWithoutSpaces(name);\n        var pathNode = void 0;\n        item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\n\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n\n        if (!path.length) {\n          result = this._getItemByField(fieldName, item[subItemsField]);\n\n          if (result) {\n            break;\n          }\n        }\n\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !isDefined(result));\n\n    return result;\n  },\n  _getSubItemField: function _getSubItemField(itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  },\n  _searchItemInEverySubItem: function _searchItemInEverySubItem(path, fieldName, items) {\n    var that = this;\n    var result;\n    each(items, function (index, groupItem) {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n\n      if (result) {\n        return false;\n      }\n    });\n\n    if (!result) {\n      result = false;\n    }\n\n    return result;\n  },\n  _changeItemOption: function _changeItemOption(item, option, value) {\n    if (isObject(item)) {\n      item[option] = value;\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var currentScreenFactor = this._getCurrentScreenFactor();\n\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n\n        this._refresh();\n\n        this._targetScreenFactor = void 0;\n      }\n\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  },\n  _isColCountChanged: function _isColCountChanged(oldScreenSize, newScreenSize) {\n    var isChanged = false;\n    each(this._cachedColCountOptions, function (index, item) {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  },\n  _refresh: function _refresh() {\n    var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\n    eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\n    this.callBase();\n  },\n  _resetValues: function _resetValues() {\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.reset();\n        itemRunTimeInfo.widgetInstance.option(\"isValid\", true);\n      }\n    });\n\n    ValidationEngine.resetGroup(this._getValidationGroup());\n  },\n  _updateData: function _updateData(data, value, isComplexData) {\n    var that = this;\n\n    var _data = isComplexData ? value : data;\n\n    if (isObject(_data)) {\n      each(_data, function (dataField, fieldValue) {\n        that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue));\n      });\n    } else if (isString(data)) {\n      that._updateFieldValue(data, value);\n    }\n  },\n  registerKeyHandler: function registerKeyHandler(key, handler) {\n    this.callBase(key, handler);\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible && browser.msie) {\n      this._refresh();\n    }\n  },\n  _dispose: function _dispose() {\n    ValidationEngine.removeGroup(this._getValidationGroup());\n    this.callBase();\n  },\n  resetValues: function resetValues() {\n    this._resetValues();\n  },\n  updateData: function updateData(data, value) {\n    this._updateData(data, value);\n  },\n  getEditor: function getEditor(dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  },\n  getButton: function getButton(name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  },\n  updateDimensions: function updateDimensions() {\n    var that = this;\n    var deferred = new Deferred();\n\n    if (that._scrollable) {\n      that._scrollable.update().done(function () {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  itemOption: function itemOption(id, option, value) {\n    var _this5 = this;\n\n    var items = this._generateItemsFromData(this.option(\"items\"));\n\n    var item = this._getItemByField(id, items);\n\n    var path = getItemPath(items, item);\n\n    if (!item) {\n      return;\n    }\n\n    switch (arguments.length) {\n      case 1:\n        return item;\n\n      case 3:\n        var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\n\n        this._changeItemOption(item, option, value);\n\n        var fullName = getFullOptionName(path, option);\n\n        if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\n          this.option(\"items\", items);\n        }\n\n        break;\n\n      default:\n        if (isObject(option)) {\n          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\n            var allowUpdateItems;\n            each(option, function (optionName, optionValue) {\n              var itemAction = _this5._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\n\n              _this5._changeItemOption(item, optionName, optionValue);\n\n              if (!allowUpdateItems && !_this5._tryExecuteItemOptionAction(itemAction)) {\n                allowUpdateItems = true;\n              }\n            });\n            allowUpdateItems && this.option(\"items\", items);\n          }\n        }\n\n    }\n  },\n  validate: function validate() {\n    return ValidationEngine.validateGroup(this._getValidationGroup());\n  },\n  getItemID: function getItemID(name) {\n    return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid());\n  },\n  getTargetScreenFactor: function getTargetScreenFactor() {\n    return this._targetScreenFactor;\n  }\n});\nregisterComponent(\"dxForm\", Form);\nexport default Form;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/form/ui.form.js"],"names":["$","eventsEngine","registerComponent","Guid","ensureDefined","isDefined","isEmptyObject","isObject","isString","each","inArray","extend","isEmpty","browser","triggerResizeEvent","triggerShownEvent","getPublicElement","messageLocalization","Widget","Editor","defaultScreenFactorFunc","getCurrentScreenFactor","hasWindow","ValidationEngine","default","FormItemsRunTimeInfo","TabPanel","Scrollable","Deferred","isMaterial","tryCreateItemOptionAction","concatPaths","createItemPathByIndex","getFullOptionName","getOptionNameFromFullName","tryGetTabPath","getTextWithoutSpaces","isExpectedItem","isFullPathContainsTabs","getItemPath","FORM_CLASS","FIELD_ITEM_CLASS","FIELD_ITEM_LABEL_TEXT_CLASS","FORM_GROUP_CLASS","FORM_GROUP_CONTENT_CLASS","FIELD_ITEM_CONTENT_HAS_GROUP_CLASS","FIELD_ITEM_CONTENT_HAS_TABS_CLASS","FORM_GROUP_WITH_CAPTION_CLASS","FORM_GROUP_CAPTION_CLASS","HIDDEN_LABEL_CLASS","FIELD_ITEM_LABEL_CLASS","FIELD_ITEM_LABEL_CONTENT_CLASS","FIELD_ITEM_TAB_CLASS","FORM_FIELD_ITEM_COL_CLASS","GROUP_COL_COUNT_CLASS","GROUP_COL_COUNT_ATTR","FIELD_ITEM_CONTENT_CLASS","FORM_VALIDATION_SUMMARY","ROOT_SIMPLE_ITEM_CLASS","TOOLBAR_CLASS","WIDGET_CLASS","FOCUSED_STATE_CLASS","ITEM_OPTIONS_FOR_VALIDATION_UPDATING","Form","inherit","_init","callBase","_cachedColCountOptions","_itemsRunTimeInfo","_groupsColCount","_attachSyncSubscriptions","_getDefaultOptions","formID","formData","colCount","screenByWidth","colCountByScreen","labelLocation","readOnly","onFieldDataChanged","customizeItem","onEditorEnterKey","minColWidth","alignItemLabels","alignItemLabelsInAllGroups","alignRootItemLabels","showColonAfterLabel","showRequiredMark","showOptionalMark","requiredMark","optionalMark","format","requiredMessage","getFormatter","showValidationSummary","items","scrollingEnabled","validationGroup","stylingMode","_defaultOptionsRules","concat","device","options","_setOptionsByReference","_optionsByReference","_getGroupColCount","$element","parseInt","attr","_createHiddenElement","rootLayoutManager","_$hiddenElement","addClass","appendTo","$hiddenLabel","_renderLabel","text","location","_labelLocation","_hiddenLabelText","find","_removeHiddenElement","remove","_getLabelWidthByText","innerHTML","offsetWidth","_getLabelsSelectorByCol","index","fieldItemClass","inOneColumn","cssExcludeTabbedSelector","excludeTabbed","childLabelContentSelector","_getLabelText","labelText","length","children","child","result","i","innerText","_applyLabelsWidthByCol","$container","$labelTexts","$labelTextsLength","labelWidth","maxWidth","style","width","_applyLabelsWidth","applyLabelsOptions","_getGroupElementsInColumn","columnIndex","cssColCountSelector","groupSelector","_applyLabelsWidthWithGroups","option","_alignRootSimpleItems","_applyLabelsWidthWithNestedGroups","$groups","eq","$rootSimpleItems","colIndex","groupsColIndex","groupColIndex","$groupsByCol","groupColCount","_alignLabelsInColumn","_ref","layoutManager","_checkGrouping","_getColCount","_prepareFormData","_initMarkup","addGroup","_getValidationGroup","_clearCachedInstances","setAria","_renderScrollable","_renderLayout","_renderValidationSummary","_lastMarkupScreenFactor","_targetScreenFactor","_getCurrentScreenFactor","clear","_cachedLayoutManagers","_alignLabels","_clean","useNativeScrolling","_scrollable","useNative","useSimulatedScrollbar","useKeyboard","direction","bounceEnabled","_getContent","$content","$validationSummary","_$validationSummary","_validationSummary","dxValidationSummary","_prepareItems","parentIsTabbedItem","currentPath","isTabs","item","path","guid","add","itemIndex","dataField","itemCopy","_tryPrepareGroupItem","_tryPrepareTabbedItem","_tryPrepareItemTemplate","cssItemClass","push","itemType","template","groupContentTemplate","_getTemplate","_itemGroupTemplate","bind","_itemTabbedTemplate","tabs","that","_rootLayoutManager","_renderLayoutManager","isRoot","onLayoutChanged","onContentReady","e","component","isSingleColumnMode","_tryGetItemsForTemplate","$tabPanel","tabPanelOptions","dataSource","onItemRendered","args","itemElement","itemTemplate","itemData","container","extendRunTimeItemInfoByKey","tryUpdateTabPanelInstance","instance","Array","isArray","forEach","widgetInstance","tabPanel","_createComponent","parent","on","fullName","value","$group","toggleClass","caption","$groupContent","data","render","model","$rootElement","config","_getLayoutManagerConfig","baseColCountByScreen","lg","md","sm","xs","_refresh","baseConfig","form","layoutData","_isDataUpdating","_triggerOnFieldDataChanged","validationBoundary","addItemsOrExtendFrom","onDisposing","_ref2","nestedItemsRunTimeInfo","getItemsRunTimeInfo","removeItemsByItems","type","_extendConfig","optionFullName","_options","silent","_triggerOnFieldDataChangedByDataSet","name","_optionChanged","rootNameOfComplexOption","_getRootLevelOfExpectedComplexOption","_customHandlerOfComplexOption","_invalidate","_resetValues","removeGroup","previousValue","fullOptionName","expectedRootNames","splitFullName","split","rootOptionName","search","_tryCreateItemOptionAction","optionName","itemPath","removeItemsByPathStartWith","itemsRunTimeInfo","_tryExecuteItemOptionAction","action","tryExecute","_updateValidationGroupAndSummaryIfNeeded","indexOf","_initGroupRegistration","_setLayoutManagerItemOption","_updateLockCount","beginUpdate","key","getKeyByPath","postponedOperations","_disposed","endUpdate","resolve","contentReadyHandler","off","tabPath","tabLayoutManager","getGroupOrTabLayoutManagerByPath","_tryChangeLayoutManagerItemOption","nameParts","_getItemPath","endPartIndex","_itemPath","slice","_layoutManager","formItems","layoutManagerItems","layoutItem","visibleIndex","_tryChangeLayoutManagerItemOptions","optionValue","optionNameWithoutPath","replace","simpleOptionName","itemAction","_changeItemOption","_generateItemsFromData","join","editor","getEditor","_createActionByOption","_updateFieldValue","editorValue","_getItemByField","field","fieldParts","_getFieldParts","fieldName","fieldPath","resultItem","_getItemByFieldPath","subItemsField","_getSubItemField","separatorIndex","resultPath","substr","reverse","isItemWithSubItems","title","isGroupWithName","nameWithoutSpaces","pathNode","pop","_searchItemInEverySubItem","groupItem","_dimensionChanged","currentScreenFactor","_isColCountChanged","oldScreenSize","newScreenSize","isChanged","editorSelector","trigger","_","itemRunTimeInfo","isEditor","reset","resetGroup","_updateData","isComplexData","_data","fieldValue","registerKeyHandler","handler","_focusTarget","first","_visibilityChanged","visible","msie","_dispose","resetValues","updateData","findWidgetInstanceByDataField","findWidgetInstanceByName","getButton","updateDimensions","deferred","update","done","resolveWith","promise","itemOption","id","arguments","allowUpdateItems","validate","validateGroup","getItemID","getTargetScreenFactor"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isEmpty\r\n} from \"../../core/utils/string\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    triggerResizeEvent,\r\n    triggerShownEvent\r\n} from \"../../events/visibility_change\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Editor from \"../editor/editor\";\r\nimport {\r\n    defaultScreenFactorFunc,\r\n    getCurrentScreenFactor,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport ValidationEngine from \"../validation_engine\";\r\nimport {\r\n    default as FormItemsRunTimeInfo\r\n} from \"./ui.form.items_runtime_info\";\r\nimport TabPanel from \"../tab_panel\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\r\nimport \"./ui.form.layout_manager\";\r\nimport {\r\n    concatPaths,\r\n    createItemPathByIndex,\r\n    getFullOptionName,\r\n    getOptionNameFromFullName,\r\n    tryGetTabPath,\r\n    getTextWithoutSpaces,\r\n    isExpectedItem,\r\n    isFullPathContainsTabs,\r\n    getItemPath\r\n} from \"./ui.form.utils\";\r\nimport \"../validation_summary\";\r\nimport \"../validation_group\";\r\nimport {\r\n    FORM_CLASS,\r\n    FIELD_ITEM_CLASS,\r\n    FIELD_ITEM_LABEL_TEXT_CLASS,\r\n    FORM_GROUP_CLASS,\r\n    FORM_GROUP_CONTENT_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_GROUP_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_TABS_CLASS,\r\n    FORM_GROUP_WITH_CAPTION_CLASS,\r\n    FORM_GROUP_CAPTION_CLASS,\r\n    HIDDEN_LABEL_CLASS,\r\n    FIELD_ITEM_LABEL_CLASS,\r\n    FIELD_ITEM_LABEL_CONTENT_CLASS,\r\n    FIELD_ITEM_TAB_CLASS,\r\n    FORM_FIELD_ITEM_COL_CLASS,\r\n    GROUP_COL_COUNT_CLASS,\r\n    GROUP_COL_COUNT_ATTR,\r\n    FIELD_ITEM_CONTENT_CLASS,\r\n    FORM_VALIDATION_SUMMARY,\r\n    ROOT_SIMPLE_ITEM_CLASS\r\n} from \"./constants\";\r\nimport {\r\n    TOOLBAR_CLASS\r\n} from \"../toolbar/constants\";\r\nvar WIDGET_CLASS = \"dx-widget\";\r\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\r\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\r\nvar Form = Widget.inherit({\r\n    _init: function() {\r\n        this.callBase();\r\n        this._cachedColCountOptions = [];\r\n        this._itemsRunTimeInfo = new FormItemsRunTimeInfo;\r\n        this._groupsColCount = [];\r\n        this._attachSyncSubscriptions()\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            formID: \"dx-\" + new Guid,\r\n            formData: {},\r\n            colCount: 1,\r\n            screenByWidth: defaultScreenFactorFunc,\r\n            colCountByScreen: void 0,\r\n            labelLocation: \"left\",\r\n            readOnly: false,\r\n            onFieldDataChanged: null,\r\n            customizeItem: null,\r\n            onEditorEnterKey: null,\r\n            minColWidth: 200,\r\n            alignItemLabels: true,\r\n            alignItemLabelsInAllGroups: true,\r\n            alignRootItemLabels: true,\r\n            showColonAfterLabel: true,\r\n            showRequiredMark: true,\r\n            showOptionalMark: false,\r\n            requiredMark: \"*\",\r\n            optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\r\n            requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\r\n            showValidationSummary: false,\r\n            items: void 0,\r\n            scrollingEnabled: false,\r\n            validationGroup: void 0,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return isMaterial()\r\n            },\r\n            options: {\r\n                showColonAfterLabel: false,\r\n                labelLocation: \"top\"\r\n            }\r\n        }])\r\n    },\r\n    _setOptionsByReference: function() {\r\n        this.callBase();\r\n        extend(this._optionsByReference, {\r\n            formData: true,\r\n            validationGroup: true\r\n        })\r\n    },\r\n    _getGroupColCount: function($element) {\r\n        return parseInt($element.attr(GROUP_COL_COUNT_ATTR))\r\n    },\r\n    _createHiddenElement: function(rootLayoutManager) {\r\n        this._$hiddenElement = $(\"<div>\").addClass(WIDGET_CLASS).addClass(HIDDEN_LABEL_CLASS).appendTo(\"body\");\r\n        var $hiddenLabel = rootLayoutManager._renderLabel({\r\n            text: \" \",\r\n            location: this._labelLocation()\r\n        }).appendTo(this._$hiddenElement);\r\n        this._hiddenLabelText = $hiddenLabel.find(\".\" + FIELD_ITEM_LABEL_TEXT_CLASS)[0]\r\n    },\r\n    _removeHiddenElement: function() {\r\n        this._$hiddenElement.remove();\r\n        this._hiddenLabelText = null\r\n    },\r\n    _getLabelWidthByText: function(text) {\r\n        this._hiddenLabelText.innerHTML = text;\r\n        return this._hiddenLabelText.offsetWidth\r\n    },\r\n    _getLabelsSelectorByCol: function(index, options) {\r\n        options = options || {};\r\n        var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\r\n        var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\" + FIELD_ITEM_TAB_CLASS + \")\" : \"\";\r\n        var childLabelContentSelector = \"> .\" + FIELD_ITEM_LABEL_CLASS + \" > .\" + FIELD_ITEM_LABEL_CONTENT_CLASS;\r\n        return \".\" + fieldItemClass + cssExcludeTabbedSelector + childLabelContentSelector\r\n    },\r\n    _getLabelText: function(labelText) {\r\n        var length = labelText.children.length;\r\n        var child;\r\n        var result = \"\";\r\n        var i;\r\n        for (i = 0; i < length; i++) {\r\n            child = labelText.children[i];\r\n            result += !isEmpty(child.innerText) ? child.innerText : child.innerHTML\r\n        }\r\n        return result\r\n    },\r\n    _applyLabelsWidthByCol: function($container, index, options) {\r\n        var $labelTexts = $container.find(this._getLabelsSelectorByCol(index, options));\r\n        var $labelTextsLength = $labelTexts.length;\r\n        var labelWidth;\r\n        var i;\r\n        var maxWidth = 0;\r\n        for (i = 0; i < $labelTextsLength; i++) {\r\n            labelWidth = this._getLabelWidthByText(this._getLabelText($labelTexts[i]));\r\n            if (labelWidth > maxWidth) {\r\n                maxWidth = labelWidth\r\n            }\r\n        }\r\n        for (i = 0; i < $labelTextsLength; i++) {\r\n            $labelTexts[i].style.width = maxWidth + \"px\"\r\n        }\r\n    },\r\n    _applyLabelsWidth: function($container, excludeTabbed, inOneColumn, colCount) {\r\n        colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed,\r\n            inOneColumn: inOneColumn\r\n        };\r\n        var i;\r\n        for (i = 0; i < colCount; i++) {\r\n            this._applyLabelsWidthByCol($container, i, applyLabelsOptions)\r\n        }\r\n    },\r\n    _getGroupElementsInColumn: function($container, columnIndex, colCount) {\r\n        var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\r\n        var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\r\n        return $container.find(groupSelector)\r\n    },\r\n    _applyLabelsWidthWithGroups: function($container, colCount, excludeTabbed) {\r\n        if (true === this.option(\"alignRootItemLabels\")) {\r\n            this._alignRootSimpleItems($container, colCount, excludeTabbed)\r\n        }\r\n        var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\r\n        if (alignItemLabelsInAllGroups) {\r\n            this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed)\r\n        } else {\r\n            var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\r\n            var i;\r\n            for (i = 0; i < $groups.length; i++) {\r\n                this._applyLabelsWidth($groups.eq(i), excludeTabbed)\r\n            }\r\n        }\r\n    },\r\n    _alignRootSimpleItems: function($container, colCount, excludeTabbed) {\r\n        var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\r\n        for (var colIndex = 0; colIndex < colCount; colIndex++) {\r\n            this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed)\r\n        }\r\n    },\r\n    _applyLabelsWidthWithNestedGroups: function($container, colCount, excludeTabbed) {\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed\r\n        };\r\n        var colIndex;\r\n        var groupsColIndex;\r\n        var groupColIndex;\r\n        var $groupsByCol;\r\n        for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n            $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\r\n            this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions);\r\n            for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\r\n                $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\r\n                var groupColCount = this._getGroupColCount($groupsByCol);\r\n                for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\r\n                    this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _labelLocation: function() {\r\n        return this.option(\"labelLocation\")\r\n    },\r\n    _alignLabelsInColumn: function(_ref) {\r\n        var {\r\n            layoutManager: layoutManager,\r\n            inOneColumn: inOneColumn,\r\n            $container: $container,\r\n            excludeTabbed: excludeTabbed,\r\n            items: items\r\n        } = _ref;\r\n        if (!hasWindow() || \"top\" === this._labelLocation()) {\r\n            return\r\n        }\r\n        this._createHiddenElement(layoutManager);\r\n        if (inOneColumn) {\r\n            this._applyLabelsWidth($container, excludeTabbed, true)\r\n        } else if (this._checkGrouping(items)) {\r\n            this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed)\r\n        } else {\r\n            this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount())\r\n        }\r\n        this._removeHiddenElement()\r\n    },\r\n    _prepareFormData: function() {\r\n        if (!isDefined(this.option(\"formData\"))) {\r\n            this.option(\"formData\", {})\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        ValidationEngine.addGroup(this._getValidationGroup());\r\n        this._clearCachedInstances();\r\n        this._prepareFormData();\r\n        this.$element().addClass(FORM_CLASS);\r\n        this.callBase();\r\n        this.setAria(\"role\", \"form\", this.$element());\r\n        if (this.option(\"scrollingEnabled\")) {\r\n            this._renderScrollable()\r\n        }\r\n        this._renderLayout();\r\n        this._renderValidationSummary();\r\n        this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor()\r\n    },\r\n    _getCurrentScreenFactor: function() {\r\n        return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\"\r\n    },\r\n    _clearCachedInstances: function() {\r\n        this._itemsRunTimeInfo.clear();\r\n        this._cachedLayoutManagers = []\r\n    },\r\n    _alignLabels: function(layoutManager, inOneColumn) {\r\n        this._alignLabelsInColumn({\r\n            $container: this.$element(),\r\n            layoutManager: layoutManager,\r\n            excludeTabbed: true,\r\n            items: this.option(\"items\"),\r\n            inOneColumn: inOneColumn\r\n        });\r\n        triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)))\r\n    },\r\n    _clean: function() {\r\n        this.callBase();\r\n        this._groupsColCount = [];\r\n        this._cachedColCountOptions = [];\r\n        this._lastMarkupScreenFactor = void 0\r\n    },\r\n    _renderScrollable: function() {\r\n        var useNativeScrolling = this.option(\"useNativeScrolling\");\r\n        this._scrollable = new Scrollable(this.$element(), {\r\n            useNative: !!useNativeScrolling,\r\n            useSimulatedScrollbar: !useNativeScrolling,\r\n            useKeyboard: false,\r\n            direction: \"both\",\r\n            bounceEnabled: false\r\n        })\r\n    },\r\n    _getContent: function() {\r\n        return this.option(\"scrollingEnabled\") ? this._scrollable.$content() : this.$element()\r\n    },\r\n    _renderValidationSummary: function() {\r\n        var $validationSummary = this.$element().find(\".\" + FORM_VALIDATION_SUMMARY);\r\n        if ($validationSummary.length > 0) {\r\n            $validationSummary.remove()\r\n        }\r\n        if (this.option(\"showValidationSummary\")) {\r\n            var _$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\r\n            this._validationSummary = _$validationSummary.dxValidationSummary({\r\n                validationGroup: this._getValidationGroup()\r\n            }).dxValidationSummary(\"instance\")\r\n        }\r\n    },\r\n    _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\r\n        if (items) {\r\n            var result = [];\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\r\n                var guid = this._itemsRunTimeInfo.add({\r\n                    item: item,\r\n                    itemIndex: i,\r\n                    path: path\r\n                });\r\n                if (isString(item)) {\r\n                    item = {\r\n                        dataField: item\r\n                    }\r\n                }\r\n                if (isObject(item)) {\r\n                    var itemCopy = extend({}, item);\r\n                    itemCopy.guid = guid;\r\n                    this._tryPrepareGroupItem(itemCopy);\r\n                    this._tryPrepareTabbedItem(itemCopy, path);\r\n                    this._tryPrepareItemTemplate(itemCopy);\r\n                    if (parentIsTabbedItem) {\r\n                        itemCopy.cssItemClass = FIELD_ITEM_TAB_CLASS\r\n                    }\r\n                    if (itemCopy.items) {\r\n                        itemCopy.items = this._prepareItems(itemCopy.items, parentIsTabbedItem, path)\r\n                    }\r\n                    result.push(itemCopy)\r\n                } else {\r\n                    result.push(item)\r\n                }\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    _tryPrepareGroupItem: function(item) {\r\n        if (\"group\" === item.itemType) {\r\n            item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\r\n            if (item.template) {\r\n                item.groupContentTemplate = this._getTemplate(item.template)\r\n            }\r\n            item.template = this._itemGroupTemplate.bind(this, item)\r\n        }\r\n    },\r\n    _tryPrepareTabbedItem: function(item, path) {\r\n        if (\"tabbed\" === item.itemType) {\r\n            item.template = this._itemTabbedTemplate.bind(this, item);\r\n            item.tabs = this._prepareItems(item.tabs, true, path, true)\r\n        }\r\n    },\r\n    _tryPrepareItemTemplate: function(item) {\r\n        if (item.template) {\r\n            item.template = this._getTemplate(item.template)\r\n        }\r\n    },\r\n    _checkGrouping: function(items) {\r\n        if (items) {\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                if (\"group\" === item.itemType) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _renderLayout: function() {\r\n        var that = this;\r\n        var items = that.option(\"items\");\r\n        var $content = that._getContent();\r\n        items = that._prepareItems(items);\r\n        that._rootLayoutManager = that._renderLayoutManager(items, $content, {\r\n            isRoot: true,\r\n            colCount: that.option(\"colCount\"),\r\n            alignItemLabels: that.option(\"alignItemLabels\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            colCountByScreen: this.option(\"colCountByScreen\"),\r\n            onLayoutChanged: function(inOneColumn) {\r\n                that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn)\r\n            },\r\n            onContentReady: function(e) {\r\n                that._alignLabels(e.component, e.component.isSingleColumnMode())\r\n            }\r\n        })\r\n    },\r\n    _tryGetItemsForTemplate: function(item) {\r\n        return item.items || []\r\n    },\r\n    _itemTabbedTemplate: function(item, e, $container) {\r\n        var $tabPanel = $(\"<div>\").appendTo($container);\r\n        var tabPanelOptions = extend({}, item.tabPanelOptions, {\r\n            dataSource: item.tabs,\r\n            onItemRendered: args => triggerShownEvent(args.itemElement),\r\n            itemTemplate: (itemData, e, container) => {\r\n                var $container = $(container);\r\n                var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\r\n                var layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(itemData), $container, {\r\n                    colCount: itemData.colCount,\r\n                    alignItemLabels: alignItemLabels,\r\n                    screenByWidth: this.option(\"screenByWidth\"),\r\n                    colCountByScreen: itemData.colCountByScreen,\r\n                    cssItemClass: itemData.cssItemClass,\r\n                    onLayoutChanged: inOneColumn => {\r\n                        this._alignLabelsInColumn({\r\n                            $container: $container,\r\n                            layoutManager: layoutManager,\r\n                            items: itemData.items,\r\n                            inOneColumn: inOneColumn\r\n                        })\r\n                    }\r\n                });\r\n                if (this._itemsRunTimeInfo) {\r\n                    this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\r\n                        layoutManager: layoutManager\r\n                    })\r\n                }\r\n                if (alignItemLabels) {\r\n                    this._alignLabelsInColumn({\r\n                        $container: $container,\r\n                        layoutManager: layoutManager,\r\n                        items: itemData.items,\r\n                        inOneColumn: layoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        var tryUpdateTabPanelInstance = (items, instance) => {\r\n            if (Array.isArray(items)) {\r\n                items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                    widgetInstance: instance\r\n                }))\r\n            }\r\n        };\r\n        var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\r\n        tabPanel.on(\"optionChanged\", e => {\r\n            if (\"dataSource\" === e.fullName) {\r\n                tryUpdateTabPanelInstance(e.value, e.component)\r\n            }\r\n        });\r\n        tryUpdateTabPanelInstance([{\r\n            guid: item.guid\r\n        }, ...item.tabs], tabPanel)\r\n    },\r\n    _itemGroupTemplate: function(item, e, $container) {\r\n        var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\r\n        var colCount;\r\n        var layoutManager;\r\n        if (item.caption) {\r\n            $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group)\r\n        }\r\n        var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\r\n        if (item.groupContentTemplate) {\r\n            var data = {\r\n                formData: this.option(\"formData\"),\r\n                component: this\r\n            };\r\n            item.groupContentTemplate.render({\r\n                model: data,\r\n                container: getPublicElement($groupContent)\r\n            })\r\n        } else {\r\n            layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(item), $groupContent, {\r\n                colCount: item.colCount,\r\n                colCountByScreen: item.colCountByScreen,\r\n                alignItemLabels: item.alignItemLabels,\r\n                cssItemClass: item.cssItemClass\r\n            });\r\n            this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                layoutManager: layoutManager\r\n            });\r\n            colCount = layoutManager._getColCount();\r\n            if (-1 === inArray(colCount, this._groupsColCount)) {\r\n                this._groupsColCount.push(colCount)\r\n            }\r\n            $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\r\n            $group.attr(GROUP_COL_COUNT_ATTR, colCount)\r\n        }\r\n    },\r\n    _renderLayoutManager: function(items, $rootElement, options) {\r\n        var $element = $(\"<div>\");\r\n        var that = this;\r\n        var config = that._getLayoutManagerConfig(items, options);\r\n        var baseColCountByScreen = {\r\n            lg: options.colCount,\r\n            md: options.colCount,\r\n            sm: options.colCount,\r\n            xs: 1\r\n        };\r\n        that._cachedColCountOptions.push({\r\n            colCountByScreen: extend(baseColCountByScreen, options.colCountByScreen)\r\n        });\r\n        $element.appendTo($rootElement);\r\n        var instance = that._createComponent($element, \"dxLayoutManager\", config);\r\n        instance.on(\"autoColCountChanged\", (function() {\r\n            that._refresh()\r\n        }));\r\n        that._cachedLayoutManagers.push(instance);\r\n        return instance\r\n    },\r\n    _getValidationGroup: function() {\r\n        return this.option(\"validationGroup\") || this\r\n    },\r\n    _getLayoutManagerConfig: function(items, options) {\r\n        var baseConfig = {\r\n            form: this,\r\n            isRoot: options.isRoot,\r\n            validationGroup: this._getValidationGroup(),\r\n            showRequiredMark: this.option(\"showRequiredMark\"),\r\n            showOptionalMark: this.option(\"showOptionalMark\"),\r\n            requiredMark: this.option(\"requiredMark\"),\r\n            optionalMark: this.option(\"optionalMark\"),\r\n            requiredMessage: this.option(\"requiredMessage\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            layoutData: this.option(\"formData\"),\r\n            labelLocation: this.option(\"labelLocation\"),\r\n            customizeItem: this.option(\"customizeItem\"),\r\n            minColWidth: this.option(\"minColWidth\"),\r\n            showColonAfterLabel: this.option(\"showColonAfterLabel\"),\r\n            onEditorEnterKey: this.option(\"onEditorEnterKey\"),\r\n            onFieldDataChanged: args => {\r\n                if (!this._isDataUpdating) {\r\n                    this._triggerOnFieldDataChanged(args)\r\n                }\r\n            },\r\n            validationBoundary: this.option(\"scrollingEnabled\") ? this.$element() : void 0\r\n        };\r\n        return extend(baseConfig, {\r\n            items: items,\r\n            onContentReady: args => {\r\n                this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\r\n                options.onContentReady && options.onContentReady(args)\r\n            },\r\n            onDisposing: _ref2 => {\r\n                var {\r\n                    component: component\r\n                } = _ref2;\r\n                var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\r\n                this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo)\r\n            },\r\n            colCount: options.colCount,\r\n            alignItemLabels: options.alignItemLabels,\r\n            cssItemClass: options.cssItemClass,\r\n            colCountByScreen: options.colCountByScreen,\r\n            onLayoutChanged: options.onLayoutChanged,\r\n            width: options.width\r\n        })\r\n    },\r\n    _createComponent: function($element, type, config) {\r\n        config = config || {};\r\n        this._extendConfig(config, {\r\n            readOnly: this.option(\"readOnly\")\r\n        });\r\n        return this.callBase($element, type, config)\r\n    },\r\n    _attachSyncSubscriptions: function() {\r\n        var that = this;\r\n        that.on(\"optionChanged\", (function(args) {\r\n            var optionFullName = args.fullName;\r\n            if (\"formData\" === optionFullName) {\r\n                if (!isDefined(args.value)) {\r\n                    that._options.silent(\"formData\", args.value = {})\r\n                }\r\n                that._triggerOnFieldDataChangedByDataSet(args.value)\r\n            }\r\n            if (that._cachedLayoutManagers.length) {\r\n                each(that._cachedLayoutManagers, (function(index, layoutManager) {\r\n                    if (\"formData\" === optionFullName) {\r\n                        that._isDataUpdating = true;\r\n                        layoutManager.option(\"layoutData\", args.value);\r\n                        that._isDataUpdating = false\r\n                    }\r\n                    if (\"readOnly\" === args.name || \"disabled\" === args.name) {\r\n                        layoutManager.option(optionFullName, args.value)\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    },\r\n    _optionChanged: function(args) {\r\n        var rootNameOfComplexOption = this._getRootLevelOfExpectedComplexOption(args.fullName, [\"formData\", \"items\"]);\r\n        if (rootNameOfComplexOption) {\r\n            this._customHandlerOfComplexOption(args, rootNameOfComplexOption);\r\n            return\r\n        }\r\n        switch (args.name) {\r\n            case \"formData\":\r\n                if (!this.option(\"items\")) {\r\n                    this._invalidate()\r\n                } else if (isEmptyObject(args.value)) {\r\n                    this._resetValues()\r\n                }\r\n                break;\r\n            case \"items\":\r\n            case \"colCount\":\r\n            case \"onFieldDataChanged\":\r\n            case \"onEditorEnterKey\":\r\n            case \"labelLocation\":\r\n            case \"alignItemLabels\":\r\n            case \"showColonAfterLabel\":\r\n            case \"customizeItem\":\r\n            case \"alignItemLabelsInAllGroups\":\r\n            case \"showRequiredMark\":\r\n            case \"showOptionalMark\":\r\n            case \"requiredMark\":\r\n            case \"optionalMark\":\r\n            case \"requiredMessage\":\r\n            case \"scrollingEnabled\":\r\n            case \"formID\":\r\n            case \"colCountByScreen\":\r\n            case \"screenByWidth\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"showValidationSummary\":\r\n                this._renderValidationSummary();\r\n                break;\r\n            case \"minColWidth\":\r\n                if (\"auto\" === this.option(\"colCount\")) {\r\n                    this._invalidate()\r\n                }\r\n                break;\r\n            case \"alignRootItemLabels\":\r\n            case \"readOnly\":\r\n                break;\r\n            case \"width\":\r\n                this.callBase(args);\r\n                this._rootLayoutManager.option(args.name, args.value);\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\r\n                break;\r\n            case \"visible\":\r\n                this.callBase(args);\r\n                if (args.value) {\r\n                    triggerShownEvent(this.$element())\r\n                }\r\n                break;\r\n            case \"validationGroup\":\r\n                ValidationEngine.removeGroup(args.previousValue || this);\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _getRootLevelOfExpectedComplexOption: function(fullOptionName, expectedRootNames) {\r\n        var splitFullName = fullOptionName.split(\".\");\r\n        var result;\r\n        if (splitFullName.length > 1) {\r\n            var i;\r\n            var rootOptionName = splitFullName[0];\r\n            for (i = 0; i < expectedRootNames.length; i++) {\r\n                if (-1 !== rootOptionName.search(expectedRootNames[i])) {\r\n                    result = expectedRootNames[i]\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _tryCreateItemOptionAction: function(optionName, item, value, previousValue, itemPath) {\r\n        if (\"tabs\" === optionName) {\r\n            this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\r\n            value = this._prepareItems(value, true, itemPath, true)\r\n        }\r\n        return tryCreateItemOptionAction(optionName, {\r\n            item: item,\r\n            value: value,\r\n            previousValue: previousValue,\r\n            itemsRunTimeInfo: this._itemsRunTimeInfo\r\n        })\r\n    },\r\n    _tryExecuteItemOptionAction: function(action) {\r\n        return action && action.tryExecute()\r\n    },\r\n    _updateValidationGroupAndSummaryIfNeeded: function(fullName) {\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\r\n            ValidationEngine.addGroup(this._getValidationGroup());\r\n            if (this.option(\"showValidationSummary\")) {\r\n                this._validationSummary && this._validationSummary._initGroupRegistration()\r\n            }\r\n        }\r\n    },\r\n    _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\r\n        if (this._updateLockCount > 0) {\r\n            !layoutManager._updateLockCount && layoutManager.beginUpdate();\r\n            var key = this._itemsRunTimeInfo.getKeyByPath(path);\r\n            this.postponedOperations.add(key, () => {\r\n                !layoutManager._disposed && layoutManager.endUpdate();\r\n                return (new Deferred).resolve()\r\n            })\r\n        }\r\n        var contentReadyHandler = e => {\r\n            e.component.off(\"contentReady\", contentReadyHandler);\r\n            if (isFullPathContainsTabs(path)) {\r\n                var tabPath = tryGetTabPath(path);\r\n                var tabLayoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(tabPath);\r\n                this._alignLabelsInColumn({\r\n                    items: tabLayoutManager.option(\"items\"),\r\n                    layoutManager: tabLayoutManager,\r\n                    $container: tabLayoutManager.$element(),\r\n                    inOneColumn: tabLayoutManager.isSingleColumnMode()\r\n                })\r\n            } else {\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode())\r\n            }\r\n        };\r\n        layoutManager.on(\"contentReady\", contentReadyHandler);\r\n        layoutManager.option(optionName, value);\r\n        this._updateValidationGroupAndSummaryIfNeeded(optionName)\r\n    },\r\n    _tryChangeLayoutManagerItemOption(fullName, value) {\r\n        var nameParts = fullName.split(\".\");\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (\"items\" === optionName && nameParts.length > 1) {\r\n            var itemPath = this._getItemPath(nameParts);\r\n            var layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(itemPath);\r\n            if (layoutManager) {\r\n                this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\r\n                var items = this._prepareItems(value, false, itemPath);\r\n                this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\r\n                return true\r\n            }\r\n        } else if (nameParts.length > 2) {\r\n            var endPartIndex = nameParts.length - 2;\r\n            var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\r\n            var _layoutManager = this._itemsRunTimeInfo.getGroupOrTabLayoutManagerByPath(_itemPath);\r\n            if (_layoutManager) {\r\n                var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\r\n                if (\"editorType\" === optionName) {\r\n                    if (_layoutManager.option(fullOptionName) !== value) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (\"visible\" === optionName) {\r\n                    var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\r\n                    if (formItems && formItems.length) {\r\n                        var layoutManagerItems = _layoutManager.option(\"items\");\r\n                        formItems.forEach((item, index) => {\r\n                            var layoutItem = layoutManagerItems[index];\r\n                            layoutItem.visibleIndex = item.visibleIndex\r\n                        })\r\n                    }\r\n                }\r\n                this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _tryChangeLayoutManagerItemOptions(itemPath, options) {\r\n        var result;\r\n        this.beginUpdate();\r\n        each(options, (optionName, optionValue) => {\r\n            result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        });\r\n        this.endUpdate();\r\n        return result\r\n    },\r\n    _customHandlerOfComplexOption: function(args, rootOptionName) {\r\n        var nameParts = args.fullName.split(\".\");\r\n        var value = args.value;\r\n        if (\"items\" === rootOptionName) {\r\n            var itemPath = this._getItemPath(nameParts);\r\n            var item = this.option(itemPath);\r\n            var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\r\n            var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\r\n            var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\r\n            if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(args.fullName, value)) {\r\n                if (item) {\r\n                    this._changeItemOption(item, optionNameWithoutPath, value);\r\n                    var items = this._generateItemsFromData(this.option(\"items\"));\r\n                    this.option(\"items\", items)\r\n                }\r\n            }\r\n        }\r\n        if (\"formData\" === rootOptionName) {\r\n            var dataField = nameParts.slice(1).join(\".\");\r\n            var editor = this.getEditor(dataField);\r\n            if (editor) {\r\n                editor.option(\"value\", value)\r\n            } else {\r\n                this._triggerOnFieldDataChanged({\r\n                    dataField: dataField,\r\n                    value: value\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _getItemPath: function(nameParts) {\r\n        var itemPath = nameParts[0];\r\n        var i;\r\n        for (i = 1; i < nameParts.length; i++) {\r\n            if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\r\n                itemPath += \".\" + nameParts[i]\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return itemPath\r\n    },\r\n    _triggerOnFieldDataChanged: function(args) {\r\n        this._createActionByOption(\"onFieldDataChanged\")(args)\r\n    },\r\n    _triggerOnFieldDataChangedByDataSet: function(data) {\r\n        var that = this;\r\n        if (data && isObject(data)) {\r\n            each(data, (function(dataField, value) {\r\n                that._triggerOnFieldDataChanged({\r\n                    dataField: dataField,\r\n                    value: value\r\n                })\r\n            }))\r\n        }\r\n    },\r\n    _updateFieldValue: function(dataField, value) {\r\n        if (isDefined(this.option(\"formData\"))) {\r\n            var editor = this.getEditor(dataField);\r\n            this.option(\"formData.\" + dataField, value);\r\n            if (editor) {\r\n                var editorValue = editor.option(\"value\");\r\n                if (editorValue !== value) {\r\n                    editor.option(\"value\", value)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _generateItemsFromData: function(items) {\r\n        var formData = this.option(\"formData\");\r\n        var result = [];\r\n        if (!items && isDefined(formData)) {\r\n            each(formData, (function(dataField) {\r\n                result.push({\r\n                    dataField: dataField\r\n                })\r\n            }))\r\n        }\r\n        if (items) {\r\n            each(items, (function(index, item) {\r\n                if (isObject(item)) {\r\n                    result.push(item)\r\n                } else {\r\n                    result.push({\r\n                        dataField: item\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _getItemByField: function(field, items) {\r\n        var that = this;\r\n        var fieldParts = isObject(field) ? field : that._getFieldParts(field);\r\n        var fieldName = fieldParts.fieldName;\r\n        var fieldPath = fieldParts.fieldPath;\r\n        var resultItem;\r\n        if (items.length) {\r\n            each(items, (function(index, item) {\r\n                var itemType = item.itemType;\r\n                if (fieldPath.length) {\r\n                    var path = fieldPath.slice();\r\n                    item = that._getItemByFieldPath(path, fieldName, item)\r\n                } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\r\n                    var subItemsField = that._getSubItemField(itemType);\r\n                    item.items = that._generateItemsFromData(item.items);\r\n                    item = that._getItemByField({\r\n                        fieldName: fieldName,\r\n                        fieldPath: fieldPath\r\n                    }, item[subItemsField])\r\n                }\r\n                if (isExpectedItem(item, fieldName)) {\r\n                    resultItem = item;\r\n                    return false\r\n                }\r\n            }))\r\n        }\r\n        return resultItem\r\n    },\r\n    _getFieldParts: function(field) {\r\n        var fieldName = field;\r\n        var separatorIndex = fieldName.indexOf(\".\");\r\n        var resultPath = [];\r\n        while (-1 !== separatorIndex) {\r\n            resultPath.push(fieldName.substr(0, separatorIndex));\r\n            fieldName = fieldName.substr(separatorIndex + 1);\r\n            separatorIndex = fieldName.indexOf(\".\")\r\n        }\r\n        return {\r\n            fieldName: fieldName,\r\n            fieldPath: resultPath.reverse()\r\n        }\r\n    },\r\n    _getItemByFieldPath: function(path, fieldName, item) {\r\n        var itemType = item.itemType;\r\n        var subItemsField = this._getSubItemField(itemType);\r\n        var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\r\n        var result;\r\n        do {\r\n            if (isItemWithSubItems) {\r\n                var name = item.name || item.caption || item.title;\r\n                var isGroupWithName = isDefined(name);\r\n                var nameWithoutSpaces = getTextWithoutSpaces(name);\r\n                var pathNode = void 0;\r\n                item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\r\n                if (isGroupWithName) {\r\n                    pathNode = path.pop()\r\n                }\r\n                if (!path.length) {\r\n                    result = this._getItemByField(fieldName, item[subItemsField]);\r\n                    if (result) {\r\n                        break\r\n                    }\r\n                }\r\n                if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\r\n                    if (path.length) {\r\n                        result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField])\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        } while (path.length && !isDefined(result));\r\n        return result\r\n    },\r\n    _getSubItemField: function(itemType) {\r\n        return \"tabbed\" === itemType ? \"tabs\" : \"items\"\r\n    },\r\n    _searchItemInEverySubItem: function(path, fieldName, items) {\r\n        var that = this;\r\n        var result;\r\n        each(items, (function(index, groupItem) {\r\n            result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\r\n            if (result) {\r\n                return false\r\n            }\r\n        }));\r\n        if (!result) {\r\n            result = false\r\n        }\r\n        return result\r\n    },\r\n    _changeItemOption: function(item, option, value) {\r\n        if (isObject(item)) {\r\n            item[option] = value\r\n        }\r\n    },\r\n    _dimensionChanged: function() {\r\n        var currentScreenFactor = this._getCurrentScreenFactor();\r\n        if (this._lastMarkupScreenFactor !== currentScreenFactor) {\r\n            if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\r\n                this._targetScreenFactor = currentScreenFactor;\r\n                this._refresh();\r\n                this._targetScreenFactor = void 0\r\n            }\r\n            this._lastMarkupScreenFactor = currentScreenFactor\r\n        }\r\n    },\r\n    _isColCountChanged: function(oldScreenSize, newScreenSize) {\r\n        var isChanged = false;\r\n        each(this._cachedColCountOptions, (function(index, item) {\r\n            if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\r\n                isChanged = true;\r\n                return false\r\n            }\r\n        }));\r\n        return isChanged\r\n    },\r\n    _refresh: function() {\r\n        var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\r\n        eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\r\n        this.callBase()\r\n    },\r\n    _resetValues: function() {\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.reset();\r\n                itemRunTimeInfo.widgetInstance.option(\"isValid\", true)\r\n            }\r\n        }));\r\n        ValidationEngine.resetGroup(this._getValidationGroup())\r\n    },\r\n    _updateData: function(data, value, isComplexData) {\r\n        var that = this;\r\n        var _data = isComplexData ? value : data;\r\n        if (isObject(_data)) {\r\n            each(_data, (function(dataField, fieldValue) {\r\n                that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue))\r\n            }))\r\n        } else if (isString(data)) {\r\n            that._updateFieldValue(data, value)\r\n        }\r\n    },\r\n    registerKeyHandler: function(key, handler) {\r\n        this.callBase(key, handler);\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler)\r\n            }\r\n        }))\r\n    },\r\n    _focusTarget: function() {\r\n        return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first()\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible && browser.msie) {\r\n            this._refresh()\r\n        }\r\n    },\r\n    _dispose: function() {\r\n        ValidationEngine.removeGroup(this._getValidationGroup());\r\n        this.callBase()\r\n    },\r\n    resetValues: function() {\r\n        this._resetValues()\r\n    },\r\n    updateData: function(data, value) {\r\n        this._updateData(data, value)\r\n    },\r\n    getEditor: function(dataField) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField)\r\n    },\r\n    getButton: function(name) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByName(name)\r\n    },\r\n    updateDimensions: function() {\r\n        var that = this;\r\n        var deferred = new Deferred;\r\n        if (that._scrollable) {\r\n            that._scrollable.update().done((function() {\r\n                deferred.resolveWith(that)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(that)\r\n        }\r\n        return deferred.promise()\r\n    },\r\n    itemOption: function(id, option, value) {\r\n        var items = this._generateItemsFromData(this.option(\"items\"));\r\n        var item = this._getItemByField(id, items);\r\n        var path = getItemPath(items, item);\r\n        if (!item) {\r\n            return\r\n        }\r\n        switch (arguments.length) {\r\n            case 1:\r\n                return item;\r\n            case 3:\r\n                var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\r\n                this._changeItemOption(item, option, value);\r\n                var fullName = getFullOptionName(path, option);\r\n                if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\r\n                    this.option(\"items\", items)\r\n                }\r\n                break;\r\n            default:\r\n                if (isObject(option)) {\r\n                    if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\r\n                        var allowUpdateItems;\r\n                        each(option, (optionName, optionValue) => {\r\n                            var itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\r\n                            this._changeItemOption(item, optionName, optionValue);\r\n                            if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\r\n                                allowUpdateItems = true\r\n                            }\r\n                        });\r\n                        allowUpdateItems && this.option(\"items\", items)\r\n                    }\r\n                }\r\n        }\r\n    },\r\n    validate: function() {\r\n        return ValidationEngine.validateGroup(this._getValidationGroup())\r\n    },\r\n    getItemID: function(name) {\r\n        return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid)\r\n    },\r\n    getTargetScreenFactor: function() {\r\n        return this._targetScreenFactor\r\n    }\r\n});\r\nregisterComponent(\"dxForm\", Form);\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}