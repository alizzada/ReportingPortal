{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\n\nvar AppointmentLayoutManager = /*#__PURE__*/function () {\n  function AppointmentLayoutManager(instance, renderingStrategy) {\n    _classCallCheck(this, AppointmentLayoutManager);\n\n    this.instance = instance;\n    renderingStrategy && this.initRenderingStrategy(renderingStrategy);\n  }\n\n  _createClass(AppointmentLayoutManager, [{\n    key: \"getCellDimensions\",\n    value: function getCellDimensions(options) {\n      if (this.instance._workSpace) {\n        return {\n          width: this.instance._workSpace.getCellWidth(),\n          height: this.instance._workSpace.getCellHeight(),\n          allDayHeight: this.instance._workSpace.getAllDayHeight()\n        };\n      }\n    }\n  }, {\n    key: \"getGroupOrientation\",\n    value: function getGroupOrientation(options) {\n      if (this.instance._workSpace) {\n        options.callback(this.instance._workSpace._getRealGroupOrientation());\n      }\n    }\n  }, {\n    key: \"initRenderingStrategy\",\n    value: function initRenderingStrategy(renderingStrategy) {\n      var Strategy = RENDERING_STRATEGIES[renderingStrategy];\n      this._renderingStrategyInstance = new Strategy(this.instance);\n      this.renderingStrategy = renderingStrategy;\n    }\n  }, {\n    key: \"createAppointmentsMap\",\n    value: function createAppointmentsMap(items) {\n      var _this = this;\n\n      var _this$getCellDimensio = this.getCellDimensions(),\n          allDayHeight = _this$getCellDimensio.allDayHeight;\n\n      this.instance._allDayCellHeight = allDayHeight;\n      this.getGroupOrientation({\n        callback: function callback(groupOrientation) {\n          return _this.instance._groupOrientation = groupOrientation;\n        }\n      });\n      var appointments = items ? items.slice() : [];\n      this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(appointments);\n      return this._createAppointmentsMapCore(appointments, this._positionMap);\n    }\n  }, {\n    key: \"_createAppointmentsMapCore\",\n    value: function _createAppointmentsMapCore(list, positionMap) {\n      var _this2 = this;\n\n      var _this$instance$getWor = this.instance.getWorkSpace(),\n          virtualScrollingDispatcher = _this$instance$getWor.virtualScrollingDispatcher;\n\n      var virtualCellCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.leftVirtualCellsCount : 0;\n      var virtualRowCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.topVirtualRowsCount : 0;\n      return list.map(function (data, index) {\n        if (!_this2._renderingStrategyInstance.keepAppointmentSettings()) {\n          delete data.settings;\n        }\n\n        var appointmentSettings = positionMap[index];\n        appointmentSettings.forEach(function (settings) {\n          settings.direction = \"vertical\" === _this2.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\";\n        });\n        return {\n          itemData: data,\n          settings: appointmentSettings,\n          needRepaint: true,\n          needRemove: false,\n          virtualCellCount: virtualCellCount,\n          virtualRowCount: virtualRowCount\n        };\n      });\n    }\n  }, {\n    key: \"_isDataChanged\",\n    value: function _isDataChanged(data) {\n      var updatedData = this.instance.getUpdatedAppointment();\n      return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(function (item) {\n        return data[item.key] === item.value;\n      });\n    }\n  }, {\n    key: \"_isAppointmentShouldAppear\",\n    value: function _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n      return currentAppointment.needRepaint && sourceAppointment.needRemove;\n    }\n  }, {\n    key: \"_isSettingChanged\",\n    value: function _isSettingChanged(settings, sourceSetting) {\n      if (settings.length !== sourceSetting.length) {\n        return true;\n      }\n\n      var createSettingsToCompare = function createSettingsToCompare(settings, index) {\n        var virtualCellCount = settings.virtualCellCount || 0;\n        var virtualRowCount = settings.virtualRowCount || 0;\n        var cellIndex = settings[index].cellIndex + virtualCellCount;\n        var rowIndex = settings[index].rowIndex + virtualRowCount;\n        return _extends({}, settings[index], {\n          cellIndex: cellIndex,\n          rowIndex: rowIndex,\n          virtualCellCount: -1,\n          virtualRowCount: -1\n        });\n      };\n\n      for (var i = 0; i < settings.length; i++) {\n        var newSettings = createSettingsToCompare(settings, i);\n        var oldSettings = createSettingsToCompare(sourceSetting, i);\n\n        if (oldSettings) {\n          oldSettings.sortedIndex = newSettings.sortedIndex;\n        }\n\n        if (!equalByValue(newSettings, oldSettings)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getAssociatedSourceAppointment\",\n    value: function _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var item = sourceAppointments[i];\n\n        if (item.itemData === currentAppointment.itemData) {\n          return item;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDeletedAppointments\",\n    value: function _getDeletedAppointments(currentAppointments, sourceAppointments) {\n      var result = [];\n\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var sourceAppointment = sourceAppointments[i];\n\n        var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n        if (!currentAppointment) {\n          sourceAppointment.needRemove = true;\n          result.push(sourceAppointment);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getRepaintedAppointments\",\n    value: function getRepaintedAppointments(currentAppointments, sourceAppointments) {\n      var _this3 = this;\n\n      if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\n        return currentAppointments;\n      }\n\n      currentAppointments.forEach(function (appointment) {\n        var sourceAppointment = _this3._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n        if (sourceAppointment) {\n          appointment.needRepaint = _this3._isDataChanged(appointment.itemData) || _this3._isSettingChanged(appointment.settings, sourceAppointment.settings) || _this3._isAppointmentShouldAppear(appointment, sourceAppointment);\n        }\n      });\n      return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n    }\n  }, {\n    key: \"getRenderingStrategyInstance\",\n    value: function getRenderingStrategyInstance() {\n      return this._renderingStrategyInstance;\n    }\n  }]);\n\n  return AppointmentLayoutManager;\n}();\n\nexport default AppointmentLayoutManager;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/appointments.layout_manager.js"],"names":["_extends","equalByValue","VerticalAppointmentsStrategy","HorizontalAppointmentsStrategy","HorizontalMonthLineAppointmentsStrategy","HorizontalMonthAppointmentsStrategy","AgendaAppointmentsStrategy","RENDERING_STRATEGIES","horizontal","horizontalMonth","horizontalMonthLine","vertical","agenda","AppointmentLayoutManager","instance","renderingStrategy","initRenderingStrategy","options","_workSpace","width","getCellWidth","height","getCellHeight","allDayHeight","getAllDayHeight","callback","_getRealGroupOrientation","Strategy","_renderingStrategyInstance","items","getCellDimensions","_allDayCellHeight","getGroupOrientation","groupOrientation","_groupOrientation","appointments","slice","_positionMap","createTaskPositionMap","_createAppointmentsMapCore","list","positionMap","getWorkSpace","virtualScrollingDispatcher","virtualCellCount","leftVirtualCellsCount","virtualRowCount","topVirtualRowsCount","map","data","index","keepAppointmentSettings","settings","appointmentSettings","forEach","direction","allDay","itemData","needRepaint","needRemove","updatedData","getUpdatedAppointment","getUpdatedAppointmentKeys","some","item","key","value","currentAppointment","sourceAppointment","sourceSetting","length","createSettingsToCompare","cellIndex","rowIndex","i","newSettings","oldSettings","sortedIndex","sourceAppointments","currentAppointments","result","_getAssociatedSourceAppointment","push","appointment","_isDataChanged","_isSettingChanged","_isAppointmentShouldAppear","concat","_getDeletedAppointments"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\";\r\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\";\r\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\";\r\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\";\r\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\";\r\nvar RENDERING_STRATEGIES = {\r\n    horizontal: HorizontalAppointmentsStrategy,\r\n    horizontalMonth: HorizontalMonthAppointmentsStrategy,\r\n    horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\r\n    vertical: VerticalAppointmentsStrategy,\r\n    agenda: AgendaAppointmentsStrategy\r\n};\r\nclass AppointmentLayoutManager {\r\n    constructor(instance, renderingStrategy) {\r\n        this.instance = instance;\r\n        renderingStrategy && this.initRenderingStrategy(renderingStrategy)\r\n    }\r\n    getCellDimensions(options) {\r\n        if (this.instance._workSpace) {\r\n            return {\r\n                width: this.instance._workSpace.getCellWidth(),\r\n                height: this.instance._workSpace.getCellHeight(),\r\n                allDayHeight: this.instance._workSpace.getAllDayHeight()\r\n            }\r\n        }\r\n    }\r\n    getGroupOrientation(options) {\r\n        if (this.instance._workSpace) {\r\n            options.callback(this.instance._workSpace._getRealGroupOrientation())\r\n        }\r\n    }\r\n    initRenderingStrategy(renderingStrategy) {\r\n        var Strategy = RENDERING_STRATEGIES[renderingStrategy];\r\n        this._renderingStrategyInstance = new Strategy(this.instance);\r\n        this.renderingStrategy = renderingStrategy\r\n    }\r\n    createAppointmentsMap(items) {\r\n        var {\r\n            allDayHeight: allDayHeight\r\n        } = this.getCellDimensions();\r\n        this.instance._allDayCellHeight = allDayHeight;\r\n        this.getGroupOrientation({\r\n            callback: groupOrientation => this.instance._groupOrientation = groupOrientation\r\n        });\r\n        var appointments = items ? items.slice() : [];\r\n        this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(appointments);\r\n        return this._createAppointmentsMapCore(appointments, this._positionMap)\r\n    }\r\n    _createAppointmentsMapCore(list, positionMap) {\r\n        var {\r\n            virtualScrollingDispatcher: virtualScrollingDispatcher\r\n        } = this.instance.getWorkSpace();\r\n        var virtualCellCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.leftVirtualCellsCount : 0;\r\n        var virtualRowCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.topVirtualRowsCount : 0;\r\n        return list.map((data, index) => {\r\n            if (!this._renderingStrategyInstance.keepAppointmentSettings()) {\r\n                delete data.settings\r\n            }\r\n            var appointmentSettings = positionMap[index];\r\n            appointmentSettings.forEach(settings => {\r\n                settings.direction = \"vertical\" === this.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\"\r\n            });\r\n            return {\r\n                itemData: data,\r\n                settings: appointmentSettings,\r\n                needRepaint: true,\r\n                needRemove: false,\r\n                virtualCellCount: virtualCellCount,\r\n                virtualRowCount: virtualRowCount\r\n            }\r\n        })\r\n    }\r\n    _isDataChanged(data) {\r\n        var updatedData = this.instance.getUpdatedAppointment();\r\n        return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value)\r\n    }\r\n    _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\r\n        return currentAppointment.needRepaint && sourceAppointment.needRemove\r\n    }\r\n    _isSettingChanged(settings, sourceSetting) {\r\n        if (settings.length !== sourceSetting.length) {\r\n            return true\r\n        }\r\n        var createSettingsToCompare = (settings, index) => {\r\n            var virtualCellCount = settings.virtualCellCount || 0;\r\n            var virtualRowCount = settings.virtualRowCount || 0;\r\n            var cellIndex = settings[index].cellIndex + virtualCellCount;\r\n            var rowIndex = settings[index].rowIndex + virtualRowCount;\r\n            return _extends({}, settings[index], {\r\n                cellIndex: cellIndex,\r\n                rowIndex: rowIndex,\r\n                virtualCellCount: -1,\r\n                virtualRowCount: -1\r\n            })\r\n        };\r\n        for (var i = 0; i < settings.length; i++) {\r\n            var newSettings = createSettingsToCompare(settings, i);\r\n            var oldSettings = createSettingsToCompare(sourceSetting, i);\r\n            if (oldSettings) {\r\n                oldSettings.sortedIndex = newSettings.sortedIndex\r\n            }\r\n            if (!equalByValue(newSettings, oldSettings)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var item = sourceAppointments[i];\r\n            if (item.itemData === currentAppointment.itemData) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDeletedAppointments(currentAppointments, sourceAppointments) {\r\n        var result = [];\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var sourceAppointment = sourceAppointments[i];\r\n            var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\r\n            if (!currentAppointment) {\r\n                sourceAppointment.needRemove = true;\r\n                result.push(sourceAppointment)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    getRepaintedAppointments(currentAppointments, sourceAppointments) {\r\n        if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\r\n            return currentAppointments\r\n        }\r\n        currentAppointments.forEach(appointment => {\r\n            var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\r\n            if (sourceAppointment) {\r\n                appointment.needRepaint = this._isDataChanged(appointment.itemData) || this._isSettingChanged(appointment.settings, sourceAppointment.settings) || this._isAppointmentShouldAppear(appointment, sourceAppointment)\r\n            }\r\n        });\r\n        return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments))\r\n    }\r\n    getRenderingStrategyInstance() {\r\n        return this._renderingStrategyInstance\r\n    }\r\n}\r\nexport default AppointmentLayoutManager;\r\n"]},"metadata":{},"sourceType":"module"}