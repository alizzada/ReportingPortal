{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\r\n * DevExtreme (esm/renovation/component_wrapper/utils.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isPlainObject } from \"../../core/utils/type\";\nexport var addAttributes = function addAttributes($element, attributes) {\n  each(attributes, function (_, _ref) {\n    var name = _ref.name,\n        value = _ref.value;\n\n    if (\"class\" === name) {\n      $element.addClass(value);\n    } else {\n      $element.attr(name, value);\n    }\n  });\n};\nexport function getAriaName(name) {\n  return \"role\" === name || \"id\" === name ? name : \"aria-\".concat(name);\n}\nexport var removeDifferentElements = function removeDifferentElements($children, $newChildren) {\n  each($newChildren, function (__, element) {\n    var hasComponent = false;\n    each($children, function (_, oldElement) {\n      if (element === oldElement) {\n        hasComponent = true;\n      }\n    });\n\n    if (!hasComponent && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  });\n};\nexport function updatePropsImmutable(props, option, name, fullName) {\n  var currentPropsValue = option[name];\n  var result = props;\n\n  if (name !== fullName) {\n    if (Array.isArray(currentPropsValue)) {\n      var newArray = _toConsumableArray(currentPropsValue);\n\n      result[name] = newArray;\n      var matchIndex = /\\[\\s*(\\d+)\\s*\\]/g.exec(fullName);\n\n      if (matchIndex) {\n        var index = parseInt(matchIndex[1], 10);\n\n        if (isPlainObject(newArray[index])) {\n          newArray[index] = _extends({}, currentPropsValue[index]);\n        }\n      }\n\n      return;\n    }\n  }\n\n  if (isPlainObject(currentPropsValue)) {\n    result[name] = _extends({}, currentPropsValue);\n  } else {\n    result[name] = currentPropsValue;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}