{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.export_helper.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWindow } from \"../../core/utils/window\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { isDate, isDefined, isNumeric } from \"../../core/utils/type\";\nimport dateLocalization from \"../../localization/date\";\nimport numberLocalization from \"../../localization/number\";\nvar window = getWindow();\nvar TREELIST_EMPTY_SPACE = \"dx-treelist-empty-space\";\nvar TREELIST_TABLE = \"dx-treelist-table\";\nexport var GanttExportHelper = /*#__PURE__*/function () {\n  function GanttExportHelper(gantt) {\n    _classCallCheck(this, GanttExportHelper);\n\n    this._gantt = gantt;\n    this._treeList = gantt._treeList;\n    this._cache = {};\n  }\n\n  _createClass(GanttExportHelper, [{\n    key: \"reset\",\n    value: function reset() {\n      this._cache = {};\n    }\n  }, {\n    key: \"getTreeListTableStyle\",\n    value: function getTreeListTableStyle() {\n      var table = this._getTreeListTable();\n\n      var style = window.getComputedStyle(table);\n      return {\n        color: style.color,\n        backgroundColor: style.backgroundColor,\n        fontSize: style.fontSize,\n        fontFamily: style.fontFamily,\n        fontWeight: style.fontWeight,\n        fontStyle: style.fontStyle,\n        textAlign: \"left\",\n        verticalAlign: \"middle\"\n      };\n    }\n  }, {\n    key: \"getTreeListColCount\",\n    value: function getTreeListColCount() {\n      var headerView = this._getHeaderView();\n\n      var widths = headerView.getColumnWidths().filter(function (w) {\n        return w > 0;\n      });\n      return widths.length;\n    }\n  }, {\n    key: \"getTreeListHeaderInfo\",\n    value: function getTreeListHeaderInfo(colIndex) {\n      var element = this._getHeaderElement(colIndex);\n\n      if (!element) {\n        return null;\n      }\n\n      var style = window.getComputedStyle(element);\n      var styleForExport = {\n        color: style.color,\n        padding: style.padding,\n        paddingLeft: style.paddingLeft,\n        paddingTop: style.paddingTop,\n        paddingRight: style.paddingRight,\n        paddingBottom: style.paddingBottom,\n        verticalAlign: style.verticalAlign,\n        width: this._getColumnWidth(colIndex)\n      };\n      return {\n        content: element.textContent,\n        styles: styleForExport\n      };\n    }\n  }, {\n    key: \"getTreeListCellInfo\",\n    value: function getTreeListCellInfo(rowIndex, colIndex) {\n      var _cell$textContent;\n\n      var cell = this._getDataCell(rowIndex, colIndex);\n\n      var node = this._getNodeByRowIndex(rowIndex);\n\n      var style = cell ? window.getComputedStyle(cell) : this._getColumnCellStyle(colIndex);\n      var styleForExport = {\n        color: style.color,\n        padding: style.padding,\n        paddingLeft: style.paddingLeft,\n        paddingTop: style.paddingTop,\n        paddingRight: style.paddingRight,\n        paddingBottom: style.paddingBottom,\n        width: this._getColumnWidth(colIndex)\n      };\n\n      if (0 === colIndex) {\n        styleForExport.extraLeftPadding = this._getEmptySpaceWidth(node.level);\n      }\n\n      return {\n        content: null !== (_cell$textContent = null === cell || void 0 === cell ? void 0 : cell.textContent) && void 0 !== _cell$textContent ? _cell$textContent : this._getDisplayText(rowIndex, colIndex),\n        styles: styleForExport\n      };\n    }\n  }, {\n    key: \"_ensureColumnWidthCache\",\n    value: function _ensureColumnWidthCache(colIndex) {\n      var _this$_cache, _this$_cache$_columnW;\n\n      null !== (_this$_cache$_columnW = (_this$_cache = this._cache)[\"columnWidths\"]) && void 0 !== _this$_cache$_columnW ? _this$_cache$_columnW : _this$_cache.columnWidths = {};\n\n      if (!this._cache.columnWidths[colIndex]) {\n        var _header$clientWidth;\n\n        var header = this._getHeaderElement(colIndex);\n\n        this._cache.columnWidths[colIndex] = null !== (_header$clientWidth = null === header || void 0 === header ? void 0 : header.clientWidth) && void 0 !== _header$clientWidth ? _header$clientWidth : 0;\n      }\n    }\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(colIndex) {\n      this._ensureColumnWidthCache(colIndex);\n\n      var widths = this._cache.columnWidths;\n      return widths && widths[colIndex];\n    }\n  }, {\n    key: \"_getEmptySpaceWidth\",\n    value: function _getEmptySpaceWidth(level) {\n      if (!this._cache.emptyWidth) {\n        var _this$_cache2, _this$_cache2$_emptyW, _element$offsetWidth;\n\n        var element = this._getTreeListElement(TREELIST_EMPTY_SPACE);\n\n        null !== (_this$_cache2$_emptyW = (_this$_cache2 = this._cache)[\"emptyWidth\"]) && void 0 !== _this$_cache2$_emptyW ? _this$_cache2$_emptyW : _this$_cache2.emptyWidth = null !== (_element$offsetWidth = element.offsetWidth) && void 0 !== _element$offsetWidth ? _element$offsetWidth : 0;\n      }\n\n      return this._cache.emptyWidth * (level + 1);\n    }\n  }, {\n    key: \"_getColumnCellStyle\",\n    value: function _getColumnCellStyle(colIndex) {\n      this._ensureColumnCellStyleCache(colIndex);\n\n      return this._cache.columnStyles[colIndex];\n    }\n  }, {\n    key: \"_ensureColumnCellStyleCache\",\n    value: function _ensureColumnCellStyleCache(colIndex) {\n      var _this$_cache3, _this$_cache3$_column;\n\n      null !== (_this$_cache3$_column = (_this$_cache3 = this._cache)[\"columnStyles\"]) && void 0 !== _this$_cache3$_column ? _this$_cache3$_column : _this$_cache3.columnStyles = {};\n\n      if (!this._cache.columnStyles[colIndex]) {\n        var cell = this._getDataCell(0, colIndex);\n\n        this._cache.columnStyles[colIndex] = window.getComputedStyle(cell);\n      }\n    }\n  }, {\n    key: \"_getTreeListTable\",\n    value: function _getTreeListTable() {\n      return this._getTreeListElement(TREELIST_TABLE);\n    }\n  }, {\n    key: \"_getTreeListElement\",\n    value: function _getTreeListElement(className) {\n      return this._treeList._$element.find(\".\" + className).get(0);\n    }\n  }, {\n    key: \"_getDataCell\",\n    value: function _getDataCell(rowIndex, colIndex) {\n      var treeList = this._treeList;\n      var cellElement = treeList.getCellElement(rowIndex, colIndex);\n      return cellElement && cellElement.length ? cellElement[0] : cellElement;\n    }\n  }, {\n    key: \"_getHeaderElement\",\n    value: function _getHeaderElement(index) {\n      return this._getHeaderView().getHeaderElement(index).get(0);\n    }\n  }, {\n    key: \"_getHeaderView\",\n    value: function _getHeaderView() {\n      return this._treeList._views.columnHeadersView;\n    }\n  }, {\n    key: \"_getNodeByRowIndex\",\n    value: function _getNodeByRowIndex(rowIndex) {\n      var _treeList$getKeyByRow;\n\n      var treeList = this._treeList;\n      var nodeKey = null !== (_treeList$getKeyByRow = treeList.getKeyByRowIndex(rowIndex)) && void 0 !== _treeList$getKeyByRow ? _treeList$getKeyByRow : this._findTaskKeyByRowIndex(rowIndex);\n      return treeList.getNodeByKey(nodeKey);\n    }\n  }, {\n    key: \"_findTaskKeyByRowIndex\",\n    value: function _findTaskKeyByRowIndex(rowIndex) {\n      var tasks = this._getGanttTasks();\n\n      var keyGetter = this._gantt._getTaskKeyGetter();\n\n      var task = tasks[rowIndex];\n      return keyGetter(task);\n    }\n  }, {\n    key: \"_getGanttTasks\",\n    value: function _getGanttTasks() {\n      var _this$_gantt$_tasksOp;\n\n      return null === (_this$_gantt$_tasksOp = this._gantt._tasksOption) || void 0 === _this$_gantt$_tasksOp ? void 0 : _this$_gantt$_tasksOp._getItems();\n    }\n  }, {\n    key: \"_getDisplayText\",\n    value: function _getDisplayText(rowIndex, colIndex) {\n      var tasks = this._getGanttTasks();\n\n      var task = tasks[rowIndex];\n      return task && this._getGridDisplayText(colIndex, task);\n    }\n  }, {\n    key: \"_getGridDisplayText\",\n    value: function _getGridDisplayText(colIndex, data) {\n      var columns = this._treeList.getController(\"columns\").getColumns();\n\n      var column = columns[colIndex];\n      var field = null === column || void 0 === column ? void 0 : column.dataField;\n      var format = null === column || void 0 === column ? void 0 : column.format;\n      var value = gridCoreUtils.getDisplayValue(column, data[field], data, \"data\");\n\n      if (isDefined(format)) {\n        if (isDate(value)) {\n          return dateLocalization.format(value, format);\n        }\n\n        if (isNumeric(value)) {\n          return numberLocalization.format(value, format);\n        }\n      }\n\n      return value;\n    }\n  }]);\n\n  return GanttExportHelper;\n}();","map":null,"metadata":{},"sourceType":"module"}