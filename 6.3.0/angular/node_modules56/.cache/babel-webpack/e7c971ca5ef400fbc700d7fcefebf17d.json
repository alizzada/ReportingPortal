{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\nimport FileSystemItem from \"../../file_management/file_system_item\";\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\nimport FileSystemError from \"../../file_management/error\";\nimport ErrorCode from \"../../file_management/error_codes\";\nimport { pathCombine, getEscapedFileName, getPathParts, getFileExtension } from \"../../file_management/utils\";\nimport { whenSome } from \"./ui.file_manager.common\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { find } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined } from \"../../core/utils/type\";\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\n\nvar FileItemsController = /*#__PURE__*/function () {\n  function FileItemsController(options) {\n    _classCallCheck(this, FileItemsController);\n\n    options = options || {};\n    this._options = extend({}, options);\n    this._isInitialized = false;\n    this._dataLoading = false;\n    this._dataLoadingDeferred = null;\n    this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n    this._defaultIconMap = this._createDefaultIconMap();\n\n    this._setSecurityController();\n\n    this._setProvider(options.fileProvider);\n\n    this._initialize();\n  }\n\n  _createClass(FileItemsController, [{\n    key: \"_setSecurityController\",\n    value: function _setSecurityController() {\n      this._securityController = new FileSecurityController({\n        allowedFileExtensions: this._options.allowedFileExtensions,\n        maxFileSize: this._options.uploadMaxFileSize\n      });\n\n      this._resetState();\n    }\n  }, {\n    key: \"setAllowedFileExtensions\",\n    value: function setAllowedFileExtensions(allowedFileExtensions) {\n      if (isDefined(allowedFileExtensions)) {\n        this._options.allowedFileExtensions = allowedFileExtensions;\n      }\n\n      this._setSecurityController();\n\n      this.refresh();\n    }\n  }, {\n    key: \"setUploadOptions\",\n    value: function setUploadOptions(_ref) {\n      var maxFileSize = _ref.maxFileSize,\n          chunkSize = _ref.chunkSize;\n\n      if (isDefined(chunkSize)) {\n        this._options.uploadChunkSize = chunkSize;\n      }\n\n      if (isDefined(maxFileSize)) {\n        this._options.uploadMaxFileSize = maxFileSize;\n\n        this._setSecurityController();\n\n        this.refresh();\n      }\n    }\n  }, {\n    key: \"_setProvider\",\n    value: function _setProvider(fileProvider) {\n      this._fileProvider = this._createFileProvider(fileProvider);\n\n      this._resetState();\n    }\n  }, {\n    key: \"updateProvider\",\n    value: function updateProvider(fileProvider, currentPath) {\n      var _this2 = this;\n\n      this._resetCurrentDirectory();\n\n      this._setProvider(fileProvider);\n\n      return this.refresh().then(function () {\n        return _this2.setCurrentPath(currentPath);\n      });\n    }\n  }, {\n    key: \"_createFileProvider\",\n    value: function _createFileProvider(fileProvider) {\n      if (!fileProvider) {\n        fileProvider = [];\n      }\n\n      if (Array.isArray(fileProvider)) {\n        return new ObjectFileSystemProvider({\n          data: fileProvider\n        });\n      }\n\n      if (fileProvider instanceof FileSystemProviderBase) {\n        return fileProvider;\n      }\n\n      switch (fileProvider.type) {\n        case \"remote\":\n          return new RemoteFileSystemProvider(fileProvider);\n\n        case \"custom\":\n          return new CustomFileSystemProvider(fileProvider);\n      }\n\n      return new ObjectFileSystemProvider(fileProvider);\n    }\n  }, {\n    key: \"setCurrentPath\",\n    value: function setCurrentPath(path) {\n      var pathParts = getPathParts(path);\n      var rawPath = pathCombine.apply(void 0, _toConsumableArray(pathParts));\n\n      if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\n        return new Deferred().resolve().promise();\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathParts);\n    }\n  }, {\n    key: \"setCurrentPathByKeys\",\n    value: function setCurrentPathByKeys(pathKeys) {\n      if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\n        return;\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathKeys, true);\n    }\n  }, {\n    key: \"getCurrentPath\",\n    value: function getCurrentPath() {\n      var currentPath = \"\";\n      var directory = this.getCurrentDirectory();\n\n      while (directory && !directory.fileItem.isRoot()) {\n        var escapedName = getEscapedFileName(directory.fileItem.name);\n        currentPath = pathCombine(escapedName, currentPath);\n        directory = directory.parentDirectory;\n      }\n\n      return currentPath;\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function getCurrentDirectory() {\n      return this._currentDirectoryInfo;\n    }\n  }, {\n    key: \"setCurrentDirectory\",\n    value: function setCurrentDirectory(directoryInfo, checkActuality) {\n      if (!directoryInfo) {\n        return;\n      }\n\n      if (checkActuality) {\n        directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n      }\n\n      if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\n        return;\n      }\n\n      var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\n      this._currentDirectoryInfo = directoryInfo;\n\n      if (requireRaiseSelectedDirectory && this._isInitialized) {\n        if (!this._dataLoading) {\n          this._raiseDataLoading(\"navigation\");\n        }\n\n        this._raiseSelectedDirectoryChanged(directoryInfo);\n      }\n    }\n  }, {\n    key: \"_resetCurrentDirectory\",\n    value: function _resetCurrentDirectory() {\n      this._currentDirectoryInfo = this._rootDirectoryInfo;\n    }\n  }, {\n    key: \"getCurrentItems\",\n    value: function getCurrentItems(onlyFiles) {\n      var _this3 = this;\n\n      return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(function () {\n        return _this3._getCurrentItemsInternal(onlyFiles);\n      }) : this._getCurrentItemsInternal(onlyFiles);\n    }\n  }, {\n    key: \"_getCurrentItemsInternal\",\n    value: function _getCurrentItemsInternal(onlyFiles) {\n      var _this4 = this;\n\n      var currentDirectory = this.getCurrentDirectory();\n      var getItemsPromise = this.getDirectoryContents(currentDirectory);\n      return getItemsPromise.then(function (items) {\n        var separatedItems = _this4._separateItemsByType(items);\n\n        currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\n        return onlyFiles ? separatedItems.files : items;\n      });\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n      return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(function (itemInfos) {\n        return itemInfos.filter(function (info) {\n          return info.fileItem.isDirectory;\n        });\n      });\n    }\n  }, {\n    key: \"_separateItemsByType\",\n    value: function _separateItemsByType(itemInfos) {\n      var folders = [];\n      var files = [];\n      itemInfos.forEach(function (info) {\n        return info.fileItem.isDirectory ? folders.push(info) : files.push(info);\n      });\n      return {\n        folders: folders,\n        files: files\n      };\n    }\n  }, {\n    key: \"getDirectoryContents\",\n    value: function getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\n      var _this5 = this;\n\n      if (!parentDirectoryInfo) {\n        return new Deferred().resolve([this._rootDirectoryInfo]).promise();\n      }\n\n      if (parentDirectoryInfo.itemsLoaded) {\n        return new Deferred().resolve(parentDirectoryInfo.items).promise();\n      }\n\n      var dirKey = parentDirectoryInfo.getInternalKey();\n      var loadItemsDeferred = this._loadedItems[dirKey];\n\n      if (loadItemsDeferred) {\n        return loadItemsDeferred;\n      }\n\n      loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(function (fileItems) {\n        fileItems = fileItems || [];\n        parentDirectoryInfo.items = fileItems.map(function (fileItem) {\n          return fileItem.isDirectory && _this5._createDirectoryInfo(fileItem, parentDirectoryInfo) || _this5._createFileInfo(fileItem, parentDirectoryInfo);\n        });\n        parentDirectoryInfo.itemsLoaded = true;\n        return parentDirectoryInfo.items;\n      });\n      this._loadedItems[dirKey] = loadItemsDeferred;\n      loadItemsDeferred.always(function () {\n        delete _this5._loadedItems[dirKey];\n      });\n      return loadItemsDeferred;\n    }\n  }, {\n    key: \"_getFileItems\",\n    value: function _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\n      var _this6 = this;\n\n      var loadItemsDeferred = null;\n\n      try {\n        loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem);\n      } catch (error) {\n        return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError);\n      }\n\n      return when(loadItemsDeferred).then(function (fileItems) {\n        return _this6._securityController.getAllowedItems(fileItems);\n      }, function (errorInfo) {\n        return _this6._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError);\n      });\n    }\n  }, {\n    key: \"createDirectory\",\n    value: function createDirectory(parentDirectoryInfo, name) {\n      var _this7 = this;\n\n      var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this7._fileProvider.createDirectory(parentDirectoryInfo.fileItem, name).done(function (info) {\n          if (!parentDirectoryInfo.fileItem.isRoot()) {\n            parentDirectoryInfo.fileItem.hasSubDirectories = true;\n          }\n\n          return info;\n        });\n      }, function () {\n        return _this7._resetDirectoryState(parentDirectoryInfo, true);\n      });\n    }\n  }, {\n    key: \"renameItem\",\n    value: function renameItem(fileItemInfo, name) {\n      var _this8 = this;\n\n      var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\n        itemNewName: name\n      });\n\n      return this._processEditAction(actionInfo, function () {\n        if (!fileItemInfo.fileItem.isDirectory) {\n          _this8._securityController.validateExtension(name);\n        }\n\n        return _this8._fileProvider.renameItem(fileItemInfo.fileItem, name);\n      }, function () {\n        var parentDirectory = _this8._getActualDirectoryInfo(fileItemInfo.parentDirectory);\n\n        _this8._resetDirectoryState(parentDirectory);\n\n        _this8.setCurrentDirectory(parentDirectory);\n      });\n    }\n  }, {\n    key: \"moveItems\",\n    value: function moveItems(itemInfos, destinationDirectory) {\n      var _this9 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this9._fileProvider.moveItems(items, destinationDirectory.fileItem);\n      }, function () {\n        destinationDirectory = _this9._getActualDirectoryInfo(destinationDirectory);\n        itemInfos.forEach(function (itemInfo) {\n          return _this9._resetDirectoryState(itemInfo.parentDirectory, true);\n        });\n\n        _this9._resetDirectoryState(destinationDirectory);\n\n        _this9.setCurrentDirectory(destinationDirectory);\n\n        destinationDirectory.expanded = true;\n      });\n    }\n  }, {\n    key: \"copyItems\",\n    value: function copyItems(itemInfos, destinationDirectory) {\n      var _this10 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this10._fileProvider.copyItems(items, destinationDirectory.fileItem);\n      }, function () {\n        destinationDirectory = _this10._getActualDirectoryInfo(destinationDirectory);\n\n        _this10._resetDirectoryState(destinationDirectory);\n\n        _this10.setCurrentDirectory(destinationDirectory);\n\n        destinationDirectory.expanded = true;\n      });\n    }\n  }, {\n    key: \"deleteItems\",\n    value: function deleteItems(itemInfos) {\n      var _this11 = this;\n\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n      var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\n\n      var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\n\n      return this._processEditAction(actionInfo, function () {\n        return _this11._fileProvider.deleteItems(items);\n      }, function () {\n        itemInfos.forEach(function (itemInfo) {\n          var parentDir = _this11._getActualDirectoryInfo(itemInfo.parentDirectory);\n\n          _this11._resetDirectoryState(parentDir);\n\n          _this11.setCurrentDirectory(parentDir);\n        });\n      });\n    }\n  }, {\n    key: \"processUploadSession\",\n    value: function processUploadSession(sessionInfo, uploadDirectoryInfo) {\n      var _this12 = this;\n\n      var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\n        sessionInfo: sessionInfo\n      });\n\n      return this._processEditAction(actionInfo, function () {\n        return sessionInfo.deferreds;\n      }, function () {\n        return _this12._resetDirectoryState(uploadDirectoryInfo, true);\n      });\n    }\n  }, {\n    key: \"uploadFileChunk\",\n    value: function uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n      this._securityController.validateMaxFileSize(fileData.size);\n\n      this._securityController.validateExtension(fileData.name);\n\n      return when(this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\n    }\n  }, {\n    key: \"abortFileUpload\",\n    value: function abortFileUpload(fileData, chunksInfo, destinationDirectory) {\n      return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory));\n    }\n  }, {\n    key: \"getFileUploadChunkSize\",\n    value: function getFileUploadChunkSize() {\n      var chunkSize = this._options.uploadChunkSize;\n\n      if (chunkSize && chunkSize > 0) {\n        return chunkSize;\n      }\n\n      return this._fileProvider.getFileUploadChunkSize();\n    }\n  }, {\n    key: \"downloadItems\",\n    value: function downloadItems(itemInfos) {\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n\n      this._fileProvider.downloadItems(items);\n    }\n  }, {\n    key: \"getItemContent\",\n    value: function getItemContent(itemInfos) {\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n      return when(this._fileProvider.getItemsContent(items));\n    }\n  }, {\n    key: \"_handleItemLoadError\",\n    value: function _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\n      parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\n\n      this._raiseEditActionStarting(actionInfo);\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      this._raiseEditActionError(actionInfo, {\n        errorCode: errorInfo.errorCode,\n        errorText: errorInfo.errorText,\n        fileItem: parentDirectoryInfo.fileItem,\n        index: 0\n      });\n\n      this._resetDirectoryState(parentDirectoryInfo);\n\n      parentDirectoryInfo.expanded = false;\n\n      if (!skipNavigationOnError) {\n        this.setCurrentDirectory(parentDirectoryInfo.parentDirectory);\n      }\n\n      return new Deferred().reject().promise();\n    }\n  }, {\n    key: \"_processEditAction\",\n    value: function _processEditAction(actionInfo, action, completeAction) {\n      var _this13 = this;\n\n      var actionResult = null;\n\n      this._raiseEditActionStarting(actionInfo);\n\n      try {\n        actionResult = action();\n      } catch (errorInfo) {\n        this._raiseEditActionError(actionInfo, errorInfo);\n\n        return new Deferred().reject().promise();\n      }\n\n      if (!Array.isArray(actionResult)) {\n        actionResult = [actionResult];\n      } else if (actionResult.length > 1) {\n        actionInfo.singleRequest = false;\n      }\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      return whenSome(actionResult, function (info) {\n        return _this13._raiseCompleteEditActionItem(actionInfo, info);\n      }, function (errorInfo) {\n        return _this13._raiseEditActionItemError(actionInfo, errorInfo);\n      }).then(function () {\n        completeAction();\n\n        _this13._raiseCompleteEditAction(actionInfo);\n      });\n    }\n  }, {\n    key: \"_createEditActionInfo\",\n    value: function _createEditActionInfo(name, targetItemInfos, directory, customData) {\n      targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\n      customData = customData || {};\n      var items = targetItemInfos.map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n      return {\n        name: name,\n        itemInfos: targetItemInfos,\n        items: items,\n        directory: directory,\n        customData: customData,\n        singleRequest: true\n      };\n    }\n  }, {\n    key: \"_getItemInfosForUploaderFiles\",\n    value: function _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\n      var pathInfo = this._getPathInfo(parentDirectoryInfo);\n\n      var result = [];\n\n      for (var i = 0; i < files.length; i++) {\n        var file = files[i];\n        var item = new FileSystemItem(pathInfo, file.name, false);\n\n        var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\n\n        result.push(itemInfo);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this14 = this;\n\n      if (this._lockRefresh) {\n        return this._refreshDeferred;\n      }\n\n      this._lockRefresh = true;\n      return this._executeDataLoad(function () {\n        return _this14._refreshDeferred = _this14._refreshInternal();\n      }, \"refresh\");\n    }\n  }, {\n    key: \"_refreshInternal\",\n    value: function _refreshInternal() {\n      var _this15 = this;\n\n      var cachedRootInfo = {\n        items: this._rootDirectoryInfo.items\n      };\n\n      var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\n\n      this._resetDirectoryState(this._rootDirectoryInfo);\n\n      return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(function () {\n        var dirInfo = _this15._findDirectoryByPathKeyParts(selectedKeyParts);\n\n        _this15.setCurrentDirectory(dirInfo);\n\n        delete _this15._lockRefresh;\n      });\n    }\n  }, {\n    key: \"_loadItemsRecursive\",\n    value: function _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\n      var _this = this;\n\n      return this.getDirectories(directoryInfo).then(function (dirInfos) {\n        var itemDeferreds = [];\n\n        var _loop = function _loop(i) {\n          var cachedItem = find(cachedDirectoryInfo.items, function (cache) {\n            return dirInfos[i].fileItem.key === cache.fileItem.key;\n          });\n\n          if (!cachedItem) {\n            return \"continue\";\n          }\n\n          dirInfos[i].expanded = cachedItem.expanded;\n\n          if (dirInfos[i].expanded) {\n            itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem));\n          }\n        };\n\n        for (var i = 0; i < dirInfos.length; i++) {\n          var _ret = _loop(i);\n\n          if (\"continue\" === _ret) {\n            continue;\n          }\n        }\n\n        return whenSome(itemDeferreds);\n      }, function () {\n        return null;\n      });\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      var _this16 = this;\n\n      var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\n\n      var completeInitialization = function completeInitialization() {\n        _this16._isInitialized = true;\n\n        _this16._raiseInitialized();\n      };\n\n      if (result) {\n        when(result).always(completeInitialization);\n      } else {\n        completeInitialization();\n      }\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathParts\",\n    value: function _setCurrentDirectoryByPathParts(pathParts, useKeys) {\n      var _this17 = this;\n\n      return this._executeDataLoad(function () {\n        return _this17._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys);\n      }, \"navigation\");\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathPartsInternal\",\n    value: function _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\n      var _this18 = this;\n\n      return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(function (directoryInfo) {\n        for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\n          info.expanded = true;\n        }\n\n        _this18.setCurrentDirectory(directoryInfo);\n      });\n    }\n  }, {\n    key: \"_executeDataLoad\",\n    value: function _executeDataLoad(action, operation) {\n      var _this19 = this;\n\n      if (this._dataLoadingDeferred) {\n        return this._dataLoadingDeferred.then(function () {\n          return _this19._executeDataLoad(action, operation);\n        });\n      }\n\n      this._dataLoading = true;\n      this._dataLoadingDeferred = new Deferred();\n\n      if (this._isInitialized) {\n        this._raiseDataLoading(operation);\n      }\n\n      return action().always(function () {\n        var tempDeferred = _this19._dataLoadingDeferred;\n        _this19._dataLoadingDeferred = null;\n        _this19._dataLoading = false;\n        tempDeferred.resolve();\n      });\n    }\n  }, {\n    key: \"_getDirectoryByPathParts\",\n    value: function _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\n      var _this20 = this;\n\n      if (pathParts.length < 1) {\n        return new Deferred().resolve(parentDirectoryInfo).promise();\n      }\n\n      var fieldName = useKeys ? \"key\" : \"name\";\n      return this.getDirectories(parentDirectoryInfo).then(function (dirInfos) {\n        var subDirInfo = find(dirInfos, function (d) {\n          return d.fileItem[fieldName] === pathParts[0];\n        });\n\n        if (!subDirInfo) {\n          return new Deferred().reject().promise();\n        }\n\n        var restPathParts = _toConsumableArray(pathParts).splice(1);\n\n        return _this20._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys);\n      });\n    }\n  }, {\n    key: \"_getDirectoryPathKeyParts\",\n    value: function _getDirectoryPathKeyParts(directoryInfo) {\n      var pathParts = [];\n\n      while (directoryInfo && directoryInfo.parentDirectory) {\n        pathParts.unshift(directoryInfo.fileItem.key);\n        directoryInfo = directoryInfo.parentDirectory;\n      }\n\n      return pathParts;\n    }\n  }, {\n    key: \"_findDirectoryByPathKeyParts\",\n    value: function _findDirectoryByPathKeyParts(keyParts) {\n      var selectedDirInfo = this._rootDirectoryInfo;\n\n      if (0 === keyParts.length) {\n        return selectedDirInfo;\n      }\n\n      var i = 0;\n      var newSelectedDir = selectedDirInfo;\n\n      while (newSelectedDir && i < keyParts.length) {\n        newSelectedDir = find(selectedDirInfo.items, function (info) {\n          return info.fileItem.key === keyParts[i];\n        });\n\n        if (newSelectedDir) {\n          selectedDirInfo = newSelectedDir;\n        }\n\n        i++;\n      }\n\n      return selectedDirInfo;\n    }\n  }, {\n    key: \"_getActualDirectoryInfo\",\n    value: function _getActualDirectoryInfo(directoryInfo) {\n      var keys = this._getDirectoryPathKeyParts(directoryInfo);\n\n      return this._findDirectoryByPathKeyParts(keys);\n    }\n  }, {\n    key: \"_createDirInfoByName\",\n    value: function _createDirInfoByName(name, parentDirectoryInfo) {\n      var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\n\n      var fileItem = new FileSystemItem(dirPathInfo, name, true);\n      return this._createDirectoryInfo(fileItem, parentDirectoryInfo);\n    }\n  }, {\n    key: \"_createDirectoryInfo\",\n    value: function _createDirectoryInfo(fileItem, parentDirectoryInfo) {\n      return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\n        icon: \"folder\",\n        expanded: fileItem.isRoot(),\n        items: []\n      });\n    }\n  }, {\n    key: \"_createFileInfo\",\n    value: function _createFileInfo(fileItem, parentDirectoryInfo) {\n      return {\n        fileItem: fileItem,\n        parentDirectory: parentDirectoryInfo,\n        icon: this._getFileItemDefaultIcon(fileItem),\n        getInternalKey: function getInternalKey() {\n          return \"FIK_\".concat(this.fileItem.key);\n        },\n        getDisplayName: function getDisplayName() {\n          return this.displayName || this.fileItem.name;\n        }\n      };\n    }\n  }, {\n    key: \"_resetDirectoryState\",\n    value: function _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\n      if (isActualDirectoryRequired) {\n        directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n      }\n\n      directoryInfo.itemsLoaded = false;\n      directoryInfo.items = [];\n    }\n  }, {\n    key: \"_getFileItemDefaultIcon\",\n    value: function _getFileItemDefaultIcon(fileItem) {\n      if (fileItem.isDirectory) {\n        return \"folder\";\n      }\n\n      var extension = fileItem.getFileExtension();\n      var icon = this._defaultIconMap[extension];\n      return icon || \"doc\";\n    }\n  }, {\n    key: \"_createDefaultIconMap\",\n    value: function _createDefaultIconMap() {\n      var result = {\n        \".txt\": \"txtfile\",\n        \".rtf\": \"rtffile\",\n        \".doc\": \"docfile\",\n        \".docx\": \"docxfile\",\n        \".xls\": \"xlsfile\",\n        \".xlsx\": \"xlsxfile\",\n        \".ppt\": \"pptfile\",\n        \".pptx\": \"pptxfile\",\n        \".pdf\": \"pdffile\"\n      };\n      [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(function (extension) {\n        result[extension] = \"image\";\n      });\n      return result;\n    }\n  }, {\n    key: \"_createRootDirectoryInfo\",\n    value: function _createRootDirectoryInfo(text) {\n      var rootDirectory = new FileSystemItem(null, \"\", true);\n\n      var result = this._createDirectoryInfo(rootDirectory, null);\n\n      result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n      return result;\n    }\n  }, {\n    key: \"setRootText\",\n    value: function setRootText(rootText) {\n      this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n    }\n  }, {\n    key: \"_raiseInitialized\",\n    value: function _raiseInitialized() {\n      var e = {\n        controller: this\n      };\n\n      if (this._options.onInitialized) {\n        this._options.onInitialized(e);\n      }\n    }\n  }, {\n    key: \"_raiseDataLoading\",\n    value: function _raiseDataLoading(operation) {\n      if (this._options.onDataLoading) {\n        this._options.onDataLoading({\n          operation: operation\n        });\n      }\n    }\n  }, {\n    key: \"_raiseSelectedDirectoryChanged\",\n    value: function _raiseSelectedDirectoryChanged(directoryInfo) {\n      var e = {\n        selectedDirectoryInfo: directoryInfo\n      };\n\n      if (this._options.onSelectedDirectoryChanged) {\n        this._options.onSelectedDirectoryChanged(e);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionStarting\",\n    value: function _raiseEditActionStarting(actionInfo) {\n      if (this._options.onEditActionStarting) {\n        this._options.onEditActionStarting(actionInfo);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionResultAcquired\",\n    value: function _raiseEditActionResultAcquired(actionInfo) {\n      if (this._options.onEditActionResultAcquired) {\n        this._options.onEditActionResultAcquired(actionInfo);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionError\",\n    value: function _raiseEditActionError(actionInfo, errorInfo) {\n      if (this._options.onEditActionError) {\n        this._options.onEditActionError(actionInfo, errorInfo);\n      }\n    }\n  }, {\n    key: \"_raiseEditActionItemError\",\n    value: function _raiseEditActionItemError(actionInfo, errorInfo) {\n      if (this._options.onEditActionItemError) {\n        this._options.onEditActionItemError(actionInfo, errorInfo);\n      }\n    }\n  }, {\n    key: \"_raiseCompleteEditActionItem\",\n    value: function _raiseCompleteEditActionItem(actionInfo, info) {\n      if (this._options.onCompleteEditActionItem) {\n        this._options.onCompleteEditActionItem(actionInfo, info);\n      }\n    }\n  }, {\n    key: \"_raiseCompleteEditAction\",\n    value: function _raiseCompleteEditAction(actionInfo) {\n      if (this._options.onCompleteEditAction) {\n        this._options.onCompleteEditAction(actionInfo);\n      }\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._selectedDirectory = null;\n      this._rootDirectoryInfo.items = [];\n      this._loadedItems = {};\n    }\n  }, {\n    key: \"_getPathInfo\",\n    value: function _getPathInfo(directoryInfo) {\n      var pathInfo = [];\n\n      for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\n        pathInfo.unshift({\n          key: dirInfo.fileItem.key,\n          name: dirInfo.fileItem.name\n        });\n      }\n\n      return pathInfo;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, eventHandler) {\n      var finalEventName = \"on\".concat(eventName);\n      this._options[finalEventName] = eventHandler;\n    }\n  }]);\n\n  return FileItemsController;\n}();\n\nexport { FileItemsController as default };\n\nvar FileSecurityController = /*#__PURE__*/function () {\n  function FileSecurityController(options) {\n    var _this21 = this;\n\n    _classCallCheck(this, FileSecurityController);\n\n    this._options = extend({\n      allowedFileExtensions: [],\n      maxFileSize: 0\n    }, options);\n    this._extensionsMap = {};\n\n    this._allowedFileExtensions.forEach(function (extension) {\n      _this21._extensionsMap[extension.toUpperCase()] = true;\n    });\n  }\n\n  _createClass(FileSecurityController, [{\n    key: \"getAllowedItems\",\n    value: function getAllowedItems(items) {\n      var _this22 = this;\n\n      if (0 === this._allowedFileExtensions.length) {\n        return items;\n      }\n\n      return items.filter(function (item) {\n        return item.isDirectory || _this22._isValidExtension(item.name);\n      });\n    }\n  }, {\n    key: \"validateExtension\",\n    value: function validateExtension(name) {\n      if (!this._isValidExtension(name)) {\n        throw new FileSystemError(ErrorCode.WrongFileExtension, null);\n      }\n    }\n  }, {\n    key: \"validateMaxFileSize\",\n    value: function validateMaxFileSize(size) {\n      if (this._maxFileSize && size > this._maxFileSize) {\n        throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null);\n      }\n    }\n  }, {\n    key: \"_isValidExtension\",\n    value: function _isValidExtension(name) {\n      if (0 === this._allowedFileExtensions.length) {\n        return true;\n      }\n\n      var extension = getFileExtension(name).toUpperCase();\n      return this._extensionsMap[extension];\n    }\n  }, {\n    key: \"_allowedFileExtensions\",\n    get: function get() {\n      return this._options.allowedFileExtensions;\n    }\n  }, {\n    key: \"_maxFileSize\",\n    get: function get() {\n      return this._options.maxFileSize;\n    }\n  }]);\n\n  return FileSecurityController;\n}();","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/file_items_controller.js"],"names":["FileSystemProviderBase","FileSystemItem","ObjectFileSystemProvider","RemoteFileSystemProvider","CustomFileSystemProvider","FileSystemError","ErrorCode","pathCombine","getEscapedFileName","getPathParts","getFileExtension","whenSome","Deferred","when","find","extend","equalByValue","isDefined","DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME","FileItemsController","options","_options","_isInitialized","_dataLoading","_dataLoadingDeferred","_rootDirectoryInfo","_createRootDirectoryInfo","rootText","_currentDirectoryInfo","_defaultIconMap","_createDefaultIconMap","_setSecurityController","_setProvider","fileProvider","_initialize","_securityController","FileSecurityController","allowedFileExtensions","maxFileSize","uploadMaxFileSize","_resetState","refresh","_ref","chunkSize","uploadChunkSize","_fileProvider","_createFileProvider","currentPath","_resetCurrentDirectory","then","setCurrentPath","Array","isArray","data","type","path","pathParts","rawPath","getCurrentDirectory","fileItem","relativeName","resolve","promise","_setCurrentDirectoryByPathParts","pathKeys","directory","isRoot","escapedName","name","parentDirectory","directoryInfo","checkActuality","_getActualDirectoryInfo","requireRaiseSelectedDirectory","key","_raiseDataLoading","_raiseSelectedDirectoryChanged","onlyFiles","_getCurrentItemsInternal","currentDirectory","getItemsPromise","getDirectoryContents","items","separatedItems","_separateItemsByType","hasSubDirectories","folders","length","files","parentDirectoryInfo","skipNavigationOnError","itemInfos","filter","info","isDirectory","forEach","push","itemsLoaded","dirKey","getInternalKey","loadItemsDeferred","_loadedItems","_getFileItems","fileItems","map","_createDirectoryInfo","_createFileInfo","always","getItems","error","_handleItemLoadError","getAllowedItems","errorInfo","tempDirInfo","_createDirInfoByName","actionInfo","_createEditActionInfo","_processEditAction","createDirectory","done","_resetDirectoryState","fileItemInfo","itemNewName","validateExtension","renameItem","setCurrentDirectory","destinationDirectory","i","moveItems","itemInfo","expanded","copyItems","deleteItems","parentDir","sessionInfo","uploadDirectoryInfo","_getItemInfosForUploaderFiles","deferreds","fileData","chunksInfo","validateMaxFileSize","size","uploadFileChunk","abortFileUpload","getFileUploadChunkSize","downloadItems","getItemsContent","_raiseEditActionStarting","_raiseEditActionResultAcquired","_raiseEditActionError","errorCode","errorText","index","reject","action","completeAction","actionResult","singleRequest","_raiseCompleteEditActionItem","_raiseEditActionItemError","_raiseCompleteEditAction","targetItemInfos","customData","pathInfo","_getPathInfo","result","file","item","_lockRefresh","_refreshDeferred","_executeDataLoad","_refreshInternal","cachedRootInfo","selectedKeyParts","_getDirectoryPathKeyParts","_loadItemsRecursive","dirInfo","_findDirectoryByPathKeyParts","cachedDirectoryInfo","_this","getDirectories","dirInfos","itemDeferreds","_loop","cachedItem","cache","_ret","currentPathKeys","setCurrentPathByKeys","completeInitialization","_raiseInitialized","useKeys","_setCurrentDirectoryByPathPartsInternal","_getDirectoryByPathParts","operation","tempDeferred","fieldName","subDirInfo","d","restPathParts","splice","unshift","keyParts","selectedDirInfo","newSelectedDir","keys","dirPathInfo","icon","_getFileItemDefaultIcon","concat","getDisplayName","displayName","isActualDirectoryRequired","extension","text","rootDirectory","e","controller","onInitialized","onDataLoading","selectedDirectoryInfo","onSelectedDirectoryChanged","onEditActionStarting","onEditActionResultAcquired","onEditActionError","onEditActionItemError","onCompleteEditActionItem","onCompleteEditAction","_selectedDirectory","eventName","eventHandler","finalEventName","_extensionsMap","_allowedFileExtensions","toUpperCase","_isValidExtension","WrongFileExtension","_maxFileSize","MaxFileSizeExceeded"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\r\nimport FileSystemItem from \"../../file_management/file_system_item\";\r\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\r\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\r\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\r\nimport FileSystemError from \"../../file_management/error\";\r\nimport ErrorCode from \"../../file_management/error_codes\";\r\nimport {\r\n    pathCombine,\r\n    getEscapedFileName,\r\n    getPathParts,\r\n    getFileExtension\r\n} from \"../../file_management/utils\";\r\nimport {\r\n    whenSome\r\n} from \"./ui.file_manager.common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    find\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\r\nexport default class FileItemsController {\r\n    constructor(options) {\r\n        options = options || {};\r\n        this._options = extend({}, options);\r\n        this._isInitialized = false;\r\n        this._dataLoading = false;\r\n        this._dataLoadingDeferred = null;\r\n        this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo;\r\n        this._defaultIconMap = this._createDefaultIconMap();\r\n        this._setSecurityController();\r\n        this._setProvider(options.fileProvider);\r\n        this._initialize()\r\n    }\r\n    _setSecurityController() {\r\n        this._securityController = new FileSecurityController({\r\n            allowedFileExtensions: this._options.allowedFileExtensions,\r\n            maxFileSize: this._options.uploadMaxFileSize\r\n        });\r\n        this._resetState()\r\n    }\r\n    setAllowedFileExtensions(allowedFileExtensions) {\r\n        if (isDefined(allowedFileExtensions)) {\r\n            this._options.allowedFileExtensions = allowedFileExtensions\r\n        }\r\n        this._setSecurityController();\r\n        this.refresh()\r\n    }\r\n    setUploadOptions(_ref) {\r\n        var {\r\n            maxFileSize: maxFileSize,\r\n            chunkSize: chunkSize\r\n        } = _ref;\r\n        if (isDefined(chunkSize)) {\r\n            this._options.uploadChunkSize = chunkSize\r\n        }\r\n        if (isDefined(maxFileSize)) {\r\n            this._options.uploadMaxFileSize = maxFileSize;\r\n            this._setSecurityController();\r\n            this.refresh()\r\n        }\r\n    }\r\n    _setProvider(fileProvider) {\r\n        this._fileProvider = this._createFileProvider(fileProvider);\r\n        this._resetState()\r\n    }\r\n    updateProvider(fileProvider, currentPath) {\r\n        this._resetCurrentDirectory();\r\n        this._setProvider(fileProvider);\r\n        return this.refresh().then(() => this.setCurrentPath(currentPath))\r\n    }\r\n    _createFileProvider(fileProvider) {\r\n        if (!fileProvider) {\r\n            fileProvider = []\r\n        }\r\n        if (Array.isArray(fileProvider)) {\r\n            return new ObjectFileSystemProvider({\r\n                data: fileProvider\r\n            })\r\n        }\r\n        if (fileProvider instanceof FileSystemProviderBase) {\r\n            return fileProvider\r\n        }\r\n        switch (fileProvider.type) {\r\n            case \"remote\":\r\n                return new RemoteFileSystemProvider(fileProvider);\r\n            case \"custom\":\r\n                return new CustomFileSystemProvider(fileProvider)\r\n        }\r\n        return new ObjectFileSystemProvider(fileProvider)\r\n    }\r\n    setCurrentPath(path) {\r\n        var pathParts = getPathParts(path);\r\n        var rawPath = pathCombine(...pathParts);\r\n        if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathParts)\r\n    }\r\n    setCurrentPathByKeys(pathKeys) {\r\n        if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\r\n            return\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathKeys, true)\r\n    }\r\n    getCurrentPath() {\r\n        var currentPath = \"\";\r\n        var directory = this.getCurrentDirectory();\r\n        while (directory && !directory.fileItem.isRoot()) {\r\n            var escapedName = getEscapedFileName(directory.fileItem.name);\r\n            currentPath = pathCombine(escapedName, currentPath);\r\n            directory = directory.parentDirectory\r\n        }\r\n        return currentPath\r\n    }\r\n    getCurrentDirectory() {\r\n        return this._currentDirectoryInfo\r\n    }\r\n    setCurrentDirectory(directoryInfo, checkActuality) {\r\n        if (!directoryInfo) {\r\n            return\r\n        }\r\n        if (checkActuality) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\r\n            return\r\n        }\r\n        var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\r\n        this._currentDirectoryInfo = directoryInfo;\r\n        if (requireRaiseSelectedDirectory && this._isInitialized) {\r\n            if (!this._dataLoading) {\r\n                this._raiseDataLoading(\"navigation\")\r\n            }\r\n            this._raiseSelectedDirectoryChanged(directoryInfo)\r\n        }\r\n    }\r\n    _resetCurrentDirectory() {\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo\r\n    }\r\n    getCurrentItems(onlyFiles) {\r\n        return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(() => this._getCurrentItemsInternal(onlyFiles)) : this._getCurrentItemsInternal(onlyFiles)\r\n    }\r\n    _getCurrentItemsInternal(onlyFiles) {\r\n        var currentDirectory = this.getCurrentDirectory();\r\n        var getItemsPromise = this.getDirectoryContents(currentDirectory);\r\n        return getItemsPromise.then(items => {\r\n            var separatedItems = this._separateItemsByType(items);\r\n            currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\r\n            return onlyFiles ? separatedItems.files : items\r\n        })\r\n    }\r\n    getDirectories(parentDirectoryInfo, skipNavigationOnError) {\r\n        return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(itemInfos => itemInfos.filter(info => info.fileItem.isDirectory))\r\n    }\r\n    _separateItemsByType(itemInfos) {\r\n        var folders = [];\r\n        var files = [];\r\n        itemInfos.forEach(info => info.fileItem.isDirectory ? folders.push(info) : files.push(info));\r\n        return {\r\n            folders: folders,\r\n            files: files\r\n        }\r\n    }\r\n    getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\r\n        if (!parentDirectoryInfo) {\r\n            return (new Deferred).resolve([this._rootDirectoryInfo]).promise()\r\n        }\r\n        if (parentDirectoryInfo.itemsLoaded) {\r\n            return (new Deferred).resolve(parentDirectoryInfo.items).promise()\r\n        }\r\n        var dirKey = parentDirectoryInfo.getInternalKey();\r\n        var loadItemsDeferred = this._loadedItems[dirKey];\r\n        if (loadItemsDeferred) {\r\n            return loadItemsDeferred\r\n        }\r\n        loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(fileItems => {\r\n            fileItems = fileItems || [];\r\n            parentDirectoryInfo.items = fileItems.map(fileItem => fileItem.isDirectory && this._createDirectoryInfo(fileItem, parentDirectoryInfo) || this._createFileInfo(fileItem, parentDirectoryInfo));\r\n            parentDirectoryInfo.itemsLoaded = true;\r\n            return parentDirectoryInfo.items\r\n        });\r\n        this._loadedItems[dirKey] = loadItemsDeferred;\r\n        loadItemsDeferred.always(() => {\r\n            delete this._loadedItems[dirKey]\r\n        });\r\n        return loadItemsDeferred\r\n    }\r\n    _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\r\n        var loadItemsDeferred = null;\r\n        try {\r\n            loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem)\r\n        } catch (error) {\r\n            return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError)\r\n        }\r\n        return when(loadItemsDeferred).then(fileItems => this._securityController.getAllowedItems(fileItems), errorInfo => this._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError))\r\n    }\r\n    createDirectory(parentDirectoryInfo, name) {\r\n        var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\r\n        return this._processEditAction(actionInfo, () => this._fileProvider.createDirectory(parentDirectoryInfo.fileItem, name).done(info => {\r\n            if (!parentDirectoryInfo.fileItem.isRoot()) {\r\n                parentDirectoryInfo.fileItem.hasSubDirectories = true\r\n            }\r\n            return info\r\n        }), () => this._resetDirectoryState(parentDirectoryInfo, true))\r\n    }\r\n    renameItem(fileItemInfo, name) {\r\n        var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\r\n            itemNewName: name\r\n        });\r\n        return this._processEditAction(actionInfo, () => {\r\n            if (!fileItemInfo.fileItem.isDirectory) {\r\n                this._securityController.validateExtension(name)\r\n            }\r\n            return this._fileProvider.renameItem(fileItemInfo.fileItem, name)\r\n        }, () => {\r\n            var parentDirectory = this._getActualDirectoryInfo(fileItemInfo.parentDirectory);\r\n            this._resetDirectoryState(parentDirectory);\r\n            this.setCurrentDirectory(parentDirectory)\r\n        })\r\n    }\r\n    moveItems(itemInfos, destinationDirectory) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, () => this._fileProvider.moveItems(items, destinationDirectory.fileItem), () => {\r\n            destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n            itemInfos.forEach(itemInfo => this._resetDirectoryState(itemInfo.parentDirectory, true));\r\n            this._resetDirectoryState(destinationDirectory);\r\n            this.setCurrentDirectory(destinationDirectory);\r\n            destinationDirectory.expanded = true\r\n        })\r\n    }\r\n    copyItems(itemInfos, destinationDirectory) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, () => this._fileProvider.copyItems(items, destinationDirectory.fileItem), () => {\r\n            destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n            this._resetDirectoryState(destinationDirectory);\r\n            this.setCurrentDirectory(destinationDirectory);\r\n            destinationDirectory.expanded = true\r\n        })\r\n    }\r\n    deleteItems(itemInfos) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\r\n        var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\r\n        return this._processEditAction(actionInfo, () => this._fileProvider.deleteItems(items), () => {\r\n            itemInfos.forEach(itemInfo => {\r\n                var parentDir = this._getActualDirectoryInfo(itemInfo.parentDirectory);\r\n                this._resetDirectoryState(parentDir);\r\n                this.setCurrentDirectory(parentDir)\r\n            })\r\n        })\r\n    }\r\n    processUploadSession(sessionInfo, uploadDirectoryInfo) {\r\n        var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\r\n            sessionInfo: sessionInfo\r\n        });\r\n        return this._processEditAction(actionInfo, () => sessionInfo.deferreds, () => this._resetDirectoryState(uploadDirectoryInfo, true))\r\n    }\r\n    uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\r\n        this._securityController.validateMaxFileSize(fileData.size);\r\n        this._securityController.validateExtension(fileData.name);\r\n        return when(this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory))\r\n    }\r\n    abortFileUpload(fileData, chunksInfo, destinationDirectory) {\r\n        return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory))\r\n    }\r\n    getFileUploadChunkSize() {\r\n        var chunkSize = this._options.uploadChunkSize;\r\n        if (chunkSize && chunkSize > 0) {\r\n            return chunkSize\r\n        }\r\n        return this._fileProvider.getFileUploadChunkSize()\r\n    }\r\n    downloadItems(itemInfos) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        this._fileProvider.downloadItems(items)\r\n    }\r\n    getItemContent(itemInfos) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        return when(this._fileProvider.getItemsContent(items))\r\n    }\r\n    _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\r\n        parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\r\n        this._raiseEditActionStarting(actionInfo);\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        this._raiseEditActionError(actionInfo, {\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorInfo.errorText,\r\n            fileItem: parentDirectoryInfo.fileItem,\r\n            index: 0\r\n        });\r\n        this._resetDirectoryState(parentDirectoryInfo);\r\n        parentDirectoryInfo.expanded = false;\r\n        if (!skipNavigationOnError) {\r\n            this.setCurrentDirectory(parentDirectoryInfo.parentDirectory)\r\n        }\r\n        return (new Deferred).reject().promise()\r\n    }\r\n    _processEditAction(actionInfo, action, completeAction) {\r\n        var actionResult = null;\r\n        this._raiseEditActionStarting(actionInfo);\r\n        try {\r\n            actionResult = action()\r\n        } catch (errorInfo) {\r\n            this._raiseEditActionError(actionInfo, errorInfo);\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        if (!Array.isArray(actionResult)) {\r\n            actionResult = [actionResult]\r\n        } else if (actionResult.length > 1) {\r\n            actionInfo.singleRequest = false\r\n        }\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        return whenSome(actionResult, info => this._raiseCompleteEditActionItem(actionInfo, info), errorInfo => this._raiseEditActionItemError(actionInfo, errorInfo)).then(() => {\r\n            completeAction();\r\n            this._raiseCompleteEditAction(actionInfo)\r\n        })\r\n    }\r\n    _createEditActionInfo(name, targetItemInfos, directory, customData) {\r\n        targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\r\n        customData = customData || {};\r\n        var items = targetItemInfos.map(itemInfo => itemInfo.fileItem);\r\n        return {\r\n            name: name,\r\n            itemInfos: targetItemInfos,\r\n            items: items,\r\n            directory: directory,\r\n            customData: customData,\r\n            singleRequest: true\r\n        }\r\n    }\r\n    _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\r\n        var pathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var result = [];\r\n        for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n            var item = new FileSystemItem(pathInfo, file.name, false);\r\n            var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\r\n            result.push(itemInfo)\r\n        }\r\n        return result\r\n    }\r\n    refresh() {\r\n        if (this._lockRefresh) {\r\n            return this._refreshDeferred\r\n        }\r\n        this._lockRefresh = true;\r\n        return this._executeDataLoad(() => this._refreshDeferred = this._refreshInternal(), \"refresh\")\r\n    }\r\n    _refreshInternal() {\r\n        var cachedRootInfo = {\r\n            items: this._rootDirectoryInfo.items\r\n        };\r\n        var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\r\n        this._resetDirectoryState(this._rootDirectoryInfo);\r\n        return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(() => {\r\n            var dirInfo = this._findDirectoryByPathKeyParts(selectedKeyParts);\r\n            this.setCurrentDirectory(dirInfo);\r\n            delete this._lockRefresh\r\n        })\r\n    }\r\n    _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\r\n        var _this = this;\r\n        return this.getDirectories(directoryInfo).then(dirInfos => {\r\n            var itemDeferreds = [];\r\n            var _loop = function(i) {\r\n                var cachedItem = find(cachedDirectoryInfo.items, cache => dirInfos[i].fileItem.key === cache.fileItem.key);\r\n                if (!cachedItem) {\r\n                    return \"continue\"\r\n                }\r\n                dirInfos[i].expanded = cachedItem.expanded;\r\n                if (dirInfos[i].expanded) {\r\n                    itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem))\r\n                }\r\n            };\r\n            for (var i = 0; i < dirInfos.length; i++) {\r\n                var _ret = _loop(i);\r\n                if (\"continue\" === _ret) {\r\n                    continue\r\n                }\r\n            }\r\n            return whenSome(itemDeferreds)\r\n        }, () => null)\r\n    }\r\n    _initialize() {\r\n        var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\r\n        var completeInitialization = () => {\r\n            this._isInitialized = true;\r\n            this._raiseInitialized()\r\n        };\r\n        if (result) {\r\n            when(result).always(completeInitialization)\r\n        } else {\r\n            completeInitialization()\r\n        }\r\n    }\r\n    _setCurrentDirectoryByPathParts(pathParts, useKeys) {\r\n        return this._executeDataLoad(() => this._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys), \"navigation\")\r\n    }\r\n    _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\r\n        return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(directoryInfo => {\r\n            for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\r\n                info.expanded = true\r\n            }\r\n            this.setCurrentDirectory(directoryInfo)\r\n        })\r\n    }\r\n    _executeDataLoad(action, operation) {\r\n        if (this._dataLoadingDeferred) {\r\n            return this._dataLoadingDeferred.then(() => this._executeDataLoad(action, operation))\r\n        }\r\n        this._dataLoading = true;\r\n        this._dataLoadingDeferred = new Deferred;\r\n        if (this._isInitialized) {\r\n            this._raiseDataLoading(operation)\r\n        }\r\n        return action().always(() => {\r\n            var tempDeferred = this._dataLoadingDeferred;\r\n            this._dataLoadingDeferred = null;\r\n            this._dataLoading = false;\r\n            tempDeferred.resolve()\r\n        })\r\n    }\r\n    _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\r\n        if (pathParts.length < 1) {\r\n            return (new Deferred).resolve(parentDirectoryInfo).promise()\r\n        }\r\n        var fieldName = useKeys ? \"key\" : \"name\";\r\n        return this.getDirectories(parentDirectoryInfo).then(dirInfos => {\r\n            var subDirInfo = find(dirInfos, d => d.fileItem[fieldName] === pathParts[0]);\r\n            if (!subDirInfo) {\r\n                return (new Deferred).reject().promise()\r\n            }\r\n            var restPathParts = [...pathParts].splice(1);\r\n            return this._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys)\r\n        })\r\n    }\r\n    _getDirectoryPathKeyParts(directoryInfo) {\r\n        var pathParts = [];\r\n        while (directoryInfo && directoryInfo.parentDirectory) {\r\n            pathParts.unshift(directoryInfo.fileItem.key);\r\n            directoryInfo = directoryInfo.parentDirectory\r\n        }\r\n        return pathParts\r\n    }\r\n    _findDirectoryByPathKeyParts(keyParts) {\r\n        var selectedDirInfo = this._rootDirectoryInfo;\r\n        if (0 === keyParts.length) {\r\n            return selectedDirInfo\r\n        }\r\n        var i = 0;\r\n        var newSelectedDir = selectedDirInfo;\r\n        while (newSelectedDir && i < keyParts.length) {\r\n            newSelectedDir = find(selectedDirInfo.items, info => info.fileItem.key === keyParts[i]);\r\n            if (newSelectedDir) {\r\n                selectedDirInfo = newSelectedDir\r\n            }\r\n            i++\r\n        }\r\n        return selectedDirInfo\r\n    }\r\n    _getActualDirectoryInfo(directoryInfo) {\r\n        var keys = this._getDirectoryPathKeyParts(directoryInfo);\r\n        return this._findDirectoryByPathKeyParts(keys)\r\n    }\r\n    _createDirInfoByName(name, parentDirectoryInfo) {\r\n        var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var fileItem = new FileSystemItem(dirPathInfo, name, true);\r\n        return this._createDirectoryInfo(fileItem, parentDirectoryInfo)\r\n    }\r\n    _createDirectoryInfo(fileItem, parentDirectoryInfo) {\r\n        return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\r\n            icon: \"folder\",\r\n            expanded: fileItem.isRoot(),\r\n            items: []\r\n        })\r\n    }\r\n    _createFileInfo(fileItem, parentDirectoryInfo) {\r\n        return {\r\n            fileItem: fileItem,\r\n            parentDirectory: parentDirectoryInfo,\r\n            icon: this._getFileItemDefaultIcon(fileItem),\r\n            getInternalKey() {\r\n                return \"FIK_\".concat(this.fileItem.key)\r\n            },\r\n            getDisplayName() {\r\n                return this.displayName || this.fileItem.name\r\n            }\r\n        }\r\n    }\r\n    _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\r\n        if (isActualDirectoryRequired) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        directoryInfo.itemsLoaded = false;\r\n        directoryInfo.items = []\r\n    }\r\n    _getFileItemDefaultIcon(fileItem) {\r\n        if (fileItem.isDirectory) {\r\n            return \"folder\"\r\n        }\r\n        var extension = fileItem.getFileExtension();\r\n        var icon = this._defaultIconMap[extension];\r\n        return icon || \"doc\"\r\n    }\r\n    _createDefaultIconMap() {\r\n        var result = {\r\n            \".txt\": \"txtfile\",\r\n            \".rtf\": \"rtffile\",\r\n            \".doc\": \"docfile\",\r\n            \".docx\": \"docxfile\",\r\n            \".xls\": \"xlsfile\",\r\n            \".xlsx\": \"xlsxfile\",\r\n            \".ppt\": \"pptfile\",\r\n            \".pptx\": \"pptxfile\",\r\n            \".pdf\": \"pdffile\"\r\n        };\r\n        [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(extension => {\r\n            result[extension] = \"image\"\r\n        });\r\n        return result\r\n    }\r\n    _createRootDirectoryInfo(text) {\r\n        var rootDirectory = new FileSystemItem(null, \"\", true);\r\n        var result = this._createDirectoryInfo(rootDirectory, null);\r\n        result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\r\n        return result\r\n    }\r\n    setRootText(rootText) {\r\n        this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME\r\n    }\r\n    _raiseInitialized() {\r\n        var e = {\r\n            controller: this\r\n        };\r\n        if (this._options.onInitialized) {\r\n            this._options.onInitialized(e)\r\n        }\r\n    }\r\n    _raiseDataLoading(operation) {\r\n        if (this._options.onDataLoading) {\r\n            this._options.onDataLoading({\r\n                operation: operation\r\n            })\r\n        }\r\n    }\r\n    _raiseSelectedDirectoryChanged(directoryInfo) {\r\n        var e = {\r\n            selectedDirectoryInfo: directoryInfo\r\n        };\r\n        if (this._options.onSelectedDirectoryChanged) {\r\n            this._options.onSelectedDirectoryChanged(e)\r\n        }\r\n    }\r\n    _raiseEditActionStarting(actionInfo) {\r\n        if (this._options.onEditActionStarting) {\r\n            this._options.onEditActionStarting(actionInfo)\r\n        }\r\n    }\r\n    _raiseEditActionResultAcquired(actionInfo) {\r\n        if (this._options.onEditActionResultAcquired) {\r\n            this._options.onEditActionResultAcquired(actionInfo)\r\n        }\r\n    }\r\n    _raiseEditActionError(actionInfo, errorInfo) {\r\n        if (this._options.onEditActionError) {\r\n            this._options.onEditActionError(actionInfo, errorInfo)\r\n        }\r\n    }\r\n    _raiseEditActionItemError(actionInfo, errorInfo) {\r\n        if (this._options.onEditActionItemError) {\r\n            this._options.onEditActionItemError(actionInfo, errorInfo)\r\n        }\r\n    }\r\n    _raiseCompleteEditActionItem(actionInfo, info) {\r\n        if (this._options.onCompleteEditActionItem) {\r\n            this._options.onCompleteEditActionItem(actionInfo, info)\r\n        }\r\n    }\r\n    _raiseCompleteEditAction(actionInfo) {\r\n        if (this._options.onCompleteEditAction) {\r\n            this._options.onCompleteEditAction(actionInfo)\r\n        }\r\n    }\r\n    _resetState() {\r\n        this._selectedDirectory = null;\r\n        this._rootDirectoryInfo.items = [];\r\n        this._loadedItems = {}\r\n    }\r\n    _getPathInfo(directoryInfo) {\r\n        var pathInfo = [];\r\n        for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\r\n            pathInfo.unshift({\r\n                key: dirInfo.fileItem.key,\r\n                name: dirInfo.fileItem.name\r\n            })\r\n        }\r\n        return pathInfo\r\n    }\r\n    on(eventName, eventHandler) {\r\n        var finalEventName = \"on\".concat(eventName);\r\n        this._options[finalEventName] = eventHandler\r\n    }\r\n}\r\nclass FileSecurityController {\r\n    constructor(options) {\r\n        this._options = extend({\r\n            allowedFileExtensions: [],\r\n            maxFileSize: 0\r\n        }, options);\r\n        this._extensionsMap = {};\r\n        this._allowedFileExtensions.forEach(extension => {\r\n            this._extensionsMap[extension.toUpperCase()] = true\r\n        })\r\n    }\r\n    getAllowedItems(items) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return items\r\n        }\r\n        return items.filter(item => item.isDirectory || this._isValidExtension(item.name))\r\n    }\r\n    validateExtension(name) {\r\n        if (!this._isValidExtension(name)) {\r\n            throw new FileSystemError(ErrorCode.WrongFileExtension, null)\r\n        }\r\n    }\r\n    validateMaxFileSize(size) {\r\n        if (this._maxFileSize && size > this._maxFileSize) {\r\n            throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null)\r\n        }\r\n    }\r\n    _isValidExtension(name) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return true\r\n        }\r\n        var extension = getFileExtension(name).toUpperCase();\r\n        return this._extensionsMap[extension]\r\n    }\r\n    get _allowedFileExtensions() {\r\n        return this._options.allowedFileExtensions\r\n    }\r\n    get _maxFileSize() {\r\n        return this._options.maxFileSize\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}