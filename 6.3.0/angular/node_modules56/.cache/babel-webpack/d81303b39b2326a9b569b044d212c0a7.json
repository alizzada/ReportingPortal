{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.chart_integration.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { foreachTree, formatValue, createPath } from \"./ui.pivot_grid.utils\";\nimport { each } from \"../../core/utils/iterator\";\nvar FORMAT_DICTIONARY = {\n  number: \"numeric\",\n  date: \"datetime\"\n};\nvar UNBIND_KEY = \"dxPivotGridUnbinding\";\n\nfunction getFormattedValue(path, fields) {\n  var value = [];\n  var lastFieldIndex = fields.length - 1;\n  each(path, function (i, item) {\n    value.push(item.text || formatValue(item.value, fields[lastFieldIndex - i]));\n  });\n  return value.reverse();\n}\n\nfunction getExpandedLevel(node) {\n  var level = 0;\n  foreachTree(node, function (members) {\n    level = Math.max(level, members.length - 1);\n  });\n  return level;\n}\n\nfunction processDataCell(processCellArgs, processCell) {\n  var chartDataItem = processCellArgs.chartDataItem;\n  var processedCell = processCell && processCell(processCellArgs);\n\n  if (processedCell) {\n    chartDataItem = extend({}, chartDataItem, processedCell.chartDataItem);\n    processedCell = extend({}, processCellArgs, processedCell, {\n      chartDataItem: chartDataItem\n    });\n    return processedCell;\n  }\n\n  return processCellArgs;\n}\n\nfunction createChartDataSource(pivotGridDataSource, mapOptions, axisDictionary) {\n  var data = pivotGridDataSource.getData();\n  var dataSource = [];\n  var dataFields = pivotGridDataSource.getAreaFields(\"data\");\n  var rowFields = pivotGridDataSource.getAreaFields(\"row\");\n  var columnFields = pivotGridDataSource.getAreaFields(\"column\");\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var rowLevel = getExpandedLevel(rowElements);\n  var columnLevel = getExpandedLevel(columnElements);\n  var measureIndex;\n  var dataField;\n  var rowMemberIndex;\n  var rowVisibility;\n  var rowPathFormatted;\n  var rowPath;\n  var columnMemberIndex;\n  var columnVisibility;\n  var columnPath;\n  var columnPathFormatted;\n\n  function createDataItem() {\n    var dataCell = (data.values[rowMemberIndex] || [])[columnMemberIndex] || [];\n    var value = dataCell[measureIndex];\n    var axis;\n    var processCellArgs = {\n      rowPath: rowPath,\n      maxRowLevel: rowLevel,\n      rowPathFormatted: rowPathFormatted,\n      rowFields: rowFields,\n      columnPathFormatted: columnPathFormatted,\n      maxColumnLevel: columnLevel,\n      columnPath: columnPath,\n      columnFields: columnFields,\n      dataFields: dataFields,\n      dataIndex: measureIndex,\n      dataValues: dataCell,\n      visible: columnVisibility && rowVisibility\n    };\n    var seriesName = (mapOptions.inverted ? columnPathFormatted : rowPathFormatted).join(\" - \");\n    var argument = (mapOptions.inverted ? rowPathFormatted : columnPathFormatted).join(\"/\");\n\n    if (dataFields.length > 1) {\n      if (\"args\" === mapOptions.putDataFieldsInto || \"both\" === mapOptions.putDataFieldsInto) {\n        argument += \" | \" + dataField.caption;\n      }\n\n      if (\"args\" !== mapOptions.putDataFieldsInto) {\n        seriesName += \" | \" + dataField.caption;\n\n        if (\"singleAxis\" !== mapOptions.dataFieldsDisplayMode) {\n          axis = dataField.caption;\n        }\n      }\n    }\n\n    processCellArgs.chartDataItem = {\n      val: void 0 === value ? null : value,\n      series: seriesName,\n      arg: argument\n    };\n    processCellArgs = processDataCell(processCellArgs, mapOptions.processCell);\n\n    if (processCellArgs.visible) {\n      axisDictionary[processCellArgs.chartDataItem.series] = axisDictionary[processCellArgs.chartDataItem.series] || axis;\n      dataSource.push(processCellArgs.chartDataItem);\n    }\n  }\n\n  function foreachRowColumn(callBack) {\n    foreachTree(rowElements, function (rowMembers) {\n      rowMemberIndex = rowMembers[0].index;\n      rowMembers = rowMembers.slice(0, rowMembers.length - 1);\n      rowVisibility = rowLevel === rowMembers.length;\n      rowPath = createPath(rowMembers);\n      rowPathFormatted = getFormattedValue(rowMembers, rowFields);\n\n      if (0 === rowPath.length) {\n        rowPathFormatted = [mapOptions.grandTotalText];\n      }\n\n      foreachTree(columnElements, function (columnMembers) {\n        columnMemberIndex = columnMembers[0].index;\n        columnMembers = columnMembers.slice(0, columnMembers.length - 1);\n        columnVisibility = columnLevel === columnMembers.length;\n        columnPath = createPath(columnMembers);\n        columnPathFormatted = getFormattedValue(columnMembers, columnFields);\n\n        if (0 === columnPath.length) {\n          columnPathFormatted = [mapOptions.grandTotalText];\n        }\n\n        callBack();\n      });\n    });\n  }\n\n  function foreachDataField(callback) {\n    each(dataFields, function (index, field) {\n      dataField = field;\n      measureIndex = index;\n      callback();\n    });\n  }\n\n  if (false === mapOptions.alternateDataFields) {\n    foreachDataField(function () {\n      foreachRowColumn(createDataItem);\n    });\n  } else {\n    foreachRowColumn(function () {\n      foreachDataField(createDataItem);\n    });\n  }\n\n  return dataSource;\n}\n\nfunction createValueAxisOptions(dataSource, options) {\n  var dataFields = dataSource.getAreaFields(\"data\");\n\n  if (\"args\" !== options.putDataFieldsInto && \"singleAxis\" !== options.dataFieldsDisplayMode || 1 === dataFields.length) {\n    var valueAxisSettings = [];\n    each(dataFields, function (_, dataField) {\n      var valueAxisOptions = {\n        name: dataField.caption,\n        title: dataField.caption,\n        valueType: FORMAT_DICTIONARY[dataField.dataType] || dataField.dataType,\n        label: {\n          format: dataField.format\n        }\n      };\n\n      if (dataField.customizeText) {\n        valueAxisOptions.label.customizeText = function (formatObject) {\n          return dataField.customizeText.call(dataField, formatObject);\n        };\n      }\n\n      if (\"splitPanes\" === options.dataFieldsDisplayMode) {\n        valueAxisOptions.pane = dataField.caption;\n      }\n\n      valueAxisSettings.push(valueAxisOptions);\n    });\n    return valueAxisSettings;\n  }\n\n  return [{}];\n}\n\nfunction createPanesOptions(dataSource, options) {\n  var panes = [];\n  var dataFields = dataSource.getAreaFields(\"data\");\n\n  if (dataFields.length > 1 && \"splitPanes\" === options.dataFieldsDisplayMode && \"args\" !== options.putDataFieldsInto) {\n    each(dataFields, function (_, dataField) {\n      panes.push({\n        name: dataField.caption\n      });\n    });\n  }\n\n  if (!panes.length) {\n    panes.push({});\n  }\n\n  return panes;\n}\n\nfunction createChartOptions(dataSource, options) {\n  var _customizeSeries = options.customizeSeries;\n  var customizeChart = options.customizeChart;\n  var chartOptions = {\n    valueAxis: createValueAxisOptions(dataSource, options),\n    panes: createPanesOptions(dataSource, options)\n  };\n  var axisDictionary = {};\n\n  if (customizeChart) {\n    chartOptions = extend(true, {}, chartOptions, customizeChart(chartOptions));\n  }\n\n  chartOptions.dataSource = createChartDataSource(dataSource, options, axisDictionary);\n  chartOptions.seriesTemplate = {\n    nameField: \"series\",\n    customizeSeries: function customizeSeries(seriesName) {\n      var seriesOptions = {};\n\n      if (\"splitPanes\" === options.dataFieldsDisplayMode) {\n        seriesOptions.pane = axisDictionary[seriesName];\n      } else if (\"singleAxis\" !== options.dataFieldsDisplayMode) {\n        seriesOptions.axis = axisDictionary[seriesName];\n      }\n\n      if (_customizeSeries) {\n        seriesOptions = extend(seriesOptions, _customizeSeries(seriesName, seriesOptions));\n      }\n\n      return seriesOptions;\n    }\n  };\n  return chartOptions;\n}\n\nfunction getChartInstance(chartElement) {\n  if (!chartElement) {\n    return false;\n  }\n\n  if (chartElement.NAME) {\n    return \"dxChart\" === chartElement.NAME && chartElement;\n  }\n\n  var element = $(chartElement);\n  return element.data(\"dxChart\") && element.dxChart(\"instance\");\n}\n\nfunction removeBinding(chart) {\n  var unbind = chart.$element().data(UNBIND_KEY);\n  unbind && unbind();\n}\n\nexport default {\n  bindChart: function bindChart(chart, integrationOptions) {\n    integrationOptions = extend({}, integrationOptions);\n    var that = this;\n\n    var updateChart = function updateChart() {\n      integrationOptions.grandTotalText = that.option(\"texts.grandTotal\");\n      var chartOptions = createChartOptions(that.getDataSource(), integrationOptions);\n      chart.option(chartOptions);\n    };\n\n    chart = getChartInstance(chart);\n\n    if (!chart) {\n      return null;\n    }\n\n    removeBinding(chart);\n    that.on(\"changed\", updateChart);\n    updateChart();\n\n    var disposeBinding = function disposeBinding() {\n      chart.$element().removeData(UNBIND_KEY);\n      that.off(\"changed\", updateChart);\n    };\n\n    chart.on(\"disposing\", disposeBinding);\n    this.on(\"disposing\", disposeBinding);\n    chart.$element().data(UNBIND_KEY, disposeBinding);\n    return disposeBinding;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/pivot_grid/ui.pivot_grid.chart_integration.js"],"names":["$","extend","foreachTree","formatValue","createPath","each","FORMAT_DICTIONARY","number","date","UNBIND_KEY","getFormattedValue","path","fields","value","lastFieldIndex","length","i","item","push","text","reverse","getExpandedLevel","node","level","members","Math","max","processDataCell","processCellArgs","processCell","chartDataItem","processedCell","createChartDataSource","pivotGridDataSource","mapOptions","axisDictionary","data","getData","dataSource","dataFields","getAreaFields","rowFields","columnFields","columnElements","index","grandTotalColumnIndex","children","columns","rowElements","grandTotalRowIndex","rows","rowLevel","columnLevel","measureIndex","dataField","rowMemberIndex","rowVisibility","rowPathFormatted","rowPath","columnMemberIndex","columnVisibility","columnPath","columnPathFormatted","createDataItem","dataCell","values","axis","maxRowLevel","maxColumnLevel","dataIndex","dataValues","visible","seriesName","inverted","join","argument","putDataFieldsInto","caption","dataFieldsDisplayMode","val","series","arg","foreachRowColumn","callBack","rowMembers","slice","grandTotalText","columnMembers","foreachDataField","callback","field","alternateDataFields","createValueAxisOptions","options","valueAxisSettings","_","valueAxisOptions","name","title","valueType","dataType","label","format","customizeText","formatObject","call","pane","createPanesOptions","panes","createChartOptions","_customizeSeries","customizeSeries","customizeChart","chartOptions","valueAxis","seriesTemplate","nameField","seriesOptions","getChartInstance","chartElement","NAME","element","dxChart","removeBinding","chart","unbind","$element","bindChart","integrationOptions","that","updateChart","option","getDataSource","on","disposeBinding","removeData","off"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.chart_integration.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    foreachTree,\r\n    formatValue,\r\n    createPath\r\n} from \"./ui.pivot_grid.utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nvar FORMAT_DICTIONARY = {\r\n    number: \"numeric\",\r\n    date: \"datetime\"\r\n};\r\nvar UNBIND_KEY = \"dxPivotGridUnbinding\";\r\n\r\nfunction getFormattedValue(path, fields) {\r\n    var value = [];\r\n    var lastFieldIndex = fields.length - 1;\r\n    each(path, (function(i, item) {\r\n        value.push(item.text || formatValue(item.value, fields[lastFieldIndex - i]))\r\n    }));\r\n    return value.reverse()\r\n}\r\n\r\nfunction getExpandedLevel(node) {\r\n    var level = 0;\r\n    foreachTree(node, (function(members) {\r\n        level = Math.max(level, members.length - 1)\r\n    }));\r\n    return level\r\n}\r\n\r\nfunction processDataCell(processCellArgs, processCell) {\r\n    var chartDataItem = processCellArgs.chartDataItem;\r\n    var processedCell = processCell && processCell(processCellArgs);\r\n    if (processedCell) {\r\n        chartDataItem = extend({}, chartDataItem, processedCell.chartDataItem);\r\n        processedCell = extend({}, processCellArgs, processedCell, {\r\n            chartDataItem: chartDataItem\r\n        });\r\n        return processedCell\r\n    }\r\n    return processCellArgs\r\n}\r\n\r\nfunction createChartDataSource(pivotGridDataSource, mapOptions, axisDictionary) {\r\n    var data = pivotGridDataSource.getData();\r\n    var dataSource = [];\r\n    var dataFields = pivotGridDataSource.getAreaFields(\"data\");\r\n    var rowFields = pivotGridDataSource.getAreaFields(\"row\");\r\n    var columnFields = pivotGridDataSource.getAreaFields(\"column\");\r\n    var columnElements = [{\r\n        index: data.grandTotalColumnIndex,\r\n        children: data.columns\r\n    }];\r\n    var rowElements = [{\r\n        index: data.grandTotalRowIndex,\r\n        children: data.rows\r\n    }];\r\n    var rowLevel = getExpandedLevel(rowElements);\r\n    var columnLevel = getExpandedLevel(columnElements);\r\n    var measureIndex;\r\n    var dataField;\r\n    var rowMemberIndex;\r\n    var rowVisibility;\r\n    var rowPathFormatted;\r\n    var rowPath;\r\n    var columnMemberIndex;\r\n    var columnVisibility;\r\n    var columnPath;\r\n    var columnPathFormatted;\r\n\r\n    function createDataItem() {\r\n        var dataCell = (data.values[rowMemberIndex] || [])[columnMemberIndex] || [];\r\n        var value = dataCell[measureIndex];\r\n        var axis;\r\n        var processCellArgs = {\r\n            rowPath: rowPath,\r\n            maxRowLevel: rowLevel,\r\n            rowPathFormatted: rowPathFormatted,\r\n            rowFields: rowFields,\r\n            columnPathFormatted: columnPathFormatted,\r\n            maxColumnLevel: columnLevel,\r\n            columnPath: columnPath,\r\n            columnFields: columnFields,\r\n            dataFields: dataFields,\r\n            dataIndex: measureIndex,\r\n            dataValues: dataCell,\r\n            visible: columnVisibility && rowVisibility\r\n        };\r\n        var seriesName = (mapOptions.inverted ? columnPathFormatted : rowPathFormatted).join(\" - \");\r\n        var argument = (mapOptions.inverted ? rowPathFormatted : columnPathFormatted).join(\"/\");\r\n        if (dataFields.length > 1) {\r\n            if (\"args\" === mapOptions.putDataFieldsInto || \"both\" === mapOptions.putDataFieldsInto) {\r\n                argument += \" | \" + dataField.caption\r\n            }\r\n            if (\"args\" !== mapOptions.putDataFieldsInto) {\r\n                seriesName += \" | \" + dataField.caption;\r\n                if (\"singleAxis\" !== mapOptions.dataFieldsDisplayMode) {\r\n                    axis = dataField.caption\r\n                }\r\n            }\r\n        }\r\n        processCellArgs.chartDataItem = {\r\n            val: void 0 === value ? null : value,\r\n            series: seriesName,\r\n            arg: argument\r\n        };\r\n        processCellArgs = processDataCell(processCellArgs, mapOptions.processCell);\r\n        if (processCellArgs.visible) {\r\n            axisDictionary[processCellArgs.chartDataItem.series] = axisDictionary[processCellArgs.chartDataItem.series] || axis;\r\n            dataSource.push(processCellArgs.chartDataItem)\r\n        }\r\n    }\r\n\r\n    function foreachRowColumn(callBack) {\r\n        foreachTree(rowElements, (function(rowMembers) {\r\n            rowMemberIndex = rowMembers[0].index;\r\n            rowMembers = rowMembers.slice(0, rowMembers.length - 1);\r\n            rowVisibility = rowLevel === rowMembers.length;\r\n            rowPath = createPath(rowMembers);\r\n            rowPathFormatted = getFormattedValue(rowMembers, rowFields);\r\n            if (0 === rowPath.length) {\r\n                rowPathFormatted = [mapOptions.grandTotalText]\r\n            }\r\n            foreachTree(columnElements, (function(columnMembers) {\r\n                columnMemberIndex = columnMembers[0].index;\r\n                columnMembers = columnMembers.slice(0, columnMembers.length - 1);\r\n                columnVisibility = columnLevel === columnMembers.length;\r\n                columnPath = createPath(columnMembers);\r\n                columnPathFormatted = getFormattedValue(columnMembers, columnFields);\r\n                if (0 === columnPath.length) {\r\n                    columnPathFormatted = [mapOptions.grandTotalText]\r\n                }\r\n                callBack()\r\n            }))\r\n        }))\r\n    }\r\n\r\n    function foreachDataField(callback) {\r\n        each(dataFields, (function(index, field) {\r\n            dataField = field;\r\n            measureIndex = index;\r\n            callback()\r\n        }))\r\n    }\r\n    if (false === mapOptions.alternateDataFields) {\r\n        foreachDataField((function() {\r\n            foreachRowColumn(createDataItem)\r\n        }))\r\n    } else {\r\n        foreachRowColumn((function() {\r\n            foreachDataField(createDataItem)\r\n        }))\r\n    }\r\n    return dataSource\r\n}\r\n\r\nfunction createValueAxisOptions(dataSource, options) {\r\n    var dataFields = dataSource.getAreaFields(\"data\");\r\n    if (\"args\" !== options.putDataFieldsInto && \"singleAxis\" !== options.dataFieldsDisplayMode || 1 === dataFields.length) {\r\n        var valueAxisSettings = [];\r\n        each(dataFields, (function(_, dataField) {\r\n            var valueAxisOptions = {\r\n                name: dataField.caption,\r\n                title: dataField.caption,\r\n                valueType: FORMAT_DICTIONARY[dataField.dataType] || dataField.dataType,\r\n                label: {\r\n                    format: dataField.format\r\n                }\r\n            };\r\n            if (dataField.customizeText) {\r\n                valueAxisOptions.label.customizeText = function(formatObject) {\r\n                    return dataField.customizeText.call(dataField, formatObject)\r\n                }\r\n            }\r\n            if (\"splitPanes\" === options.dataFieldsDisplayMode) {\r\n                valueAxisOptions.pane = dataField.caption\r\n            }\r\n            valueAxisSettings.push(valueAxisOptions)\r\n        }));\r\n        return valueAxisSettings\r\n    }\r\n    return [{}]\r\n}\r\n\r\nfunction createPanesOptions(dataSource, options) {\r\n    var panes = [];\r\n    var dataFields = dataSource.getAreaFields(\"data\");\r\n    if (dataFields.length > 1 && \"splitPanes\" === options.dataFieldsDisplayMode && \"args\" !== options.putDataFieldsInto) {\r\n        each(dataFields, (function(_, dataField) {\r\n            panes.push({\r\n                name: dataField.caption\r\n            })\r\n        }))\r\n    }\r\n    if (!panes.length) {\r\n        panes.push({})\r\n    }\r\n    return panes\r\n}\r\n\r\nfunction createChartOptions(dataSource, options) {\r\n    var _customizeSeries = options.customizeSeries;\r\n    var customizeChart = options.customizeChart;\r\n    var chartOptions = {\r\n        valueAxis: createValueAxisOptions(dataSource, options),\r\n        panes: createPanesOptions(dataSource, options)\r\n    };\r\n    var axisDictionary = {};\r\n    if (customizeChart) {\r\n        chartOptions = extend(true, {}, chartOptions, customizeChart(chartOptions))\r\n    }\r\n    chartOptions.dataSource = createChartDataSource(dataSource, options, axisDictionary);\r\n    chartOptions.seriesTemplate = {\r\n        nameField: \"series\",\r\n        customizeSeries: function(seriesName) {\r\n            var seriesOptions = {};\r\n            if (\"splitPanes\" === options.dataFieldsDisplayMode) {\r\n                seriesOptions.pane = axisDictionary[seriesName]\r\n            } else if (\"singleAxis\" !== options.dataFieldsDisplayMode) {\r\n                seriesOptions.axis = axisDictionary[seriesName]\r\n            }\r\n            if (_customizeSeries) {\r\n                seriesOptions = extend(seriesOptions, _customizeSeries(seriesName, seriesOptions))\r\n            }\r\n            return seriesOptions\r\n        }\r\n    };\r\n    return chartOptions\r\n}\r\n\r\nfunction getChartInstance(chartElement) {\r\n    if (!chartElement) {\r\n        return false\r\n    }\r\n    if (chartElement.NAME) {\r\n        return \"dxChart\" === chartElement.NAME && chartElement\r\n    }\r\n    var element = $(chartElement);\r\n    return element.data(\"dxChart\") && element.dxChart(\"instance\")\r\n}\r\n\r\nfunction removeBinding(chart) {\r\n    var unbind = chart.$element().data(UNBIND_KEY);\r\n    unbind && unbind()\r\n}\r\nexport default {\r\n    bindChart: function(chart, integrationOptions) {\r\n        integrationOptions = extend({}, integrationOptions);\r\n        var that = this;\r\n        var updateChart = function() {\r\n            integrationOptions.grandTotalText = that.option(\"texts.grandTotal\");\r\n            var chartOptions = createChartOptions(that.getDataSource(), integrationOptions);\r\n            chart.option(chartOptions)\r\n        };\r\n        chart = getChartInstance(chart);\r\n        if (!chart) {\r\n            return null\r\n        }\r\n        removeBinding(chart);\r\n        that.on(\"changed\", updateChart);\r\n        updateChart();\r\n        var disposeBinding = function() {\r\n            chart.$element().removeData(UNBIND_KEY);\r\n            that.off(\"changed\", updateChart)\r\n        };\r\n        chart.on(\"disposing\", disposeBinding);\r\n        this.on(\"disposing\", disposeBinding);\r\n        chart.$element().data(UNBIND_KEY, disposeBinding);\r\n        return disposeBinding\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}