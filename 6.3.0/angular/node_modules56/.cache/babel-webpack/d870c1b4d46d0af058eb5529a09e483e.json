{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointment_form.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Form from \"../form\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport DataSource from \"../../data/data_source\";\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\nimport { extend } from \"../../core/utils/extend\";\nimport \"./recurrence_editor\";\nimport \"../text_area\";\nimport \"../tag_box\";\nimport \"../switch\";\nimport \"../select_box\";\nvar SCREEN_SIZE_OF_SINGLE_COLUMN = 600;\nexport var APPOINTMENT_FORM_GROUP_NAMES = {\n  Main: \"mainGroup\",\n  Recurrence: \"recurrenceGroup\"\n};\nvar SchedulerAppointmentForm = {\n  _appointmentForm: {},\n  _lockDateShiftFlag: false,\n  _validateAppointmentFormDate: function _validateAppointmentFormDate(editor, value, previousValue) {\n    var isCurrentDateCorrect = null === value || !!value;\n    var isPreviousDateCorrect = null === previousValue || !!previousValue;\n\n    if (!isCurrentDateCorrect && isPreviousDateCorrect) {\n      editor.option(\"value\", previousValue);\n    }\n  },\n  _getAllDayStartDate: function _getAllDayStartDate(startDate) {\n    return new Date(new Date(startDate).setHours(0, 0, 0, 0));\n  },\n  _getAllDayEndDate: function _getAllDayEndDate(startDate) {\n    return new Date(new Date(startDate).setDate(startDate.getDate() + 1));\n  },\n  _getStartDateWithStartHour: function _getStartDateWithStartHour(startDate, startDayHour) {\n    return new Date(new Date(startDate).setHours(startDayHour));\n  },\n  create: function create(componentCreator, $container, isReadOnly, formData) {\n    this._appointmentForm = componentCreator($container, Form, {\n      items: this._editors,\n      readOnly: isReadOnly,\n      showValidationSummary: true,\n      scrollingEnabled: true,\n      colCount: \"auto\",\n      colCountByScreen: {\n        lg: 2,\n        xs: 1\n      },\n      formData: formData,\n      showColonAfterLabel: false,\n      labelLocation: \"top\",\n      screenByWidth: function screenByWidth(width) {\n        return width < SCREEN_SIZE_OF_SINGLE_COLUMN || \"desktop\" !== devices.current().deviceType ? \"xs\" : \"lg\";\n      }\n    });\n    return this._appointmentForm;\n  },\n  _dateBoxValueChanged: function _dateBoxValueChanged(args, dateExpr, isNeedCorrect) {\n    this._validateAppointmentFormDate(args.component, args.value, args.previousValue);\n\n    var value = dateSerialization.deserializeDate(args.value);\n    var previousValue = dateSerialization.deserializeDate(args.previousValue);\n\n    var dateEditor = this._appointmentForm.getEditor(dateExpr);\n\n    var dateValue = dateSerialization.deserializeDate(dateEditor.option(\"value\"));\n\n    if (!this._appointmentForm._lockDateShiftFlag && dateValue && value && isNeedCorrect(dateValue, value)) {\n      var duration = previousValue ? dateValue.getTime() - previousValue.getTime() : 0;\n      dateEditor.option(\"value\", new Date(value.getTime() + duration));\n    }\n  },\n  _createTimezoneEditor: function _createTimezoneEditor(timeZoneExpr, secondTimeZoneExpr, visibleIndex, colSpan, isMainTimeZone) {\n    var _this = this;\n\n    var isShow = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : false;\n    var noTzTitle = messageLocalization.format(\"dxScheduler-noTimezoneTitle\");\n    return {\n      dataField: timeZoneExpr,\n      editorType: \"dxSelectBox\",\n      visibleIndex: visibleIndex,\n      colSpan: colSpan,\n      label: {\n        text: \" \"\n      },\n      editorOptions: {\n        displayExpr: \"title\",\n        valueExpr: \"id\",\n        placeholder: noTzTitle,\n        searchEnabled: true,\n        onValueChanged: function onValueChanged(args) {\n          var form = _this._appointmentForm;\n          var secondTimezoneEditor = form.getEditor(secondTimeZoneExpr);\n\n          if (isMainTimeZone) {\n            secondTimezoneEditor.option(\"value\", args.value);\n          }\n        }\n      },\n      visible: isShow\n    };\n  },\n  _createDateBoxEditor: function _createDateBoxEditor(dataExpr, colSpan, firstDayOfWeek, label, callback) {\n    return {\n      dataField: dataExpr,\n      editorType: \"dxDateBox\",\n      colSpan: colSpan,\n      label: {\n        text: messageLocalization.format(label)\n      },\n      validationRules: [{\n        type: \"required\"\n      }],\n      editorOptions: {\n        width: \"100%\",\n        calendarOptions: {\n          firstDayOfWeek: firstDayOfWeek\n        },\n        onValueChanged: callback\n      }\n    };\n  },\n  _createDateBoxItems: function _createDateBoxItems(dataExprs, schedulerInst, allowTimeZoneEditing) {\n    var _this2 = this;\n\n    var colSpan = allowTimeZoneEditing ? 2 : 1;\n    var firstDayOfWeek = schedulerInst.option(\"firstDayOfWeek\");\n    return [this._createDateBoxEditor(dataExprs.startDateExpr, colSpan, firstDayOfWeek, \"dxScheduler-editorLabelStartDate\", function (args) {\n      _this2._dateBoxValueChanged(args, dataExprs.endDateExpr, function (endValue, startValue) {\n        return endValue < startValue;\n      });\n    }), this._createTimezoneEditor(dataExprs.startDateTimeZoneExpr, dataExprs.endDateTimeZoneExpr, 1, colSpan, true, allowTimeZoneEditing), this._createDateBoxEditor(dataExprs.endDateExpr, colSpan, firstDayOfWeek, \"dxScheduler-editorLabelEndDate\", function (args) {\n      _this2._dateBoxValueChanged(args, dataExprs.startDateExpr, function (startValue, endValue) {\n        return endValue < startValue;\n      });\n    }), this._createTimezoneEditor(dataExprs.endDateTimeZoneExpr, dataExprs.startDateTimeZoneExpr, 3, colSpan, false, allowTimeZoneEditing)];\n  },\n  _createMainItems: function _createMainItems(dataExprs, schedulerInst, triggerResize, changeSize, allowTimeZoneEditing) {\n    var _this3 = this;\n\n    return [{\n      dataField: dataExprs.textExpr,\n      editorType: \"dxTextBox\",\n      colSpan: 2,\n      label: {\n        text: messageLocalization.format(\"dxScheduler-editorLabelTitle\")\n      }\n    }, {\n      itemType: \"group\",\n      colSpan: 2,\n      colCountByScreen: {\n        lg: 2,\n        xs: 1\n      },\n      items: this._createDateBoxItems(dataExprs, schedulerInst, allowTimeZoneEditing)\n    }, {\n      itemType: \"group\",\n      colCountByScreen: {\n        lg: 3,\n        xs: 3\n      },\n      colSpan: 2,\n      items: [{\n        dataField: dataExprs.allDayExpr,\n        cssClass: \"dx-appointment-form-switch\",\n        editorType: \"dxSwitch\",\n        label: {\n          text: messageLocalization.format(\"dxScheduler-allDay\"),\n          location: \"right\"\n        },\n        editorOptions: {\n          onValueChanged: function onValueChanged(args) {\n            var value = args.value;\n\n            var startDateEditor = _this3._appointmentForm.getEditor(dataExprs.startDateExpr);\n\n            var endDateEditor = _this3._appointmentForm.getEditor(dataExprs.endDateExpr);\n\n            var startDate = dateSerialization.deserializeDate(startDateEditor.option(\"value\"));\n\n            if (!_this3._appointmentForm._lockDateShiftFlag && startDate) {\n              if (value) {\n                var allDayStartDate = _this3._getAllDayStartDate(startDate);\n\n                startDateEditor.option(\"value\", allDayStartDate);\n                endDateEditor.option(\"value\", _this3._getAllDayEndDate(allDayStartDate));\n              } else {\n                var startDateWithStartHour = _this3._getStartDateWithStartHour(startDate, schedulerInst.option(\"startDayHour\"));\n\n                var endDate = schedulerInst._workSpace.calculateEndDate(startDateWithStartHour);\n\n                startDateEditor.option(\"value\", startDateWithStartHour);\n                endDateEditor.option(\"value\", endDate);\n              }\n            }\n\n            startDateEditor.option(\"type\", value ? \"date\" : \"datetime\");\n            endDateEditor.option(\"type\", value ? \"date\" : \"datetime\");\n          }\n        }\n      }, {\n        editorType: \"dxSwitch\",\n        dataField: \"repeat\",\n        cssClass: \"dx-appointment-form-switch\",\n        name: \"visibilityChanged\",\n        label: {\n          text: messageLocalization.format(\"dxScheduler-editorLabelRecurrence\"),\n          location: \"right\"\n        },\n        editorOptions: {\n          onValueChanged: function onValueChanged(args) {\n            var form = _this3._appointmentForm;\n            var colSpan = args.value ? 1 : 2;\n            form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Main, \"colSpan\", colSpan);\n            form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \"colSpan\", colSpan);\n\n            _this3._updateRecurrenceItemVisibility(dataExprs.recurrenceRuleExpr, args.value, form);\n\n            changeSize(args.value);\n            triggerResize();\n          }\n        }\n      }]\n    }, {\n      itemType: \"empty\",\n      colSpan: 2\n    }, {\n      dataField: dataExprs.descriptionExpr,\n      editorType: \"dxTextArea\",\n      colSpan: 2,\n      label: {\n        text: messageLocalization.format(\"dxScheduler-editorLabelDescription\")\n      }\n    }, {\n      itemType: \"empty\",\n      colSpan: 2\n    }];\n  },\n  _updateRecurrenceItemVisibility: function _updateRecurrenceItemVisibility(recurrenceRuleExpr, value, form) {\n    var _form$getEditor;\n\n    form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \"visible\", value);\n    !value && form.updateData(recurrenceRuleExpr, \"\");\n    null === (_form$getEditor = form.getEditor(recurrenceRuleExpr)) || void 0 === _form$getEditor ? void 0 : _form$getEditor.changeValueByVisibility(value);\n  },\n  prepareAppointmentFormEditors: function prepareAppointmentFormEditors(dataExprs, schedulerInst, triggerResize, changeSize, appointmentData, allowTimeZoneEditing, readOnly) {\n    var recurrenceEditorVisibility = !!this.getRecurrenceRule(appointmentData, dataExprs);\n    changeSize(recurrenceEditorVisibility);\n    this._editors = [{\n      itemType: \"group\",\n      name: APPOINTMENT_FORM_GROUP_NAMES.Main,\n      colCountByScreen: {\n        lg: 2,\n        xs: 1\n      },\n      colSpan: recurrenceEditorVisibility ? 1 : 2,\n      items: this._createMainItems(dataExprs, schedulerInst, triggerResize, changeSize, allowTimeZoneEditing)\n    }, {\n      itemType: \"group\",\n      name: APPOINTMENT_FORM_GROUP_NAMES.Recurrence,\n      visible: recurrenceEditorVisibility,\n      colSpan: recurrenceEditorVisibility ? 1 : 2,\n      items: this._createRecurrenceEditor(dataExprs, schedulerInst, readOnly)\n    }];\n    return this._editors;\n  },\n  _createRecurrenceEditor: function _createRecurrenceEditor(dataExprs, schedulerInst, readOnly) {\n    return [{\n      dataField: dataExprs.recurrenceRuleExpr,\n      editorType: \"dxRecurrenceEditor\",\n      editorOptions: {\n        readOnly: readOnly,\n        firstDayOfWeek: schedulerInst.option(\"firstDayOfWeek\")\n      },\n      label: {\n        text: \" \",\n        visible: false\n      }\n    }];\n  },\n  getRecurrenceRule: function getRecurrenceRule(data, dataExprs) {\n    return data[dataExprs.recurrenceRuleExpr];\n  },\n  concatResources: function concatResources(resources) {\n    this._editors[0].items = this._editors[0].items.concat(resources);\n  },\n  setEditorsType: function setEditorsType(form, startDateExpr, endDateExpr, allDay) {\n    var startDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Main, \".\").concat(startDateExpr);\n    var endDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \".\").concat(endDateExpr);\n    var startDateFormItem = form.itemOption(startDateItemPath);\n    var endDateFormItem = form.itemOption(endDateItemPath);\n\n    if (startDateFormItem && endDateFormItem) {\n      var startDateEditorOptions = startDateFormItem.editorOptions;\n      var endDateEditorOptions = endDateFormItem.editorOptions;\n      startDateEditorOptions.type = endDateEditorOptions.type = allDay ? \"date\" : \"datetime\";\n      form.itemOption(startDateItemPath, \"editorOptions\", startDateEditorOptions);\n      form.itemOption(endDateItemPath, \"editorOptions\", endDateEditorOptions);\n    }\n  },\n  updateTimeZoneEditorDataSource: function updateTimeZoneEditorDataSource(date, expression) {\n    var timeZoneDataSource = new DataSource({\n      store: timeZoneDataUtils.getDisplayedTimeZones(date),\n      paginate: true,\n      pageSize: 10\n    });\n    var options = {\n      dataSource: timeZoneDataSource\n    };\n    this.setEditorOptions(expression, \"Main\", options);\n  },\n  updateRecurrenceEditorStartDate: function updateRecurrenceEditorStartDate(date, expression) {\n    var options = {\n      startDate: date\n    };\n    this.setEditorOptions(expression, \"Recurrence\", options);\n  },\n  setEditorOptions: function setEditorOptions(name, groupName, options) {\n    var editorPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.groupName, \".\").concat(name);\n\n    var editor = this._appointmentForm.itemOption(editorPath);\n\n    editor && this._appointmentForm.itemOption(editorPath, \"editorOptions\", extend({}, editor.editorOptions, options));\n  },\n  updateFormData: function updateFormData(appointmentForm, formData, dataExprs) {\n    appointmentForm._lockDateShiftFlag = true;\n    var startDate = new Date(formData[dataExprs.startDateExpr]);\n    var endDate = new Date(formData[dataExprs.endDateExpr]);\n    this.updateTimeZoneEditorDataSource(startDate, dataExprs.startDateTimeZoneExpr);\n    this.updateTimeZoneEditorDataSource(endDate, dataExprs.endDateTimeZoneExpr);\n    this.updateRecurrenceEditorStartDate(startDate, dataExprs.recurrenceRuleExpr);\n    appointmentForm.option(\"formData\", formData);\n    appointmentForm._lockDateShiftFlag = false;\n  }\n};\nexport { SchedulerAppointmentForm as AppointmentForm };","map":null,"metadata":{},"sourceType":"module"}