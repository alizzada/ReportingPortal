{"ast":null,"code":"import _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { NgModule, ɵɵdefineInjectable, Injectable, ɵɵinject, Injector } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\nimport { catchError, switchMap, filter, take, map } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\n\nvar AbpModule = /*@__PURE__*/function () {\n  var AbpModule = function AbpModule() {\n    _classCallCheck(this, AbpModule);\n  };\n\n  AbpModule.ɵfac = function AbpModule_Factory(t) {\n    return new (t || AbpModule)();\n  };\n\n  AbpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: AbpModule\n  });\n  AbpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return AbpModule;\n}();\n\nvar TokenService = /*@__PURE__*/function () {\n  var TokenService = /*#__PURE__*/function () {\n    function TokenService() {\n      _classCallCheck(this, TokenService);\n    }\n\n    _createClass(TokenService, [{\n      key: \"getToken\",\n      value: function getToken() {\n        return abp.auth.getToken();\n      }\n    }, {\n      key: \"getTokenCookieName\",\n      value: function getTokenCookieName() {\n        return abp.auth.tokenCookieName;\n      }\n    }, {\n      key: \"clearToken\",\n      value: function clearToken() {\n        abp.auth.clearToken();\n      }\n    }, {\n      key: \"setToken\",\n      value: function setToken(authToken, expireDate) {\n        abp.auth.setToken(authToken, expireDate);\n      } //refresh token\n\n    }, {\n      key: \"getRefreshToken\",\n      value: function getRefreshToken() {\n        return abp.auth.getRefreshToken();\n      }\n    }, {\n      key: \"getRefreshTokenCookieName\",\n      value: function getRefreshTokenCookieName() {\n        return abp.auth.refreshTokenCookieName;\n      }\n    }, {\n      key: \"clearRefreshToken\",\n      value: function clearRefreshToken() {\n        abp.auth.clearRefreshToken();\n      }\n    }, {\n      key: \"setRefreshToken\",\n      value: function setRefreshToken(refreshToken, expireDate) {\n        abp.auth.setRefreshToken(refreshToken, expireDate);\n      }\n    }]);\n\n    return TokenService;\n  }();\n\n  TokenService.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n\n  TokenService.ɵprov = ɵɵdefineInjectable({\n    factory: function TokenService_Factory() {\n      return new TokenService();\n    },\n    token: TokenService,\n    providedIn: \"root\"\n  });\n  return TokenService;\n}();\n\nvar PermissionCheckerService = /*@__PURE__*/function () {\n  var PermissionCheckerService = /*#__PURE__*/function () {\n    function PermissionCheckerService() {\n      _classCallCheck(this, PermissionCheckerService);\n    }\n\n    _createClass(PermissionCheckerService, [{\n      key: \"isGranted\",\n      value: function isGranted(permissionName) {\n        return abp.auth.isGranted(permissionName);\n      }\n    }]);\n\n    return PermissionCheckerService;\n  }();\n\n  PermissionCheckerService.ɵfac = function PermissionCheckerService_Factory(t) {\n    return new (t || PermissionCheckerService)();\n  };\n\n  PermissionCheckerService.ɵprov = ɵɵdefineInjectable({\n    factory: function PermissionCheckerService_Factory() {\n      return new PermissionCheckerService();\n    },\n    token: PermissionCheckerService,\n    providedIn: \"root\"\n  });\n  return PermissionCheckerService;\n}();\n\nvar FeatureCheckerService = /*@__PURE__*/function () {\n  var FeatureCheckerService = /*#__PURE__*/function () {\n    function FeatureCheckerService() {\n      _classCallCheck(this, FeatureCheckerService);\n    }\n\n    _createClass(FeatureCheckerService, [{\n      key: \"get\",\n      value: function get(featureName) {\n        return abp.features.get(featureName);\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(featureName) {\n        return abp.features.getValue(featureName);\n      }\n    }, {\n      key: \"isEnabled\",\n      value: function isEnabled(featureName) {\n        return abp.features.isEnabled(featureName);\n      }\n    }]);\n\n    return FeatureCheckerService;\n  }();\n\n  FeatureCheckerService.ɵfac = function FeatureCheckerService_Factory(t) {\n    return new (t || FeatureCheckerService)();\n  };\n\n  FeatureCheckerService.ɵprov = ɵɵdefineInjectable({\n    factory: function FeatureCheckerService_Factory() {\n      return new FeatureCheckerService();\n    },\n    token: FeatureCheckerService,\n    providedIn: \"root\"\n  });\n  return FeatureCheckerService;\n}();\n\nvar LocalizationService = /*@__PURE__*/function () {\n  var LocalizationService = /*#__PURE__*/function () {\n    function LocalizationService() {\n      _classCallCheck(this, LocalizationService);\n    }\n\n    _createClass(LocalizationService, [{\n      key: \"languages\",\n      get: function get() {\n        return abp.localization.languages;\n      }\n    }, {\n      key: \"currentLanguage\",\n      get: function get() {\n        return abp.localization.currentLanguage;\n      }\n    }, {\n      key: \"localize\",\n      value: function localize(key, sourceName) {\n        return abp.localization.localize(key, sourceName);\n      }\n    }, {\n      key: \"getSource\",\n      value: function getSource(sourceName) {\n        return abp.localization.getSource(sourceName);\n      }\n    }]);\n\n    return LocalizationService;\n  }();\n\n  LocalizationService.ɵfac = function LocalizationService_Factory(t) {\n    return new (t || LocalizationService)();\n  };\n\n  LocalizationService.ɵprov = ɵɵdefineInjectable({\n    factory: function LocalizationService_Factory() {\n      return new LocalizationService();\n    },\n    token: LocalizationService,\n    providedIn: \"root\"\n  });\n  return LocalizationService;\n}();\n\nvar LogService = /*@__PURE__*/function () {\n  var LogService = /*#__PURE__*/function () {\n    function LogService() {\n      _classCallCheck(this, LogService);\n    }\n\n    _createClass(LogService, [{\n      key: \"debug\",\n      value: function debug(logObject) {\n        abp.log.debug(logObject);\n      }\n    }, {\n      key: \"info\",\n      value: function info(logObject) {\n        abp.log.info(logObject);\n      }\n    }, {\n      key: \"warn\",\n      value: function warn(logObject) {\n        abp.log.warn(logObject);\n      }\n    }, {\n      key: \"error\",\n      value: function error(logObject) {\n        abp.log.error(logObject);\n      }\n    }, {\n      key: \"fatal\",\n      value: function fatal(logObject) {\n        abp.log.fatal(logObject);\n      }\n    }]);\n\n    return LogService;\n  }();\n\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)();\n  };\n\n  LogService.ɵprov = ɵɵdefineInjectable({\n    factory: function LogService_Factory() {\n      return new LogService();\n    },\n    token: LogService,\n    providedIn: \"root\"\n  });\n  return LogService;\n}();\n\nvar MessageService = /*@__PURE__*/function () {\n  var MessageService = /*#__PURE__*/function () {\n    function MessageService() {\n      _classCallCheck(this, MessageService);\n    }\n\n    _createClass(MessageService, [{\n      key: \"info\",\n      value: function info(message, title, options) {\n        return abp.message.info(message, title, options);\n      }\n    }, {\n      key: \"success\",\n      value: function success(message, title, options) {\n        return abp.message.success(message, title, options);\n      }\n    }, {\n      key: \"warn\",\n      value: function warn(message, title, options) {\n        return abp.message.warn(message, title, options);\n      }\n    }, {\n      key: \"error\",\n      value: function error(message, title, options) {\n        return abp.message.error(message, title, options);\n      }\n    }, {\n      key: \"confirm\",\n      value: function confirm(message, title, callback, options) {\n        return abp.message.confirm(message, title, callback, options);\n      }\n    }]);\n\n    return MessageService;\n  }();\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)();\n  };\n\n  MessageService.ɵprov = ɵɵdefineInjectable({\n    factory: function MessageService_Factory() {\n      return new MessageService();\n    },\n    token: MessageService,\n    providedIn: \"root\"\n  });\n  return MessageService;\n}();\n\nvar AbpMultiTenancyService = /*@__PURE__*/function () {\n  var AbpMultiTenancyService = /*#__PURE__*/function () {\n    function AbpMultiTenancyService() {\n      _classCallCheck(this, AbpMultiTenancyService);\n    }\n\n    _createClass(AbpMultiTenancyService, [{\n      key: \"isEnabled\",\n      get: function get() {\n        return abp.multiTenancy.isEnabled;\n      }\n    }]);\n\n    return AbpMultiTenancyService;\n  }();\n\n  AbpMultiTenancyService.ɵfac = function AbpMultiTenancyService_Factory(t) {\n    return new (t || AbpMultiTenancyService)();\n  };\n\n  AbpMultiTenancyService.ɵprov = ɵɵdefineInjectable({\n    factory: function AbpMultiTenancyService_Factory() {\n      return new AbpMultiTenancyService();\n    },\n    token: AbpMultiTenancyService,\n    providedIn: \"root\"\n  });\n  return AbpMultiTenancyService;\n}();\n\nvar NotifyService = /*@__PURE__*/function () {\n  var NotifyService = /*#__PURE__*/function () {\n    function NotifyService() {\n      _classCallCheck(this, NotifyService);\n    }\n\n    _createClass(NotifyService, [{\n      key: \"info\",\n      value: function info(message, title, options) {\n        abp.notify.info(message, title, options);\n      }\n    }, {\n      key: \"success\",\n      value: function success(message, title, options) {\n        abp.notify.success(message, title, options);\n      }\n    }, {\n      key: \"warn\",\n      value: function warn(message, title, options) {\n        abp.notify.warn(message, title, options);\n      }\n    }, {\n      key: \"error\",\n      value: function error(message, title, options) {\n        abp.notify.error(message, title, options);\n      }\n    }]);\n\n    return NotifyService;\n  }();\n\n  NotifyService.ɵfac = function NotifyService_Factory(t) {\n    return new (t || NotifyService)();\n  };\n\n  NotifyService.ɵprov = ɵɵdefineInjectable({\n    factory: function NotifyService_Factory() {\n      return new NotifyService();\n    },\n    token: NotifyService,\n    providedIn: \"root\"\n  });\n  return NotifyService;\n}();\n\nvar AbpSessionService = /*@__PURE__*/function () {\n  var AbpSessionService = /*#__PURE__*/function () {\n    function AbpSessionService() {\n      _classCallCheck(this, AbpSessionService);\n    }\n\n    _createClass(AbpSessionService, [{\n      key: \"userId\",\n      get: function get() {\n        return abp.session.userId;\n      }\n    }, {\n      key: \"tenantId\",\n      get: function get() {\n        return abp.session.tenantId;\n      }\n    }, {\n      key: \"impersonatorUserId\",\n      get: function get() {\n        return abp.session.impersonatorUserId;\n      }\n    }, {\n      key: \"impersonatorTenantId\",\n      get: function get() {\n        return abp.session.impersonatorTenantId;\n      }\n    }, {\n      key: \"multiTenancySide\",\n      get: function get() {\n        return abp.session.multiTenancySide;\n      }\n    }]);\n\n    return AbpSessionService;\n  }();\n\n  AbpSessionService.ɵfac = function AbpSessionService_Factory(t) {\n    return new (t || AbpSessionService)();\n  };\n\n  AbpSessionService.ɵprov = ɵɵdefineInjectable({\n    factory: function AbpSessionService_Factory() {\n      return new AbpSessionService();\n    },\n    token: AbpSessionService,\n    providedIn: \"root\"\n  });\n  return AbpSessionService;\n}();\n\nvar SettingService = /*@__PURE__*/function () {\n  var SettingService = /*#__PURE__*/function () {\n    function SettingService() {\n      _classCallCheck(this, SettingService);\n    }\n\n    _createClass(SettingService, [{\n      key: \"get\",\n      value: function get(name) {\n        return abp.setting.get(name);\n      }\n    }, {\n      key: \"getBoolean\",\n      value: function getBoolean(name) {\n        return abp.setting.getBoolean(name);\n      }\n    }, {\n      key: \"getInt\",\n      value: function getInt(name) {\n        return abp.setting.getInt(name);\n      }\n    }]);\n\n    return SettingService;\n  }();\n\n  SettingService.ɵfac = function SettingService_Factory(t) {\n    return new (t || SettingService)();\n  };\n\n  SettingService.ɵprov = ɵɵdefineInjectable({\n    factory: function SettingService_Factory() {\n      return new SettingService();\n    },\n    token: SettingService,\n    providedIn: \"root\"\n  });\n  return SettingService;\n}();\n\nvar UtilsService = /*@__PURE__*/function () {\n  var UtilsService = /*#__PURE__*/function () {\n    function UtilsService() {\n      _classCallCheck(this, UtilsService);\n    }\n\n    _createClass(UtilsService, [{\n      key: \"getCookieValue\",\n      value: function getCookieValue(key) {\n        return abp.utils.getCookieValue(key);\n      }\n    }, {\n      key: \"setCookieValue\",\n      value: function setCookieValue(key, value, expireDate, path, domain, attributes) {\n        abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);\n      }\n    }, {\n      key: \"deleteCookie\",\n      value: function deleteCookie(key, path) {\n        abp.utils.deleteCookie(key, path);\n      }\n    }]);\n\n    return UtilsService;\n  }();\n\n  UtilsService.ɵfac = function UtilsService_Factory(t) {\n    return new (t || UtilsService)();\n  };\n\n  UtilsService.ɵprov = ɵɵdefineInjectable({\n    factory: function UtilsService_Factory() {\n      return new UtilsService();\n    },\n    token: UtilsService,\n    providedIn: \"root\"\n  });\n  return UtilsService;\n}();\n\nvar AbpUserConfigurationService = /*@__PURE__*/function () {\n  var AbpUserConfigurationService = /*#__PURE__*/function () {\n    function AbpUserConfigurationService(_http) {\n      _classCallCheck(this, AbpUserConfigurationService);\n\n      this._http = _http;\n    }\n\n    _createClass(AbpUserConfigurationService, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this._http.get('/AbpUserConfiguration/GetAll').subscribe(function (result) {\n          jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));\n        });\n      }\n    }]);\n\n    return AbpUserConfigurationService;\n  }();\n\n  AbpUserConfigurationService.ɵfac = function AbpUserConfigurationService_Factory(t) {\n    return new (t || AbpUserConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n  };\n\n  AbpUserConfigurationService.ɵprov = ɵɵdefineInjectable({\n    factory: function AbpUserConfigurationService_Factory() {\n      return new AbpUserConfigurationService(ɵɵinject(HttpClient));\n    },\n    token: AbpUserConfigurationService,\n    providedIn: \"root\"\n  });\n  return AbpUserConfigurationService;\n}();\n\nvar AbpHttpConfigurationService = /*@__PURE__*/function () {\n  var AbpHttpConfigurationService = /*#__PURE__*/function () {\n    function AbpHttpConfigurationService(_messageService, _logService) {\n      _classCallCheck(this, AbpHttpConfigurationService);\n\n      this._messageService = _messageService;\n      this._logService = _logService;\n      this.defaultError = {\n        message: 'An error has occurred!',\n        details: 'Error details were not sent by server.'\n      };\n      this.defaultError401 = {\n        message: 'You are not authenticated!',\n        details: 'You should be authenticated (sign in) in order to perform this operation.'\n      };\n      this.defaultError403 = {\n        message: 'You are not authorized!',\n        details: 'You are not allowed to perform this operation.'\n      };\n      this.defaultError404 = {\n        message: 'Resource not found!',\n        details: 'The resource requested could not be found on the server.'\n      };\n    }\n\n    _createClass(AbpHttpConfigurationService, [{\n      key: \"logError\",\n      value: function logError(error) {\n        this._logService.error(error);\n      }\n    }, {\n      key: \"showError\",\n      value: function showError(error) {\n        if (error.details) {\n          return this._messageService.error(error.details, error.message || this.defaultError.message);\n        } else {\n          return this._messageService.error(error.message || this.defaultError.message);\n        }\n      }\n    }, {\n      key: \"handleTargetUrl\",\n      value: function handleTargetUrl(targetUrl) {\n        if (!targetUrl) {\n          location.href = '/';\n        } else {\n          location.href = targetUrl;\n        }\n      }\n    }, {\n      key: \"handleUnAuthorizedRequest\",\n      value: function handleUnAuthorizedRequest(messagePromise, targetUrl) {\n        var _this = this;\n\n        var self = this;\n\n        if (messagePromise) {\n          messagePromise.done(function () {\n            _this.handleTargetUrl(targetUrl || '/');\n          });\n        } else {\n          self.handleTargetUrl(targetUrl || '/');\n        }\n      }\n    }, {\n      key: \"handleNonAbpErrorResponse\",\n      value: function handleNonAbpErrorResponse(response) {\n        var self = this;\n\n        switch (response.status) {\n          case 401:\n            self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');\n            break;\n\n          case 403:\n            self.showError(self.defaultError403);\n            break;\n\n          case 404:\n            self.showError(self.defaultError404);\n            break;\n\n          default:\n            self.showError(self.defaultError);\n            break;\n        }\n      }\n    }, {\n      key: \"handleAbpResponse\",\n      value: function handleAbpResponse(response, ajaxResponse) {\n        var newResponse;\n\n        if (ajaxResponse.success) {\n          newResponse = response.clone({\n            body: ajaxResponse.result\n          });\n\n          if (ajaxResponse.targetUrl) {\n            this.handleTargetUrl(ajaxResponse.targetUrl);\n            ;\n          }\n        } else {\n          newResponse = response.clone({\n            body: ajaxResponse.result\n          });\n\n          if (!ajaxResponse.error) {\n            ajaxResponse.error = this.defaultError;\n          }\n\n          this.logError(ajaxResponse.error);\n          this.showError(ajaxResponse.error);\n\n          if (response.status === 401) {\n            this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);\n          }\n        }\n\n        return newResponse;\n      }\n    }, {\n      key: \"getAbpAjaxResponseOrNull\",\n      value: function getAbpAjaxResponseOrNull(response) {\n        if (!response || !response.headers) {\n          return null;\n        }\n\n        var contentType = response.headers.get('Content-Type');\n\n        if (!contentType) {\n          this._logService.warn('Content-Type is not sent!');\n\n          return null;\n        }\n\n        if (contentType.indexOf(\"application/json\") < 0) {\n          this._logService.warn('Content-Type is not application/json: ' + contentType);\n\n          return null;\n        }\n\n        var responseObj = JSON.parse(JSON.stringify(response.body));\n\n        if (!responseObj.__abp) {\n          return null;\n        }\n\n        return responseObj;\n      }\n    }, {\n      key: \"handleResponse\",\n      value: function handleResponse(response) {\n        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);\n\n        if (ajaxResponse == null) {\n          return response;\n        }\n\n        return this.handleAbpResponse(response, ajaxResponse);\n      }\n    }, {\n      key: \"blobToText\",\n      value: function blobToText(blob) {\n        return new Observable(function (observer) {\n          if (!blob) {\n            observer.next(\"\");\n            observer.complete();\n          } else {\n            var reader = new FileReader();\n\n            reader.onload = function () {\n              observer.next(this.result);\n              observer.complete();\n            };\n\n            reader.readAsText(blob);\n          }\n        });\n      }\n    }]);\n\n    return AbpHttpConfigurationService;\n  }();\n\n  AbpHttpConfigurationService.ɵfac = function AbpHttpConfigurationService_Factory(t) {\n    return new (t || AbpHttpConfigurationService)(ɵngcc0.ɵɵinject(MessageService), ɵngcc0.ɵɵinject(LogService));\n  };\n\n  AbpHttpConfigurationService.ɵprov = ɵɵdefineInjectable({\n    factory: function AbpHttpConfigurationService_Factory() {\n      return new AbpHttpConfigurationService(ɵɵinject(MessageService), ɵɵinject(LogService));\n    },\n    token: AbpHttpConfigurationService,\n    providedIn: \"root\"\n  });\n  return AbpHttpConfigurationService;\n}();\n\nvar RefreshTokenService = /*@__PURE__*/function () {\n  var RefreshTokenService = function RefreshTokenService() {\n    _classCallCheck(this, RefreshTokenService);\n  };\n\n  RefreshTokenService.ɵfac = function RefreshTokenService_Factory(t) {\n    return new (t || RefreshTokenService)();\n  };\n\n  RefreshTokenService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: RefreshTokenService,\n    factory: RefreshTokenService.ɵfac\n  });\n  return RefreshTokenService;\n}();\n\nvar AbpHttpInterceptor = /*@__PURE__*/function () {\n  var AbpHttpInterceptor = /*#__PURE__*/function () {\n    function AbpHttpInterceptor(configuration, _injector) {\n      _classCallCheck(this, AbpHttpInterceptor);\n\n      this._injector = _injector;\n      this._tokenService = new TokenService();\n      this._utilsService = new UtilsService();\n      this._logService = new LogService();\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n      this.configuration = configuration;\n    }\n\n    _createClass(AbpHttpInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var _this2 = this;\n\n        var modifiedRequest = this.normalizeRequestHeaders(request);\n        return next.handle(modifiedRequest).pipe(catchError(function (error) {\n          if (error instanceof HttpErrorResponse && error.status === 401) {\n            return _this2.tryAuthWithRefreshToken(request, next, error);\n          } else {\n            return _this2.handleErrorResponse(error);\n          }\n        }), switchMap(function (event) {\n          return _this2.handleSuccessResponse(event);\n        }));\n      }\n    }, {\n      key: \"tryGetRefreshTokenService\",\n      value: function tryGetRefreshTokenService() {\n        var _refreshTokenService = this._injector.get(RefreshTokenService, null);\n\n        if (_refreshTokenService) {\n          return _refreshTokenService.tryAuthWithRefreshToken();\n        }\n\n        return of(false);\n      }\n    }, {\n      key: \"tryAuthWithRefreshToken\",\n      value: function tryAuthWithRefreshToken(request, next, error) {\n        var _this3 = this;\n\n        if (!this.isRefreshing) {\n          this.isRefreshing = true;\n          this.refreshTokenSubject.next(null);\n          return this.tryGetRefreshTokenService().pipe(switchMap(function (authResult) {\n            _this3.isRefreshing = false;\n\n            if (authResult) {\n              _this3.refreshTokenSubject.next(authResult);\n\n              var modifiedRequest = _this3.normalizeRequestHeaders(request);\n\n              return next.handle(modifiedRequest);\n            } else {\n              return _this3.handleErrorResponse(error);\n            }\n          }));\n        } else {\n          return this.refreshTokenSubject.pipe(filter(function (authResult) {\n            return authResult != null;\n          }), take(1), switchMap(function (authResult) {\n            var modifiedRequest = _this3.normalizeRequestHeaders(request);\n\n            return next.handle(modifiedRequest);\n          }));\n        }\n      }\n    }, {\n      key: \"normalizeRequestHeaders\",\n      value: function normalizeRequestHeaders(request) {\n        var modifiedHeaders = new HttpHeaders();\n        modifiedHeaders = request.headers.set(\"Pragma\", \"no-cache\").set(\"Cache-Control\", \"no-cache\").set(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\n        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);\n        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);\n        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);\n        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);\n        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);\n        return request.clone({\n          headers: modifiedHeaders\n        });\n      }\n    }, {\n      key: \"addXRequestedWithHeader\",\n      value: function addXRequestedWithHeader(headers) {\n        if (headers) {\n          headers = headers.set('X-Requested-With', 'XMLHttpRequest');\n        }\n\n        return headers;\n      }\n    }, {\n      key: \"addAspNetCoreCultureHeader\",\n      value: function addAspNetCoreCultureHeader(headers) {\n        var cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\n\n        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {\n          headers = headers.set('.AspNetCore.Culture', cookieLangValue);\n        }\n\n        return headers;\n      }\n    }, {\n      key: \"addAcceptLanguageHeader\",\n      value: function addAcceptLanguageHeader(headers) {\n        var cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\n\n        if (cookieLangValue && headers && !headers.has('Accept-Language')) {\n          headers = headers.set('Accept-Language', cookieLangValue);\n        }\n\n        return headers;\n      }\n    }, {\n      key: \"addTenantIdHeader\",\n      value: function addTenantIdHeader(headers) {\n        var cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);\n\n        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {\n          headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);\n        }\n\n        return headers;\n      }\n    }, {\n      key: \"addAuthorizationHeaders\",\n      value: function addAuthorizationHeaders(headers) {\n        var authorizationHeaders = headers ? headers.getAll('Authorization') : null;\n\n        if (!authorizationHeaders) {\n          authorizationHeaders = [];\n        }\n\n        if (!this.itemExists(authorizationHeaders, function (item) {\n          return item.indexOf('Bearer ') == 0;\n        })) {\n          var token = this._tokenService.getToken();\n\n          if (headers && token) {\n            headers = headers.set('Authorization', 'Bearer ' + token);\n          }\n        }\n\n        return headers;\n      }\n    }, {\n      key: \"handleSuccessResponse\",\n      value: function handleSuccessResponse(event) {\n        var self = this;\n\n        if (event instanceof HttpResponse) {\n          if (event.body instanceof Blob && event.body.type && event.body.type.indexOf(\"application/json\") >= 0) {\n            return self.configuration.blobToText(event.body).pipe(map(function (json) {\n              var responseBody = json == \"null\" ? {} : JSON.parse(json);\n              var modifiedResponse = self.configuration.handleResponse(event.clone({\n                body: responseBody\n              }));\n              return modifiedResponse.clone({\n                body: new Blob([JSON.stringify(modifiedResponse.body)], {\n                  type: 'application/json'\n                })\n              });\n            }));\n          }\n        }\n\n        return of(event);\n      }\n    }, {\n      key: \"handleErrorResponse\",\n      value: function handleErrorResponse(error) {\n        var _this4 = this;\n\n        if (!(error.error instanceof Blob)) {\n          return throwError(error);\n        }\n\n        return this.configuration.blobToText(error.error).pipe(switchMap(function (json) {\n          var errorBody = json == \"\" || json == \"null\" ? {} : JSON.parse(json);\n          var errorResponse = new HttpResponse({\n            headers: error.headers,\n            status: error.status,\n            body: errorBody\n          });\n\n          var ajaxResponse = _this4.configuration.getAbpAjaxResponseOrNull(errorResponse);\n\n          if (ajaxResponse != null) {\n            _this4.configuration.handleAbpResponse(errorResponse, ajaxResponse);\n          } else {\n            _this4.configuration.handleNonAbpErrorResponse(errorResponse);\n          }\n\n          return throwError(error);\n        }));\n      }\n    }, {\n      key: \"itemExists\",\n      value: function itemExists(items, predicate) {\n        for (var i = 0; i < items.length; i++) {\n          if (predicate(items[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }]);\n\n    return AbpHttpInterceptor;\n  }();\n\n  AbpHttpInterceptor.ɵfac = function AbpHttpInterceptor_Factory(t) {\n    return new (t || AbpHttpInterceptor)(ɵngcc0.ɵɵinject(AbpHttpConfigurationService), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  AbpHttpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: AbpHttpInterceptor,\n    factory: AbpHttpInterceptor.ɵfac\n  });\n  return AbpHttpInterceptor;\n}();\n/*\n * Public API Surface of abp-ng2-module\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AbpHttpConfigurationService, AbpHttpInterceptor, AbpModule, AbpMultiTenancyService, AbpSessionService, AbpUserConfigurationService, FeatureCheckerService, LocalizationService, LogService, MessageService, NotifyService, PermissionCheckerService, RefreshTokenService, SettingService, TokenService, UtilsService };","map":null,"metadata":{},"sourceType":"module"}