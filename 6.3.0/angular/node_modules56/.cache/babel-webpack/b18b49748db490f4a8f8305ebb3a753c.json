{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/button.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport devices from \"../core/devices\";\nimport { render } from \"./widget/utils.ink_ripple\";\nimport registerComponent from \"../core/component_registrator\";\nimport { isMaterial, current } from \"./themes\";\nimport Action from \"../core/action\";\nimport ValidationEngine from \"./validation_engine\";\nimport Widget from \"./widget/ui.widget\";\nimport { active as activeEvents, click as clickEvent, dxClick as dxClickEvent } from \"../events/short\";\nimport { extend } from \"../core/utils/extend\";\nimport { FunctionTemplate } from \"../core/templates/function_template\";\nimport { getImageContainer, getImageSourceType } from \"../core/utils/icon\";\nimport { getPublicElement } from \"../core/element\";\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\n\nvar Button = /*#__PURE__*/function (_Widget) {\n  _inherits(Button, _Widget);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _super.apply(this, arguments);\n    _this._feedbackHideTimeout = 100;\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"_$content\",\n    value: function _$content() {\n      return this.$element().find(\".dx-button-content\");\n    }\n  }, {\n    key: \"_$submitInput\",\n    value: function _$submitInput() {\n      return this.$element().find(\".dx-button-submit-input\");\n    }\n  }, {\n    key: \"_attachActiveEvents\",\n    value: function _attachActiveEvents(active, inactive) {\n      var $el = this._eventBindingTarget();\n\n      var selector = this._activeStateUnit;\n      activeEvents.off($el, {\n        namespace: \"inkRipple\",\n        selector: selector\n      });\n      activeEvents.on($el, new Action(active), new Action(inactive, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }), {\n        showTimeout: this._feedbackShowTimeout,\n        hideTimeout: this._feedbackHideTimeout,\n        selector: selector,\n        namespace: \"inkRipple\"\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(Button.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: function device() {\n          return isMaterial(current());\n        },\n        options: {\n          useInkRipple: true\n        }\n      }]);\n    }\n  }, {\n    key: \"_executeClickAction\",\n    value: function _executeClickAction(event) {\n      this._clickAction({\n        validationGroup: this._validationGroupConfig,\n        event: event\n      });\n    }\n  }, {\n    key: \"_findGroup\",\n    value: function _findGroup() {\n      var $element = this.$element();\n\n      var model = this._modelByElement($element);\n\n      var _this$option = this.option(),\n          validationGroup = _this$option.validationGroup;\n\n      return validationGroup || ValidationEngine.findGroup($element, model);\n    }\n  }, {\n    key: \"_getContentData\",\n    value: function _getContentData() {\n      var _this$option2 = this.option(),\n          icon = _this$option2.icon,\n          text = _this$option2.text,\n          type = _this$option2.type,\n          _templateData = _this$option2._templateData;\n\n      return extend({\n        icon: \"back\" === type && !icon ? \"back\" : icon,\n        text: text\n      }, _templateData);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Button.prototype), \"_getDefaultOptions\", this).call(this), {\n        hoverStateEnabled: true,\n        onClick: null,\n        type: \"normal\",\n        text: \"\",\n        icon: \"\",\n        iconPosition: \"left\",\n        validationGroup: void 0,\n        activeStateEnabled: true,\n        template: \"content\",\n        useSubmitBehavior: false,\n        useInkRipple: false,\n        _templateData: {},\n        stylingMode: \"contained\"\n      });\n    }\n  }, {\n    key: \"_getSubmitAction\",\n    value: function _getSubmitAction() {\n      var _this2 = this;\n\n      var needValidate = true;\n      var validationStatus = \"valid\";\n      return this._createAction(function (_ref) {\n        var event = _ref.event;\n\n        if (needValidate) {\n          var validationGroup = _this2._validationGroupConfig;\n\n          if (validationGroup) {\n            var _validationGroup$vali = validationGroup.validate(),\n                status = _validationGroup$vali.status,\n                complete = _validationGroup$vali.complete;\n\n            validationStatus = status;\n\n            if (\"pending\" === status) {\n              needValidate = false;\n\n              _this2.option(\"disabled\", true);\n\n              complete.then(function (_ref2) {\n                var status = _ref2.status;\n\n                _this2.option(\"disabled\", false);\n\n                validationStatus = status;\n                \"valid\" === validationStatus && _this2._submitInput().click();\n                needValidate = true;\n              });\n            }\n          }\n        }\n\n        \"valid\" !== validationStatus && event.preventDefault();\n        event.stopPropagation();\n      });\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this.$element().addClass(\"dx-button\");\n\n      this._renderType();\n\n      this._renderStylingMode();\n\n      this._renderInkRipple();\n\n      this._renderClick();\n\n      this._updateAriaLabel();\n\n      _get(_getPrototypeOf(Button.prototype), \"_initMarkup\", this).call(this);\n\n      this._updateContent();\n\n      this.setAria(\"role\", \"button\");\n    }\n  }, {\n    key: \"_getAnonymousTemplateName\",\n    value: function _getAnonymousTemplateName() {\n      return ANONYMOUS_TEMPLATE_NAME;\n    }\n  }, {\n    key: \"_initTemplates\",\n    value: function _initTemplates() {\n      var _this3 = this;\n\n      this._templateManager.addDefaultTemplates({\n        content: new FunctionTemplate(function (_ref3) {\n          var _ref3$model = _ref3.model,\n              model = _ref3$model === void 0 ? {} : _ref3$model,\n              container = _ref3.container;\n          var text = model.text,\n              icon = model.icon;\n\n          var _this3$option = _this3.option(),\n              iconPosition = _this3$option.iconPosition;\n\n          var $icon = getImageContainer(icon);\n          var $textContainer = text && $(\"<span>\").text(text).addClass(\"dx-button-text\");\n          var $container = $(container);\n          $container.append($textContainer);\n\n          if (\"left\" === iconPosition) {\n            $container.prepend($icon);\n          } else {\n            $icon.addClass(\"dx-icon-right\");\n            $container.append($icon);\n          }\n        })\n      });\n\n      _get(_getPrototypeOf(Button.prototype), \"_initTemplates\", this).call(this);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"onClick\":\n          this._updateClick();\n\n          break;\n\n        case \"icon\":\n        case \"text\":\n          this._updateContent();\n\n          this._updateAriaLabel();\n\n          break;\n\n        case \"type\":\n          this._updateType();\n\n          this._updateContent();\n\n          break;\n\n        case \"_templateData\":\n          break;\n\n        case \"template\":\n        case \"iconPosition\":\n          this._updateContent();\n\n          break;\n\n        case \"stylingMode\":\n          this._updateStylingMode();\n\n          break;\n\n        case \"useSubmitBehavior\":\n          this._updateSubmitInput();\n\n          break;\n\n        case \"useInkRipple\":\n          this._invalidate();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(Button.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_renderClick\",\n    value: function _renderClick() {\n      var _this4 = this;\n\n      var $el = this.$element();\n      dxClickEvent.off($el, {\n        namespace: this.NAME\n      });\n      dxClickEvent.on($el, function (event) {\n        return _this4._executeClickAction(event);\n      }, {\n        namespace: this.NAME\n      });\n\n      this._updateClick();\n    }\n  }, {\n    key: \"_renderInkRipple\",\n    value: function _renderInkRipple() {\n      var _this5 = this;\n\n      var _this$option3 = this.option(),\n          text = _this$option3.text,\n          icon = _this$option3.icon,\n          type = _this$option3.type,\n          useInkRipple = _this$option3.useInkRipple;\n\n      if (useInkRipple) {\n        var isOnlyIconButton = !text && icon || \"back\" === type;\n\n        var _inkRipple = render(isOnlyIconButton ? {\n          waveSizeCoefficient: 1,\n          useHoldAnimation: false,\n          isCentered: true\n        } : {});\n\n        var changeWaveVisibility = function changeWaveVisibility(event, visible) {\n          var _this5$option = _this5.option(),\n              activeStateEnabled = _this5$option.activeStateEnabled,\n              useInkRipple = _this5$option.useInkRipple;\n\n          if (useInkRipple && activeStateEnabled && !_this5._disposed) {\n            var config = {\n              element: _this5._$content(),\n              event: event\n            };\n            visible ? _inkRipple.showWave(config) : _inkRipple.hideWave(config);\n          }\n        };\n\n        this._attachActiveEvents(function (_ref4) {\n          var event = _ref4.event;\n          return changeWaveVisibility(event, true);\n        }, function (_ref5) {\n          var event = _ref5.event;\n          return changeWaveVisibility(event);\n        });\n      }\n    }\n  }, {\n    key: \"_renderStylingMode\",\n    value: function _renderStylingMode() {\n      var $element = this.$element();\n\n      var _this$option4 = this.option(),\n          stylingMode = _this$option4.stylingMode;\n\n      if (-1 === [\"contained\", \"text\", \"outlined\"].indexOf(stylingMode)) {\n        stylingMode = this._getDefaultOptions().stylingMode;\n      }\n\n      $element.addClass(\"dx-button-mode-\".concat(stylingMode));\n    }\n  }, {\n    key: \"_renderSubmitInput\",\n    value: function _renderSubmitInput() {\n      var _this$option5 = this.option(),\n          useSubmitBehavior = _this$option5.useSubmitBehavior;\n\n      if (useSubmitBehavior) {\n        var submitAction = this._getSubmitAction();\n\n        var $content = this._$content();\n\n        $(\"<input>\").attr(\"type\", \"submit\").attr(\"tabindex\", -1).addClass(\"dx-button-submit-input\").appendTo($content);\n        clickEvent.on(this._$submitInput(), function (event) {\n          return submitAction({\n            event: event\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_renderType\",\n    value: function _renderType() {\n      var _this$option6 = this.option(),\n          type = _this$option6.type;\n\n      var $element = this.$element();\n      type && $element.addClass(\"dx-button-\".concat(type));\n    }\n  }, {\n    key: \"_submitInput\",\n    value: function _submitInput() {\n      return this._$submitInput().get(0);\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var _this6 = this;\n\n      var click = function click(e) {\n        e.preventDefault();\n\n        _this6._executeClickAction(e);\n      };\n\n      return extend(_get(_getPrototypeOf(Button.prototype), \"_supportedKeys\", this).call(this), {\n        space: click,\n        enter: click\n      });\n    }\n  }, {\n    key: \"_updateAriaLabel\",\n    value: function _updateAriaLabel() {\n      var ariaTarget = this._getAriaTarget();\n\n      var _this$option7 = this.option(),\n          icon = _this$option7.icon,\n          text = _this$option7.text;\n\n      if (!text) {\n        if (\"image\" === getImageSourceType(icon)) {\n          icon = -1 === icon.indexOf(\"base64\") ? icon.replace(/.+\\/([^.]+)\\..+$/, \"$1\") : \"Base64\";\n        }\n\n        text = icon || \"\";\n      }\n\n      ariaTarget.attr(\"aria-label\", text || null);\n    }\n  }, {\n    key: \"_updateClick\",\n    value: function _updateClick() {\n      var _this7 = this;\n\n      this._clickAction = this._createActionByOption(\"onClick\", {\n        excludeValidators: [\"readOnly\"],\n        afterExecute: function afterExecute() {\n          var _this7$option = _this7.option(),\n              useSubmitBehavior = _this7$option.useSubmitBehavior;\n\n          useSubmitBehavior && setTimeout(function () {\n            return _this7._submitInput().click();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_updateContent\",\n    value: function _updateContent() {\n      var $element = this.$element();\n\n      var $content = this._$content();\n\n      var data = this._getContentData();\n\n      var _this$option8 = this.option(),\n          template = _this$option8.template,\n          iconPosition = _this$option8.iconPosition;\n\n      var icon = data.icon,\n          text = data.text;\n      $content.length ? $content.empty() : $content = $(\"<div>\").addClass(\"dx-button-content\").appendTo($element);\n      $element.toggleClass(\"dx-button-has-icon\", !!icon).toggleClass(\"dx-button-icon-right\", !!icon && \"left\" !== iconPosition).toggleClass(\"dx-button-has-text\", !!text);\n      var $template = $(this._getTemplateByOption(\"template\").render({\n        model: data,\n        container: getPublicElement($content),\n        transclude: this._templateManager.anonymousTemplateName === template\n      }));\n\n      if ($template.hasClass(\"dx-template-wrapper\")) {\n        $template.addClass(\"dx-button-content\");\n        $content.replaceWith($template);\n      }\n\n      this._updateSubmitInput();\n    }\n  }, {\n    key: \"_updateSubmitInput\",\n    value: function _updateSubmitInput() {\n      var _this$option9 = this.option(),\n          useSubmitBehavior = _this$option9.useSubmitBehavior;\n\n      var $submitInput = this._$submitInput();\n\n      if (!useSubmitBehavior && $submitInput.length) {\n        $submitInput.remove();\n      } else if (useSubmitBehavior && !$submitInput.length) {\n        this._renderSubmitInput();\n      }\n    }\n  }, {\n    key: \"_updateStylingMode\",\n    value: function _updateStylingMode() {\n      var $element = this.$element();\n      [\"contained\", \"text\", \"outlined\"].map(function (mode) {\n        return \"dx-button-mode-\".concat(mode);\n      }).forEach($element.removeClass.bind($element));\n\n      this._renderStylingMode();\n    }\n  }, {\n    key: \"_updateType\",\n    value: function _updateType() {\n      var $element = this.$element();\n      [\"back\", \"danger\", \"default\", \"normal\", \"success\"].map(function (type) {\n        return \"dx-button-\".concat(type);\n      }).forEach($element.removeClass.bind($element));\n\n      this._renderType();\n    }\n  }, {\n    key: \"_validationGroupConfig\",\n    get: function get() {\n      return ValidationEngine.getGroupConfig(this._findGroup());\n    }\n  }]);\n\n  return Button;\n}(Widget);\n\nregisterComponent(\"dxButton\", Button);\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}