{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/subscribes.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { wrapToArray, inArray } from \"../../core/utils/array\";\nimport { isDefined, isPlainObject } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nimport { each } from \"../../core/utils/iterator\";\nimport errors from \"../widget/ui.errors\";\nimport { locate } from \"../../animation/translator\";\nimport { grep } from \"../../core/utils/common\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport dateLocalization from \"../../localization/date\";\nimport timeZoneUtils from \"./utils.timeZone\";\nimport { AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS } from \"./constants\";\nimport utils from \"./utils\";\nimport { getFieldExpr as getResourceFieldExpr } from \"./resources/utils\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar subscribes = {\n  getTimeZoneCalculator: function getTimeZoneCalculator() {\n    return this.timeZoneCalculator;\n  },\n  isCurrentViewAgenda: function isCurrentViewAgenda() {\n    return \"agenda\" === this.option(\"currentView\");\n  },\n  currentViewUpdated: function currentViewUpdated(currentView) {\n    this.option(\"currentView\", currentView);\n  },\n  currentDateUpdated: function currentDateUpdated(date) {\n    this.option(\"currentDate\", date);\n  },\n  getOption: function getOption(name) {\n    return this.option(name);\n  },\n  isVirtualScrolling: function isVirtualScrolling() {\n    return this.isVirtualScrolling();\n  },\n  setCellDataCacheAlias: function setCellDataCacheAlias(appointment, geometry) {\n    this._workSpace.setCellDataCacheAlias(appointment, geometry);\n  },\n  createAppointmentSettings: function createAppointmentSettings(appointment) {\n    return this._getAppointmentSettingsGenerator().create(appointment);\n  },\n  isGroupedByDate: function isGroupedByDate() {\n    return this.getWorkSpace().isGroupedByDate();\n  },\n  showAppointmentTooltip: function showAppointmentTooltip(options) {\n    var targetedAppointment = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentTooltip(options.data, options.target, targetedAppointment);\n  },\n  hideAppointmentTooltip: function hideAppointmentTooltip() {\n    this.hideAppointmentTooltip();\n  },\n  showAddAppointmentPopup: function showAddAppointmentPopup(cellData, cellGroups) {\n    var appointmentAdapter = this.createAppointmentAdapter({});\n    appointmentAdapter.allDay = cellData.allDay;\n    appointmentAdapter.startDate = this.timeZoneCalculator.createDate(cellData.startDate, {\n      path: \"fromGrid\"\n    });\n    appointmentAdapter.endDate = this.timeZoneCalculator.createDate(cellData.endDate, {\n      path: \"fromGrid\"\n    });\n    var resultAppointment = extend(appointmentAdapter.source(), cellGroups);\n    this.showAppointmentPopup(resultAppointment, true);\n  },\n  showEditAppointmentPopup: function showEditAppointmentPopup(options) {\n    var targetedData = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentPopup(options.data, false, targetedData);\n  },\n  updateAppointmentAfterResize: function updateAppointmentAfterResize(options) {\n    var info = utils.dataAccessors.getAppointmentInfo(options.$appointment);\n    var exceptionDate = info.sourceAppointment.exceptionDate;\n\n    this._checkRecurringAppointment(options.target, options.data, exceptionDate, function () {\n      this._updateAppointment(options.target, options.data, function () {\n        this._appointments.moveAppointmentBack();\n      });\n    }.bind(this));\n  },\n  getUpdatedData: function getUpdatedData(rawAppointment) {\n    return this._getUpdatedData(rawAppointment);\n  },\n  updateAppointmentAfterDrag: function updateAppointmentAfterDrag(_ref) {\n    var event = _ref.event,\n        element = _ref.element,\n        rawAppointment = _ref.rawAppointment,\n        coordinates = _ref.coordinates;\n    var info = utils.dataAccessors.getAppointmentInfo(element);\n    var appointment = this.createAppointmentAdapter(rawAppointment);\n    var targetedAppointment = this.createAppointmentAdapter(extend({}, rawAppointment, this._getUpdatedData(rawAppointment)));\n    var targetedRawAppointment = targetedAppointment.source();\n\n    var newCellIndex = this._workSpace.getDroppableCellIndex();\n\n    var oldCellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n    var becomeAllDay = targetedAppointment.allDay;\n    var wasAllDay = appointment.allDay;\n    var movedBetweenAllDayAndSimple = this._workSpace.supportAllDayRow() && (wasAllDay && !becomeAllDay || !wasAllDay && becomeAllDay);\n\n    if (newCellIndex !== oldCellIndex || movedBetweenAllDayAndSimple) {\n      this._checkRecurringAppointment(rawAppointment, targetedRawAppointment, info.sourceAppointment.exceptionDate, function () {\n        this._updateAppointment(rawAppointment, targetedRawAppointment, function () {\n          this._appointments.moveAppointmentBack(event);\n        }, event);\n      }.bind(this), void 0, void 0, event);\n    } else {\n      this._appointments.moveAppointmentBack(event);\n    }\n  },\n  onDeleteButtonPress: function onDeleteButtonPress(options) {\n    var targetedData = this.getTargetedAppointment(options.data, $(options.target));\n    this.checkAndDeleteAppointment(options.data, targetedData);\n    this.hideAppointmentTooltip();\n  },\n  getAppointmentColor: function getAppointmentColor(options) {\n    var resourcesManager = this._resourcesManager;\n    var resourceForPainting = resourcesManager.getResourceForPainting(this._getCurrentViewOption(\"groups\"));\n    var response = new Deferred().resolve().promise();\n\n    if (resourceForPainting) {\n      var field = getResourceFieldExpr(resourceForPainting);\n      var groupIndex = options.groupIndex;\n\n      var groups = this._workSpace._getCellGroups(groupIndex);\n\n      var resourceValues = wrapToArray(resourcesManager.getDataAccessors(field, \"getter\")(options.itemData));\n      var groupId = resourceValues.length ? resourceValues[0] : void 0;\n\n      for (var i = 0; i < groups.length; i++) {\n        if (groups[i].name === field) {\n          groupId = groups[i].id;\n          break;\n        }\n      }\n\n      response = resourcesManager.getResourceColor(field, groupId);\n    }\n\n    return response;\n  },\n  getHeaderHeight: function getHeaderHeight() {\n    return this._header._$element && parseInt(this._header._$element.outerHeight(), 10);\n  },\n  getResourcesFromItem: function getResourcesFromItem(itemData) {\n    return this._resourcesManager.getResourcesFromItem(itemData);\n  },\n  getBoundOffset: function getBoundOffset() {\n    return {\n      top: -this.getWorkSpaceAllDayHeight()\n    };\n  },\n  appointmentTakesSeveralDays: function appointmentTakesSeveralDays(appointment) {\n    return this._appointmentModel.appointmentTakesSeveralDays(appointment);\n  },\n  getTextAndFormatDate: function getTextAndFormatDate(appointmentRaw, targetedAppointmentRaw, format) {\n    var appointmentAdapter = this.createAppointmentAdapter(appointmentRaw);\n    var targetedAdapter = this.createAppointmentAdapter(targetedAppointmentRaw || appointmentRaw);\n    var startDate = this.timeZoneCalculator.createDate(targetedAdapter.startDate, {\n      path: \"toGrid\"\n    });\n    var endDate = this.timeZoneCalculator.createDate(targetedAdapter.endDate, {\n      path: \"toGrid\"\n    });\n    var formatType = format || this.fire(\"_getTypeFormat\", startDate, endDate, targetedAdapter.allDay);\n    return {\n      text: targetedAdapter.text || appointmentAdapter.text,\n      formatDate: this.fire(\"_formatDates\", startDate, endDate, formatType)\n    };\n  },\n  _getTypeFormat: function _getTypeFormat(startDate, endDate, isAllDay) {\n    if (isAllDay) {\n      return \"DATE\";\n    }\n\n    if (\"month\" !== this.option(\"currentView\") && dateUtils.sameDate(startDate, endDate)) {\n      return \"TIME\";\n    }\n\n    return \"DATETIME\";\n  },\n  _createAppointmentTitle: function _createAppointmentTitle(data) {\n    if (isPlainObject(data)) {\n      return data.text;\n    }\n\n    return String(data);\n  },\n  _formatDates: function _formatDates(startDate, endDate, formatType) {\n    var isSameDate = startDate.getDate() === endDate.getDate();\n\n    switch (formatType) {\n      case \"DATETIME\":\n        return [dateLocalization.format(startDate, \"monthandday\"), \" \", dateLocalization.format(startDate, \"shorttime\"), \" - \", isSameDate ? \"\" : dateLocalization.format(endDate, \"monthandday\") + \" \", dateLocalization.format(endDate, \"shorttime\")].join(\"\");\n\n      case \"TIME\":\n        return \"\".concat(dateLocalization.format(startDate, \"shorttime\"), \" - \").concat(dateLocalization.format(endDate, \"shorttime\"));\n\n      case \"DATE\":\n        return \"\".concat(dateLocalization.format(startDate, \"monthandday\")).concat(isSameDate ? \"\" : \" - \" + dateLocalization.format(endDate, \"monthandday\"));\n    }\n  },\n  getResizableAppointmentArea: function getResizableAppointmentArea(options) {\n    var allDay = options.allDay;\n\n    var groups = this._getCurrentViewOption(\"groups\");\n\n    if (groups && groups.length) {\n      if (allDay || this.getLayoutManager().getRenderingStrategyInstance()._needHorizontalGroupBounds()) {\n        var horizontalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: horizontalGroupBounds.left,\n          right: horizontalGroupBounds.right,\n          top: 0,\n          bottom: 0\n        };\n      }\n\n      if (this.getLayoutManager().getRenderingStrategyInstance()._needVerticalGroupBounds(allDay) && this._workSpace._isVerticalGroupedWorkSpace()) {\n        var verticalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: 0,\n          right: 0,\n          top: verticalGroupBounds.top,\n          bottom: verticalGroupBounds.bottom\n        };\n      }\n    }\n  },\n  needRecalculateResizableArea: function needRecalculateResizableArea() {\n    return this.getWorkSpace().needRecalculateResizableArea();\n  },\n  getAppointmentGeometry: function getAppointmentGeometry(settings) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getAppointmentGeometry(settings);\n  },\n  isAllDay: function isAllDay(appointmentData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().isAllDay(appointmentData);\n  },\n  getDeltaTime: function getDeltaTime(e, initialSize, itemData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDeltaTime(e, initialSize, itemData);\n  },\n  getDropDownAppointmentWidth: function getDropDownAppointmentWidth(isAllDay) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentWidth(this._getViewCountConfig().intervalCount, isAllDay);\n  },\n  getDropDownAppointmentHeight: function getDropDownAppointmentHeight() {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentHeight();\n  },\n  getCellWidth: function getCellWidth() {\n    return this.getWorkSpace().getCellWidth();\n  },\n  getCellHeight: function getCellHeight() {\n    return this.getWorkSpace().getCellHeight();\n  },\n  getResizableStep: function getResizableStep() {\n    var workSpace = this.getWorkSpace();\n    var cellWidth = workSpace.getCellWidth();\n\n    if (workSpace.isGroupedByDate()) {\n      return workSpace._getGroupCount() * cellWidth;\n    }\n\n    return cellWidth;\n  },\n  getRenderingStrategy: function getRenderingStrategy() {\n    return this._getAppointmentsRenderingStrategy();\n  },\n  getMaxAppointmentCountPerCellByType: function getMaxAppointmentCountPerCellByType(isAllDay) {\n    return this.getRenderingStrategyInstance()._getMaxAppointmentCountPerCellByType(isAllDay);\n  },\n  needCorrectAppointmentDates: function needCorrectAppointmentDates() {\n    return this.getRenderingStrategyInstance().needCorrectAppointmentDates();\n  },\n  getRenderingStrategyDirection: function getRenderingStrategyDirection() {\n    return this.getRenderingStrategyInstance().getDirection();\n  },\n  getWorkSpaceDateTableOffset: function getWorkSpaceDateTableOffset() {\n    return this.getWorkSpaceDateTableOffset();\n  },\n  getFullWeekAppointmentWidth: function getFullWeekAppointmentWidth(options) {\n    var groupIndex = options.groupIndex;\n    return this._workSpace.getGroupWidth(groupIndex);\n  },\n  getMaxAppointmentWidth: function getMaxAppointmentWidth(options) {\n    var workSpace = this._workSpace;\n    return workSpace.getCellCountToLastViewDate(options.date) * workSpace.getCellWidth();\n  },\n  updateAppointmentStartDate: function updateAppointmentStartDate(options) {\n    var appointment = options.appointment;\n\n    var firstViewDate = this._workSpace.getStartViewDate();\n\n    var startDate = new Date(options.startDate);\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    var updatedStartDate;\n\n    if (this.appointmentTakesAllDay(appointment)) {\n      updatedStartDate = dateUtils.normalizeDate(startDate, firstViewDate);\n    } else {\n      if (startDate < firstViewDate) {\n        startDate = firstViewDate;\n      }\n\n      updatedStartDate = dateUtils.normalizeDate(options.startDate, new Date(startDate));\n    }\n\n    return dateUtils.roundDateByStartDayHour(updatedStartDate, startDayHour);\n  },\n  updateAppointmentEndDate: function updateAppointmentEndDate(options) {\n    var endDate = options.endDate;\n\n    var endDayHour = this._getCurrentViewOption(\"endDayHour\");\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    var updatedEndDate = endDate;\n\n    if (endDate.getHours() >= endDayHour) {\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    } else if (!options.isSameDate && startDayHour > 0 && 60 * endDate.getHours() + endDate.getMinutes() < 60 * startDayHour) {\n      updatedEndDate = new Date(updatedEndDate.getTime() - toMs(\"day\"));\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    }\n\n    return updatedEndDate;\n  },\n  renderCompactAppointments: function renderCompactAppointments(options) {\n    this._compactAppointmentsHelper.render(options);\n  },\n  clearCompactAppointments: function clearCompactAppointments() {\n    this._compactAppointmentsHelper.clear();\n  },\n  supportCompactDropDownAppointments: function supportCompactDropDownAppointments() {\n    return this._workSpace._supportCompactDropDownAppointments();\n  },\n  isApplyCompactAppointmentOffset: function isApplyCompactAppointmentOffset() {\n    return this._workSpace._isApplyCompactAppointmentOffset();\n  },\n  getGroupCount: function getGroupCount() {\n    return this._workSpace._getGroupCount();\n  },\n  mapAppointmentFields: function mapAppointmentFields(config) {\n    var itemData = config.itemData,\n        itemElement = config.itemElement,\n        targetedAppointment = config.targetedAppointment;\n    var targetedData = targetedAppointment || this.getTargetedAppointment(itemData, itemElement);\n    return {\n      appointmentData: config.itemData,\n      appointmentElement: config.itemElement,\n      targetedAppointmentData: targetedData\n    };\n  },\n  getOffsetByAllDayPanel: function getOffsetByAllDayPanel(groupIndex) {\n    return this._workSpace._getOffsetByAllDayPanel(groupIndex);\n  },\n  getGroupTop: function getGroupTop(groupIndex) {\n    return this._workSpace._getGroupTop(groupIndex);\n  },\n  updateResizableArea: function updateResizableArea() {\n    var $allResizableElements = this.$element().find(\".dx-scheduler-appointment.dx-resizable\");\n    var horizontalResizables = grep($allResizableElements, function (el) {\n      var $el = $(el);\n      var resizableInst = $el.dxResizable(\"instance\");\n      var area = resizableInst.option(\"area\");\n      return inArray(resizableInst.option(\"handles\"), [\"right left\", \"left right\"]) > -1 && isPlainObject(area);\n    });\n    each(horizontalResizables, function (_, el) {\n      var $el = $(el);\n      var position = locate($el);\n\n      var appointmentData = this._appointments._getItemData($el);\n\n      var area = this._appointments._calculateResizableArea({\n        left: position.left\n      }, appointmentData);\n\n      $el.dxResizable(\"instance\").option(\"area\", area);\n    }.bind(this));\n  },\n  getField: function getField(field, obj) {\n    if (!isDefined(this._dataAccessors.getter[field])) {\n      return;\n    }\n\n    return this._dataAccessors.getter[field](obj);\n  },\n  setField: function setField(field, obj, value) {\n    if (!isDefined(this._dataAccessors.setter[field])) {\n      return;\n    }\n\n    var splitExprStr = this.option(field + \"Expr\").split(\".\");\n    var rootField = splitExprStr[0];\n\n    if (void 0 === obj[rootField] && splitExprStr.length > 1) {\n      var emptyChain = function (arr) {\n        var result = {};\n        var tmp = result;\n        var arrLength = arr.length - 1;\n\n        for (var i = 1; i < arrLength; i++) {\n          tmp = tmp[arr[i]] = {};\n        }\n\n        return result;\n      }(splitExprStr);\n\n      obj[rootField] = emptyChain;\n    }\n\n    this._dataAccessors.setter[field](obj, value);\n\n    return obj;\n  },\n  renderAppointments: function renderAppointments() {\n    this._renderAppointments();\n  },\n  dayHasAppointment: function dayHasAppointment(day, appointment, trimTime) {\n    return this.dayHasAppointment(day, appointment, trimTime);\n  },\n  createResourcesTree: function createResourcesTree() {\n    return this._resourcesManager.createResourcesTree(this._loadedResources);\n  },\n  getResourceTreeLeaves: function getResourceTreeLeaves(tree, appointmentResources) {\n    return this._resourcesManager.getResourceTreeLeaves(tree, appointmentResources);\n  },\n  createReducedResourcesTree: function createReducedResourcesTree() {\n    var tree = this._resourcesManager.createResourcesTree(this._loadedResources);\n\n    return this._resourcesManager.reduceResourcesTree(tree, this.getFilteredItems());\n  },\n  groupAppointmentsByResources: function groupAppointmentsByResources(appointments) {\n    var result = {\n      0: appointments\n    };\n\n    var groups = this._getCurrentViewOption(\"groups\");\n\n    if (groups && groups.length && this._resourcesManager.getResourcesData().length) {\n      result = this._resourcesManager.groupAppointmentsByResources(appointments, this._loadedResources);\n    }\n\n    var totalResourceCount = 0;\n    each(this._loadedResources, function (i, resource) {\n      if (!i) {\n        totalResourceCount = resource.items.length;\n      } else {\n        totalResourceCount *= resource.items.length;\n      }\n    });\n\n    for (var j = 0; j < totalResourceCount; j++) {\n      var index = j.toString();\n\n      if (result[index]) {\n        continue;\n      }\n\n      result[index] = [];\n    }\n\n    return result;\n  },\n  getLayoutManager: function getLayoutManager() {\n    return this._layoutManager;\n  },\n  getAgendaVerticalStepHeight: function getAgendaVerticalStepHeight() {\n    return this.getWorkSpace().getAgendaVerticalStepHeight();\n  },\n  getAgendaDuration: function getAgendaDuration() {\n    return this._getCurrentViewOption(\"agendaDuration\");\n  },\n  getStartViewDate: function getStartViewDate() {\n    return this.getStartViewDate();\n  },\n  getEndViewDate: function getEndViewDate() {\n    return this.getEndViewDate();\n  },\n  getMaxAppointmentsPerCell: function getMaxAppointmentsPerCell() {\n    return this.getMaxAppointmentsPerCell();\n  },\n  forceMaxAppointmentPerCell: function forceMaxAppointmentPerCell() {\n    return this.forceMaxAppointmentPerCell();\n  },\n  onAgendaReady: function onAgendaReady(rows) {\n    var $appts = this.getAppointmentsInstance()._itemElements();\n\n    var total = 0;\n\n    var applyClass = function applyClass(_, count) {\n      var index = count + total - 1;\n      $appts.eq(index).addClass(AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS);\n      total += count;\n    };\n\n    for (var i = 0; i < rows.length; i++) {\n      each(rows[i], applyClass);\n    }\n  },\n  getTimezone: function getTimezone() {\n    return this._getTimezoneOffsetByOption();\n  },\n  getTargetedAppointmentData: function getTargetedAppointmentData(appointment, element) {\n    return this.getTargetedAppointment(appointment, element);\n  },\n  getAppointmentDurationInMs: function getAppointmentDurationInMs(options) {\n    var startDate = options.startDate;\n    var endDate = options.endDate;\n    var allDay = options.allDay;\n    var appointmentDuration = endDate.getTime() - startDate.getTime();\n    var dayDuration = toMs(\"day\");\n\n    var visibleDayDuration = this._workSpace.getVisibleDayDuration();\n\n    var result = 0;\n\n    if (allDay) {\n      var ceilQuantityOfDays = Math.ceil(appointmentDuration / dayDuration);\n      result = ceilQuantityOfDays * visibleDayDuration;\n    } else {\n      var isDifferentDates = !timeZoneUtils.isSameAppointmentDates(startDate, endDate);\n      var floorQuantityOfDays = Math.floor(appointmentDuration / dayDuration);\n      var tailDuration;\n\n      if (isDifferentDates) {\n        var startDateEndHour = new Date(new Date(startDate).setHours(this.option(\"endDayHour\"), 0, 0));\n        var hiddenDayDuration = dayDuration - visibleDayDuration - (startDate.getTime() > startDateEndHour.getTime() ? startDate.getTime() - startDateEndHour.getTime() : 0);\n        tailDuration = appointmentDuration - (floorQuantityOfDays ? floorQuantityOfDays * dayDuration : hiddenDayDuration);\n        var startDayTime = this.option(\"startDayHour\") * toMs(\"hour\");\n        var endPartDuration = endDate - dateUtils.trimTime(endDate);\n\n        if (endPartDuration < startDayTime) {\n          if (floorQuantityOfDays) {\n            tailDuration -= hiddenDayDuration;\n          }\n\n          tailDuration += startDayTime - endPartDuration;\n        }\n      } else {\n        tailDuration = appointmentDuration % dayDuration;\n      }\n\n      if (tailDuration > visibleDayDuration) {\n        tailDuration = visibleDayDuration;\n      }\n\n      result = floorQuantityOfDays * visibleDayDuration + tailDuration || toMs(\"minute\");\n    }\n\n    return result;\n  },\n  replaceWrongEndDate: function replaceWrongEndDate(appointment, startDate, endDate) {\n    this._appointmentModel.replaceWrongEndDate(appointment, startDate, endDate);\n  },\n  calculateAppointmentEndDate: function calculateAppointmentEndDate(isAllDay, startDate) {\n    return this._appointmentModel._calculateAppointmentEndDate(isAllDay, startDate);\n  },\n  getEndDayHour: function getEndDayHour() {\n    return this._workSpace.option(\"endDayHour\") || this.option(\"endDayHour\");\n  },\n  getStartDayHour: function getStartDayHour() {\n    return this._workSpace.option(\"startDayHour\") || this.option(\"startDayHour\");\n  },\n  isAdaptive: function isAdaptive() {\n    return this.option(\"adaptivityEnabled\");\n  },\n  validateDayHours: function validateDayHours() {\n    var endDayHour = this._getCurrentViewOption(\"endDayHour\");\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    if (startDayHour >= endDayHour) {\n      throw errors.Error(\"E1058\");\n    }\n  },\n  removeDroppableCellClass: function removeDroppableCellClass() {\n    this._workSpace.removeDroppableCellClass();\n  }\n};\nexport default subscribes;","map":null,"metadata":{},"sourceType":"module"}