{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/selection_filter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getKeyHash, equalByValue } from \"./common\";\nimport { isString, isObject } from \"./type\";\nexport var SelectionFilterCreator = function SelectionFilterCreator(selectedItemKeys, isSelectAll) {\n  this.getLocalFilter = function (keyGetter, equalKeys, equalByReference, keyExpr) {\n    equalKeys = void 0 === equalKeys ? equalByValue : equalKeys;\n    return functionFilter.bind(this, equalKeys, keyGetter, equalByReference, keyExpr);\n  };\n\n  this.getExpr = function (keyExpr) {\n    if (!keyExpr) {\n      return;\n    }\n\n    var filterExpr;\n    selectedItemKeys.forEach(function (key, index) {\n      filterExpr = filterExpr || [];\n      var filterExprPart;\n\n      if (index > 0) {\n        filterExpr.push(isSelectAll ? \"and\" : \"or\");\n      }\n\n      if (isString(keyExpr)) {\n        filterExprPart = getFilterForPlainKey(keyExpr, key);\n      } else {\n        filterExprPart = function (keyExpr, itemKeyValue) {\n          var filterExpr = [];\n\n          for (var i = 0, length = keyExpr.length; i < length; i++) {\n            var currentKeyExpr = keyExpr[i];\n            var currentKeyValue = itemKeyValue && itemKeyValue[currentKeyExpr];\n            var filterExprPart = getFilterForPlainKey(currentKeyExpr, currentKeyValue);\n\n            if (!filterExprPart) {\n              break;\n            }\n\n            if (i > 0) {\n              filterExpr.push(isSelectAll ? \"or\" : \"and\");\n            }\n\n            filterExpr.push(filterExprPart);\n          }\n\n          return filterExpr;\n        }(keyExpr, key);\n      }\n\n      filterExpr.push(filterExprPart);\n    });\n\n    if (filterExpr && 1 === filterExpr.length) {\n      filterExpr = filterExpr[0];\n    }\n\n    return filterExpr;\n  };\n\n  this.getCombinedFilter = function (keyExpr, dataSourceFilter) {\n    var filterExpr = this.getExpr(keyExpr);\n    var combinedFilter = filterExpr;\n\n    if (isSelectAll && dataSourceFilter) {\n      if (filterExpr) {\n        combinedFilter = [];\n        combinedFilter.push(filterExpr);\n        combinedFilter.push(dataSourceFilter);\n      } else {\n        combinedFilter = dataSourceFilter;\n      }\n    }\n\n    return combinedFilter;\n  };\n\n  var selectedItemKeyHashesMap;\n\n  function functionFilter(equalKeys, keyOf, equalByReference, keyExpr, item) {\n    var key = keyOf(item);\n    var keyHash;\n    var i;\n\n    if (!equalByReference) {\n      keyHash = getKeyHash(key);\n\n      if (!isObject(keyHash)) {\n        var selectedKeyHashesMap = function (selectedItemKeys) {\n          if (!selectedItemKeyHashesMap) {\n            selectedItemKeyHashesMap = {};\n\n            for (var i = 0; i < selectedItemKeys.length; i++) {\n              selectedItemKeyHashesMap[getKeyHash(selectedItemKeys[i])] = true;\n            }\n          }\n\n          return selectedItemKeyHashesMap;\n        }(function (keys, keyOf, keyExpr) {\n          return Array.isArray(keyExpr) ? keys.map(function (key) {\n            return keyOf(key);\n          }) : keys;\n        }(selectedItemKeys, keyOf, keyExpr));\n\n        if (selectedKeyHashesMap[keyHash]) {\n          return !isSelectAll;\n        }\n\n        return !!isSelectAll;\n      }\n    }\n\n    for (i = 0; i < selectedItemKeys.length; i++) {\n      if (equalKeys(selectedItemKeys[i], key)) {\n        return !isSelectAll;\n      }\n    }\n\n    return !!isSelectAll;\n  }\n\n  function getFilterForPlainKey(keyExpr, keyValue) {\n    if (void 0 === keyValue) {\n      return;\n    }\n\n    return [keyExpr, isSelectAll ? \"<>\" : \"=\", keyValue];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}