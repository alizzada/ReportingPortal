{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS } from \"../constants\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\n\nvar SchedulerWorkSpaceIndicator = /*#__PURE__*/function (_SchedulerWorkSpace) {\n  _inherits(SchedulerWorkSpaceIndicator, _SchedulerWorkSpace);\n\n  var _super = _createSuper(SchedulerWorkSpaceIndicator);\n\n  function SchedulerWorkSpaceIndicator() {\n    _classCallCheck(this, SchedulerWorkSpaceIndicator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpaceIndicator, [{\n    key: \"_getTimeZoneCalculator\",\n    value: function _getTimeZoneCalculator() {\n      return this.invoke(\"getTimeZoneCalculator\");\n    }\n  }, {\n    key: \"_getToday\",\n    value: function _getToday() {\n      var todayDate = this.option(\"indicatorTime\") || new Date();\n\n      var timeZoneCalculator = this._getTimeZoneCalculator();\n\n      return (null === timeZoneCalculator || void 0 === timeZoneCalculator ? void 0 : timeZoneCalculator.createDate(todayDate, {\n        path: \"toGrid\"\n      })) || todayDate;\n    }\n  }, {\n    key: \"isIndicationOnView\",\n    value: function isIndicationOnView() {\n      if (this.option(\"showCurrentTimeIndicator\")) {\n        var today = this._getToday();\n\n        var endViewDate = dateUtils.trimTime(this.getEndViewDate());\n        return dateUtils.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs(\"day\")));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      if (!hasWindow()) {\n        return false;\n      }\n\n      var today = this._getToday();\n\n      return today >= dateUtils.trimTime(new Date(this.getStartViewDate()));\n    }\n  }, {\n    key: \"isIndicatorVisible\",\n    value: function isIndicatorVisible() {\n      var today = this._getToday();\n\n      var endViewDate = new Date(this.getEndViewDate().getTime() + this._getEndViewDateTimeDiff() - 1);\n      var firstViewDate = new Date(this.getStartViewDate());\n      firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n      endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n      return dateUtils.dateInRange(today, firstViewDate, endViewDate);\n    }\n  }, {\n    key: \"_renderDateTimeIndication\",\n    value: function _renderDateTimeIndication() {\n      if (this.isIndicationAvailable()) {\n        if (this.option(\"shadeUntilCurrentTime\")) {\n          this._shader.render();\n        }\n\n        if (this.isIndicationOnView() && this.isIndicatorVisible()) {\n          var groupCount = this._getGroupCount() || 1;\n\n          var $container = this._dateTableScrollable.$content();\n\n          var height = this.getIndicationHeight();\n\n          var rtlOffset = this._getRtlOffset(this.getCellWidth());\n\n          this._renderIndicator(height, rtlOffset, $container, groupCount);\n\n          this._setCurrentTimeCells();\n        }\n      }\n    }\n  }, {\n    key: \"_renderIndicator\",\n    value: function _renderIndicator(height, rtlOffset, $container, groupCount) {\n      var groupedByDate = this.isGroupedByDate();\n      var repeatCount = groupedByDate ? 1 : groupCount;\n\n      for (var i = 0; i < repeatCount; i++) {\n        var $indicator = this._createIndicator($container);\n\n        $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\n\n        this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i);\n      }\n    }\n  }, {\n    key: \"_createIndicator\",\n    value: function _createIndicator($container) {\n      var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\n      $container.append($indicator);\n      return $indicator;\n    }\n  }, {\n    key: \"_getRtlOffset\",\n    value: function _getRtlOffset(width) {\n      return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0;\n    }\n  }, {\n    key: \"_setIndicationUpdateInterval\",\n    value: function _setIndicationUpdateInterval() {\n      if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\n        return;\n      }\n\n      this._clearIndicatorUpdateInterval();\n\n      this._indicatorInterval = setInterval(function () {\n        this._refreshDateTimeIndication();\n      }.bind(this), this.option(\"indicatorUpdateInterval\"));\n    }\n  }, {\n    key: \"_clearIndicatorUpdateInterval\",\n    value: function _clearIndicatorUpdateInterval() {\n      if (this._indicatorInterval) {\n        clearInterval(this._indicatorInterval);\n        delete this._indicatorInterval;\n      }\n    }\n  }, {\n    key: \"_isVerticalShader\",\n    value: function _isVerticalShader() {\n      return true;\n    }\n  }, {\n    key: \"getIndicationWidth\",\n    value: function getIndicationWidth(groupIndex) {\n      var maxWidth = this.getCellWidth() * this._getCellCount();\n\n      var difference = this._getIndicatorDuration();\n\n      if (difference > this._getCellCount()) {\n        difference = this._getCellCount();\n      }\n\n      var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n      return maxWidth < width ? maxWidth : width;\n    }\n  }, {\n    key: \"getIndicatorOffset\",\n    value: function getIndicatorOffset(groupIndex) {\n      var difference = this._getIndicatorDuration() - 1;\n      var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n      return offset;\n    }\n  }, {\n    key: \"_getIndicatorDuration\",\n    value: function _getIndicatorDuration() {\n      var today = this._getToday();\n\n      var firstViewDate = new Date(this._firstViewDate);\n      var timeDiff = today.getTime() - firstViewDate.getTime();\n\n      if (\"workWeek\" === this.option(\"type\")) {\n        timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\");\n      }\n\n      return Math.ceil((timeDiff + 1) / toMs(\"day\"));\n    }\n  }, {\n    key: \"getIndicationHeight\",\n    value: function getIndicationHeight() {\n      var today = this._getToday();\n\n      var cellHeight = this.getCellHeight();\n      var date = new Date(this._firstViewDate);\n\n      if (this.isIndicationOnView()) {\n        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n      }\n\n      var duration = today.getTime() - date.getTime();\n      var cellCount = duration / this.getCellDuration();\n      return cellCount * cellHeight;\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      this._clearIndicatorUpdateInterval();\n\n      _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_dispose\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_refreshDateTimeIndication\",\n    value: function _refreshDateTimeIndication() {\n      var _this$_shader;\n\n      this._cleanDateTimeIndicator();\n\n      this._cleanCurrentTimeCells();\n\n      null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n\n      this._renderDateTimeIndication();\n    }\n  }, {\n    key: \"_setCurrentTimeCells\",\n    value: function _setCurrentTimeCells() {\n      var timePanelCells = this._getTimePanelCells();\n\n      var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n\n      currentTimeCellIndices.forEach(function (timePanelCellIndex) {\n        timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n      });\n    }\n  }, {\n    key: \"_isCurrentTimeHeaderCell\",\n    value: function _isCurrentTimeHeaderCell(headerIndex) {\n      if (this.isIndicationOnView()) {\n        var date = this._getDateByIndex(headerIndex);\n\n        return dateUtils.sameDate(date, this._getToday());\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getHeaderPanelCellClass\",\n    value: function _getHeaderPanelCellClass(i) {\n      var cellClass = _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_getHeaderPanelCellClass\", this).call(this, i);\n\n      if (this._isCurrentTimeHeaderCell(i)) {\n        return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS;\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"_cleanView\",\n    value: function _cleanView() {\n      _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_cleanView\", this).call(this);\n\n      this._cleanDateTimeIndicator();\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged() {\n      _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_dimensionChanged\", this).call(this);\n\n      this._refreshDateTimeIndication();\n    }\n  }, {\n    key: \"_cleanDateTimeIndicator\",\n    value: function _cleanDateTimeIndicator() {\n      this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove();\n    }\n  }, {\n    key: \"_cleanCurrentTimeCells\",\n    value: function _cleanCurrentTimeCells() {\n      this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n    }\n  }, {\n    key: \"_cleanWorkSpace\",\n    value: function _cleanWorkSpace() {\n      _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_cleanWorkSpace\", this).call(this);\n\n      this._renderDateTimeIndication();\n\n      this._setIndicationUpdateInterval();\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"showCurrentTimeIndicator\":\n        case \"indicatorTime\":\n          this._cleanWorkSpace();\n\n          break;\n\n        case \"indicatorUpdateInterval\":\n          this._setIndicationUpdateInterval();\n\n          break;\n\n        case \"showAllDayPanel\":\n        case \"allDayExpanded\":\n        case \"crossScrollingEnabled\":\n          _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._refreshDateTimeIndication();\n\n          break;\n\n        case \"shadeUntilCurrentTime\":\n          this._refreshDateTimeIndication();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), \"_getDefaultOptions\", this).call(this), {\n        showCurrentTimeIndicator: true,\n        indicatorTime: new Date(),\n        indicatorUpdateInterval: 5 * toMs(\"minute\"),\n        shadeUntilCurrentTime: true\n      });\n    }\n  }, {\n    key: \"_getCurrentTimePanelCellIndices\",\n    value: function _getCurrentTimePanelCellIndices() {\n      var rowCountPerGroup = this._getTimePanelRowCount();\n\n      var today = this._getToday();\n\n      var index = this.getCellIndexByDate(today);\n\n      var _this$_getCellCoordin = this._getCellCoordinatesByIndex(index),\n          currentTimeRowIndex = _this$_getCellCoordin.rowIndex;\n\n      if (void 0 === currentTimeRowIndex) {\n        return [];\n      }\n\n      var cellIndices;\n\n      if (0 === currentTimeRowIndex) {\n        cellIndices = [currentTimeRowIndex];\n      } else {\n        cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1];\n      }\n\n      var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\n      return _toConsumableArray(new Array(verticalGroupCount)).reduce(function (currentIndices, _, groupIndex) {\n        return [].concat(_toConsumableArray(currentIndices), _toConsumableArray(cellIndices.map(function (cellIndex) {\n          return rowCountPerGroup * groupIndex + cellIndex;\n        })));\n      }, []);\n    }\n  }]);\n\n  return SchedulerWorkSpaceIndicator;\n}(SchedulerWorkSpace);\n\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\nexport default SchedulerWorkSpaceIndicator;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js"],"names":["$","SchedulerWorkSpace","registerComponent","dateUtils","extend","getBoundingRect","hasWindow","HEADER_CURRENT_TIME_CELL_CLASS","toMs","dateToMilliseconds","SCHEDULER_DATE_TIME_INDICATOR_CLASS","TIME_PANEL_CURRENT_TIME_CELL_CLASS","SchedulerWorkSpaceIndicator","invoke","todayDate","option","Date","timeZoneCalculator","_getTimeZoneCalculator","createDate","path","today","_getToday","endViewDate","trimTime","getEndViewDate","dateInRange","_firstViewDate","getTime","getStartViewDate","_getEndViewDateTimeDiff","firstViewDate","setFullYear","getFullYear","getMonth","getDate","isIndicationAvailable","_shader","render","isIndicationOnView","isIndicatorVisible","groupCount","_getGroupCount","$container","_dateTableScrollable","$content","height","getIndicationHeight","rtlOffset","_getRtlOffset","getCellWidth","_renderIndicator","_setCurrentTimeCells","groupedByDate","isGroupedByDate","repeatCount","i","$indicator","_createIndicator","width","_groupedStrategy","shiftIndicator","addClass","append","get","getTimePanelWidth","_clearIndicatorUpdateInterval","_indicatorInterval","setInterval","_refreshDateTimeIndication","bind","clearInterval","groupIndex","maxWidth","_getCellCount","difference","_getIndicatorDuration","getRoundedCellWidth","offset","timeDiff","_getWeekendsCount","Math","round","ceil","cellHeight","getCellHeight","date","duration","cellCount","getCellDuration","apply","arguments","_this$_shader","_cleanDateTimeIndicator","_cleanCurrentTimeCells","clean","_renderDateTimeIndication","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","eq","headerIndex","_getDateByIndex","sameDate","cellClass","_isCurrentTimeHeaderCell","$element","find","remove","concat","removeClass","_setIndicationUpdateInterval","args","name","_cleanWorkSpace","showCurrentTimeIndicator","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","rowCountPerGroup","_getTimePanelRowCount","index","getCellIndexByDate","_getCellCoordinatesByIndex","currentTimeRowIndex","rowIndex","cellIndices","verticalGroupCount","_isVerticalGroupedWorkSpace","Array","reduce","currentIndices","_","map","cellIndex"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS\r\n} from \"../constants\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\r\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\r\nclass SchedulerWorkSpaceIndicator extends SchedulerWorkSpace {\r\n    _getTimeZoneCalculator() {\r\n        return this.invoke(\"getTimeZoneCalculator\")\r\n    }\r\n    _getToday() {\r\n        var todayDate = this.option(\"indicatorTime\") || new Date;\r\n        var timeZoneCalculator = this._getTimeZoneCalculator();\r\n        return (null === timeZoneCalculator || void 0 === timeZoneCalculator ? void 0 : timeZoneCalculator.createDate(todayDate, {\r\n            path: \"toGrid\"\r\n        })) || todayDate\r\n    }\r\n    isIndicationOnView() {\r\n        if (this.option(\"showCurrentTimeIndicator\")) {\r\n            var today = this._getToday();\r\n            var endViewDate = dateUtils.trimTime(this.getEndViewDate());\r\n            return dateUtils.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs(\"day\")))\r\n        }\r\n        return false\r\n    }\r\n    isIndicationAvailable() {\r\n        if (!hasWindow()) {\r\n            return false\r\n        }\r\n        var today = this._getToday();\r\n        return today >= dateUtils.trimTime(new Date(this.getStartViewDate()))\r\n    }\r\n    isIndicatorVisible() {\r\n        var today = this._getToday();\r\n        var endViewDate = new Date(this.getEndViewDate().getTime() + this._getEndViewDateTimeDiff() - 1);\r\n        var firstViewDate = new Date(this.getStartViewDate());\r\n        firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        return dateUtils.dateInRange(today, firstViewDate, endViewDate)\r\n    }\r\n    _renderDateTimeIndication() {\r\n        if (this.isIndicationAvailable()) {\r\n            if (this.option(\"shadeUntilCurrentTime\")) {\r\n                this._shader.render()\r\n            }\r\n            if (this.isIndicationOnView() && this.isIndicatorVisible()) {\r\n                var groupCount = this._getGroupCount() || 1;\r\n                var $container = this._dateTableScrollable.$content();\r\n                var height = this.getIndicationHeight();\r\n                var rtlOffset = this._getRtlOffset(this.getCellWidth());\r\n                this._renderIndicator(height, rtlOffset, $container, groupCount);\r\n                this._setCurrentTimeCells()\r\n            }\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var groupedByDate = this.isGroupedByDate();\r\n        var repeatCount = groupedByDate ? 1 : groupCount;\r\n        for (var i = 0; i < repeatCount; i++) {\r\n            var $indicator = this._createIndicator($container);\r\n            $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\r\n            this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i)\r\n        }\r\n    }\r\n    _createIndicator($container) {\r\n        var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\r\n        $container.append($indicator);\r\n        return $indicator\r\n    }\r\n    _getRtlOffset(width) {\r\n        return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\r\n            return\r\n        }\r\n        this._clearIndicatorUpdateInterval();\r\n        this._indicatorInterval = setInterval(function() {\r\n            this._refreshDateTimeIndication()\r\n        }.bind(this), this.option(\"indicatorUpdateInterval\"))\r\n    }\r\n    _clearIndicatorUpdateInterval() {\r\n        if (this._indicatorInterval) {\r\n            clearInterval(this._indicatorInterval);\r\n            delete this._indicatorInterval\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return true\r\n    }\r\n    getIndicationWidth(groupIndex) {\r\n        var maxWidth = this.getCellWidth() * this._getCellCount();\r\n        var difference = this._getIndicatorDuration();\r\n        if (difference > this._getCellCount()) {\r\n            difference = this._getCellCount()\r\n        }\r\n        var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return maxWidth < width ? maxWidth : width\r\n    }\r\n    getIndicatorOffset(groupIndex) {\r\n        var difference = this._getIndicatorDuration() - 1;\r\n        var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return offset\r\n    }\r\n    _getIndicatorDuration() {\r\n        var today = this._getToday();\r\n        var firstViewDate = new Date(this._firstViewDate);\r\n        var timeDiff = today.getTime() - firstViewDate.getTime();\r\n        if (\"workWeek\" === this.option(\"type\")) {\r\n            timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\")\r\n        }\r\n        return Math.ceil((timeDiff + 1) / toMs(\"day\"))\r\n    }\r\n    getIndicationHeight() {\r\n        var today = this._getToday();\r\n        var cellHeight = this.getCellHeight();\r\n        var date = new Date(this._firstViewDate);\r\n        if (this.isIndicationOnView()) {\r\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())\r\n        }\r\n        var duration = today.getTime() - date.getTime();\r\n        var cellCount = duration / this.getCellDuration();\r\n        return cellCount * cellHeight\r\n    }\r\n    _dispose() {\r\n        this._clearIndicatorUpdateInterval();\r\n        super._dispose.apply(this, arguments)\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        var _this$_shader;\r\n        this._cleanDateTimeIndicator();\r\n        this._cleanCurrentTimeCells();\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        this._renderDateTimeIndication()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _isCurrentTimeHeaderCell(headerIndex) {\r\n        if (this.isIndicationOnView()) {\r\n            var date = this._getDateByIndex(headerIndex);\r\n            return dateUtils.sameDate(date, this._getToday())\r\n        }\r\n        return false\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = super._getHeaderPanelCellClass(i);\r\n        if (this._isCurrentTimeHeaderCell(i)) {\r\n            return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS\r\n        }\r\n        return cellClass\r\n    }\r\n    _cleanView() {\r\n        super._cleanView();\r\n        this._cleanDateTimeIndicator()\r\n    }\r\n    _dimensionChanged() {\r\n        super._dimensionChanged();\r\n        this._refreshDateTimeIndication()\r\n    }\r\n    _cleanDateTimeIndicator() {\r\n        this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove()\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _cleanWorkSpace() {\r\n        super._cleanWorkSpace();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"showCurrentTimeIndicator\":\r\n            case \"indicatorTime\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"indicatorUpdateInterval\":\r\n                this._setIndicationUpdateInterval();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n            case \"allDayExpanded\":\r\n            case \"crossScrollingEnabled\":\r\n                super._optionChanged(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"shadeUntilCurrentTime\":\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            showCurrentTimeIndicator: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true\r\n        })\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var rowCountPerGroup = this._getTimePanelRowCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            rowIndex: currentTimeRowIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeRowIndex) {\r\n            return []\r\n        }\r\n        var cellIndices;\r\n        if (0 === currentTimeRowIndex) {\r\n            cellIndices = [currentTimeRowIndex]\r\n        } else {\r\n            cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1]\r\n        }\r\n        var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\r\n        return [...new Array(verticalGroupCount)].reduce((currentIndices, _, groupIndex) => [...currentIndices, ...cellIndices.map(cellIndex => rowCountPerGroup * groupIndex + cellIndex)], [])\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\r\nexport default SchedulerWorkSpaceIndicator;\r\n"]},"metadata":{},"sourceType":"module"}