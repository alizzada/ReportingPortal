{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport Toolbar from \"../../toolbar\";\nimport \"../../select_box\";\nimport \"../../color_box/color_view\";\nimport \"../../number_box\";\nimport errors from \"../../widget/ui.errors\";\nimport WidgetCollector from \"./widget_collector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject, isDefined, isEmptyObject, isBoolean } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport localizationMessage from \"../../../localization/message\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nvar ToolbarModule = BaseModule;\n\nif (Quill) {\n  var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\n  var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\n  var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\n  var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\n  var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  var BOX_ITEM_CONTENT_CLASS = \"dx-box-item-content\";\n  var ICON_CLASS = \"dx-icon\";\n  var SELECTION_CHANGE_EVENT = \"selection-change\";\n  var DIALOG_COLOR_CAPTION = \"dxHtmlEditor-dialogColorCaption\";\n  var DIALOG_BACKGROUND_CAPTION = \"dxHtmlEditor-dialogBackgroundCaption\";\n  var DIALOG_LINK_CAPTION = \"dxHtmlEditor-dialogLinkCaption\";\n  var DIALOG_LINK_FIELD_URL = \"dxHtmlEditor-dialogLinkUrlField\";\n  var DIALOG_LINK_FIELD_TEXT = \"dxHtmlEditor-dialogLinkTextField\";\n  var DIALOG_LINK_FIELD_TARGET = \"dxHtmlEditor-dialogLinkTargetField\";\n  var DIALOG_LINK_FIELD_TARGET_CLASS = \"dx-formdialog-field-target\";\n  var DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\n  var DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\n  var DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\n  var DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\n  var DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\n  var DIALOG_TABLE_FIELD_COLUMNS = \"dxHtmlEditor-dialogInsertTableRowsField\";\n  var DIALOG_TABLE_FIELD_ROWS = \"dxHtmlEditor-dialogInsertTableColumnsField\";\n  var DIALOG_TABLE_CAPTION = \"dxHtmlEditor-dialogInsertTableCaption\";\n  var TABLE_OPERATIONS = [\"insertTable\", \"insertRowAbove\", \"insertRowBelow\", \"insertColumnLeft\", \"insertColumnRight\", \"deleteColumn\", \"deleteRow\", \"deleteTable\"];\n  var USER_ACTION = \"user\";\n  var SILENT_ACTION = \"silent\";\n\n  var localize = function localize(name) {\n    return localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n  };\n\n  var localizeValue = function localizeValue(value, name) {\n    if (\"header\" === name) {\n      var isHeaderValue = isDefined(value) && false !== value;\n      return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\");\n    }\n\n    return localize(value) || value;\n  };\n\n  ToolbarModule = /*#__PURE__*/function (_BaseModule) {\n    _inherits(ToolbarModule, _BaseModule);\n\n    var _super = _createSuper(ToolbarModule);\n\n    function ToolbarModule(quill, options) {\n      var _this;\n\n      _classCallCheck(this, ToolbarModule);\n\n      _this = _super.call(this, quill, options);\n      _this._toolbarWidgets = new WidgetCollector();\n      _this._formatHandlers = _this._getFormatHandlers();\n\n      if (isDefined(options.items)) {\n        _this._addCallbacks();\n\n        _this._renderToolbar();\n\n        _this.quill.on(\"editor-change\", function (eventName) {\n          var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\n\n          _this._updateToolbar(isSelectionChanged);\n        });\n      }\n\n      return _this;\n    }\n\n    _createClass(ToolbarModule, [{\n      key: \"_applyFormat\",\n      value: function _applyFormat(formatArgs, event) {\n        var _this$quill;\n\n        this.saveValueChangeEvent(event);\n\n        (_this$quill = this.quill).format.apply(_this$quill, _toConsumableArray(formatArgs));\n      }\n    }, {\n      key: \"_addCallbacks\",\n      value: function _addCallbacks() {\n        this.addCleanCallback(this.clean.bind(this));\n        this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this));\n      }\n    }, {\n      key: \"_updateToolbar\",\n      value: function _updateToolbar(isSelectionChanged) {\n        this.updateFormatWidgets(isSelectionChanged);\n        this.updateHistoryWidgets();\n        this.updateTableWidgets();\n      }\n    }, {\n      key: \"_getDefaultClickHandler\",\n      value: function _getDefaultClickHandler(name) {\n        var _this2 = this;\n\n        return function (_ref) {\n          var event = _ref.event;\n\n          var formats = _this2.quill.getFormat();\n\n          var value = formats[name];\n          var newValue = !(isBoolean(value) ? value : isDefined(value));\n\n          _this2._applyFormat([name, newValue, USER_ACTION], event);\n\n          _this2._updateFormatWidget(name, newValue, formats);\n        };\n      }\n    }, {\n      key: \"_updateFormatWidget\",\n      value: function _updateFormatWidget(name, isApplied, formats) {\n        var widget = this._toolbarWidgets.getByName(name);\n\n        if (!widget) {\n          return;\n        }\n\n        if (isApplied) {\n          this._markActiveFormatWidget(name, widget, formats);\n        } else {\n          this._resetFormatWidget(name, widget);\n\n          if (Object.prototype.hasOwnProperty.call(name)) {\n            delete formats[name];\n          }\n        }\n\n        this._toggleClearFormatting(isApplied || !isEmptyObject(formats));\n      }\n    }, {\n      key: \"_getFormatHandlers\",\n      value: function _getFormatHandlers() {\n        var _this3 = this;\n\n        return {\n          clear: function clear(_ref2) {\n            var event = _ref2.event;\n\n            var range = _this3.quill.getSelection();\n\n            if (range) {\n              _this3.saveValueChangeEvent(event);\n\n              _this3.quill.removeFormat(range);\n\n              _this3.updateFormatWidgets();\n            }\n          },\n          link: this._prepareLinkHandler(),\n          image: this._prepareImageHandler(),\n          color: this._prepareColorClickHandler(\"color\"),\n          background: this._prepareColorClickHandler(\"background\"),\n          orderedList: this._prepareShortcutHandler(\"list\", \"ordered\"),\n          bulletList: this._prepareShortcutHandler(\"list\", \"bullet\"),\n          alignLeft: this._prepareShortcutHandler(\"align\", \"left\"),\n          alignCenter: this._prepareShortcutHandler(\"align\", \"center\"),\n          alignRight: this._prepareShortcutHandler(\"align\", \"right\"),\n          alignJustify: this._prepareShortcutHandler(\"align\", \"justify\"),\n          codeBlock: this._getDefaultClickHandler(\"code-block\"),\n          undo: function undo(_ref3) {\n            var event = _ref3.event;\n\n            _this3.saveValueChangeEvent(event);\n\n            _this3.quill.history.undo();\n          },\n          redo: function redo(_ref4) {\n            var event = _ref4.event;\n\n            _this3.saveValueChangeEvent(event);\n\n            _this3.quill.history.redo();\n          },\n          increaseIndent: function increaseIndent(_ref5) {\n            var event = _ref5.event;\n\n            _this3._applyFormat([\"indent\", \"+1\", USER_ACTION], event);\n          },\n          decreaseIndent: function decreaseIndent(_ref6) {\n            var event = _ref6.event;\n\n            _this3._applyFormat([\"indent\", \"-1\", USER_ACTION], event);\n          },\n          superscript: this._prepareShortcutHandler(\"script\", \"super\"),\n          subscript: this._prepareShortcutHandler(\"script\", \"sub\"),\n          insertTable: this._prepareInsertTableHandler(),\n          insertRowAbove: this._getTableOperationHandler(\"insertRowAbove\"),\n          insertRowBelow: this._getTableOperationHandler(\"insertRowBelow\"),\n          insertColumnLeft: this._getTableOperationHandler(\"insertColumnLeft\"),\n          insertColumnRight: this._getTableOperationHandler(\"insertColumnRight\"),\n          deleteColumn: this._getTableOperationHandler(\"deleteColumn\"),\n          deleteRow: this._getTableOperationHandler(\"deleteRow\"),\n          deleteTable: this._getTableOperationHandler(\"deleteTable\")\n        };\n      }\n    }, {\n      key: \"_prepareShortcutHandler\",\n      value: function _prepareShortcutHandler(name, shortcutValue) {\n        var _this4 = this;\n\n        return function (_ref7) {\n          var event = _ref7.event;\n\n          var formats = _this4.quill.getFormat();\n\n          var value = formats[name] === shortcutValue ? false : shortcutValue;\n\n          _this4._applyFormat([name, value, USER_ACTION], event);\n\n          _this4.updateFormatWidgets(true);\n        };\n      }\n    }, {\n      key: \"_prepareLinkHandler\",\n      value: function _prepareLinkHandler() {\n        var _this5 = this;\n\n        return function () {\n          _this5.quill.focus();\n\n          var selection = _this5.quill.getSelection();\n\n          var hasEmbedContent = _this5._hasEmbedContent(selection);\n\n          var formats = selection ? _this5.quill.getFormat() : {};\n          var formData = {\n            href: formats.link || \"\",\n            text: selection && !hasEmbedContent ? _this5.quill.getText(selection) : \"\",\n            target: Object.prototype.hasOwnProperty.call(formats, \"target\") ? !!formats.target : true\n          };\n\n          _this5.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_LINK_CAPTION));\n\n          var promise = _this5.editorInstance.showFormDialog({\n            formData: formData,\n            items: _this5._getLinkFormItems(selection)\n          });\n\n          promise.done(function (formData, event) {\n            if (selection && !hasEmbedContent) {\n              var text = formData.text || formData.href;\n              var index = selection.index,\n                  length = selection.length;\n              formData.text = void 0;\n\n              _this5.saveValueChangeEvent(event);\n\n              length && _this5.quill.deleteText(index, length, SILENT_ACTION);\n\n              _this5.quill.insertText(index, text, \"link\", formData, USER_ACTION);\n\n              _this5.quill.setSelection(index + text.length, 0, USER_ACTION);\n            } else {\n              formData.text = !selection && !formData.text ? formData.href : formData.text;\n\n              _this5._applyFormat([\"link\", formData, USER_ACTION], event);\n            }\n          });\n          promise.fail(function () {\n            _this5.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_hasEmbedContent\",\n      value: function _hasEmbedContent(selection) {\n        return !!selection && this.quill.getText(selection).trim().length < selection.length;\n      }\n    }, {\n      key: \"_getLinkFormItems\",\n      value: function _getLinkFormItems(selection) {\n        return [{\n          dataField: \"href\",\n          label: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_URL)\n          }\n        }, {\n          dataField: \"text\",\n          label: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_TEXT)\n          },\n          visible: !this._hasEmbedContent(selection)\n        }, {\n          dataField: \"target\",\n          editorType: \"dxCheckBox\",\n          editorOptions: {\n            text: localizationMessage.format(DIALOG_LINK_FIELD_TARGET)\n          },\n          cssClass: DIALOG_LINK_FIELD_TARGET_CLASS,\n          label: {\n            visible: false\n          }\n        }];\n      }\n    }, {\n      key: \"_prepareImageHandler\",\n      value: function _prepareImageHandler() {\n        var _this6 = this;\n\n        return function () {\n          var formData = _this6.quill.getFormat();\n\n          var isUpdateDialog = Object.prototype.hasOwnProperty.call(formData, \"imageSrc\");\n          var defaultIndex = _this6._defaultPasteIndex;\n\n          if (isUpdateDialog) {\n            var _this6$quill$getForma = _this6.quill.getFormat(defaultIndex - 1, 1),\n                imageSrc = _this6$quill$getForma.imageSrc;\n\n            formData.src = formData.imageSrc;\n            delete formData.imageSrc;\n\n            if (!imageSrc || 0 === defaultIndex) {\n              _this6.quill.setSelection(defaultIndex + 1, 0, SILENT_ACTION);\n            }\n          }\n\n          var formatIndex = _this6._embedFormatIndex;\n\n          _this6.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_IMAGE_CAPTION));\n\n          var promise = _this6.editorInstance.showFormDialog({\n            formData: formData,\n            items: _this6._imageFormItems\n          });\n\n          promise.done(function (formData, event) {\n            var index = defaultIndex;\n\n            _this6.saveValueChangeEvent(event);\n\n            if (isUpdateDialog) {\n              index = formatIndex;\n\n              _this6.quill.deleteText(index, 1, SILENT_ACTION);\n            }\n\n            _this6.quill.insertEmbed(index, \"extendedImage\", formData, USER_ACTION);\n\n            _this6.quill.setSelection(index + 1, 0, USER_ACTION);\n          }).always(function () {\n            _this6.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_insertTableFormItems\",\n      get: function get() {\n        return [{\n          dataField: \"columns\",\n          editorType: \"dxNumberBox\",\n          editorOptions: {\n            min: 1\n          },\n          label: {\n            text: localizationMessage.format(DIALOG_TABLE_FIELD_COLUMNS)\n          }\n        }, {\n          dataField: \"rows\",\n          editorType: \"dxNumberBox\",\n          editorOptions: {\n            min: 1\n          },\n          label: {\n            text: localizationMessage.format(DIALOG_TABLE_FIELD_ROWS)\n          }\n        }];\n      }\n    }, {\n      key: \"_prepareInsertTableHandler\",\n      value: function _prepareInsertTableHandler() {\n        var _this7 = this;\n\n        return function () {\n          var formats = _this7.quill.getFormat();\n\n          var isTableFocused = Object.prototype.hasOwnProperty.call(formats, \"table\");\n\n          if (isTableFocused) {\n            _this7.quill.focus();\n\n            return;\n          }\n\n          _this7.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_TABLE_CAPTION));\n\n          var promise = _this7.editorInstance.showFormDialog({\n            formData: {\n              rows: 1,\n              columns: 1\n            },\n            items: _this7._insertTableFormItems\n          });\n\n          promise.done(function (formData, event) {\n            _this7.quill.focus();\n\n            var table = _this7.quill.getModule(\"table\");\n\n            if (table) {\n              _this7.saveValueChangeEvent(event);\n\n              var columns = formData.columns,\n                  rows = formData.rows;\n              table.insertTable(columns, rows);\n            }\n          }).always(function () {\n            _this7.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_getTableOperationHandler\",\n      value: function _getTableOperationHandler(operationName) {\n        var _this8 = this;\n\n        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          rest[_key - 1] = arguments[_key];\n        }\n\n        return function () {\n          var table = _this8.quill.getModule(\"table\");\n\n          if (!table) {\n            return;\n          }\n\n          _this8.quill.focus();\n\n          return table[operationName].apply(table, rest);\n        };\n      }\n    }, {\n      key: \"_embedFormatIndex\",\n      get: function get() {\n        var selection = this.quill.getSelection();\n\n        if (selection) {\n          if (selection.length) {\n            return selection.index;\n          } else {\n            return selection.index - 1;\n          }\n        } else {\n          return this.quill.getLength();\n        }\n      }\n    }, {\n      key: \"_defaultPasteIndex\",\n      get: function get() {\n        var _selection$index;\n\n        var selection = this.quill.getSelection();\n        return null !== (_selection$index = null === selection || void 0 === selection ? void 0 : selection.index) && void 0 !== _selection$index ? _selection$index : this.quill.getLength();\n      }\n    }, {\n      key: \"_imageFormItems\",\n      get: function get() {\n        return [{\n          dataField: \"src\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_URL)\n          }\n        }, {\n          dataField: \"width\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_WIDTH)\n          }\n        }, {\n          dataField: \"height\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_HEIGHT)\n          }\n        }, {\n          dataField: \"alt\",\n          label: {\n            text: localizationMessage.format(DIALOG_IMAGE_FIELD_ALT)\n          }\n        }];\n      }\n    }, {\n      key: \"_renderToolbar\",\n      value: function _renderToolbar() {\n        var _this9 = this;\n\n        var container = this.options.container || this._getContainer();\n\n        this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\n        this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\n        eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), function (e) {\n          e.preventDefault();\n        });\n        this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\n        this.editorInstance.on(\"optionChanged\", function (_ref8) {\n          var name = _ref8.name;\n\n          if (\"readOnly\" === name || \"disabled\" === name) {\n            _this9.toolbarInstance.option(\"disabled\", _this9.isInteractionDisabled);\n          }\n        });\n      }\n    }, {\n      key: \"toolbarConfig\",\n      get: function get() {\n        return {\n          dataSource: this._prepareToolbarItems(),\n          disabled: this.isInteractionDisabled,\n          menuContainer: this._$toolbarContainer,\n          multiline: this.isMultilineMode()\n        };\n      }\n    }, {\n      key: \"isInteractionDisabled\",\n      get: function get() {\n        return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\");\n      }\n    }, {\n      key: \"isMultilineMode\",\n      value: function isMultilineMode() {\n        var _this$options$multili;\n\n        return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true;\n      }\n    }, {\n      key: \"clean\",\n      value: function clean() {\n        this._toolbarWidgets.clear();\n\n        if (this._$toolbarContainer) {\n          this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS);\n        }\n      }\n    }, {\n      key: \"repaint\",\n      value: function repaint() {\n        this.toolbarInstance && this.toolbarInstance.repaint();\n      }\n    }, {\n      key: \"_getContainer\",\n      value: function _getContainer() {\n        var $container = $(\"<div>\");\n        this.editorInstance.$element().prepend($container);\n        return $container;\n      }\n    }, {\n      key: \"_detectRenamedOptions\",\n      value: function _detectRenamedOptions(item) {\n        if (isObject(item)) {\n          each([{\n            newName: \"name\",\n            oldName: \"formatName\"\n          }, {\n            newName: \"acceptedValues\",\n            oldName: \"formatValues\"\n          }], function (index, optionName) {\n            if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\n              errors.log(\"W1016\", optionName.oldName, optionName.newName);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"_prepareToolbarItems\",\n      value: function _prepareToolbarItems() {\n        var _this10 = this;\n\n        var resultItems = [];\n        each(this.options.items, function (index, item) {\n          var newItem;\n\n          _this10._detectRenamedOptions(item);\n\n          if (isObject(item)) {\n            newItem = _this10._handleObjectItem(item);\n          } else if (isString(item)) {\n            var buttonItemConfig = _this10._prepareButtonItemConfig(item);\n\n            newItem = _this10._getToolbarItem(buttonItemConfig);\n          }\n\n          if (newItem) {\n            resultItems.push(newItem);\n          }\n        });\n        return resultItems;\n      }\n    }, {\n      key: \"_handleObjectItem\",\n      value: function _handleObjectItem(item) {\n        if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\n          var selectItemConfig = this._prepareSelectItemConfig(item);\n\n          return this._getToolbarItem(selectItemConfig);\n        } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n          var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\n\n          var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n          return this._getToolbarItem(buttonItemConfig);\n        } else {\n          return this._getToolbarItem(item);\n        }\n      }\n    }, {\n      key: \"_isAcceptableItem\",\n      value: function _isAcceptableItem(widget, acceptableWidgetName) {\n        return !widget || widget === acceptableWidgetName;\n      }\n    }, {\n      key: \"_prepareButtonItemConfig\",\n      value: function _prepareButtonItemConfig(name) {\n        var iconName = \"clear\" === name ? \"clearformat\" : name;\n        var buttonText = titleize(name);\n        return {\n          widget: \"dxButton\",\n          name: name,\n          options: {\n            hint: localize(buttonText),\n            text: localize(buttonText),\n            icon: iconName.toLowerCase(),\n            onClick: this._formatHandlers[name] || this._getDefaultClickHandler(name),\n            stylingMode: \"text\"\n          },\n          showText: \"inMenu\"\n        };\n      }\n    }, {\n      key: \"_prepareSelectItemConfig\",\n      value: function _prepareSelectItemConfig(item) {\n        var _this11 = this;\n\n        var name = item.name,\n            acceptedValues = item.acceptedValues;\n        return extend(true, {\n          widget: \"dxSelectBox\",\n          name: name,\n          options: {\n            stylingMode: \"filled\",\n            dataSource: acceptedValues,\n            displayExpr: function displayExpr(value) {\n              return localizeValue(value, name);\n            },\n            placeholder: localize(name),\n            onValueChanged: function onValueChanged(e) {\n              if (!_this11._isReset) {\n                _this11._applyFormat([name, e.value, USER_ACTION], e.event);\n\n                _this11._setValueSilent(e.component, e.value);\n              }\n            }\n          }\n        }, item);\n      }\n    }, {\n      key: \"_prepareColorClickHandler\",\n      value: function _prepareColorClickHandler(name) {\n        var _this12 = this;\n\n        return function () {\n          var formData = _this12.quill.getFormat();\n\n          var caption = \"color\" === name ? DIALOG_COLOR_CAPTION : DIALOG_BACKGROUND_CAPTION;\n\n          _this12.editorInstance.formDialogOption(\"title\", localizationMessage.format(caption));\n\n          var promise = _this12.editorInstance.showFormDialog({\n            formData: formData,\n            items: [{\n              dataField: name,\n              editorType: \"dxColorView\",\n              editorOptions: {\n                onContentReady: function onContentReady(e) {\n                  $(e.element).closest(\".\".concat(BOX_ITEM_CONTENT_CLASS)).css(\"flexBasis\", \"auto\");\n                },\n                focusStateEnabled: false\n              },\n              label: {\n                visible: false\n              }\n            }]\n          });\n\n          promise.done(function (formData, event) {\n            _this12._applyFormat([name, formData[name], USER_ACTION], event);\n          });\n          promise.fail(function () {\n            _this12.quill.focus();\n          });\n        };\n      }\n    }, {\n      key: \"_getToolbarItem\",\n      value: function _getToolbarItem(item) {\n        var _this13 = this;\n\n        var baseItem = {\n          options: {\n            onInitialized: function onInitialized(e) {\n              if (item.name) {\n                e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\n                e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\n\n                _this13._toolbarWidgets.add(item.name, e.component);\n              }\n            }\n          }\n        };\n        var multilineItem = this.isMultilineMode() ? {\n          location: \"before\",\n          locateInMenu: \"never\"\n        } : {};\n        return extend(true, {\n          location: \"before\",\n          locateInMenu: \"auto\"\n        }, this._getDefaultConfig(item.name), item, baseItem, multilineItem);\n      }\n    }, {\n      key: \"_getDefaultItemsConfig\",\n      value: function _getDefaultItemsConfig() {\n        return {\n          clear: {\n            options: {\n              disabled: true\n            }\n          },\n          undo: {\n            options: {\n              disabled: true\n            }\n          },\n          redo: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowAbove: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowBelow: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnLeft: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnRight: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteRow: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteColumn: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteTable: {\n            options: {\n              disabled: true\n            }\n          },\n          separator: {\n            template: function template(data, index, element) {\n              $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n            },\n            menuItemTemplate: function menuItemTemplate(data, index, element) {\n              $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"_getDefaultConfig\",\n      value: function _getDefaultConfig(name) {\n        return this._getDefaultItemsConfig()[name];\n      }\n    }, {\n      key: \"updateHistoryWidgets\",\n      value: function updateHistoryWidgets() {\n        var historyModule = this.quill.history;\n\n        if (!historyModule) {\n          return;\n        }\n\n        var _historyModule$stack = historyModule.stack,\n            undoOps = _historyModule$stack.undo,\n            redoOps = _historyModule$stack.redo;\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length));\n      }\n    }, {\n      key: \"updateTableWidgets\",\n      value: function updateTableWidgets() {\n        var _this14 = this;\n\n        var _this$quill$getFormat;\n\n        var table = this.quill.getModule(\"table\");\n\n        if (!table) {\n          return;\n        }\n\n        var selection = this.quill.getSelection();\n        var isTableOperationsEnabled = selection && Boolean(null === (_this$quill$getFormat = this.quill.getFormat(selection)) || void 0 === _this$quill$getFormat ? void 0 : _this$quill$getFormat.table);\n        TABLE_OPERATIONS.forEach(function (operationName) {\n          var isInsertTable = \"insertTable\" === operationName;\n\n          var widget = _this14._toolbarWidgets.getByName(operationName);\n\n          _this14._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled);\n        });\n      }\n    }, {\n      key: \"_updateManipulationWidget\",\n      value: function _updateManipulationWidget(widget, isOperationEnabled) {\n        if (!widget) {\n          return;\n        }\n\n        widget.option(\"disabled\", !isOperationEnabled);\n      }\n    }, {\n      key: \"updateFormatWidgets\",\n      value: function updateFormatWidgets(isResetRequired) {\n        var selection = this.quill.getSelection();\n\n        if (!selection) {\n          return;\n        }\n\n        var formats = this.quill.getFormat(selection);\n        var hasFormats = !isEmptyObject(formats);\n\n        if (!hasFormats || isResetRequired) {\n          this._resetFormatWidgets();\n        }\n\n        for (var formatName in formats) {\n          var widgetName = this._getFormatWidgetName(formatName, formats);\n\n          var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\n\n          if (!formatWidget) {\n            continue;\n          }\n\n          this._markActiveFormatWidget(formatName, formatWidget, formats);\n        }\n\n        this._toggleClearFormatting(hasFormats || selection.length > 1);\n      }\n    }, {\n      key: \"_markActiveFormatWidget\",\n      value: function _markActiveFormatWidget(name, widget, formats) {\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name, formats[name]);\n        }\n\n        if (\"value\" in widget.option()) {\n          this._setValueSilent(widget, formats[name]);\n        } else {\n          widget.$element().addClass(ACTIVE_FORMAT_CLASS);\n        }\n      }\n    }, {\n      key: \"_toggleClearFormatting\",\n      value: function _toggleClearFormatting(hasFormats) {\n        var clearWidget = this._toolbarWidgets.getByName(\"clear\");\n\n        if (clearWidget) {\n          clearWidget.option(\"disabled\", !hasFormats);\n        }\n      }\n    }, {\n      key: \"_isColorFormat\",\n      value: function _isColorFormat(name) {\n        return \"color\" === name || \"background\" === name;\n      }\n    }, {\n      key: \"_updateColorWidget\",\n      value: function _updateColorWidget(name, color) {\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (!formatWidget) {\n          return;\n        }\n\n        formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\");\n      }\n    }, {\n      key: \"_getFormatWidgetName\",\n      value: function _getFormatWidgetName(name, formats) {\n        var widgetName;\n\n        switch (name) {\n          case \"align\":\n            widgetName = name + titleize(formats[name]);\n            break;\n\n          case \"list\":\n            widgetName = formats[name] + titleize(name);\n            break;\n\n          case \"code-block\":\n            widgetName = \"codeBlock\";\n            break;\n\n          case \"script\":\n            widgetName = formats[name] + name;\n            break;\n\n          case \"imageSrc\":\n            widgetName = \"image\";\n            break;\n\n          default:\n            widgetName = name;\n        }\n\n        return widgetName;\n      }\n    }, {\n      key: \"_setValueSilent\",\n      value: function _setValueSilent(widget, value) {\n        this._isReset = true;\n        widget.option(\"value\", value);\n        this._isReset = false;\n      }\n    }, {\n      key: \"_resetFormatWidgets\",\n      value: function _resetFormatWidgets() {\n        var _this15 = this;\n\n        this._toolbarWidgets.each(function (name, widget) {\n          _this15._resetFormatWidget(name, widget);\n        });\n      }\n    }, {\n      key: \"_resetFormatWidget\",\n      value: function _resetFormatWidget(name, widget) {\n        widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\n\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name);\n        }\n\n        if (\"clear\" === name) {\n          widget.option(\"disabled\", true);\n        }\n\n        if (\"dxSelectBox\" === widget.NAME) {\n          this._setValueSilent(widget, null);\n        }\n      }\n    }, {\n      key: \"addClickHandler\",\n      value: function addClickHandler(name, handler) {\n        this._formatHandlers[name] = handler;\n\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (formatWidget && \"dxButton\" === formatWidget.NAME) {\n          formatWidget.option(\"onClick\", handler);\n        }\n      }\n    }]);\n\n    return ToolbarModule;\n  }(BaseModule);\n}\n\nexport default ToolbarModule;","map":null,"metadata":{},"sourceType":"module"}