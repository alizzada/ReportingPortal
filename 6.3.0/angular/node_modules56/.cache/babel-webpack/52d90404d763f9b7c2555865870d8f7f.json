{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport registerComponent from \"../core/component_registrator\";\nimport { grep, deferRender } from \"../core/utils/common\";\nimport { extend } from \"../core/utils/extend\";\nimport { merge } from \"../core/utils/array\";\nimport { each } from \"../core/utils/iterator\";\nimport ActionSheetStrategy from \"./toolbar/ui.toolbar.strategy.action_sheet\";\nimport DropDownMenuStrategy from \"./toolbar/ui.toolbar.strategy.drop_down_menu\";\nimport ToolbarBase from \"./toolbar/ui.toolbar.base\";\nimport { ChildDefaultTemplate } from \"../core/templates/child_default_template\";\nvar STRATEGIES = {\n  actionSheet: ActionSheetStrategy,\n  dropDownMenu: DropDownMenuStrategy\n};\nvar TOOLBAR_AUTO_HIDE_ITEM_CLASS = \"dx-toolbar-item-auto-hide\";\nvar TOOLBAR_AUTO_HIDE_TEXT_CLASS = \"dx-toolbar-text-auto-hide\";\nvar TOOLBAR_HIDDEN_ITEM = \"dx-toolbar-item-invisible\";\nvar Toolbar = ToolbarBase.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      menuItemTemplate: \"menuItem\",\n      submenuType: \"dropDownMenu\",\n      menuContainer: void 0\n    });\n  },\n  _dimensionChanged: function _dimensionChanged(dimension) {\n    if (\"height\" === dimension) {\n      return;\n    }\n\n    this._menuStrategy.toggleMenuVisibility(false, true);\n\n    this.callBase();\n\n    this._menuStrategy.renderMenuItems();\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      actionSheetItem: new ChildDefaultTemplate(\"item\")\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderMenu();\n  },\n  _postProcessRenderItems: function _postProcessRenderItems() {\n    var _this = this;\n\n    this._hideOverflowItems();\n\n    this._menuStrategy._updateMenuVisibility();\n\n    this.callBase();\n    deferRender(function () {\n      _this._menuStrategy.renderMenuItems();\n    });\n  },\n  _renderItem: function _renderItem(index, item, itemContainer, $after) {\n    var itemElement = this.callBase(index, item, itemContainer, $after);\n\n    if (\"auto\" === item.locateInMenu) {\n      itemElement.addClass(TOOLBAR_AUTO_HIDE_ITEM_CLASS);\n    }\n\n    if (\"dxButton\" === item.widget && \"inMenu\" === item.showText) {\n      itemElement.toggleClass(TOOLBAR_AUTO_HIDE_TEXT_CLASS);\n    }\n\n    return itemElement;\n  },\n  _getItemsWidth: function _getItemsWidth() {\n    return this._getSummaryItemsWidth([this._$beforeSection, this._$centerSection, this._$afterSection]);\n  },\n  _hideOverflowItems: function _hideOverflowItems(elementWidth) {\n    var overflowItems = this.$element().find(\".\" + TOOLBAR_AUTO_HIDE_ITEM_CLASS);\n\n    if (!overflowItems.length) {\n      return;\n    }\n\n    elementWidth = elementWidth || this.$element().width();\n    $(overflowItems).removeClass(TOOLBAR_HIDDEN_ITEM);\n\n    var itemsWidth = this._getItemsWidth();\n\n    while (overflowItems.length && elementWidth < itemsWidth) {\n      var $item = overflowItems.eq(-1);\n      itemsWidth -= $item.outerWidth();\n      $item.addClass(TOOLBAR_HIDDEN_ITEM);\n      overflowItems.splice(-1, 1);\n    }\n  },\n  _getMenuItems: function _getMenuItems() {\n    var that = this;\n    var menuItems = grep(this.option(\"items\") || [], function (item) {\n      return that._isMenuItem(item);\n    });\n\n    var $hiddenItems = this._itemContainer().children(\".\" + TOOLBAR_AUTO_HIDE_ITEM_CLASS + \".\" + TOOLBAR_HIDDEN_ITEM).not(\".dx-state-invisible\");\n\n    this._restoreItems = this._restoreItems || [];\n    var overflowItems = [].slice.call($hiddenItems).map(function (item) {\n      var itemData = that._getItemData(item);\n\n      var $itemContainer = $(item).children();\n      var $itemMarkup = $itemContainer.children();\n      return extend({\n        menuItemTemplate: function menuItemTemplate() {\n          that._restoreItems.push({\n            container: $itemContainer,\n            item: $itemMarkup\n          });\n\n          var $container = $(\"<div>\").addClass(TOOLBAR_AUTO_HIDE_ITEM_CLASS);\n          return $container.append($itemMarkup);\n        }\n      }, itemData);\n    });\n    return merge(overflowItems, menuItems);\n  },\n  _getToolbarItems: function _getToolbarItems() {\n    var that = this;\n    return grep(this.option(\"items\") || [], function (item) {\n      return !that._isMenuItem(item);\n    });\n  },\n  _renderMenu: function _renderMenu() {\n    var _this2 = this;\n\n    this._renderMenuStrategy();\n\n    deferRender(function () {\n      _this2._menuStrategy.render();\n    });\n  },\n  _renderMenuStrategy: function _renderMenuStrategy() {\n    var strategyName = this.option(\"submenuType\");\n\n    if (this._requireDropDownStrategy()) {\n      strategyName = \"dropDownMenu\";\n    }\n\n    var strategy = STRATEGIES[strategyName];\n\n    if (!(this._menuStrategy && this._menuStrategy.NAME === strategyName)) {\n      this._menuStrategy = new strategy(this);\n    }\n  },\n  _requireDropDownStrategy: function _requireDropDownStrategy() {\n    var items = this.option(\"items\") || [];\n    var result = false;\n    each(items, function (index, item) {\n      if (\"auto\" === item.locateInMenu) {\n        result = true;\n      } else if (\"always\" === item.locateInMenu && item.widget) {\n        result = true;\n      }\n    });\n    return result;\n  },\n  _arrangeItems: function _arrangeItems() {\n    if (this.$element().is(\":hidden\")) {\n      return;\n    }\n\n    this._$centerSection.css({\n      margin: \"0 auto\",\n      float: \"none\"\n    });\n\n    each(this._restoreItems || [], function (_, obj) {\n      $(obj.container).append(obj.item);\n    });\n    this._restoreItems = [];\n    var elementWidth = this.$element().width();\n\n    this._hideOverflowItems(elementWidth);\n\n    this.callBase(elementWidth);\n  },\n  _itemOptionChanged: function _itemOptionChanged(item, property, value) {\n    if (this._isMenuItem(item)) {\n      this._menuStrategy.renderMenuItems();\n    } else if (this._isToolbarItem(item)) {\n      this.callBase(item, property, value);\n    } else {\n      this.callBase(item, property, value);\n\n      this._menuStrategy.renderMenuItems();\n    }\n\n    if (\"location\" === property) {\n      this.repaint();\n    }\n  },\n  _isMenuItem: function _isMenuItem(itemData) {\n    return \"menu\" === itemData.location || \"always\" === itemData.locateInMenu;\n  },\n  _isToolbarItem: function _isToolbarItem(itemData) {\n    return void 0 === itemData.location || \"never\" === itemData.locateInMenu;\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"submenuType\":\n        this._invalidate();\n\n        break;\n\n      case \"visible\":\n        this.callBase.apply(this, arguments);\n\n        this._menuStrategy.handleToolbarVisibilityChange(value);\n\n        break;\n\n      case \"menuItemTemplate\":\n        this._changeMenuOption(\"itemTemplate\", this._getTemplate(value));\n\n        break;\n\n      case \"onItemClick\":\n        this._changeMenuOption(name, value);\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"menuContainer\":\n        this._changeMenuOption(\"container\", value);\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  _changeMenuOption: function _changeMenuOption(name, value) {\n    this._menuStrategy.widgetOption(name, value);\n  }\n});\nregisterComponent(\"dxToolbar\", Toolbar);\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}