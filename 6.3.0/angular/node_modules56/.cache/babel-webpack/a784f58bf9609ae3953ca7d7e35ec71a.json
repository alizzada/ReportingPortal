{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxForm from 'devextreme/ui/form';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.1.3\n * Build date: Tue May 18 2021\n *\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/**\n * The Form UI component represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nvar DxFormComponent = /*@__PURE__*/function () {\n  var DxFormComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxFormComponent, _DxComponent);\n\n    var _super = _createSuper(DxFormComponent);\n\n    function DxFormComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxFormComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'editorEnterKey',\n        emit: 'onEditorEnterKey'\n      }, {\n        subscribe: 'fieldDataChanged',\n        emit: 'onFieldDataChanged'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'alignItemLabelsChange'\n      }, {\n        emit: 'alignItemLabelsInAllGroupsChange'\n      }, {\n        emit: 'colCountChange'\n      }, {\n        emit: 'colCountByScreenChange'\n      }, {\n        emit: 'customizeItemChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'formDataChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'labelLocationChange'\n      }, {\n        emit: 'minColWidthChange'\n      }, {\n        emit: 'optionalMarkChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'requiredMarkChange'\n      }, {\n        emit: 'requiredMessageChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'screenByWidthChange'\n      }, {\n        emit: 'scrollingEnabledChange'\n      }, {\n        emit: 'showColonAfterLabelChange'\n      }, {\n        emit: 'showOptionalMarkChange'\n      }, {\n        emit: 'showRequiredMarkChange'\n      }, {\n        emit: 'showValidationSummaryChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'validationGroupChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     *\n    \r\n     */\n\n\n    _createClass(DxFormComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"alignItemLabels\",\n      get: function get() {\n        return this._getOption('alignItemLabels');\n      },\n      set: function set(value) {\n        this._setOption('alignItemLabels', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"alignItemLabelsInAllGroups\",\n      get: function get() {\n        return this._getOption('alignItemLabelsInAllGroups');\n      },\n      set: function set(value) {\n        this._setOption('alignItemLabelsInAllGroups', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"colCount\",\n      get: function get() {\n        return this._getOption('colCount');\n      },\n      set: function set(value) {\n        this._setOption('colCount', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"colCountByScreen\",\n      get: function get() {\n        return this._getOption('colCountByScreen');\n      },\n      set: function set(value) {\n        this._setOption('colCountByScreen', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"customizeItem\",\n      get: function get() {\n        return this._getOption('customizeItem');\n      },\n      set: function set(value) {\n        this._setOption('customizeItem', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"formData\",\n      get: function get() {\n        return this._getOption('formData');\n      },\n      set: function set(value) {\n        this._setOption('formData', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"items\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this._setOption('items', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"labelLocation\",\n      get: function get() {\n        return this._getOption('labelLocation');\n      },\n      set: function set(value) {\n        this._setOption('labelLocation', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"minColWidth\",\n      get: function get() {\n        return this._getOption('minColWidth');\n      },\n      set: function set(value) {\n        this._setOption('minColWidth', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"optionalMark\",\n      get: function get() {\n        return this._getOption('optionalMark');\n      },\n      set: function set(value) {\n        this._setOption('optionalMark', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"requiredMark\",\n      get: function get() {\n        return this._getOption('requiredMark');\n      },\n      set: function set(value) {\n        this._setOption('requiredMark', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"requiredMessage\",\n      get: function get() {\n        return this._getOption('requiredMessage');\n      },\n      set: function set(value) {\n        this._setOption('requiredMessage', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"screenByWidth\",\n      get: function get() {\n        return this._getOption('screenByWidth');\n      },\n      set: function set(value) {\n        this._setOption('screenByWidth', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"scrollingEnabled\",\n      get: function get() {\n        return this._getOption('scrollingEnabled');\n      },\n      set: function set(value) {\n        this._setOption('scrollingEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showColonAfterLabel\",\n      get: function get() {\n        return this._getOption('showColonAfterLabel');\n      },\n      set: function set(value) {\n        this._setOption('showColonAfterLabel', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showOptionalMark\",\n      get: function get() {\n        return this._getOption('showOptionalMark');\n      },\n      set: function set(value) {\n        this._setOption('showOptionalMark', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showRequiredMark\",\n      get: function get() {\n        return this._getOption('showRequiredMark');\n      },\n      set: function set(value) {\n        this._setOption('showRequiredMark', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showValidationSummary\",\n      get: function get() {\n        return this._getOption('showValidationSummary');\n      },\n      set: function set(value) {\n        this._setOption('showValidationSummary', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"validationGroup\",\n      get: function get() {\n        return this._getOption('validationGroup');\n      },\n      set: function set(value) {\n        this._setOption('validationGroup', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"itemsChildren\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this.setChildren('items', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxForm(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxFormComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('items', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('items');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxFormComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxFormComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxFormComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxFormComponent;\n  }(DxComponent);\n\n  DxFormComponent.ɵfac = function DxFormComponent_Factory(t) {\n    return new (t || DxFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: DxFormComponent,\n    selectors: [[\"dx-form\"]],\n    contentQueries: function DxFormComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 0);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      alignItemLabels: \"alignItemLabels\",\n      alignItemLabelsInAllGroups: \"alignItemLabelsInAllGroups\",\n      colCount: \"colCount\",\n      colCountByScreen: \"colCountByScreen\",\n      customizeItem: \"customizeItem\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      formData: \"formData\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      items: \"items\",\n      labelLocation: \"labelLocation\",\n      minColWidth: \"minColWidth\",\n      optionalMark: \"optionalMark\",\n      readOnly: \"readOnly\",\n      requiredMark: \"requiredMark\",\n      requiredMessage: \"requiredMessage\",\n      rtlEnabled: \"rtlEnabled\",\n      screenByWidth: \"screenByWidth\",\n      scrollingEnabled: \"scrollingEnabled\",\n      showColonAfterLabel: \"showColonAfterLabel\",\n      showOptionalMark: \"showOptionalMark\",\n      showRequiredMark: \"showRequiredMark\",\n      showValidationSummary: \"showValidationSummary\",\n      tabIndex: \"tabIndex\",\n      validationGroup: \"validationGroup\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onEditorEnterKey: \"onEditorEnterKey\",\n      onFieldDataChanged: \"onFieldDataChanged\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      alignItemLabelsChange: \"alignItemLabelsChange\",\n      alignItemLabelsInAllGroupsChange: \"alignItemLabelsInAllGroupsChange\",\n      colCountChange: \"colCountChange\",\n      colCountByScreenChange: \"colCountByScreenChange\",\n      customizeItemChange: \"customizeItemChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      formDataChange: \"formDataChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemsChange: \"itemsChange\",\n      labelLocationChange: \"labelLocationChange\",\n      minColWidthChange: \"minColWidthChange\",\n      optionalMarkChange: \"optionalMarkChange\",\n      readOnlyChange: \"readOnlyChange\",\n      requiredMarkChange: \"requiredMarkChange\",\n      requiredMessageChange: \"requiredMessageChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      screenByWidthChange: \"screenByWidthChange\",\n      scrollingEnabledChange: \"scrollingEnabledChange\",\n      showColonAfterLabelChange: \"showColonAfterLabelChange\",\n      showOptionalMarkChange: \"showOptionalMarkChange\",\n      showRequiredMarkChange: \"showRequiredMarkChange\",\n      showValidationSummaryChange: \"showValidationSummaryChange\",\n      tabIndexChange: \"tabIndexChange\",\n      validationGroupChange: \"validationGroupChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFormComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  DxFormComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxFormComponent);\n  return DxFormComponent;\n}();\n\nvar DxFormModule = /*@__PURE__*/function () {\n  var DxFormModule = function DxFormModule() {\n    _classCallCheck(this, DxFormModule);\n  };\n\n  DxFormModule.ɵfac = function DxFormModule_Factory(t) {\n    return new (t || DxFormModule)();\n  };\n\n  DxFormModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: DxFormModule\n  });\n  DxFormModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxTemplateModule]\n  });\n  return DxFormModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFormModule, {\n    declarations: function declarations() {\n      return [DxFormComponent];\n    },\n    imports: function imports() {\n      return [DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxFormComponent, DxoColCountByScreenModule, DxiItemModule, DxoLabelModule, DxiValidationRuleModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxFormComponent, DxFormModule };","map":null,"metadata":{},"sourceType":"module"}