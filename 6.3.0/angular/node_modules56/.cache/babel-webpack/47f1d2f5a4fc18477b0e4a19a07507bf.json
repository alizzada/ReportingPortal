{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/renovation/component_wrapper/template_wrapper.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { InfernoComponent, InfernoEffect } from \"@devextreme/vdom\";\nimport { findDOMfromVNode } from \"inferno\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getPublicElement } from \"../../core/element\";\nimport { removeDifferentElements } from \"./utils\";\nimport Number from \"../../core/polyfills/number\";\nexport var TemplateWrapper = /*#__PURE__*/function (_InfernoComponent) {\n  _inherits(TemplateWrapper, _InfernoComponent);\n\n  var _super = _createSuper(TemplateWrapper);\n\n  function TemplateWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, TemplateWrapper);\n\n    _this = _super.call(this, props);\n    _this.renderTemplate = _this.renderTemplate.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TemplateWrapper, [{\n    key: \"renderTemplate\",\n    value: function renderTemplate() {\n      var node = findDOMfromVNode(this.$LI, true);\n\n      if (node) {\n        var parentNode = node.parentNode;\n\n        if (parentNode) {\n          var _this$props$model;\n\n          parentNode.removeChild(node);\n          var $parent = $(parentNode);\n          var $children = $parent.contents();\n\n          var _ref = null !== (_this$props$model = this.props.model) && void 0 !== _this$props$model ? _this$props$model : {\n            data: {}\n          },\n              data = _ref.data,\n              index = _ref.index;\n\n          Object.keys(data).forEach(function (name) {\n            if (data[name] && domAdapter.isNode(data[name])) {\n              data[name] = getPublicElement($(data[name]));\n            }\n          });\n          this.props.template.render(_extends({\n            container: getPublicElement($parent),\n            transclude: this.props.transclude\n          }, !this.props.transclude ? {\n            model: data\n          } : {}, !this.props.transclude && Number.isFinite(index) ? {\n            index: index\n          } : {}));\n          return function () {\n            removeDifferentElements($children, $parent.contents());\n            parentNode.appendChild(node);\n          };\n        }\n      }\n\n      return;\n    }\n  }, {\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.renderTemplate, [this.props.template, this.props.model])];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      this._effects[0].update([this.props.template, this.props.model]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return TemplateWrapper;\n}(InfernoComponent);","map":null,"metadata":{},"sourceType":"module"}