{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/header/header.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { isObject, isDefined } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { inArray } from \"../../../core/utils/array\";\nimport { camelize } from \"../../../core/utils/inflector\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport Widget from \"../../widget/ui.widget\";\nimport { Navigator } from \"./navigator\";\nimport DropDownMenu from \"../../drop_down_menu\";\nimport Tabs from \"../../tabs\";\nimport { TABS_EXPANDED_CLASS } from \"../../tabs/constants\";\nimport errors from \"../../../core/errors\";\nimport messageLocalization from \"../../../localization/message\";\nvar COMPONENT_CLASS = \"dx-scheduler-header\";\nvar VIEW_SWITCHER_CLASS = \"dx-scheduler-view-switcher\";\nvar VIEW_SWITCHER_LABEL_CLASS = \"dx-scheduler-view-switcher-label\";\nvar STEP_MAP = {\n  day: \"day\",\n  week: \"week\",\n  workWeek: \"workWeek\",\n  month: \"month\",\n  timelineDay: \"day\",\n  timelineWeek: \"week\",\n  timelineWorkWeek: \"workWeek\",\n  timelineMonth: \"month\",\n  agenda: \"agenda\"\n};\nvar VIEWS = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\nexport var Header = /*#__PURE__*/function (_Widget) {\n  _inherits(Header, _Widget);\n\n  var _super = _createSuper(Header);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Header, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Header.prototype), \"_getDefaultOptions\", this).call(this), {\n        views: [],\n        isAdaptive: false,\n        intervalCount: 1,\n        currentView: \"day\",\n        firstDayOfWeek: void 0,\n        currentDate: new Date(),\n        min: void 0,\n        max: void 0,\n        useDropDownViewSwitcher: false,\n        _dropDownButtonIcon: \"overlay\"\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function _setOptionsByReference() {\n      _get(_getPrototypeOf(Header.prototype), \"_setOptionsByReference\", this).call(this);\n\n      extend(this._optionsByReference, {\n        currentView: true\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var value = args.value;\n\n      switch (args.name) {\n        case \"views\":\n          this._validateViews();\n\n          this._viewSwitcher.option({\n            items: value,\n            selectedItem: this.option(\"currentView\")\n          });\n\n          break;\n\n        case \"customizeDateNavigatorText\":\n          this._navigator.option(args.name, value);\n\n          break;\n\n        case \"currentView\":\n          this._viewSwitcher.option(\"selectedItem\", value);\n\n          this._navigator.option(\"step\", STEP_MAP[this._getCurrentViewType()]);\n\n          this._changeViewSwitcherLabelText();\n\n          break;\n\n        case \"currentDate\":\n          this._navigator.option(\"date\", value);\n\n          break;\n\n        case \"displayedDate\":\n          this._navigator.option(\"displayedDate\", value);\n\n          break;\n\n        case \"min\":\n        case \"max\":\n        case \"firstDayOfWeek\":\n        case \"intervalCount\":\n          this._navigator.option(args.name, value);\n\n          break;\n\n        case \"tabIndex\":\n        case \"focusStateEnabled\":\n          this._viewSwitcher.option(args.name, value);\n\n          this._navigator.option(args.name, value);\n\n          _get(_getPrototypeOf(Header.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"useDropDownViewSwitcher\":\n          this._refreshViewSwitcher();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(Header.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(Header.prototype), \"_init\", this).call(this);\n\n      this.$element().addClass(COMPONENT_CLASS);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(Header.prototype), \"_initMarkup\", this).call(this);\n\n      this._renderNavigator();\n\n      this._renderViewSwitcher();\n    }\n  }, {\n    key: \"_renderNavigator\",\n    value: function _renderNavigator() {\n      this._navigator = this._createComponent(\"<div>\", Navigator, {\n        min: this.option(\"min\"),\n        max: this.option(\"max\"),\n        intervalCount: this.option(\"intervalCount\"),\n        date: this.option(\"currentDate\"),\n        step: STEP_MAP[this._getCurrentViewType()],\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        tabIndex: this.option(\"tabIndex\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        observer: this.option(\"observer\"),\n        customizeDateNavigatorText: this.option(\"customizeDateNavigatorText\"),\n        todayDate: this.option(\"todayDate\")\n      });\n\n      this._navigator.$element().appendTo(this.$element());\n    }\n  }, {\n    key: \"_renderViewSwitcher\",\n    value: function _renderViewSwitcher() {\n      this._validateViews();\n\n      var $viewSwitcher = $(\"<div>\").addClass(VIEW_SWITCHER_CLASS).appendTo(this.$element());\n      this.option(\"useDropDownViewSwitcher\") ? this._renderViewSwitcherDropDownMenu($viewSwitcher) : this._renderViewSwitcherTabs($viewSwitcher);\n    }\n  }, {\n    key: \"_validateViews\",\n    value: function _validateViews() {\n      var views = this.option(\"views\");\n      each(views, function (_, view) {\n        var isViewIsObject = isObject(view);\n        var viewType = isViewIsObject && view.type ? view.type : view;\n\n        if (-1 === inArray(viewType, VIEWS)) {\n          errors.log(\"W0008\", viewType);\n        }\n      });\n    }\n  }, {\n    key: \"_getCurrentViewType\",\n    value: function _getCurrentViewType() {\n      var currentView = this.option(\"currentView\");\n      return currentView.type || currentView;\n    }\n  }, {\n    key: \"_renderViewSwitcherTabs\",\n    value: function _renderViewSwitcherTabs($element) {\n      var that = this;\n      $element.addClass(TABS_EXPANDED_CLASS);\n      this._viewSwitcher = this._createComponent($element, Tabs, {\n        selectionRequired: true,\n        scrollingEnabled: true,\n        onSelectionChanged: this._updateCurrentView.bind(this),\n        items: this.option(\"views\"),\n        itemTemplate: function itemTemplate(item) {\n          return $(\"<span>\").addClass(\"dx-tab-text\").text(that._getItemText(item));\n        },\n        selectedItem: this.option(\"currentView\"),\n        tabIndex: this.option(\"tabIndex\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\")\n      });\n    }\n  }, {\n    key: \"_getItemText\",\n    value: function _getItemText(item) {\n      return item.name || messageLocalization.format(\"dxScheduler-switcher\" + camelize(item.type || item, true));\n    }\n  }, {\n    key: \"_refreshViewSwitcher\",\n    value: function _refreshViewSwitcher() {\n      this._viewSwitcher._dispose();\n\n      this._viewSwitcher.$element().remove();\n\n      delete this._viewSwitcher;\n\n      this._removeViewSwitcherLabel();\n\n      this._renderViewSwitcher();\n    }\n  }, {\n    key: \"_removeViewSwitcherLabel\",\n    value: function _removeViewSwitcherLabel() {\n      if (isDefined(this._$viewSwitcherLabel)) {\n        this._$viewSwitcherLabel.detach();\n\n        this._$viewSwitcherLabel.remove();\n\n        delete this._$viewSwitcherLabel;\n      }\n    }\n  }, {\n    key: \"_renderViewSwitcherDropDownMenu\",\n    value: function _renderViewSwitcherDropDownMenu($element) {\n      var that = this;\n      this._$viewSwitcherLabel = $(\"<div>\").addClass(VIEW_SWITCHER_LABEL_CLASS).appendTo(this.$element());\n\n      this._changeViewSwitcherLabelText();\n\n      this._viewSwitcher = this._createComponent($element, DropDownMenu, {\n        onItemClick: this._updateCurrentView.bind(this),\n        buttonIcon: this.option(\"_dropDownButtonIcon\"),\n        items: this.option(\"views\"),\n        selectionMode: this.option(\"isAdaptive\") ? \"single\" : \"none\",\n        selectedItemKeys: [this.option(\"currentView\")],\n        itemTemplate: function itemTemplate(item) {\n          return $(\"<span>\").addClass(\"dx-dropdownmenu-item-text\").text(that._getItemText(item));\n        }\n      });\n    }\n  }, {\n    key: \"_changeViewSwitcherLabelText\",\n    value: function _changeViewSwitcherLabelText() {\n      if (!isDefined(this._$viewSwitcherLabel)) {\n        return;\n      }\n\n      var currentView = this.option(\"currentView\");\n\n      var currentViewText = this._getItemText(currentView);\n\n      this._$viewSwitcherLabel.text(currentViewText);\n    }\n  }, {\n    key: \"_getCurrentViewName\",\n    value: function _getCurrentViewName(currentView) {\n      return isObject(currentView) ? currentView.name || currentView.type : currentView;\n    }\n  }, {\n    key: \"_updateCurrentView\",\n    value: function _updateCurrentView(e) {\n      var selectedItem = e.itemData || e.component.option(\"selectedItem\");\n\n      var viewName = this._getCurrentViewName(selectedItem);\n\n      this.notifyObserver(\"currentViewUpdated\", viewName);\n    }\n  }, {\n    key: \"_renderFocusTarget\",\n    value: function _renderFocusTarget() {}\n  }, {\n    key: \"notifyObserver\",\n    value: function notifyObserver(subject, args) {\n      var observer = this.option(\"observer\");\n\n      if (observer) {\n        observer.fire(subject, args);\n      }\n    }\n  }, {\n    key: \"invoke\",\n    value: function invoke() {\n      var observer = this.option(\"observer\");\n\n      if (observer) {\n        return observer.fire.apply(observer, arguments);\n      }\n    }\n  }]);\n\n  return Header;\n}(Widget);\nregisterComponent(\"dxSchedulerHeader\", Header);","map":null,"metadata":{},"sourceType":"module"}