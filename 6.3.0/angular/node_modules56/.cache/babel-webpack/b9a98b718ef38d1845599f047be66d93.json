{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.vertical\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/ui.scheduler.appointments.strategy.agenda\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\n\nvar AppointmentLayoutManager = /*#__PURE__*/function () {\n  function AppointmentLayoutManager(instance, renderingStrategy) {\n    _classCallCheck(this, AppointmentLayoutManager);\n\n    this.instance = instance;\n    renderingStrategy && this.initRenderingStrategy(renderingStrategy);\n  }\n\n  _createClass(AppointmentLayoutManager, [{\n    key: \"getCellDimensions\",\n    value: function getCellDimensions(options) {\n      if (this.instance._workSpace) {\n        return {\n          width: this.instance._workSpace.getCellWidth(),\n          height: this.instance._workSpace.getCellHeight(),\n          allDayHeight: this.instance._workSpace.getAllDayHeight()\n        };\n      }\n    }\n  }, {\n    key: \"getGroupOrientation\",\n    value: function getGroupOrientation(options) {\n      if (this.instance._workSpace) {\n        options.callback(this.instance._workSpace._getRealGroupOrientation());\n      }\n    }\n  }, {\n    key: \"initRenderingStrategy\",\n    value: function initRenderingStrategy(renderingStrategy) {\n      var Strategy = RENDERING_STRATEGIES[renderingStrategy];\n      this._renderingStrategyInstance = new Strategy(this.instance);\n      this.renderingStrategy = renderingStrategy;\n    }\n  }, {\n    key: \"createAppointmentsMap\",\n    value: function createAppointmentsMap(items) {\n      var _this = this;\n\n      var _this$getCellDimensio = this.getCellDimensions(),\n          allDayHeight = _this$getCellDimensio.allDayHeight;\n\n      this.instance._allDayCellHeight = allDayHeight;\n      this.getGroupOrientation({\n        callback: function callback(groupOrientation) {\n          return _this.instance._groupOrientation = groupOrientation;\n        }\n      });\n      var appointments = items ? items.slice() : [];\n      this._positionMap = this._renderingStrategyInstance.createTaskPositionMap(appointments);\n      return this._createAppointmentsMapCore(appointments, this._positionMap);\n    }\n  }, {\n    key: \"_createAppointmentsMapCore\",\n    value: function _createAppointmentsMapCore(list, positionMap) {\n      var _this2 = this;\n\n      var _this$instance$getWor = this.instance.getWorkSpace(),\n          virtualScrollingDispatcher = _this$instance$getWor.virtualScrollingDispatcher;\n\n      var virtualCellCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.leftVirtualCellsCount : 0;\n      var virtualRowCount = virtualScrollingDispatcher ? virtualScrollingDispatcher.topVirtualRowsCount : 0;\n      return list.map(function (data, index) {\n        if (!_this2._renderingStrategyInstance.keepAppointmentSettings()) {\n          delete data.settings;\n        }\n\n        var appointmentSettings = positionMap[index];\n        appointmentSettings.forEach(function (settings) {\n          settings.direction = \"vertical\" === _this2.renderingStrategy && !settings.allDay ? \"vertical\" : \"horizontal\";\n        });\n        return {\n          itemData: data,\n          settings: appointmentSettings,\n          needRepaint: true,\n          needRemove: false,\n          virtualCellCount: virtualCellCount,\n          virtualRowCount: virtualRowCount\n        };\n      });\n    }\n  }, {\n    key: \"_isDataChanged\",\n    value: function _isDataChanged(data) {\n      var updatedData = this.instance.getUpdatedAppointment();\n      return updatedData === data || this.instance.getUpdatedAppointmentKeys().some(function (item) {\n        return data[item.key] === item.value;\n      });\n    }\n  }, {\n    key: \"_isAppointmentShouldAppear\",\n    value: function _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n      return currentAppointment.needRepaint && sourceAppointment.needRemove;\n    }\n  }, {\n    key: \"_isSettingChanged\",\n    value: function _isSettingChanged(settings, sourceSetting) {\n      if (settings.length !== sourceSetting.length) {\n        return true;\n      }\n\n      var createSettingsToCompare = function createSettingsToCompare(settings, index) {\n        var virtualCellCount = settings.virtualCellCount || 0;\n        var virtualRowCount = settings.virtualRowCount || 0;\n        var cellIndex = settings[index].cellIndex + virtualCellCount;\n        var rowIndex = settings[index].rowIndex + virtualRowCount;\n        return _extends({}, settings[index], {\n          cellIndex: cellIndex,\n          rowIndex: rowIndex,\n          virtualCellCount: -1,\n          virtualRowCount: -1\n        });\n      };\n\n      for (var i = 0; i < settings.length; i++) {\n        var newSettings = createSettingsToCompare(settings, i);\n        var oldSettings = createSettingsToCompare(sourceSetting, i);\n\n        if (oldSettings) {\n          oldSettings.sortedIndex = newSettings.sortedIndex;\n        }\n\n        if (!equalByValue(newSettings, oldSettings)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getAssociatedSourceAppointment\",\n    value: function _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var item = sourceAppointments[i];\n\n        if (item.itemData === currentAppointment.itemData) {\n          return item;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDeletedAppointments\",\n    value: function _getDeletedAppointments(currentAppointments, sourceAppointments) {\n      var result = [];\n\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var sourceAppointment = sourceAppointments[i];\n\n        var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n        if (!currentAppointment) {\n          sourceAppointment.needRemove = true;\n          result.push(sourceAppointment);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getRepaintedAppointments\",\n    value: function getRepaintedAppointments(currentAppointments, sourceAppointments) {\n      var _this3 = this;\n\n      if (0 === sourceAppointments.length || \"agenda\" === this.renderingStrategy) {\n        return currentAppointments;\n      }\n\n      currentAppointments.forEach(function (appointment) {\n        var sourceAppointment = _this3._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n        if (sourceAppointment) {\n          appointment.needRepaint = _this3._isDataChanged(appointment.itemData) || _this3._isSettingChanged(appointment.settings, sourceAppointment.settings) || _this3._isAppointmentShouldAppear(appointment, sourceAppointment);\n        }\n      });\n      return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n    }\n  }, {\n    key: \"getRenderingStrategyInstance\",\n    value: function getRenderingStrategyInstance() {\n      return this._renderingStrategyInstance;\n    }\n  }]);\n\n  return AppointmentLayoutManager;\n}();\n\nexport default AppointmentLayoutManager;","map":null,"metadata":{},"sourceType":"module"}