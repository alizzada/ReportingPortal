{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/speed_dial_action/speed_dial_item.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport Overlay from \"../overlay\";\nimport { render } from \"../widget/utils.ink_ripple\";\nimport { isMaterial } from \"../themes\";\nvar FAB_CLASS = \"dx-fa-button\";\nvar FAB_ICON_CLASS = \"dx-fa-button-icon\";\nvar FAB_LABEL_CLASS = \"dx-fa-button-label\";\nvar FAB_LABEL_WRAPPER_CLASS = \"dx-fa-button-label-wrapper\";\nvar FAB_CONTENT_REVERSE_CLASS = \"dx-fa-button-content-reverse\";\nvar OVERLAY_CONTENT_SELECTOR = \".dx-overlay-content\";\n\nvar SpeedDialItem = /*#__PURE__*/function (_Overlay) {\n  _inherits(SpeedDialItem, _Overlay);\n\n  var _super = _createSuper(SpeedDialItem);\n\n  function SpeedDialItem() {\n    _classCallCheck(this, SpeedDialItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpeedDialItem, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SpeedDialItem.prototype), \"_getDefaultOptions\", this).call(this), {\n        shading: false,\n        useInkRipple: false,\n        callOverlayRenderShading: false,\n        width: \"auto\",\n        zIndex: 1500\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(SpeedDialItem.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          useInkRipple: true\n        }\n      }]);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$element().addClass(FAB_CLASS);\n\n      this._renderIcon();\n\n      this._renderLabel();\n\n      _get(_getPrototypeOf(SpeedDialItem.prototype), \"_render\", this).call(this);\n\n      this.option(\"useInkRipple\") && this._renderInkRipple();\n\n      this._renderClick();\n    }\n  }, {\n    key: \"_renderLabel\",\n    value: function _renderLabel() {\n      !!this._$label && this._$label.remove();\n      var labelText = this.option(\"label\");\n\n      if (!labelText) {\n        this._$label = null;\n        return;\n      }\n\n      var $element = $(\"<div>\").addClass(FAB_LABEL_CLASS);\n      var $wrapper = $(\"<div>\").addClass(FAB_LABEL_WRAPPER_CLASS);\n      this._$label = $wrapper.prependTo(this.$content()).append($element.text(labelText));\n      this.$content().toggleClass(FAB_CONTENT_REVERSE_CLASS, this._isPositionLeft(this.option(\"parentPosition\")));\n    }\n  }, {\n    key: \"_isPositionLeft\",\n    value: function _isPositionLeft(position) {\n      var currentLocation = position ? position.at ? position.at.x ? position.at.x : position.at : \"string\" === typeof position ? position : \"\" : \"\";\n      return \"left\" === currentLocation.split(\" \")[0];\n    }\n  }, {\n    key: \"_renderButtonIcon\",\n    value: function _renderButtonIcon($element, icon, iconClass) {\n      !!$element && $element.remove();\n      $element = $(\"<div>\").addClass(iconClass);\n      var $iconElement = getImageContainer(icon);\n      $element.append($iconElement).appendTo(this.$content());\n      return $element;\n    }\n  }, {\n    key: \"_renderIcon\",\n    value: function _renderIcon() {\n      this._$icon = this._renderButtonIcon(this._$icon, this._options.silent(\"icon\"), FAB_ICON_CLASS);\n    }\n  }, {\n    key: \"_renderWrapper\",\n    value: function _renderWrapper() {\n      if (this._options.silent(\"callOverlayRenderShading\")) {\n        _get(_getPrototypeOf(SpeedDialItem.prototype), \"_renderWrapper\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_getVisibleActions\",\n    value: function _getVisibleActions(actions) {\n      var currentActions = actions || this.option(\"actions\") || [];\n      return currentActions.filter(function (action) {\n        return action.option(\"visible\");\n      });\n    }\n  }, {\n    key: \"_getActionComponent\",\n    value: function _getActionComponent() {\n      if (1 === this._getVisibleActions().length) {\n        return this._getVisibleActions()[0];\n      } else {\n        return this.option(\"actionComponent\") || this.option(\"actions\")[0];\n      }\n    }\n  }, {\n    key: \"_initContentReadyAction\",\n    value: function _initContentReadyAction() {\n      this._contentReadyAction = this._getActionComponent()._createActionByOption(\"onContentReady\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }, true);\n    }\n  }, {\n    key: \"_fireContentReadyAction\",\n    value: function _fireContentReadyAction() {\n      this._contentReadyAction({\n        actionElement: this.$element()\n      });\n    }\n  }, {\n    key: \"_updateZIndexStackPosition\",\n    value: function _updateZIndexStackPosition() {\n      var zIndex = this.option(\"zIndex\");\n\n      this._$wrapper.css(\"zIndex\", zIndex);\n\n      this._$content.css(\"zIndex\", zIndex);\n    }\n  }, {\n    key: \"_fixWrapperPosition\",\n    value: function _fixWrapperPosition() {\n      var $wrapper = this._$wrapper;\n\n      var $container = this._getContainer();\n\n      $wrapper.css(\"position\", this._isWindow($container) ? \"fixed\" : \"absolute\");\n    }\n  }, {\n    key: \"_setClickAction\",\n    value: function _setClickAction() {\n      var _this = this;\n\n      var eventName = addNamespace(clickEventName, this.NAME);\n      var overlayContent = this.$element().find(OVERLAY_CONTENT_SELECTOR);\n      eventsEngine.off(overlayContent, eventName);\n      eventsEngine.on(overlayContent, eventName, function (e) {\n        var clickActionArgs = {\n          event: e,\n          actionElement: _this.element(),\n          element: _this._getActionComponent().$element()\n        };\n\n        _this._clickAction(clickActionArgs);\n      });\n    }\n  }, {\n    key: \"_defaultActionArgs\",\n    value: function _defaultActionArgs() {\n      return {\n        component: this._getActionComponent()\n      };\n    }\n  }, {\n    key: \"_renderClick\",\n    value: function _renderClick() {\n      this._clickAction = this._getActionComponent()._createActionByOption(\"onClick\");\n\n      this._setClickAction();\n    }\n  }, {\n    key: \"_renderInkRipple\",\n    value: function _renderInkRipple() {\n      this._inkRipple = render();\n    }\n  }, {\n    key: \"_getInkRippleContainer\",\n    value: function _getInkRippleContainer() {\n      return this._$icon;\n    }\n  }, {\n    key: \"_toggleActiveState\",\n    value: function _toggleActiveState($element, value, e) {\n      _get(_getPrototypeOf(SpeedDialItem.prototype), \"_toggleActiveState\", this).apply(this, arguments);\n\n      if (!this._inkRipple) {\n        return;\n      }\n\n      var config = {\n        element: this._getInkRippleContainer(),\n        event: e\n      };\n\n      if (value) {\n        this._inkRipple.showWave(config);\n      } else {\n        this._inkRipple.hideWave(config);\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"icon\":\n          this._renderIcon();\n\n          break;\n\n        case \"onClick\":\n          this._renderClick();\n\n          break;\n\n        case \"label\":\n          this._renderLabel();\n\n          break;\n\n        case \"visible\":\n          this._currentVisible = args.previousValue;\n          args.value ? this._show() : this._hide();\n          break;\n\n        case \"useInkRipple\":\n          this._render();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(SpeedDialItem.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return SpeedDialItem;\n}(Overlay);\n\nexport default SpeedDialItem;","map":null,"metadata":{},"sourceType":"module"}