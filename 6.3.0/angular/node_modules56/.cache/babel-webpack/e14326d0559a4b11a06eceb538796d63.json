{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { animation } from \"./ui.drawer.animation\";\nimport DrawerStrategy from \"./ui.drawer.rendering.strategy\";\nimport $ from \"../../core/renderer\";\nimport { move } from \"../../animation/translator\";\nimport Overlay from \"../overlay\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { camelize } from \"../../core/utils/inflector\";\n\nvar OverlapStrategy = /*#__PURE__*/function (_DrawerStrategy) {\n  _inherits(OverlapStrategy, _DrawerStrategy);\n\n  var _super = _createSuper(OverlapStrategy);\n\n  function OverlapStrategy() {\n    _classCallCheck(this, OverlapStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(OverlapStrategy, [{\n    key: \"renderPanelContent\",\n    value: function renderPanelContent(whenPanelContentRendered) {\n      var _this = this;\n\n      delete this._initialPosition;\n      var drawer = this.getDrawerInstance();\n\n      var _drawer$option = drawer.option(),\n          opened = _drawer$option.opened,\n          minSize = _drawer$option.minSize;\n\n      drawer._overlay = drawer._createComponent(drawer.content(), Overlay, {\n        shading: false,\n        container: drawer.getOverlayTarget(),\n        position: this._getOverlayPosition(),\n        width: opened ? \"auto\" : minSize || 0,\n        height: \"100%\",\n        templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\n        animation: {\n          show: {\n            duration: 0\n          }\n        },\n        onPositioned: function (e) {\n          this._fixOverlayPosition(e.component.$content());\n        }.bind(this),\n        contentTemplate: drawer.option(\"template\"),\n        onContentReady: function onContentReady(args) {\n          whenPanelContentRendered.resolve();\n\n          _this._processOverlayZIndex(args.component.content());\n        },\n        visible: true,\n        propagateOutsideClick: true\n      });\n    }\n  }, {\n    key: \"_fixOverlayPosition\",\n    value: function _fixOverlayPosition($overlayContent) {\n      var position = ensureDefined(this._initialPosition, {\n        left: 0,\n        top: 0\n      });\n      move($overlayContent, position);\n\n      if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\n        $overlayContent.css(\"left\", \"auto\");\n      }\n\n      if (\"bottom\" === this.getDrawerInstance().calcTargetPosition()) {\n        $overlayContent.css(\"top\", \"auto\");\n        $overlayContent.css(\"bottom\", \"0px\");\n      }\n    }\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var drawer = this.getDrawerInstance();\n      var panelPosition = drawer.calcTargetPosition();\n      var result = {};\n\n      switch (panelPosition) {\n        case \"left\":\n          result = {\n            my: \"top left\",\n            at: \"top left\"\n          };\n          break;\n\n        case \"right\":\n          result = {\n            my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\n            at: \"top right\"\n          };\n          break;\n\n        case \"top\":\n        case \"bottom\":\n          result = {\n            my: panelPosition,\n            at: panelPosition\n          };\n      }\n\n      result.of = drawer.getOverlayTarget();\n      return result;\n    }\n  }, {\n    key: \"refreshPanelElementSize\",\n    value: function refreshPanelElementSize(calcFromRealPanelSize) {\n      var drawer = this.getDrawerInstance();\n      var overlay = drawer.getOverlay();\n\n      if (drawer.isHorizontalDirection()) {\n        overlay.option(\"height\", \"100%\");\n        overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")));\n      } else {\n        overlay.option(\"width\", overlay.option(\"container\").width());\n        overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")));\n      }\n    }\n  }, {\n    key: \"onPanelContentRendered\",\n    value: function onPanelContentRendered() {\n      this._updateViewContentStyles();\n    }\n  }, {\n    key: \"_updateViewContentStyles\",\n    value: function _updateViewContentStyles() {\n      var drawer = this.getDrawerInstance();\n      $(drawer.viewContent()).css(\"padding\" + camelize(drawer.calcTargetPosition(), true), drawer.option(\"minSize\"));\n      $(drawer.viewContent()).css(\"transform\", \"inherit\");\n    }\n  }, {\n    key: \"_internalRenderPosition\",\n    value: function _internalRenderPosition(changePositionUsingFxAnimation, whenAnimationCompleted) {\n      var drawer = this.getDrawerInstance();\n      var $panel = $(drawer.content());\n      var $panelOverlayContent = drawer.getOverlay().$content();\n      var revealMode = drawer.option(\"revealMode\");\n      var targetPanelPosition = drawer.calcTargetPosition();\n\n      var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n      var panelOffset = this._getPanelOffset(drawer.option(\"opened\")) * drawer._getPositionCorrection();\n\n      var marginTop = drawer.getRealPanelHeight() - panelSize;\n\n      this._updateViewContentStyles();\n\n      if (changePositionUsingFxAnimation) {\n        if (\"slide\" === revealMode) {\n          this._initialPosition = drawer.isHorizontalDirection() ? {\n            left: panelOffset\n          } : {\n            top: panelOffset\n          };\n          animation.moveTo({\n            complete: function complete() {\n              whenAnimationCompleted.resolve();\n            },\n            duration: drawer.option(\"animationDuration\"),\n            direction: targetPanelPosition,\n            $element: $panel,\n            position: panelOffset\n          });\n        } else if (\"expand\" === revealMode) {\n          this._initialPosition = {\n            left: 0\n          };\n          move($panelOverlayContent, this._initialPosition);\n          animation.size({\n            complete: function complete() {\n              whenAnimationCompleted.resolve();\n            },\n            duration: drawer.option(\"animationDuration\"),\n            direction: targetPanelPosition,\n            $element: $panelOverlayContent,\n            size: panelSize,\n            marginTop: marginTop\n          });\n        }\n      } else if (\"slide\" === revealMode) {\n        this._initialPosition = drawer.isHorizontalDirection() ? {\n          left: panelOffset\n        } : {\n          top: panelOffset\n        };\n        move($panel, this._initialPosition);\n      } else if (\"expand\" === revealMode) {\n        this._initialPosition = {\n          left: 0\n        };\n        move($panelOverlayContent, this._initialPosition);\n\n        if (drawer.isHorizontalDirection()) {\n          $($panelOverlayContent).css(\"width\", panelSize);\n        } else {\n          $($panelOverlayContent).css(\"height\", panelSize);\n\n          if (\"bottom\" === targetPanelPosition) {\n            $($panelOverlayContent).css(\"marginTop\", marginTop);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPanelContent\",\n    value: function getPanelContent() {\n      return $(this.getDrawerInstance().getOverlay().content());\n    }\n  }, {\n    key: \"_processOverlayZIndex\",\n    value: function _processOverlayZIndex($element) {\n      var styles = $($element).get(0).style;\n      var zIndex = styles.zIndex || 1;\n      this.getDrawerInstance().setZIndex(zIndex);\n    }\n  }, {\n    key: \"isViewContentFirst\",\n    value: function isViewContentFirst(position) {\n      return \"right\" === position || \"bottom\" === position;\n    }\n  }]);\n\n  return OverlapStrategy;\n}(DrawerStrategy);\n\nexport default OverlapStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js"],"names":["animation","DrawerStrategy","$","move","Overlay","ensureDefined","camelize","OverlapStrategy","whenPanelContentRendered","_initialPosition","drawer","getDrawerInstance","option","opened","minSize","_overlay","_createComponent","content","shading","container","getOverlayTarget","position","_getOverlayPosition","width","height","templatesRenderAsynchronously","show","duration","onPositioned","e","_fixOverlayPosition","component","$content","bind","contentTemplate","onContentReady","args","resolve","_processOverlayZIndex","visible","propagateOutsideClick","$overlayContent","left","top","calcTargetPosition","css","panelPosition","result","my","at","of","calcFromRealPanelSize","overlay","getOverlay","isHorizontalDirection","getRealPanelWidth","_getPanelSize","getRealPanelHeight","_updateViewContentStyles","viewContent","changePositionUsingFxAnimation","whenAnimationCompleted","$panel","$panelOverlayContent","revealMode","targetPanelPosition","panelSize","panelOffset","_getPanelOffset","_getPositionCorrection","marginTop","moveTo","complete","direction","$element","size","styles","get","style","zIndex","setZIndex"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,SADJ,QAEO,uBAFP;AAGA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,CAAP,MAAc,qBAAd;AACA,SACIC,IADJ,QAEO,4BAFP;AAGA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACIC,aADJ,QAEO,yBAFP;AAGA,SACIC,QADJ,QAEO,4BAFP;;IAGMC,e;;;;;;;;;;;;;WACF,4BAAmBC,wBAAnB,EAA6C;AAAA;;AACzC,aAAO,KAAKC,gBAAZ;AACA,UAAIC,MAAM,GAAG,KAAKC,iBAAL,EAAb;;AACA,2BAGID,MAAM,CAACE,MAAP,EAHJ;AAAA,UACYC,MADZ,kBACIA,MADJ;AAAA,UAEaC,OAFb,kBAEIA,OAFJ;;AAIAJ,MAAAA,MAAM,CAACK,QAAP,GAAkBL,MAAM,CAACM,gBAAP,CAAwBN,MAAM,CAACO,OAAP,EAAxB,EAA0Cb,OAA1C,EAAmD;AACjEc,QAAAA,OAAO,EAAE,KADwD;AAEjEC,QAAAA,SAAS,EAAET,MAAM,CAACU,gBAAP,EAFsD;AAGjEC,QAAAA,QAAQ,EAAE,KAAKC,mBAAL,EAHuD;AAIjEC,QAAAA,KAAK,EAAEV,MAAM,GAAG,MAAH,GAAYC,OAAO,IAAI,CAJ6B;AAKjEU,QAAAA,MAAM,EAAE,MALyD;AAMjEC,QAAAA,6BAA6B,EAAEf,MAAM,CAACE,MAAP,CAAc,+BAAd,CANkC;AAOjEZ,QAAAA,SAAS,EAAE;AACP0B,UAAAA,IAAI,EAAE;AACFC,YAAAA,QAAQ,EAAE;AADR;AADC,SAPsD;AAYjEC,QAAAA,YAAY,EAAE,UAASC,CAAT,EAAY;AACtB,eAAKC,mBAAL,CAAyBD,CAAC,CAACE,SAAF,CAAYC,QAAZ,EAAzB;AACH,SAFa,CAEZC,IAFY,CAEP,IAFO,CAZmD;AAejEC,QAAAA,eAAe,EAAExB,MAAM,CAACE,MAAP,CAAc,UAAd,CAfgD;AAgBjEuB,QAAAA,cAAc,EAAE,wBAAAC,IAAI,EAAI;AACpB5B,UAAAA,wBAAwB,CAAC6B,OAAzB;;AACA,UAAA,KAAI,CAACC,qBAAL,CAA2BF,IAAI,CAACL,SAAL,CAAed,OAAf,EAA3B;AACH,SAnBgE;AAoBjEsB,QAAAA,OAAO,EAAE,IApBwD;AAqBjEC,QAAAA,qBAAqB,EAAE;AArB0C,OAAnD,CAAlB;AAuBH;;;WACD,6BAAoBC,eAApB,EAAqC;AACjC,UAAIpB,QAAQ,GAAGhB,aAAa,CAAC,KAAKI,gBAAN,EAAwB;AAChDiC,QAAAA,IAAI,EAAE,CAD0C;AAEhDC,QAAAA,GAAG,EAAE;AAF2C,OAAxB,CAA5B;AAIAxC,MAAAA,IAAI,CAACsC,eAAD,EAAkBpB,QAAlB,CAAJ;;AACA,UAAI,YAAY,KAAKV,iBAAL,GAAyBiC,kBAAzB,EAAhB,EAA+D;AAC3DH,QAAAA,eAAe,CAACI,GAAhB,CAAoB,MAApB,EAA4B,MAA5B;AACH;;AACD,UAAI,aAAa,KAAKlC,iBAAL,GAAyBiC,kBAAzB,EAAjB,EAAgE;AAC5DH,QAAAA,eAAe,CAACI,GAAhB,CAAoB,KAApB,EAA2B,MAA3B;AACAJ,QAAAA,eAAe,CAACI,GAAhB,CAAoB,QAApB,EAA8B,KAA9B;AACH;AACJ;;;WACD,+BAAsB;AAClB,UAAInC,MAAM,GAAG,KAAKC,iBAAL,EAAb;AACA,UAAImC,aAAa,GAAGpC,MAAM,CAACkC,kBAAP,EAApB;AACA,UAAIG,MAAM,GAAG,EAAb;;AACA,cAAQD,aAAR;AACI,aAAK,MAAL;AACIC,UAAAA,MAAM,GAAG;AACLC,YAAAA,EAAE,EAAE,UADC;AAELC,YAAAA,EAAE,EAAE;AAFC,WAAT;AAIA;;AACJ,aAAK,OAAL;AACIF,UAAAA,MAAM,GAAG;AACLC,YAAAA,EAAE,EAAEtC,MAAM,CAACE,MAAP,CAAc,YAAd,IAA8B,UAA9B,GAA2C,WAD1C;AAELqC,YAAAA,EAAE,EAAE;AAFC,WAAT;AAIA;;AACJ,aAAK,KAAL;AACA,aAAK,QAAL;AACIF,UAAAA,MAAM,GAAG;AACLC,YAAAA,EAAE,EAAEF,aADC;AAELG,YAAAA,EAAE,EAAEH;AAFC,WAAT;AAfR;;AAoBAC,MAAAA,MAAM,CAACG,EAAP,GAAYxC,MAAM,CAACU,gBAAP,EAAZ;AACA,aAAO2B,MAAP;AACH;;;WACD,iCAAwBI,qBAAxB,EAA+C;AAC3C,UAAIzC,MAAM,GAAG,KAAKC,iBAAL,EAAb;AACA,UAAIyC,OAAO,GAAG1C,MAAM,CAAC2C,UAAP,EAAd;;AACA,UAAI3C,MAAM,CAAC4C,qBAAP,EAAJ,EAAoC;AAChCF,QAAAA,OAAO,CAACxC,MAAR,CAAe,QAAf,EAAyB,MAAzB;AACAwC,QAAAA,OAAO,CAACxC,MAAR,CAAe,OAAf,EAAwBuC,qBAAqB,GAAGzC,MAAM,CAAC6C,iBAAP,EAAH,GAAgC,KAAKC,aAAL,CAAmB9C,MAAM,CAACE,MAAP,CAAc,QAAd,CAAnB,CAA7E;AACH,OAHD,MAGO;AACHwC,QAAAA,OAAO,CAACxC,MAAR,CAAe,OAAf,EAAwBwC,OAAO,CAACxC,MAAR,CAAe,WAAf,EAA4BW,KAA5B,EAAxB;AACA6B,QAAAA,OAAO,CAACxC,MAAR,CAAe,QAAf,EAAyBuC,qBAAqB,GAAGzC,MAAM,CAAC+C,kBAAP,EAAH,GAAiC,KAAKD,aAAL,CAAmB9C,MAAM,CAACE,MAAP,CAAc,QAAd,CAAnB,CAA/E;AACH;AACJ;;;WACD,kCAAyB;AACrB,WAAK8C,wBAAL;AACH;;;WACD,oCAA2B;AACvB,UAAIhD,MAAM,GAAG,KAAKC,iBAAL,EAAb;AACAT,MAAAA,CAAC,CAACQ,MAAM,CAACiD,WAAP,EAAD,CAAD,CAAwBd,GAAxB,CAA4B,YAAYvC,QAAQ,CAACI,MAAM,CAACkC,kBAAP,EAAD,EAA8B,IAA9B,CAAhD,EAAqFlC,MAAM,CAACE,MAAP,CAAc,SAAd,CAArF;AACAV,MAAAA,CAAC,CAACQ,MAAM,CAACiD,WAAP,EAAD,CAAD,CAAwBd,GAAxB,CAA4B,WAA5B,EAAyC,SAAzC;AACH;;;WACD,iCAAwBe,8BAAxB,EAAwDC,sBAAxD,EAAgF;AAC5E,UAAInD,MAAM,GAAG,KAAKC,iBAAL,EAAb;AACA,UAAImD,MAAM,GAAG5D,CAAC,CAACQ,MAAM,CAACO,OAAP,EAAD,CAAd;AACA,UAAI8C,oBAAoB,GAAGrD,MAAM,CAAC2C,UAAP,GAAoBrB,QAApB,EAA3B;AACA,UAAIgC,UAAU,GAAGtD,MAAM,CAACE,MAAP,CAAc,YAAd,CAAjB;AACA,UAAIqD,mBAAmB,GAAGvD,MAAM,CAACkC,kBAAP,EAA1B;;AACA,UAAIsB,SAAS,GAAG,KAAKV,aAAL,CAAmB9C,MAAM,CAACE,MAAP,CAAc,QAAd,CAAnB,CAAhB;;AACA,UAAIuD,WAAW,GAAG,KAAKC,eAAL,CAAqB1D,MAAM,CAACE,MAAP,CAAc,QAAd,CAArB,IAAgDF,MAAM,CAAC2D,sBAAP,EAAlE;;AACA,UAAIC,SAAS,GAAG5D,MAAM,CAAC+C,kBAAP,KAA8BS,SAA9C;;AACA,WAAKR,wBAAL;;AACA,UAAIE,8BAAJ,EAAoC;AAChC,YAAI,YAAYI,UAAhB,EAA4B;AACxB,eAAKvD,gBAAL,GAAwBC,MAAM,CAAC4C,qBAAP,KAAiC;AACrDZ,YAAAA,IAAI,EAAEyB;AAD+C,WAAjC,GAEpB;AACAxB,YAAAA,GAAG,EAAEwB;AADL,WAFJ;AAKAnE,UAAAA,SAAS,CAACuE,MAAV,CAAiB;AACbC,YAAAA,QAAQ,EAAE,oBAAM;AACZX,cAAAA,sBAAsB,CAACxB,OAAvB;AACH,aAHY;AAIbV,YAAAA,QAAQ,EAAEjB,MAAM,CAACE,MAAP,CAAc,mBAAd,CAJG;AAKb6D,YAAAA,SAAS,EAAER,mBALE;AAMbS,YAAAA,QAAQ,EAAEZ,MANG;AAObzC,YAAAA,QAAQ,EAAE8C;AAPG,WAAjB;AASH,SAfD,MAeO,IAAI,aAAaH,UAAjB,EAA6B;AAChC,eAAKvD,gBAAL,GAAwB;AACpBiC,YAAAA,IAAI,EAAE;AADc,WAAxB;AAGAvC,UAAAA,IAAI,CAAC4D,oBAAD,EAAuB,KAAKtD,gBAA5B,CAAJ;AACAT,UAAAA,SAAS,CAAC2E,IAAV,CAAe;AACXH,YAAAA,QAAQ,EAAE,oBAAM;AACZX,cAAAA,sBAAsB,CAACxB,OAAvB;AACH,aAHU;AAIXV,YAAAA,QAAQ,EAAEjB,MAAM,CAACE,MAAP,CAAc,mBAAd,CAJC;AAKX6D,YAAAA,SAAS,EAAER,mBALA;AAMXS,YAAAA,QAAQ,EAAEX,oBANC;AAOXY,YAAAA,IAAI,EAAET,SAPK;AAQXI,YAAAA,SAAS,EAAEA;AARA,WAAf;AAUH;AACJ,OAhCD,MAgCO,IAAI,YAAYN,UAAhB,EAA4B;AAC/B,aAAKvD,gBAAL,GAAwBC,MAAM,CAAC4C,qBAAP,KAAiC;AACrDZ,UAAAA,IAAI,EAAEyB;AAD+C,SAAjC,GAEpB;AACAxB,UAAAA,GAAG,EAAEwB;AADL,SAFJ;AAKAhE,QAAAA,IAAI,CAAC2D,MAAD,EAAS,KAAKrD,gBAAd,CAAJ;AACH,OAPM,MAOA,IAAI,aAAauD,UAAjB,EAA6B;AAChC,aAAKvD,gBAAL,GAAwB;AACpBiC,UAAAA,IAAI,EAAE;AADc,SAAxB;AAGAvC,QAAAA,IAAI,CAAC4D,oBAAD,EAAuB,KAAKtD,gBAA5B,CAAJ;;AACA,YAAIC,MAAM,CAAC4C,qBAAP,EAAJ,EAAoC;AAChCpD,UAAAA,CAAC,CAAC6D,oBAAD,CAAD,CAAwBlB,GAAxB,CAA4B,OAA5B,EAAqCqB,SAArC;AACH,SAFD,MAEO;AACHhE,UAAAA,CAAC,CAAC6D,oBAAD,CAAD,CAAwBlB,GAAxB,CAA4B,QAA5B,EAAsCqB,SAAtC;;AACA,cAAI,aAAaD,mBAAjB,EAAsC;AAClC/D,YAAAA,CAAC,CAAC6D,oBAAD,CAAD,CAAwBlB,GAAxB,CAA4B,WAA5B,EAAyCyB,SAAzC;AACH;AACJ;AACJ;AACJ;;;WACD,2BAAkB;AACd,aAAOpE,CAAC,CAAC,KAAKS,iBAAL,GAAyB0C,UAAzB,GAAsCpC,OAAtC,EAAD,CAAR;AACH;;;WACD,+BAAsByD,QAAtB,EAAgC;AAC5B,UAAIE,MAAM,GAAG1E,CAAC,CAACwE,QAAD,CAAD,CAAYG,GAAZ,CAAgB,CAAhB,EAAmBC,KAAhC;AACA,UAAIC,MAAM,GAAGH,MAAM,CAACG,MAAP,IAAiB,CAA9B;AACA,WAAKpE,iBAAL,GAAyBqE,SAAzB,CAAmCD,MAAnC;AACH;;;WACD,4BAAmB1D,QAAnB,EAA6B;AACzB,aAAO,YAAYA,QAAZ,IAAwB,aAAaA,QAA5C;AACH;;;;EAtKyBpB,c;;AAwK9B,eAAeM,eAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.overlap.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    animation\r\n} from \"./ui.drawer.animation\";\r\nimport DrawerStrategy from \"./ui.drawer.rendering.strategy\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    move\r\n} from \"../../animation/translator\";\r\nimport Overlay from \"../overlay\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    camelize\r\n} from \"../../core/utils/inflector\";\r\nclass OverlapStrategy extends DrawerStrategy {\r\n    renderPanelContent(whenPanelContentRendered) {\r\n        delete this._initialPosition;\r\n        var drawer = this.getDrawerInstance();\r\n        var {\r\n            opened: opened,\r\n            minSize: minSize\r\n        } = drawer.option();\r\n        drawer._overlay = drawer._createComponent(drawer.content(), Overlay, {\r\n            shading: false,\r\n            container: drawer.getOverlayTarget(),\r\n            position: this._getOverlayPosition(),\r\n            width: opened ? \"auto\" : minSize || 0,\r\n            height: \"100%\",\r\n            templatesRenderAsynchronously: drawer.option(\"templatesRenderAsynchronously\"),\r\n            animation: {\r\n                show: {\r\n                    duration: 0\r\n                }\r\n            },\r\n            onPositioned: function(e) {\r\n                this._fixOverlayPosition(e.component.$content())\r\n            }.bind(this),\r\n            contentTemplate: drawer.option(\"template\"),\r\n            onContentReady: args => {\r\n                whenPanelContentRendered.resolve();\r\n                this._processOverlayZIndex(args.component.content())\r\n            },\r\n            visible: true,\r\n            propagateOutsideClick: true\r\n        })\r\n    }\r\n    _fixOverlayPosition($overlayContent) {\r\n        var position = ensureDefined(this._initialPosition, {\r\n            left: 0,\r\n            top: 0\r\n        });\r\n        move($overlayContent, position);\r\n        if (\"right\" === this.getDrawerInstance().calcTargetPosition()) {\r\n            $overlayContent.css(\"left\", \"auto\")\r\n        }\r\n        if (\"bottom\" === this.getDrawerInstance().calcTargetPosition()) {\r\n            $overlayContent.css(\"top\", \"auto\");\r\n            $overlayContent.css(\"bottom\", \"0px\")\r\n        }\r\n    }\r\n    _getOverlayPosition() {\r\n        var drawer = this.getDrawerInstance();\r\n        var panelPosition = drawer.calcTargetPosition();\r\n        var result = {};\r\n        switch (panelPosition) {\r\n            case \"left\":\r\n                result = {\r\n                    my: \"top left\",\r\n                    at: \"top left\"\r\n                };\r\n                break;\r\n            case \"right\":\r\n                result = {\r\n                    my: drawer.option(\"rtlEnabled\") ? \"top left\" : \"top right\",\r\n                    at: \"top right\"\r\n                };\r\n                break;\r\n            case \"top\":\r\n            case \"bottom\":\r\n                result = {\r\n                    my: panelPosition,\r\n                    at: panelPosition\r\n                }\r\n        }\r\n        result.of = drawer.getOverlayTarget();\r\n        return result\r\n    }\r\n    refreshPanelElementSize(calcFromRealPanelSize) {\r\n        var drawer = this.getDrawerInstance();\r\n        var overlay = drawer.getOverlay();\r\n        if (drawer.isHorizontalDirection()) {\r\n            overlay.option(\"height\", \"100%\");\r\n            overlay.option(\"width\", calcFromRealPanelSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option(\"opened\")))\r\n        } else {\r\n            overlay.option(\"width\", overlay.option(\"container\").width());\r\n            overlay.option(\"height\", calcFromRealPanelSize ? drawer.getRealPanelHeight() : this._getPanelSize(drawer.option(\"opened\")))\r\n        }\r\n    }\r\n    onPanelContentRendered() {\r\n        this._updateViewContentStyles()\r\n    }\r\n    _updateViewContentStyles() {\r\n        var drawer = this.getDrawerInstance();\r\n        $(drawer.viewContent()).css(\"padding\" + camelize(drawer.calcTargetPosition(), true), drawer.option(\"minSize\"));\r\n        $(drawer.viewContent()).css(\"transform\", \"inherit\")\r\n    }\r\n    _internalRenderPosition(changePositionUsingFxAnimation, whenAnimationCompleted) {\r\n        var drawer = this.getDrawerInstance();\r\n        var $panel = $(drawer.content());\r\n        var $panelOverlayContent = drawer.getOverlay().$content();\r\n        var revealMode = drawer.option(\"revealMode\");\r\n        var targetPanelPosition = drawer.calcTargetPosition();\r\n        var panelSize = this._getPanelSize(drawer.option(\"opened\"));\r\n        var panelOffset = this._getPanelOffset(drawer.option(\"opened\")) * drawer._getPositionCorrection();\r\n        var marginTop = drawer.getRealPanelHeight() - panelSize;\r\n        this._updateViewContentStyles();\r\n        if (changePositionUsingFxAnimation) {\r\n            if (\"slide\" === revealMode) {\r\n                this._initialPosition = drawer.isHorizontalDirection() ? {\r\n                    left: panelOffset\r\n                } : {\r\n                    top: panelOffset\r\n                };\r\n                animation.moveTo({\r\n                    complete: () => {\r\n                        whenAnimationCompleted.resolve()\r\n                    },\r\n                    duration: drawer.option(\"animationDuration\"),\r\n                    direction: targetPanelPosition,\r\n                    $element: $panel,\r\n                    position: panelOffset\r\n                })\r\n            } else if (\"expand\" === revealMode) {\r\n                this._initialPosition = {\r\n                    left: 0\r\n                };\r\n                move($panelOverlayContent, this._initialPosition);\r\n                animation.size({\r\n                    complete: () => {\r\n                        whenAnimationCompleted.resolve()\r\n                    },\r\n                    duration: drawer.option(\"animationDuration\"),\r\n                    direction: targetPanelPosition,\r\n                    $element: $panelOverlayContent,\r\n                    size: panelSize,\r\n                    marginTop: marginTop\r\n                })\r\n            }\r\n        } else if (\"slide\" === revealMode) {\r\n            this._initialPosition = drawer.isHorizontalDirection() ? {\r\n                left: panelOffset\r\n            } : {\r\n                top: panelOffset\r\n            };\r\n            move($panel, this._initialPosition)\r\n        } else if (\"expand\" === revealMode) {\r\n            this._initialPosition = {\r\n                left: 0\r\n            };\r\n            move($panelOverlayContent, this._initialPosition);\r\n            if (drawer.isHorizontalDirection()) {\r\n                $($panelOverlayContent).css(\"width\", panelSize)\r\n            } else {\r\n                $($panelOverlayContent).css(\"height\", panelSize);\r\n                if (\"bottom\" === targetPanelPosition) {\r\n                    $($panelOverlayContent).css(\"marginTop\", marginTop)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getPanelContent() {\r\n        return $(this.getDrawerInstance().getOverlay().content())\r\n    }\r\n    _processOverlayZIndex($element) {\r\n        var styles = $($element).get(0).style;\r\n        var zIndex = styles.zIndex || 1;\r\n        this.getDrawerInstance().setZIndex(zIndex)\r\n    }\r\n    isViewContentFirst(position) {\r\n        return \"right\" === position || \"bottom\" === position\r\n    }\r\n}\r\nexport default OverlapStrategy;\r\n"]},"metadata":{},"sourceType":"module"}