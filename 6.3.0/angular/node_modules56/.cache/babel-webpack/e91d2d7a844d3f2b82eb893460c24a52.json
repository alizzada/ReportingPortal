{"ast":null,"code":"import _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/appointmentFilter.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar HOUR_MS = toMs(\"hour\");\n\nvar AppointmentFilter = /*#__PURE__*/function () {\n  function AppointmentFilter(scheduler) {\n    _classCallCheck(this, AppointmentFilter);\n\n    this.scheduler = scheduler;\n  }\n\n  _createClass(AppointmentFilter, [{\n    key: \"filterStrategy\",\n    get: function get() {\n      return this.scheduler.isVirtualScrolling() ? new AppointmentFilterVirtualStrategy(this.scheduler) : new AppointmentFilterBaseStrategy(this.scheduler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      return this.filterStrategy.filter();\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments(appointments) {\n      return this.filterStrategy.hasAllDayAppointments(appointments);\n    }\n  }]);\n\n  return AppointmentFilter;\n}();\n\nexport { AppointmentFilter as default };\n\nvar AppointmentFilterBaseStrategy = /*#__PURE__*/function () {\n  function AppointmentFilterBaseStrategy(scheduler) {\n    _classCallCheck(this, AppointmentFilterBaseStrategy);\n\n    this.scheduler = scheduler;\n  }\n\n  _createClass(AppointmentFilterBaseStrategy, [{\n    key: \"workspace\",\n    get: function get() {\n      return this.scheduler.getWorkSpace();\n    }\n  }, {\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this.workspace.viewDataProvider;\n    }\n  }, {\n    key: \"resourcesManager\",\n    get: function get() {\n      return this.scheduler._resourcesManager;\n    }\n  }, {\n    key: \"appointmentModel\",\n    get: function get() {\n      return this.scheduler.getAppointmentModel();\n    }\n  }, {\n    key: \"timeZoneCalculator\",\n    get: function get() {\n      return this.scheduler.timeZoneCalculator;\n    }\n  }, {\n    key: \"viewStartDayHour\",\n    get: function get() {\n      return this.scheduler._getCurrentViewOption(\"startDayHour\");\n    }\n  }, {\n    key: \"viewEndDayHour\",\n    get: function get() {\n      return this.scheduler._getCurrentViewOption(\"endDayHour\");\n    }\n  }, {\n    key: \"firstDayOfWeek\",\n    get: function get() {\n      return this.scheduler.getFirstDayOfWeek();\n    }\n  }, {\n    key: \"recurrenceExceptionGenerator\",\n    get: function get() {\n      return this.scheduler._getRecurrenceException.bind(this.scheduler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      var dateRange = this.workspace.getDateRange();\n      var resources = this.resourcesManager.getResourcesData();\n      var allDay;\n\n      if (!this.scheduler.option(\"showAllDayPanel\") && this.workspace.supportAllDayRow()) {\n        allDay = false;\n      }\n\n      return this.appointmentModel.filterLoadedAppointments({\n        startDayHour: this.viewStartDayHour,\n        endDayHour: this.viewEndDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: dateRange[0],\n        max: dateRange[1],\n        resources: resources,\n        allDay: allDay,\n        firstDayOfWeek: this.firstDayOfWeek,\n        recurrenceException: this.recurrenceExceptionGenerator\n      }, this.timeZoneCalculator);\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments(appointments) {\n      return this.appointmentModel.hasAllDayAppointments(appointments, this.viewStartDayHour, this.viewEndDayHour);\n    }\n  }]);\n\n  return AppointmentFilterBaseStrategy;\n}();\n\nvar AppointmentFilterVirtualStrategy = /*#__PURE__*/function (_AppointmentFilterBas) {\n  _inherits(AppointmentFilterVirtualStrategy, _AppointmentFilterBas);\n\n  var _super = _createSuper(AppointmentFilterVirtualStrategy);\n\n  function AppointmentFilterVirtualStrategy(scheduler) {\n    _classCallCheck(this, AppointmentFilterVirtualStrategy);\n\n    return _super.call(this, scheduler);\n  }\n\n  _createClass(AppointmentFilterVirtualStrategy, [{\n    key: \"filter\",\n    value: function filter() {\n      var _this = this;\n\n      var isCalculateStartAndEndDayHour = this.workspace.isDateAndTimeView;\n      var checkIntersectViewport = this.workspace.isDateAndTimeView && \"horizontal\" === this.workspace.viewDirection;\n      var isAllDayWorkspace = !this.workspace.supportAllDayRow();\n      var showAllDayAppointments = this.scheduler.option(\"showAllDayPanel\") || isAllDayWorkspace;\n      var endViewDate = this.workspace.getEndViewDateByEndDayHour();\n      var filterOptions = [];\n      var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n      groupsInfo.forEach(function (item) {\n        var groupIndex = item.groupIndex;\n        var groupStartDate = item.startDate;\n        var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n        var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : _this.viewStartDayHour;\n        var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / HOUR_MS : _this.viewEndDayHour;\n\n        var resources = _this._getPrerenderFilterResources(groupIndex);\n\n        var allDayPanel = _this.viewDataProvider.getAllDayPanel(groupIndex);\n\n        var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\n        filterOptions.push({\n          isVirtualScrolling: true,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: _this.viewStartDayHour,\n          viewEndDayHour: _this.viewEndDayHour,\n          min: groupStartDate,\n          max: groupEndDate,\n          allDay: supportAllDayAppointment,\n          resources: resources,\n          firstDayOfWeek: _this.firstDayOfWeek,\n          recurrenceException: _this.recurrenceExceptionGenerator,\n          checkIntersectViewport: checkIntersectViewport\n        });\n      });\n      return this.appointmentModel.filterLoadedVirtualAppointments(filterOptions, this.timeZoneCalculator, this.workspace._getGroupCount());\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments() {\n      return this.appointmentModel.filterAllDayAppointments({\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour\n      }).length > 0;\n    }\n  }, {\n    key: \"_getPrerenderFilterResources\",\n    value: function _getPrerenderFilterResources(groupIndex) {\n      var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n      return this.resourcesManager.getResourcesDataByGroups([cellGroup]);\n    }\n  }]);\n\n  return AppointmentFilterVirtualStrategy;\n}(AppointmentFilterBaseStrategy);","map":null,"metadata":{},"sourceType":"module"}