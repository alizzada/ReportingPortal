{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { merge } from \"../../../core/utils/array\";\nimport BaseRenderingStrategy from \"./ui.scheduler.appointments.strategy.base\";\n\nvar AgendaRenderingStrategy = /*#__PURE__*/function (_BaseRenderingStrateg) {\n  _inherits(AgendaRenderingStrategy, _BaseRenderingStrateg);\n\n  var _super = _createSuper(AgendaRenderingStrategy);\n\n  function AgendaRenderingStrategy() {\n    _classCallCheck(this, AgendaRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AgendaRenderingStrategy, [{\n    key: \"getAppointmentMinSize\",\n    value: function getAppointmentMinSize() {}\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime() {}\n  }, {\n    key: \"keepAppointmentSettings\",\n    value: function keepAppointmentSettings() {\n      return true;\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(geometry) {\n      return geometry;\n    }\n  }, {\n    key: \"createTaskPositionMap\",\n    value: function createTaskPositionMap(appointments) {\n      var height;\n      var appointmentsByResources;\n\n      if (appointments.length) {\n        height = this.instance.fire(\"getAgendaVerticalStepHeight\");\n        appointmentsByResources = this.instance.fire(\"groupAppointmentsByResources\", appointments);\n        var groupedAppts = [];\n        each(appointmentsByResources, function (i, appts) {\n          var additionalAppointments = [];\n          var recurrentIndexes = [];\n          each(appts, function (index, appointment) {\n            var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\n\n            var appointmentBatch = null;\n\n            if (!recurrenceBatch.indexes.length) {\n              appointmentBatch = {\n                parts: []\n              };\n              appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\n              additionalAppointments = additionalAppointments.concat(appointmentBatch.parts);\n            }\n\n            additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\n            recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes);\n          }.bind(this));\n\n          this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\n\n          this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\n\n          groupedAppts = groupedAppts.concat(appts);\n        }.bind(this));\n        Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts));\n      }\n\n      var result = [];\n      var sortedIndex = 0;\n      appointments.forEach(function (appt, index) {\n        result.push([{\n          height: height,\n          width: \"100%\",\n          sortedIndex: sortedIndex++,\n          groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\n          agendaSettings: appt.settings\n        }]);\n        delete appt.settings;\n      }.bind(this));\n      return result;\n    }\n  }, {\n    key: \"_calculateGroupIndex\",\n    value: function _calculateGroupIndex(apptIndex, appointmentsByResources) {\n      var resultInd;\n      var counter = 0;\n\n      for (var i in appointmentsByResources) {\n        var countApptInGroup = appointmentsByResources[i].length;\n\n        if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\n          resultInd = Number(i);\n          break;\n        }\n\n        counter += countApptInGroup;\n      }\n\n      return resultInd;\n    }\n  }, {\n    key: \"_getDeltaWidth\",\n    value: function _getDeltaWidth() {}\n  }, {\n    key: \"_getAppointmentMaxWidth\",\n    value: function _getAppointmentMaxWidth() {\n      return this.getDefaultCellWidth();\n    }\n  }, {\n    key: \"_needVerifyItemSize\",\n    value: function _needVerifyItemSize() {\n      return false;\n    }\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this.instance.option(\"rtlEnabled\");\n    }\n  }, {\n    key: \"_getAppointmentParts\",\n    value: function _getAppointmentParts() {}\n  }, {\n    key: \"_reduceMultiWeekAppointment\",\n    value: function _reduceMultiWeekAppointment() {}\n  }, {\n    key: \"calculateAppointmentHeight\",\n    value: function calculateAppointmentHeight() {\n      return 0;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth() {\n      return 0;\n    }\n  }, {\n    key: \"isAppointmentGreaterThan\",\n    value: function isAppointmentGreaterThan() {}\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay() {\n      return false;\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition() {}\n  }, {\n    key: \"_rowCondition\",\n    value: function _rowCondition() {}\n  }, {\n    key: \"_columnCondition\",\n    value: function _columnCondition() {}\n  }, {\n    key: \"_findIndexByKey\",\n    value: function _findIndexByKey() {}\n  }, {\n    key: \"_markAppointmentAsVirtual\",\n    value: function _markAppointmentAsVirtual() {}\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth() {}\n  }, {\n    key: \"getDefaultCellWidth\",\n    value: function getDefaultCellWidth() {\n      return this._defaultWidth;\n    }\n  }, {\n    key: \"getCollectorLeftOffset\",\n    value: function getCollectorLeftOffset() {}\n  }, {\n    key: \"getCollectorTopOffset\",\n    value: function getCollectorTopOffset() {}\n  }, {\n    key: \"calculateRows\",\n    value: function calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\n      this._rows = [];\n      var groupedAppointments = this.instance.fire(\"groupAppointmentsByResources\", appointments);\n      currentDate = dateUtils.trimTime(new Date(currentDate));\n      each(groupedAppointments, function (groupIndex, currentAppointments) {\n        var groupResult = [];\n        var appts = {\n          indexes: [],\n          parts: []\n        };\n\n        if (!currentAppointments.length) {\n          this._rows.push([]);\n\n          return true;\n        }\n\n        each(currentAppointments, function (index, appointment) {\n          var startDate = this.instance.fire(\"getField\", \"startDate\", appointment);\n          var endDate = this.instance.fire(\"getField\", \"endDate\", appointment);\n          this.instance.fire(\"replaceWrongEndDate\", appointment, startDate, endDate);\n          needClearSettings && delete appointment.settings;\n\n          var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\n\n          appts.parts = appts.parts.concat(result.parts);\n          appts.indexes = appts.indexes.concat(result.indexes);\n        }.bind(this));\n\n        this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\n\n        merge(currentAppointments, appts.parts);\n        var appointmentCount = currentAppointments.length;\n\n        for (var i = 0; i < agendaDuration; i++) {\n          var day = new Date(currentDate);\n          day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\n\n          if (void 0 === groupResult[i]) {\n            groupResult[i] = 0;\n          }\n\n          for (var j = 0; j < appointmentCount; j++) {\n            var appointmentData = currentAppointments[j].settings || currentAppointments[j];\n            var appointmentIsLong = this.instance.fire(\"appointmentTakesSeveralDays\", currentAppointments[j]);\n            var appointmentIsRecurrence = this.instance.fire(\"getField\", \"recurrenceRule\", currentAppointments[j]);\n\n            if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\n              groupResult[i] += 1;\n            }\n          }\n        }\n\n        this._rows.push(groupResult);\n      }.bind(this));\n      return this._rows;\n    }\n  }, {\n    key: \"_iterateRow\",\n    value: function _iterateRow(row, obj, index) {\n      for (var i = 0; i < row.length; i++) {\n        obj.counter = obj.counter + row[i];\n\n        if (obj.counter >= index) {\n          obj.indexInRow = i;\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"getDateByIndex\",\n    value: function getDateByIndex(index, rows, startViewDate) {\n      var obj = {\n        counter: 0,\n        indexInRow: 0\n      };\n      index++;\n\n      for (var i = 0; i < rows.length; i++) {\n        this._iterateRow(rows[i], obj, index);\n\n        if (obj.indexInRow) {\n          break;\n        }\n      }\n\n      return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow));\n    }\n  }, {\n    key: \"getAppointmentDataCalculator\",\n    value: function getAppointmentDataCalculator() {\n      return function ($appointment, originalStartDate) {\n        var apptIndex = $appointment.index();\n        var startViewDate = this.instance.getStartViewDate();\n        var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\n        var wrappedOriginalStartDate = new Date(originalStartDate);\n        return {\n          startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\n        };\n      }.bind(this);\n    }\n  }]);\n\n  return AgendaRenderingStrategy;\n}(BaseRenderingStrategy);\n\nexport default AgendaRenderingStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js"],"names":["dateUtils","each","merge","BaseRenderingStrategy","AgendaRenderingStrategy","geometry","appointments","height","appointmentsByResources","length","instance","fire","groupedAppts","i","appts","additionalAppointments","recurrentIndexes","index","appointment","recurrenceBatch","getAppointmentsInstance","_processRecurrenceAppointment","appointmentBatch","indexes","parts","_processLongAppointment","concat","bind","_reduceRecurrenceAppointments","_combineAppointments","Array","prototype","splice","apply","result","sortedIndex","forEach","appt","push","width","groupIndex","_calculateGroupIndex","agendaSettings","settings","apptIndex","resultInd","counter","countApptInGroup","Number","getDefaultCellWidth","option","_defaultWidth","agendaDuration","currentDate","needClearSettings","_rows","groupedAppointments","trimTime","Date","currentAppointments","groupResult","startDate","endDate","appointmentCount","day","setMilliseconds","getMilliseconds","j","appointmentData","appointmentIsLong","appointmentIsRecurrence","row","obj","indexInRow","rows","startViewDate","_iterateRow","setDate","getDate","$appointment","originalStartDate","getStartViewDate","calculatedStartDate","getDateByIndex","wrappedOriginalStartDate","setHours","getHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.agenda.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    merge\r\n} from \"../../../core/utils/array\";\r\nimport BaseRenderingStrategy from \"./ui.scheduler.appointments.strategy.base\";\r\nclass AgendaRenderingStrategy extends BaseRenderingStrategy {\r\n    getAppointmentMinSize() {}\r\n    getDeltaTime() {}\r\n    keepAppointmentSettings() {\r\n        return true\r\n    }\r\n    getAppointmentGeometry(geometry) {\r\n        return geometry\r\n    }\r\n    createTaskPositionMap(appointments) {\r\n        var height;\r\n        var appointmentsByResources;\r\n        if (appointments.length) {\r\n            height = this.instance.fire(\"getAgendaVerticalStepHeight\");\r\n            appointmentsByResources = this.instance.fire(\"groupAppointmentsByResources\", appointments);\r\n            var groupedAppts = [];\r\n            each(appointmentsByResources, function(i, appts) {\r\n                var additionalAppointments = [];\r\n                var recurrentIndexes = [];\r\n                each(appts, function(index, appointment) {\r\n                    var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\r\n                    var appointmentBatch = null;\r\n                    if (!recurrenceBatch.indexes.length) {\r\n                        appointmentBatch = {\r\n                            parts: []\r\n                        };\r\n                        appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\r\n                        additionalAppointments = additionalAppointments.concat(appointmentBatch.parts)\r\n                    }\r\n                    additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\r\n                    recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes)\r\n                }.bind(this));\r\n                this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\r\n                this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\r\n                groupedAppts = groupedAppts.concat(appts)\r\n            }.bind(this));\r\n            Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts))\r\n        }\r\n        var result = [];\r\n        var sortedIndex = 0;\r\n        appointments.forEach(function(appt, index) {\r\n            result.push([{\r\n                height: height,\r\n                width: \"100%\",\r\n                sortedIndex: sortedIndex++,\r\n                groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\r\n                agendaSettings: appt.settings\r\n            }]);\r\n            delete appt.settings\r\n        }.bind(this));\r\n        return result\r\n    }\r\n    _calculateGroupIndex(apptIndex, appointmentsByResources) {\r\n        var resultInd;\r\n        var counter = 0;\r\n        for (var i in appointmentsByResources) {\r\n            var countApptInGroup = appointmentsByResources[i].length;\r\n            if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\r\n                resultInd = Number(i);\r\n                break\r\n            }\r\n            counter += countApptInGroup\r\n        }\r\n        return resultInd\r\n    }\r\n    _getDeltaWidth() {}\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth()\r\n    }\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    _isRtl() {\r\n        return this.instance.option(\"rtlEnabled\")\r\n    }\r\n    _getAppointmentParts() {}\r\n    _reduceMultiWeekAppointment() {}\r\n    calculateAppointmentHeight() {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth() {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan() {}\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    _sortCondition() {}\r\n    _rowCondition() {}\r\n    _columnCondition() {}\r\n    _findIndexByKey() {}\r\n    _markAppointmentAsVirtual() {}\r\n    getDropDownAppointmentWidth() {}\r\n    getDefaultCellWidth() {\r\n        return this._defaultWidth\r\n    }\r\n    getCollectorLeftOffset() {}\r\n    getCollectorTopOffset() {}\r\n    calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\r\n        this._rows = [];\r\n        var groupedAppointments = this.instance.fire(\"groupAppointmentsByResources\", appointments);\r\n        currentDate = dateUtils.trimTime(new Date(currentDate));\r\n        each(groupedAppointments, function(groupIndex, currentAppointments) {\r\n            var groupResult = [];\r\n            var appts = {\r\n                indexes: [],\r\n                parts: []\r\n            };\r\n            if (!currentAppointments.length) {\r\n                this._rows.push([]);\r\n                return true\r\n            }\r\n            each(currentAppointments, function(index, appointment) {\r\n                var startDate = this.instance.fire(\"getField\", \"startDate\", appointment);\r\n                var endDate = this.instance.fire(\"getField\", \"endDate\", appointment);\r\n                this.instance.fire(\"replaceWrongEndDate\", appointment, startDate, endDate);\r\n                needClearSettings && delete appointment.settings;\r\n                var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\r\n                appts.parts = appts.parts.concat(result.parts);\r\n                appts.indexes = appts.indexes.concat(result.indexes)\r\n            }.bind(this));\r\n            this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\r\n            merge(currentAppointments, appts.parts);\r\n            var appointmentCount = currentAppointments.length;\r\n            for (var i = 0; i < agendaDuration; i++) {\r\n                var day = new Date(currentDate);\r\n                day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\r\n                if (void 0 === groupResult[i]) {\r\n                    groupResult[i] = 0\r\n                }\r\n                for (var j = 0; j < appointmentCount; j++) {\r\n                    var appointmentData = currentAppointments[j].settings || currentAppointments[j];\r\n                    var appointmentIsLong = this.instance.fire(\"appointmentTakesSeveralDays\", currentAppointments[j]);\r\n                    var appointmentIsRecurrence = this.instance.fire(\"getField\", \"recurrenceRule\", currentAppointments[j]);\r\n                    if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\r\n                        groupResult[i] += 1\r\n                    }\r\n                }\r\n            }\r\n            this._rows.push(groupResult)\r\n        }.bind(this));\r\n        return this._rows\r\n    }\r\n    _iterateRow(row, obj, index) {\r\n        for (var i = 0; i < row.length; i++) {\r\n            obj.counter = obj.counter + row[i];\r\n            if (obj.counter >= index) {\r\n                obj.indexInRow = i;\r\n                break\r\n            }\r\n        }\r\n    }\r\n    getDateByIndex(index, rows, startViewDate) {\r\n        var obj = {\r\n            counter: 0,\r\n            indexInRow: 0\r\n        };\r\n        index++;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            this._iterateRow(rows[i], obj, index);\r\n            if (obj.indexInRow) {\r\n                break\r\n            }\r\n        }\r\n        return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow))\r\n    }\r\n    getAppointmentDataCalculator() {\r\n        return function($appointment, originalStartDate) {\r\n            var apptIndex = $appointment.index();\r\n            var startViewDate = this.instance.getStartViewDate();\r\n            var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\r\n            var wrappedOriginalStartDate = new Date(originalStartDate);\r\n            return {\r\n                startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\r\n            }\r\n        }.bind(this)\r\n    }\r\n}\r\nexport default AgendaRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}