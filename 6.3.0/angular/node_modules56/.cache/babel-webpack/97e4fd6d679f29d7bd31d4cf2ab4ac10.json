{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointmentPopup.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport devices from \"../../core/devices\";\nimport $ from \"../../core/renderer\";\nimport dateUtils from \"../../core/utils/date\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isEmptyObject } from \"../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport { triggerResizeEvent } from \"../../events/visibility_change\";\nimport messageLocalization from \"../../localization/message\";\nimport Popup from \"../popup\";\nimport { AppointmentForm } from \"./appointment_form\";\nimport { hide as hideLoading, show as showLoading } from \"./loading\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar WIDGET_CLASS = \"dx-scheduler\";\nvar APPOINTMENT_POPUP_CLASS = \"\".concat(WIDGET_CLASS, \"-appointment-popup\");\nvar APPOINTMENT_POPUP_WIDTH = 485;\nvar APPOINTMENT_POPUP_WIDTH_WITH_RECURRENCE = 970;\nvar APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH = 1e3;\nvar APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH_MOBILE = 500;\nvar APPOINTMENT_POPUP_WIDTH_MOBILE = 350;\nvar TOOLBAR_ITEM_AFTER_LOCATION = \"after\";\nvar TOOLBAR_ITEM_BEFORE_LOCATION = \"before\";\nvar DAY_IN_MS = toMs(\"day\");\n\nvar AppointmentPopup = /*#__PURE__*/function () {\n  function AppointmentPopup(scheduler) {\n    _classCallCheck(this, AppointmentPopup);\n\n    this.scheduler = scheduler;\n    this._popup = null;\n    this._appointmentForm = null;\n    this.state = {\n      lastEditData: null,\n      saveChangesLocker: false,\n      appointment: {\n        data: null,\n        isEmptyText: false,\n        isEmptyDescription: false\n      }\n    };\n  }\n\n  _createClass(AppointmentPopup, [{\n    key: \"show\",\n    value: function show() {\n      var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      var isDoneButtonVisible = arguments.length > 1 ? arguments[1] : void 0;\n\n      if (isEmptyObject(data)) {\n        var startDate = this.scheduler.option(\"currentDate\");\n        var endDate = new Date(startDate.getTime() + this.scheduler.option(\"cellDuration\") * toMs(\"minute\"));\n        this.scheduler.fire(\"setField\", \"startDate\", data, startDate);\n        this.scheduler.fire(\"setField\", \"endDate\", data, endDate);\n      }\n\n      this.state.appointment.data = data;\n\n      if (!this._popup) {\n        var popupConfig = this._createPopupConfig();\n\n        this._popup = this._createPopup(popupConfig);\n      }\n\n      this._popup.option(\"toolbarItems\", this._createPopupToolbarItems(isDoneButtonVisible));\n\n      this._popup.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._popup ? this._popup.option(\"visible\") : false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._$popup) {\n        this._popup.$element().remove();\n\n        this._$popup = null;\n      }\n    }\n  }, {\n    key: \"_createPopup\",\n    value: function _createPopup(options) {\n      var popupElement = $(\"<div>\").addClass(APPOINTMENT_POPUP_CLASS).appendTo(this.scheduler.$element());\n      return this.scheduler._createComponent(popupElement, Popup, options);\n    }\n  }, {\n    key: \"_createPopupConfig\",\n    value: function _createPopupConfig() {\n      var _this = this;\n\n      return {\n        height: \"auto\",\n        maxHeight: \"100%\",\n        showCloseButton: false,\n        showTitle: false,\n        onHiding: function onHiding() {\n          _this.scheduler.focus();\n        },\n        contentTemplate: function contentTemplate() {\n          return _this._createPopupContent();\n        },\n        onShowing: function onShowing(e) {\n          return _this._onShowing(e);\n        },\n        defaultOptionsRules: [{\n          device: function device() {\n            return devices.current().android;\n          },\n          options: {\n            showTitle: false\n          }\n        }]\n      };\n    }\n  }, {\n    key: \"_onShowing\",\n    value: function _onShowing(e) {\n      var _this2 = this;\n\n      this._updateForm();\n\n      var arg = {\n        form: this._appointmentForm,\n        popup: this._popup,\n        appointmentData: this.state.appointment.data,\n        cancel: false\n      };\n\n      this.scheduler._actions.onAppointmentFormOpening(arg);\n\n      this.scheduler._processActionResult(arg, function (canceled) {\n        if (canceled) {\n          e.cancel = true;\n        } else {\n          _this2.updatePopupFullScreenMode();\n        }\n      });\n    }\n  }, {\n    key: \"_createPopupContent\",\n    value: function _createPopupContent() {\n      var formElement = $(\"<div>\");\n      this._appointmentForm = this._createForm(formElement);\n      return formElement;\n    }\n  }, {\n    key: \"_createAppointmentFormData\",\n    value: function _createAppointmentFormData(rawAppointment) {\n      var appointment = this._createAppointmentAdapter(rawAppointment);\n\n      var result = extend(true, {\n        repeat: !!appointment.recurrenceRule\n      }, rawAppointment);\n      each(this.scheduler._resourcesManager.getResourcesFromItem(result, true) || {}, function (name, value) {\n        return result[name] = value;\n      });\n      return result;\n    }\n  }, {\n    key: \"_createForm\",\n    value: function _createForm(element) {\n      var expr = this.scheduler._dataAccessors.expr;\n      var resources = this.scheduler.option(\"resources\");\n\n      var allowTimeZoneEditing = this._getAllowTimeZoneEditing();\n\n      var rawAppointment = this.state.appointment.data;\n\n      var formData = this._createAppointmentFormData(rawAppointment);\n\n      var readOnly = this._isReadOnly(rawAppointment);\n\n      AppointmentForm.prepareAppointmentFormEditors(expr, this.scheduler, this.triggerResize.bind(this), this.changeSize.bind(this), formData, allowTimeZoneEditing, readOnly);\n\n      if (resources && resources.length) {\n        AppointmentForm.concatResources(this.scheduler._resourcesManager.getEditors());\n      }\n\n      return AppointmentForm.create(this.scheduler._createComponent.bind(this.scheduler), element, readOnly, formData);\n    }\n  }, {\n    key: \"_getAllowTimeZoneEditing\",\n    value: function _getAllowTimeZoneEditing() {\n      var scheduler = this.scheduler;\n      return scheduler.option(\"editing.allowTimeZoneEditing\") || scheduler.option(\"editing.allowEditingTimeZones\");\n    }\n  }, {\n    key: \"_isReadOnly\",\n    value: function _isReadOnly(rawAppointment) {\n      var adapter = this.scheduler.createAppointmentAdapter(rawAppointment);\n\n      if (rawAppointment && adapter.disabled) {\n        return true;\n      }\n\n      return this.scheduler._editAppointmentData ? !this.scheduler._editing.allowUpdating : false;\n    }\n  }, {\n    key: \"_createAppointmentAdapter\",\n    value: function _createAppointmentAdapter(rawAppointment) {\n      return this.scheduler.createAppointmentAdapter(rawAppointment);\n    }\n  }, {\n    key: \"_updateForm\",\n    value: function _updateForm() {\n      var data = this.state.appointment.data;\n\n      var adapter = this._createAppointmentAdapter(data);\n\n      var allDay = adapter.allDay;\n      var startDate = adapter.startDate && adapter.calculateStartDate(\"toAppointment\");\n      var endDate = adapter.endDate && adapter.calculateEndDate(\"toAppointment\");\n      this.state.appointment.isEmptyText = void 0 === data || void 0 === adapter.text;\n      this.state.appointment.isEmptyDescription = void 0 === data || void 0 === adapter.description;\n\n      var appointment = this._createAppointmentAdapter(this._createAppointmentFormData(data));\n\n      if (void 0 === appointment.text) {\n        appointment.text = \"\";\n      }\n\n      if (void 0 === appointment.description) {\n        appointment.description = \"\";\n      }\n\n      if (void 0 === appointment.recurrenceRule) {\n        appointment.recurrenceRule = \"\";\n      }\n\n      var formData = appointment.source();\n\n      if (startDate) {\n        this.scheduler.fire(\"setField\", \"startDate\", formData, startDate);\n      }\n\n      if (endDate) {\n        this.scheduler.fire(\"setField\", \"endDate\", formData, endDate);\n      }\n\n      var _this$scheduler$_data = this.scheduler._dataAccessors.expr,\n          startDateExpr = _this$scheduler$_data.startDateExpr,\n          endDateExpr = _this$scheduler$_data.endDateExpr;\n\n      this._appointmentForm.option(\"readOnly\", this._isReadOnly(data));\n\n      AppointmentForm.updateFormData(this._appointmentForm, formData, this.scheduler._dataAccessors.expr);\n      AppointmentForm.setEditorsType(this._appointmentForm, startDateExpr, endDateExpr, allDay);\n    }\n  }, {\n    key: \"_isDeviceMobile\",\n    value: function _isDeviceMobile() {\n      return \"desktop\" !== devices.current().deviceType;\n    }\n  }, {\n    key: \"_isPopupFullScreenNeeded\",\n    value: function _isPopupFullScreenNeeded() {\n      var width = this._tryGetWindowWidth();\n\n      if (width) {\n        return this._isDeviceMobile() ? width < APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH_MOBILE : width < APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_tryGetWindowWidth\",\n    value: function _tryGetWindowWidth() {\n      if (hasWindow()) {\n        var window = getWindow();\n        return $(window).width();\n      }\n    }\n  }, {\n    key: \"triggerResize\",\n    value: function triggerResize() {\n      this._popup && triggerResizeEvent(this._popup.$element());\n    }\n  }, {\n    key: \"_getMaxWidth\",\n    value: function _getMaxWidth(isRecurrence) {\n      if (this._isDeviceMobile()) {\n        return APPOINTMENT_POPUP_WIDTH_MOBILE;\n      }\n\n      return isRecurrence ? APPOINTMENT_POPUP_WIDTH_WITH_RECURRENCE : APPOINTMENT_POPUP_WIDTH;\n    }\n  }, {\n    key: \"changeSize\",\n    value: function changeSize(isRecurrence) {\n      var isFullScreen = this._isPopupFullScreenNeeded();\n\n      this._popup.option({\n        maxWidth: isFullScreen ? \"100%\" : this._getMaxWidth(isRecurrence),\n        fullScreen: isFullScreen\n      });\n    }\n  }, {\n    key: \"updatePopupFullScreenMode\",\n    value: function updatePopupFullScreenMode() {\n      if (!this._appointmentForm) {\n        return;\n      }\n\n      var isRecurrence = AppointmentForm.getRecurrenceRule(this._appointmentForm.option(\"formData\"), this.scheduler._dataAccessors.expr);\n\n      if (this.isVisible()) {\n        this.changeSize(isRecurrence);\n      }\n    }\n  }, {\n    key: \"_createPopupToolbarItems\",\n    value: function _createPopupToolbarItems(isDoneButtonVisible) {\n      var _this3 = this;\n\n      var result = [];\n      var isIOs = \"ios\" === devices.current().platform;\n\n      if (isDoneButtonVisible) {\n        result.push({\n          shortcut: \"done\",\n          options: {\n            text: messageLocalization.format(\"Done\")\n          },\n          location: TOOLBAR_ITEM_AFTER_LOCATION,\n          onClick: function onClick(e) {\n            return _this3._doneButtonClickHandler(e);\n          }\n        });\n      }\n\n      result.push({\n        shortcut: \"cancel\",\n        location: isIOs ? TOOLBAR_ITEM_BEFORE_LOCATION : TOOLBAR_ITEM_AFTER_LOCATION\n      });\n      return result;\n    }\n  }, {\n    key: \"saveChanges\",\n    value: function saveChanges(showLoadPanel) {\n      var _this4 = this;\n\n      var deferred = new Deferred();\n\n      var validation = this._appointmentForm.validate();\n\n      var state = this.state.appointment;\n      showLoadPanel && this._showLoadPanel();\n      when(validation && validation.complete || validation).done(function (validation) {\n        if (validation && !validation.isValid) {\n          _this4._hideLoadPanel();\n\n          deferred.resolve(false);\n          return;\n        }\n\n        var formData = _this4._appointmentForm.option(\"formData\");\n\n        var adapter = _this4.scheduler.createAppointmentAdapter(formData);\n\n        var appointment = adapter.clone({\n          pathTimeZone: \"fromAppointment\"\n        }).source();\n        var oldData = _this4.scheduler._editAppointmentData;\n        var recData = _this4.scheduler._updatedRecAppointment;\n\n        if (state.isEmptyText && \"\" === adapter.text) {\n          delete appointment.text;\n        }\n\n        if (state.isEmptyDescription && \"\" === adapter.description) {\n          delete appointment.description;\n        }\n\n        if (void 0 === state.data.recurrenceRule && \"\" === adapter.recurrenceRule) {\n          delete appointment.recurrenceRule;\n        }\n\n        if (isDefined(appointment.repeat)) {\n          delete appointment.repeat;\n        }\n\n        if (oldData && !recData) {\n          _this4.scheduler.updateAppointment(oldData, appointment).done(deferred.resolve);\n        } else {\n          if (recData) {\n            _this4.scheduler.updateAppointment(oldData, recData);\n\n            delete _this4.scheduler._updatedRecAppointment;\n          }\n\n          _this4.scheduler.addAppointment(appointment).done(deferred.resolve);\n        }\n\n        deferred.done(function () {\n          _this4._hideLoadPanel();\n\n          _this4.state.lastEditData = appointment;\n        });\n      });\n      return deferred.promise();\n    }\n  }, {\n    key: \"_doneButtonClickHandler\",\n    value: function _doneButtonClickHandler(e) {\n      e.cancel = true;\n      this.saveEditData();\n    }\n  }, {\n    key: \"saveEditData\",\n    value: function saveEditData() {\n      var _this5 = this;\n\n      var deferred = new Deferred();\n\n      if (this._tryLockSaveChanges()) {\n        when(this.saveChanges(true)).done(function () {\n          if (_this5.state.lastEditData) {\n            var adapter = _this5.scheduler.createAppointmentAdapter(_this5.state.lastEditData);\n\n            var startDate = adapter.startDate,\n                endDate = adapter.endDate,\n                allDay = adapter.allDay;\n            var startTime = startDate.getTime();\n            var endTime = endDate.getTime();\n            var inAllDayRow = allDay || endTime - startTime >= DAY_IN_MS;\n\n            _this5.scheduler._workSpace.updateScrollPosition(startDate, _this5.scheduler._resourcesManager.getResourcesFromItem(_this5.state.lastEditData, true), inAllDayRow);\n\n            _this5.state.lastEditData = null;\n          }\n\n          _this5._unlockSaveChanges();\n\n          deferred.resolve();\n        });\n      }\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"_hideLoadPanel\",\n    value: function _hideLoadPanel() {\n      hideLoading();\n    }\n  }, {\n    key: \"_showLoadPanel\",\n    value: function _showLoadPanel() {\n      var $overlayContent = this._popup.$overlayContent();\n\n      showLoading({\n        container: $overlayContent,\n        position: {\n          of: $overlayContent\n        }\n      });\n    }\n  }, {\n    key: \"_tryLockSaveChanges\",\n    value: function _tryLockSaveChanges() {\n      if (false === this.state.saveChangesLocker) {\n        this.state.saveChangesLocker = true;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_unlockSaveChanges\",\n    value: function _unlockSaveChanges() {\n      this.state.saveChangesLocker = false;\n    }\n  }]);\n\n  return AppointmentPopup;\n}();\n\nexport { AppointmentPopup as default };","map":null,"metadata":{},"sourceType":"module"}