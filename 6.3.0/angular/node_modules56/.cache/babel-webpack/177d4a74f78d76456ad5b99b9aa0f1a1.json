{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/polar_chart.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../core/utils/common\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { normalizeAngle, convertPolarToXY } from \"./core/utils\";\nimport { AdvancedChart } from \"./chart_components/advanced_chart\";\nimport { isDefined } from \"../core/utils/type\";\nvar DEFAULT_PANE_NAME = \"default\";\nvar DOUBLE_PI_ANGLE = 360;\nvar dxPolarChart = AdvancedChart.inherit({\n  _themeSection: \"polar\",\n  _createPanes: function _createPanes() {\n    this.callBase();\n    return [{\n      name: DEFAULT_PANE_NAME\n    }];\n  },\n  _checkPaneName: function _checkPaneName() {\n    return true;\n  },\n  _getAxisRenderingOptions: function _getAxisRenderingOptions(typeSelector) {\n    var isArgumentAxis = \"argumentAxis\" === typeSelector;\n    var type = isArgumentAxis ? \"circular\" : \"linear\";\n    var useSpiderWeb = this.option(\"useSpiderWeb\");\n\n    if (useSpiderWeb) {\n      type += \"Spider\";\n    }\n\n    return {\n      axisType: \"polarAxes\",\n      drawingType: type\n    };\n  },\n  _prepareAxisOptions: function _prepareAxisOptions(typeSelector, axisOptions) {\n    var isArgumentAxis = \"argumentAxis\" === typeSelector;\n    var themeManager = this._themeManager;\n    var axisUserOptions = this.option(\"argumentAxis\");\n    var argumentAxisOptions = themeManager.getOptions(\"argumentAxis\", axisUserOptions) || {};\n    var startAngle = isFinite(argumentAxisOptions.startAngle) ? normalizeAngle(argumentAxisOptions.startAngle) : 0;\n    return {\n      type: this.option(\"useSpiderWeb\") && isArgumentAxis ? \"discrete\" : axisOptions.type,\n      isHorizontal: true,\n      showCustomBoundaryTicks: isArgumentAxis,\n      startAngle: startAngle,\n      endAngle: startAngle + 360\n    };\n  },\n  _optionChangesMap: {\n    useSpiderWeb: \"AXES_AND_PANES\"\n  },\n  _getExtraOptions: function _getExtraOptions() {\n    return {\n      spiderWidget: this.option(\"useSpiderWeb\")\n    };\n  },\n  _prepareToRender: function _prepareToRender() {\n    this._appendAxesGroups();\n\n    return {};\n  },\n  _calcCanvas: function _calcCanvas() {\n    var canvas = extend({}, this._canvas);\n    var argumentAxis = this.getArgumentAxis();\n    var margins = argumentAxis.getMargins();\n    Object.keys(margins).forEach(function (margin) {\n      return canvas[margin] = canvas[\"original\".concat(margin[0].toUpperCase()).concat(margin.slice(1))] + margins[margin];\n    });\n    return canvas;\n  },\n  _renderAxes: function _renderAxes(drawOptions) {\n    var valueAxis = this._getValueAxis();\n\n    var argumentAxis = this.getArgumentAxis();\n    argumentAxis.draw(this._canvas);\n    valueAxis.setSpiderTicks(argumentAxis.getSpiderTicks());\n\n    var canvas = this._calcCanvas();\n\n    argumentAxis.updateSize(canvas);\n    valueAxis.draw(canvas);\n    return canvas;\n  },\n  _getValueAxis: function _getValueAxis() {\n    return this._valueAxes[0];\n  },\n  _shrinkAxes: function _shrinkAxes(sizeStorage) {\n    var valueAxis = this._getValueAxis();\n\n    var argumentAxis = this.getArgumentAxis();\n\n    if (sizeStorage && (sizeStorage.width || sizeStorage.height)) {\n      argumentAxis.hideOuterElements();\n\n      var canvas = this._calcCanvas();\n\n      argumentAxis.updateSize(canvas);\n      valueAxis.updateSize(canvas);\n    }\n  },\n  checkForMoreSpaceForPanesCanvas: function checkForMoreSpaceForPanesCanvas() {\n    return this.layoutManager.needMoreSpaceForPanesCanvas([{\n      canvas: this.getArgumentAxis().getCanvas()\n    }], this._isRotated());\n  },\n  _getLayoutTargets: function _getLayoutTargets() {\n    return [{\n      canvas: this._canvas\n    }];\n  },\n  _getSeriesForPane: function _getSeriesForPane() {\n    return this.series;\n  },\n  _applyClipRects: function _applyClipRects() {\n    var canvasClipRectID = this._getCanvasClipRectID();\n\n    this._createClipPathForPane();\n\n    this.getArgumentAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID);\n\n    this._getValueAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID);\n  },\n  _createClipPathForPane: function _createClipPathForPane() {\n    var valueAxis = this._getValueAxis();\n\n    var center = valueAxis.getCenter();\n    var radius = valueAxis.getRadius();\n    var panesClipRects = this._panesClipRects;\n    center = {\n      x: Math.round(center.x),\n      y: Math.round(center.y)\n    };\n\n    this._createClipCircle(panesClipRects.fixed, center.x, center.y, radius);\n\n    this._createClipCircle(panesClipRects.base, center.x, center.y, radius);\n\n    if (this.series.some(function (s) {\n      return s.areErrorBarsVisible();\n    })) {\n      this._createClipCircle(panesClipRects.wide, center.x, center.y, radius);\n    } else {\n      panesClipRects.wide[0] = null;\n    }\n  },\n  _createClipCircle: function _createClipCircle(clipArray, left, top, radius) {\n    var clipCircle = clipArray[0];\n\n    if (!clipCircle) {\n      clipCircle = this._renderer.clipCircle(left, top, radius);\n      clipArray[0] = clipCircle;\n    } else {\n      clipCircle.attr({\n        cx: left,\n        cy: top,\n        r: radius\n      });\n    }\n  },\n  _applyExtraSettings: function _applyExtraSettings(series) {\n    var wideClipRect = this._panesClipRects.wide[0];\n    series.setClippingParams(this._panesClipRects.base[0].id, wideClipRect && wideClipRect.id, false, false);\n  },\n  getActualAngle: function getActualAngle(angle) {\n    return this.getArgumentAxis().getOptions().inverted ? DOUBLE_PI_ANGLE - angle : angle;\n  },\n  getXYFromPolar: function getXYFromPolar(angle, radius, argument, value) {\n    var layoutInfo = {\n      angle: void 0,\n      radius: void 0,\n      x: void 0,\n      y: void 0\n    };\n\n    if (!isDefined(angle) && !isDefined(radius) && !isDefined(argument) && !isDefined(value)) {\n      return layoutInfo;\n    }\n\n    var argAxis = this.getArgumentAxis();\n    var startAngle = argAxis.getAngles()[0];\n    var argAngle;\n    var translatedRadius;\n\n    if (isDefined(argument)) {\n      argAngle = argAxis.getTranslator().translate(argument);\n    } else if (isFinite(angle)) {\n      argAngle = this.getActualAngle(angle);\n    } else if (!isDefined(angle)) {\n      argAngle = 0;\n    }\n\n    if (isDefined(value)) {\n      translatedRadius = this.getValueAxis().getTranslator().translate(value);\n    } else if (isFinite(radius)) {\n      translatedRadius = radius;\n    } else if (!isDefined(radius)) {\n      translatedRadius = argAxis.getRadius();\n    }\n\n    if (isDefined(argAngle) && isDefined(translatedRadius)) {\n      var coords = convertPolarToXY(argAxis.getCenter(), startAngle, argAngle, translatedRadius);\n      extend(layoutInfo, coords, {\n        angle: argAxis.getTranslatedAngle(argAngle),\n        radius: translatedRadius\n      });\n    }\n\n    return layoutInfo;\n  },\n  _applyPointMarkersAutoHiding: noop,\n  _createScrollBar: noop,\n  _isRotated: noop,\n  _getCrosshairOptions: noop,\n  _isLegendInside: noop\n});\nimport { plugins } from \"./core/annotations\";\ndxPolarChart.addPlugin(plugins.core);\ndxPolarChart.addPlugin(plugins.polarChart);\nregisterComponent(\"dxPolarChart\", dxPolarChart);\nexport default dxPolarChart;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/viz/polar_chart.js"],"names":["noop","registerComponent","extend","normalizeAngle","convertPolarToXY","AdvancedChart","isDefined","DEFAULT_PANE_NAME","DOUBLE_PI_ANGLE","dxPolarChart","inherit","_themeSection","_createPanes","callBase","name","_checkPaneName","_getAxisRenderingOptions","typeSelector","isArgumentAxis","type","useSpiderWeb","option","axisType","drawingType","_prepareAxisOptions","axisOptions","themeManager","_themeManager","axisUserOptions","argumentAxisOptions","getOptions","startAngle","isFinite","isHorizontal","showCustomBoundaryTicks","endAngle","_optionChangesMap","_getExtraOptions","spiderWidget","_prepareToRender","_appendAxesGroups","_calcCanvas","canvas","_canvas","argumentAxis","getArgumentAxis","margins","getMargins","Object","keys","forEach","margin","concat","toUpperCase","slice","_renderAxes","drawOptions","valueAxis","_getValueAxis","draw","setSpiderTicks","getSpiderTicks","updateSize","_valueAxes","_shrinkAxes","sizeStorage","width","height","hideOuterElements","checkForMoreSpaceForPanesCanvas","layoutManager","needMoreSpaceForPanesCanvas","getCanvas","_isRotated","_getLayoutTargets","_getSeriesForPane","series","_applyClipRects","canvasClipRectID","_getCanvasClipRectID","_createClipPathForPane","applyClipRects","_getElementsClipRectID","center","getCenter","radius","getRadius","panesClipRects","_panesClipRects","x","Math","round","y","_createClipCircle","fixed","base","some","s","areErrorBarsVisible","wide","clipArray","left","top","clipCircle","_renderer","attr","cx","cy","r","_applyExtraSettings","wideClipRect","setClippingParams","id","getActualAngle","angle","inverted","getXYFromPolar","argument","value","layoutInfo","argAxis","getAngles","argAngle","translatedRadius","getTranslator","translate","getValueAxis","coords","getTranslatedAngle","_applyPointMarkersAutoHiding","_createScrollBar","_getCrosshairOptions","_isLegendInside","plugins","addPlugin","core","polarChart"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/polar_chart.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    noop\r\n} from \"../core/utils/common\";\r\nimport registerComponent from \"../core/component_registrator\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport {\r\n    normalizeAngle,\r\n    convertPolarToXY\r\n} from \"./core/utils\";\r\nimport {\r\n    AdvancedChart\r\n} from \"./chart_components/advanced_chart\";\r\nimport {\r\n    isDefined\r\n} from \"../core/utils/type\";\r\nvar DEFAULT_PANE_NAME = \"default\";\r\nvar DOUBLE_PI_ANGLE = 360;\r\nvar dxPolarChart = AdvancedChart.inherit({\r\n    _themeSection: \"polar\",\r\n    _createPanes: function() {\r\n        this.callBase();\r\n        return [{\r\n            name: DEFAULT_PANE_NAME\r\n        }]\r\n    },\r\n    _checkPaneName: function() {\r\n        return true\r\n    },\r\n    _getAxisRenderingOptions: function(typeSelector) {\r\n        var isArgumentAxis = \"argumentAxis\" === typeSelector;\r\n        var type = isArgumentAxis ? \"circular\" : \"linear\";\r\n        var useSpiderWeb = this.option(\"useSpiderWeb\");\r\n        if (useSpiderWeb) {\r\n            type += \"Spider\"\r\n        }\r\n        return {\r\n            axisType: \"polarAxes\",\r\n            drawingType: type\r\n        }\r\n    },\r\n    _prepareAxisOptions: function(typeSelector, axisOptions) {\r\n        var isArgumentAxis = \"argumentAxis\" === typeSelector;\r\n        var themeManager = this._themeManager;\r\n        var axisUserOptions = this.option(\"argumentAxis\");\r\n        var argumentAxisOptions = themeManager.getOptions(\"argumentAxis\", axisUserOptions) || {};\r\n        var startAngle = isFinite(argumentAxisOptions.startAngle) ? normalizeAngle(argumentAxisOptions.startAngle) : 0;\r\n        return {\r\n            type: this.option(\"useSpiderWeb\") && isArgumentAxis ? \"discrete\" : axisOptions.type,\r\n            isHorizontal: true,\r\n            showCustomBoundaryTicks: isArgumentAxis,\r\n            startAngle: startAngle,\r\n            endAngle: startAngle + 360\r\n        }\r\n    },\r\n    _optionChangesMap: {\r\n        useSpiderWeb: \"AXES_AND_PANES\"\r\n    },\r\n    _getExtraOptions: function() {\r\n        return {\r\n            spiderWidget: this.option(\"useSpiderWeb\")\r\n        }\r\n    },\r\n    _prepareToRender: function() {\r\n        this._appendAxesGroups();\r\n        return {}\r\n    },\r\n    _calcCanvas: function() {\r\n        var canvas = extend({}, this._canvas);\r\n        var argumentAxis = this.getArgumentAxis();\r\n        var margins = argumentAxis.getMargins();\r\n        Object.keys(margins).forEach(margin => canvas[margin] = canvas[\"original\".concat(margin[0].toUpperCase()).concat(margin.slice(1))] + margins[margin]);\r\n        return canvas\r\n    },\r\n    _renderAxes: function(drawOptions) {\r\n        var valueAxis = this._getValueAxis();\r\n        var argumentAxis = this.getArgumentAxis();\r\n        argumentAxis.draw(this._canvas);\r\n        valueAxis.setSpiderTicks(argumentAxis.getSpiderTicks());\r\n        var canvas = this._calcCanvas();\r\n        argumentAxis.updateSize(canvas);\r\n        valueAxis.draw(canvas);\r\n        return canvas\r\n    },\r\n    _getValueAxis: function() {\r\n        return this._valueAxes[0]\r\n    },\r\n    _shrinkAxes: function(sizeStorage) {\r\n        var valueAxis = this._getValueAxis();\r\n        var argumentAxis = this.getArgumentAxis();\r\n        if (sizeStorage && (sizeStorage.width || sizeStorage.height)) {\r\n            argumentAxis.hideOuterElements();\r\n            var canvas = this._calcCanvas();\r\n            argumentAxis.updateSize(canvas);\r\n            valueAxis.updateSize(canvas)\r\n        }\r\n    },\r\n    checkForMoreSpaceForPanesCanvas() {\r\n        return this.layoutManager.needMoreSpaceForPanesCanvas([{\r\n            canvas: this.getArgumentAxis().getCanvas()\r\n        }], this._isRotated())\r\n    },\r\n    _getLayoutTargets: function() {\r\n        return [{\r\n            canvas: this._canvas\r\n        }]\r\n    },\r\n    _getSeriesForPane: function() {\r\n        return this.series\r\n    },\r\n    _applyClipRects() {\r\n        var canvasClipRectID = this._getCanvasClipRectID();\r\n        this._createClipPathForPane();\r\n        this.getArgumentAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID);\r\n        this._getValueAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID)\r\n    },\r\n    _createClipPathForPane() {\r\n        var valueAxis = this._getValueAxis();\r\n        var center = valueAxis.getCenter();\r\n        var radius = valueAxis.getRadius();\r\n        var panesClipRects = this._panesClipRects;\r\n        center = {\r\n            x: Math.round(center.x),\r\n            y: Math.round(center.y)\r\n        };\r\n        this._createClipCircle(panesClipRects.fixed, center.x, center.y, radius);\r\n        this._createClipCircle(panesClipRects.base, center.x, center.y, radius);\r\n        if (this.series.some(s => s.areErrorBarsVisible())) {\r\n            this._createClipCircle(panesClipRects.wide, center.x, center.y, radius)\r\n        } else {\r\n            panesClipRects.wide[0] = null\r\n        }\r\n    },\r\n    _createClipCircle(clipArray, left, top, radius) {\r\n        var clipCircle = clipArray[0];\r\n        if (!clipCircle) {\r\n            clipCircle = this._renderer.clipCircle(left, top, radius);\r\n            clipArray[0] = clipCircle\r\n        } else {\r\n            clipCircle.attr({\r\n                cx: left,\r\n                cy: top,\r\n                r: radius\r\n            })\r\n        }\r\n    },\r\n    _applyExtraSettings(series) {\r\n        var wideClipRect = this._panesClipRects.wide[0];\r\n        series.setClippingParams(this._panesClipRects.base[0].id, wideClipRect && wideClipRect.id, false, false)\r\n    },\r\n    getActualAngle(angle) {\r\n        return this.getArgumentAxis().getOptions().inverted ? DOUBLE_PI_ANGLE - angle : angle\r\n    },\r\n    getXYFromPolar(angle, radius, argument, value) {\r\n        var layoutInfo = {\r\n            angle: void 0,\r\n            radius: void 0,\r\n            x: void 0,\r\n            y: void 0\r\n        };\r\n        if (!isDefined(angle) && !isDefined(radius) && !isDefined(argument) && !isDefined(value)) {\r\n            return layoutInfo\r\n        }\r\n        var argAxis = this.getArgumentAxis();\r\n        var startAngle = argAxis.getAngles()[0];\r\n        var argAngle;\r\n        var translatedRadius;\r\n        if (isDefined(argument)) {\r\n            argAngle = argAxis.getTranslator().translate(argument)\r\n        } else if (isFinite(angle)) {\r\n            argAngle = this.getActualAngle(angle)\r\n        } else if (!isDefined(angle)) {\r\n            argAngle = 0\r\n        }\r\n        if (isDefined(value)) {\r\n            translatedRadius = this.getValueAxis().getTranslator().translate(value)\r\n        } else if (isFinite(radius)) {\r\n            translatedRadius = radius\r\n        } else if (!isDefined(radius)) {\r\n            translatedRadius = argAxis.getRadius()\r\n        }\r\n        if (isDefined(argAngle) && isDefined(translatedRadius)) {\r\n            var coords = convertPolarToXY(argAxis.getCenter(), startAngle, argAngle, translatedRadius);\r\n            extend(layoutInfo, coords, {\r\n                angle: argAxis.getTranslatedAngle(argAngle),\r\n                radius: translatedRadius\r\n            })\r\n        }\r\n        return layoutInfo\r\n    },\r\n    _applyPointMarkersAutoHiding: noop,\r\n    _createScrollBar: noop,\r\n    _isRotated: noop,\r\n    _getCrosshairOptions: noop,\r\n    _isLegendInside: noop\r\n});\r\nimport {\r\n    plugins\r\n} from \"./core/annotations\";\r\ndxPolarChart.addPlugin(plugins.core);\r\ndxPolarChart.addPlugin(plugins.polarChart);\r\nregisterComponent(\"dxPolarChart\", dxPolarChart);\r\nexport default dxPolarChart;\r\n"]},"metadata":{},"sourceType":"module"}