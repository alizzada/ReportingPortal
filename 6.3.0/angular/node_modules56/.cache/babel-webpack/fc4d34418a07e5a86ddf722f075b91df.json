{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar tableCreator = tableCreatorModule.tableCreator;\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS } from \"../constants\";\nimport timeZoneUtils from \"../utils.timeZone\";\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar HORIZONTAL = \"horizontal\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_HEADER_MARGIN = 10;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerTimeline = /*#__PURE__*/function (_SchedulerWorkSpace) {\n  _inherits(SchedulerTimeline, _SchedulerWorkSpace);\n\n  var _super = _createSuper(SchedulerTimeline);\n\n  function SchedulerTimeline() {\n    _classCallCheck(this, SchedulerTimeline);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerTimeline, [{\n    key: \"verticalGroupTableClass\",\n    get: function get() {\n      return GROUP_TABLE_CLASS;\n    }\n  }, {\n    key: \"viewDirection\",\n    get: function get() {\n      return \"horizontal\";\n    }\n  }, {\n    key: \"renovatedHeaderPanelComponent\",\n    get: function get() {\n      return dxrTimelineDateHeader;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_init\", this).call(this);\n\n      this.$element().addClass(TIMELINE_CLASS);\n      this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS);\n    }\n  }, {\n    key: \"_getCellFromNextRow\",\n    value: function _getCellFromNextRow(direction, isMultiSelection) {\n      if (!isMultiSelection) {\n        return _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_getCellFromNextRow\", this).call(this, direction, isMultiSelection);\n      }\n\n      return this._$focusedCell;\n    }\n  }, {\n    key: \"_getDefaultGroupStrategy\",\n    value: function _getDefaultGroupStrategy() {\n      return \"vertical\";\n    }\n  }, {\n    key: \"_toggleGroupingDirectionClass\",\n    value: function _toggleGroupingDirectionClass() {\n      this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace());\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerTimeline.prototype), \"_getDefaultOptions\", this).call(this), {\n        groupOrientation: \"vertical\"\n      });\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return 1;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return this._getCellCountInDay() * this.option(\"intervalCount\");\n    }\n  }, {\n    key: \"getGroupTableWidth\",\n    value: function getGroupTableWidth() {\n      return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0;\n    }\n  }, {\n    key: \"_getTotalRowCount\",\n    value: function _getTotalRowCount(groupCount) {\n      if (this._isHorizontalGroupedWorkSpace()) {\n        return this._getRowCount();\n      } else {\n        groupCount = groupCount || 1;\n        return this._getRowCount() * groupCount;\n      }\n    }\n  }, {\n    key: \"_getDateForHeaderText\",\n    value: function _getDateForHeaderText(index) {\n      var firstViewDate = this._getValidFirstViewDateWithoutDST();\n\n      return this._getDateByIndexCore(firstViewDate, index);\n    }\n  }, {\n    key: \"_getDateByIndexCore\",\n    value: function _getDateByIndexCore(date, index) {\n      var result = new Date(date);\n      var dayIndex = Math.floor(index / this._getCellCountInDay());\n      result.setTime(date.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\n      return result;\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(index) {\n      var firstViewDate = this._getValidFirstViewDateWithoutDST();\n\n      var result = this._getDateByIndexCore(firstViewDate, index);\n\n      if (timeZoneUtils.isTimezoneChangeInDate(this._firstViewDate)) {\n        result.setDate(result.getDate() - 1);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getValidFirstViewDateWithoutDST\",\n    value: function _getValidFirstViewDateWithoutDST() {\n      var newFirstViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this._firstViewDate);\n      newFirstViewDate.setHours(this.option(\"startDayHour\"));\n      return newFirstViewDate;\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return \"shorttime\";\n    }\n  }, {\n    key: \"_needApplyLastGroupCellClass\",\n    value: function _needApplyLastGroupCellClass() {\n      return true;\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval(rowIndex, cellIndex) {\n      var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\n      return dayIndex * this._getHiddenInterval();\n    }\n  }, {\n    key: \"_getMillisecondsOffset\",\n    value: function _getMillisecondsOffset(rowIndex, cellIndex) {\n      cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\n      return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex);\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      this._createWorkSpaceScrollableElements();\n    }\n  }, {\n    key: \"_getWorkSpaceHeight\",\n    value: function _getWorkSpaceHeight() {\n      if (this.option(\"crossScrollingEnabled\")) {\n        return getBoundingRect(this._$dateTable.get(0)).height;\n      }\n\n      return getBoundingRect(this.$element().get(0)).height;\n    }\n  }, {\n    key: \"_dateTableScrollableConfig\",\n    value: function _dateTableScrollableConfig() {\n      var config = _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_dateTableScrollableConfig\", this).call(this);\n\n      var timelineConfig = {\n        direction: HORIZONTAL\n      };\n      return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig);\n    }\n  }, {\n    key: \"_needCreateCrossScrolling\",\n    value: function _needCreateCrossScrolling() {\n      return true;\n    }\n  }, {\n    key: \"_headerScrollableConfig\",\n    value: function _headerScrollableConfig() {\n      var config = _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_headerScrollableConfig\", this).call(this);\n\n      return extend(config, {\n        scrollByContent: true\n      });\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      return noop();\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_getTableAllDay\",\n    value: function _getTableAllDay() {\n      return false;\n    }\n  }, {\n    key: \"_getDateHeaderTemplate\",\n    value: function _getDateHeaderTemplate() {\n      return this.option(\"timeCellTemplate\");\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_changeAllDayVisibility\",\n    value: function _changeAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"_getGroupHeaderContainer\",\n    value: function _getGroupHeaderContainer() {\n      if (this._isHorizontalGroupedWorkSpace()) {\n        return this._$thead;\n      }\n\n      return this._$sidebarTable;\n    }\n  }, {\n    key: \"_insertAllDayRowsIntoDateTable\",\n    value: function _insertAllDayRowsIntoDateTable() {\n      return false;\n    }\n  }, {\n    key: \"_createAllDayPanelElements\",\n    value: function _createAllDayPanelElements() {\n      return noop();\n    }\n  }, {\n    key: \"_renderDateHeader\",\n    value: function _renderDateHeader() {\n      var $headerRow = _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_renderDateHeader\", this).call(this);\n\n      if (this._needRenderWeekHeader()) {\n        var firstViewDate = new Date(this._firstViewDate);\n        var currentDate = new Date(firstViewDate);\n        var $cells = [];\n\n        var groupCount = this._getGroupCount();\n\n        var cellCountInDay = this._getCellCountInDay();\n\n        var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\n        var cellTemplate = this.option(\"dateCellTemplate\");\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n        var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\n        var cellsCount = cellsInGroup * horizontalGroupCount;\n\n        for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\n          var $th = $(\"<th>\");\n\n          var text = this._formatWeekdayAndDay(currentDate);\n\n          if (cellTemplate) {\n            var templateOptions = {\n              model: _extends({\n                text: text,\n                date: new Date(currentDate)\n              }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\n              container: $th,\n              index: templateIndex\n            };\n            cellTemplate.render(templateOptions);\n          } else {\n            $th.text(text);\n          }\n\n          $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\n          $cells.push($th);\n\n          if (templateIndex % cellsInGroup === cellsInGroup - 1) {\n            currentDate = new Date(firstViewDate);\n          } else {\n            this._incrementDate(currentDate);\n          }\n        }\n\n        var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\n        $headerRow.before($row);\n      }\n    }\n  }, {\n    key: \"_needRenderWeekHeader\",\n    value: function _needRenderWeekHeader() {\n      return false;\n    }\n  }, {\n    key: \"_incrementDate\",\n    value: function _incrementDate(date) {\n      date.setDate(date.getDate() + 1);\n    }\n  }, {\n    key: \"_getWeekDuration\",\n    value: function _getWeekDuration() {\n      return 1;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._setFirstViewDate();\n\n      var groupCellTemplates;\n\n      if (!this.isRenovatedRender()) {\n        groupCellTemplates = this._renderGroupHeader();\n      }\n\n      if (this.isRenovatedRender()) {\n        this.renderRWorkspace();\n      } else {\n        this._renderDateHeader();\n\n        this._renderTimePanel();\n\n        this._renderDateTable();\n\n        this._renderAllDayPanel();\n      }\n\n      this._shader = new HorizontalShader(this);\n\n      this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\n\n      if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\n        this.renderRGroupPanel();\n      }\n\n      this._applyCellTemplates(groupCellTemplates);\n    }\n  }, {\n    key: \"_setHorizontalGroupHeaderCellsHeight\",\n    value: function _setHorizontalGroupHeaderCellsHeight() {\n      return noop();\n    }\n  }, {\n    key: \"getIndicationCellCount\",\n    value: function getIndicationCellCount() {\n      var timeDiff = this._getTimeDiff();\n\n      return this._calculateDurationInCells(timeDiff);\n    }\n  }, {\n    key: \"_getTimeDiff\",\n    value: function _getTimeDiff() {\n      var today = this._getToday();\n\n      var date = this._getIndicationFirstViewDate();\n\n      return today.getTime() - date.getTime();\n    }\n  }, {\n    key: \"_calculateDurationInCells\",\n    value: function _calculateDurationInCells(timeDiff) {\n      var today = this._getToday();\n\n      var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\n      var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\n\n      if (today.getHours() > this.option(\"endDayHour\")) {\n        duration = this._getCellCountInDay();\n      }\n\n      if (duration < 0) {\n        duration = 0;\n      }\n\n      return differenceInDays * this._getCellCountInDay() + duration;\n    }\n  }, {\n    key: \"getIndicationWidth\",\n    value: function getIndicationWidth() {\n      if (this.isGroupedByDate()) {\n        var cellCount = this.getIndicationCellCount();\n        var integerPart = Math.floor(cellCount);\n        var fractionPart = cellCount - integerPart;\n        return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart);\n      } else {\n        return this.getIndicationCellCount() * this.getCellWidth();\n      }\n    }\n  }, {\n    key: \"_renderIndicator\",\n    value: function _renderIndicator(height, rtlOffset, $container, groupCount) {\n      var $indicator;\n      var width = this.getIndicationWidth();\n\n      if (\"vertical\" === this.option(\"groupOrientation\")) {\n        $indicator = this._createIndicator($container);\n        $indicator.height(getBoundingRect($container.get(0)).height);\n        $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width);\n      } else {\n        for (var i = 0; i < groupCount; i++) {\n          var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\n          $indicator = this._createIndicator($container);\n          $indicator.height(getBoundingRect($container.get(0)).height);\n          $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset);\n        }\n      }\n    }\n  }, {\n    key: \"_isVerticalShader\",\n    value: function _isVerticalShader() {\n      return false;\n    }\n  }, {\n    key: \"_isCurrentTimeHeaderCell\",\n    value: function _isCurrentTimeHeaderCell() {\n      return false;\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_visibilityChanged\", this).call(this, visible);\n    }\n  }, {\n    key: \"_setTableSizes\",\n    value: function _setTableSizes() {\n      var _this$virtualScrollin;\n\n      var cellHeight = this.getCellHeight();\n\n      var minHeight = this._getWorkSpaceMinHeight();\n\n      var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\n      var height = cellHeight * verticalGroupCount;\n\n      if (height < minHeight) {\n        height = minHeight;\n      }\n\n      this._$sidebarTable.height(height);\n\n      this._$dateTable.height(height);\n\n      _get(_getPrototypeOf(SchedulerTimeline.prototype), \"_setTableSizes\", this).call(this);\n\n      null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.updateDimensions();\n    }\n  }, {\n    key: \"_getWorkSpaceMinHeight\",\n    value: function _getWorkSpaceMinHeight() {\n      var minHeight = this._getWorkSpaceHeight();\n\n      var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\n\n      if (minHeight < workspaceContainerHeight) {\n        minHeight = workspaceContainerHeight;\n      }\n\n      return minHeight;\n    }\n  }, {\n    key: \"_makeGroupRows\",\n    value: function _makeGroupRows(groups, groupByDate) {\n      var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n      return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n        groupRowClass: this._getGroupRowClass(),\n        groupHeaderRowClass: this._getGroupRowClass(),\n        groupHeaderClass: this._getGroupHeaderClass.bind(this),\n        groupHeaderContentClass: this._getGroupHeaderContentClass()\n      }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate);\n    }\n  }, {\n    key: \"_ensureGroupHeaderCellsHeight\",\n    value: function _ensureGroupHeaderCellsHeight(cellHeight) {\n      var minCellHeight = this._calculateMinCellHeight();\n\n      if (cellHeight < minCellHeight) {\n        return minCellHeight;\n      }\n\n      return cellHeight;\n    }\n  }, {\n    key: \"_calculateMinCellHeight\",\n    value: function _calculateMinCellHeight() {\n      var dateTable = this._getDateTable();\n\n      var dateTableRowSelector = \".\" + this._getDateTableRowClass();\n\n      return getBoundingRect(dateTable).height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER;\n    }\n  }, {\n    key: \"_getCellCoordinatesByIndex\",\n    value: function _getCellCoordinatesByIndex(index) {\n      return {\n        cellIndex: index % this._getCellCount(),\n        rowIndex: 0\n      };\n    }\n  }, {\n    key: \"_getCellByCoordinates\",\n    value: function _getCellByCoordinates(cellCoordinates, groupIndex) {\n      var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\n\n      return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex);\n    }\n  }, {\n    key: \"_getWorkSpaceWidth\",\n    value: function _getWorkSpaceWidth() {\n      return this._$dateTable.outerWidth(true);\n    }\n  }, {\n    key: \"_getIndicationFirstViewDate\",\n    value: function _getIndicationFirstViewDate() {\n      return dateUtils.trimTime(new Date(this._firstViewDate));\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate, allDay) {\n      var startDayHour = this.option(\"startDayHour\");\n      var endDayHour = this.option(\"endDayHour\");\n      var firstViewDate = this.getStartViewDate();\n      var firstViewDateTime = firstViewDate.getTime();\n      var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      var apptStart = currentDate.getTime();\n      var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\n      var fullDays = Math.floor(fullInterval / toMs(\"day\"));\n      var tailDuration = fullInterval - fullDays * toMs(\"day\");\n      var tailDelta = 0;\n\n      var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\n\n      var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\n      var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\n\n      if (!allDay) {\n        if (currentDate.getHours() < startDayHour) {\n          tailDelta = tailDuration - hiddenInterval + gapBeforeAppt;\n        } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\n          tailDelta = tailDuration;\n        } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\n          tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"));\n        } else if (!fullDays) {\n          result = fullInterval;\n        }\n\n        result += tailDelta;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getWeekendsCount\",\n    value: function _getWeekendsCount() {\n      return 0;\n    }\n  }, {\n    key: \"getAllDayContainer\",\n    value: function getAllDayContainer() {\n      return null;\n    }\n  }, {\n    key: \"getTimePanelWidth\",\n    value: function getTimePanelWidth() {\n      return 0;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift) {\n      var positionShift = _get(_getPrototypeOf(SchedulerTimeline.prototype), \"getPositionShift\", this).call(this, timeShift);\n\n      var left = this.getCellWidth() * timeShift;\n\n      if (this.option(\"rtlEnabled\")) {\n        left *= -1;\n      }\n\n      left += positionShift.left;\n      return {\n        top: 0,\n        left: left,\n        cellPosition: left\n      };\n    }\n  }, {\n    key: \"getVisibleBounds\",\n    value: function getVisibleBounds() {\n      var isRtl = this.option(\"rtlEnabled\");\n      var result = {};\n      var $scrollable = this.getScrollable().$element();\n      var cellWidth = this.getCellWidth();\n      var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\n      var scrolledCellCount = scrollableOffset / cellWidth;\n      var visibleCellCount = $scrollable.width() / cellWidth;\n      var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\n\n      var leftDate = this._getDateByIndex(scrolledCellCount);\n\n      var rightDate = this._getDateByIndex(totalCellCount);\n\n      if (isRtl) {\n        leftDate = this._getDateByIndex(totalCellCount);\n        rightDate = this._getDateByIndex(scrolledCellCount);\n      }\n\n      result.left = {\n        hours: leftDate.getHours(),\n        minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\n        date: dateUtils.trimTime(leftDate)\n      };\n      result.right = {\n        hours: rightDate.getHours(),\n        minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\n        date: dateUtils.trimTime(rightDate)\n      };\n      return result;\n    }\n  }, {\n    key: \"getIntervalDuration\",\n    value: function getIntervalDuration(allDay) {\n      return this.getCellDuration();\n    }\n  }, {\n    key: \"_supportCompactDropDownAppointments\",\n    value: function _supportCompactDropDownAppointments() {\n      return false;\n    }\n  }, {\n    key: \"getCellMinWidth\",\n    value: function getCellMinWidth() {\n      return 0;\n    }\n  }, {\n    key: \"getWorkSpaceLeftOffset\",\n    value: function getWorkSpaceLeftOffset() {\n      return 0;\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime(hours, minutes, date) {\n      var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n      var scrollable = this.getScrollable();\n      var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\n\n      if (this.option(\"templatesRenderAsynchronously\")) {\n        setTimeout(function () {\n          scrollable.scrollBy({\n            left: coordinates.left - scrollable.scrollLeft() - offset,\n            top: 0\n          });\n        });\n      } else {\n        scrollable.scrollBy({\n          left: coordinates.left - scrollable.scrollLeft() - offset,\n          top: 0\n        });\n      }\n    }\n  }, {\n    key: \"_getRowCountWithAllDayRows\",\n    value: function _getRowCountWithAllDayRows() {\n      return this._getRowCount();\n    }\n  }, {\n    key: \"_setCurrentTimeCells\",\n    value: function _setCurrentTimeCells() {\n      var timePanelCells = this._getTimePanelCells();\n\n      var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n\n      currentTimeCellIndices.forEach(function (timePanelCellIndex) {\n        timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS);\n      });\n    }\n  }, {\n    key: \"_cleanCurrentTimeCells\",\n    value: function _cleanCurrentTimeCells() {\n      this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS);\n    }\n  }, {\n    key: \"_getTimePanelCells\",\n    value: function _getTimePanelCells() {\n      return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"));\n    }\n  }, {\n    key: \"_getCurrentTimePanelCellIndices\",\n    value: function _getCurrentTimePanelCellIndices() {\n      var columnCountPerGroup = this._getCellCount();\n\n      var today = this._getToday();\n\n      var index = this.getCellIndexByDate(today);\n\n      var _this$_getCellCoordin = this._getCellCoordinatesByIndex(index),\n          currentTimeCellIndex = _this$_getCellCoordin.cellIndex;\n\n      if (void 0 === currentTimeCellIndex) {\n        return [];\n      }\n\n      var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\n      return _toConsumableArray(new Array(horizontalGroupCount)).map(function (_, groupIndex) {\n        return columnCountPerGroup * groupIndex + currentTimeCellIndex;\n      });\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return true;\n    }\n  }, {\n    key: \"renderRAllDayPanel\",\n    value: function renderRAllDayPanel() {}\n  }, {\n    key: \"renderRTimeTable\",\n    value: function renderRTimeTable() {}\n  }, {\n    key: \"generateRenderOptions\",\n    value: function generateRenderOptions() {\n      var options = _get(_getPrototypeOf(SchedulerTimeline.prototype), \"generateRenderOptions\", this).call(this, true);\n\n      var groupCount = this._getGroupCount();\n\n      var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n      var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\n      var daysInView = cellsInGroup * horizontalGroupCount;\n      return _extends({}, options, {\n        isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\n        getWeekDaysHeaderText: this._formatWeekdayAndDay.bind(this),\n        daysInView: daysInView,\n        cellCountInDay: this._getCellCountInDay()\n      });\n    }\n  }]);\n\n  return SchedulerTimeline;\n}(SchedulerWorkSpace);\n\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\nexport default SchedulerTimeline;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline.js"],"names":["_extends","$","noop","extend","getBoundingRect","registerComponent","SchedulerWorkSpace","dateUtils","tableCreatorModule","tableCreator","HorizontalShader","HEADER_CURRENT_TIME_CELL_CLASS","timeZoneUtils","dxrTimelineDateHeader","TIMELINE_CLASS","GROUP_TABLE_CLASS","HORIZONTAL_GROUPED_WORKSPACE_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_PANEL_WEEK_CELL_CLASS","HEADER_ROW_CLASS","HORIZONTAL","DATE_TABLE_CELL_BORDER","DATE_TABLE_HEADER_MARGIN","toMs","dateToMilliseconds","SchedulerTimeline","$element","addClass","_$sidebarTable","direction","isMultiSelection","_$focusedCell","toggleClass","_isHorizontalGroupedWorkSpace","groupOrientation","_getCellCountInDay","option","outerWidth","groupCount","_getRowCount","index","firstViewDate","_getValidFirstViewDateWithoutDST","_getDateByIndexCore","date","result","Date","dayIndex","Math","floor","setTime","getTime","_calculateCellIndex","_getInterval","_getHiddenInterval","isTimezoneChangeInDate","_firstViewDate","setDate","getDate","newFirstViewDate","getDateWithoutTimezoneChange","setHours","rowIndex","cellIndex","_calculateHiddenInterval","_createWorkSpaceScrollableElements","_$dateTable","get","height","config","timelineConfig","scrollByContent","_$thead","$headerRow","_needRenderWeekHeader","currentDate","$cells","_getGroupCount","cellCountInDay","colSpan","isGroupedByDate","cellTemplate","horizontalGroupCount","cellsInGroup","_getWeekDuration","cellsCount","templateIndex","$th","text","_formatWeekdayAndDay","templateOptions","model","_getGroupsForDateHeaderTemplate","container","render","attr","push","_incrementDate","$row","append","before","_setFirstViewDate","groupCellTemplates","isRenovatedRender","_renderGroupHeader","renderRWorkspace","_renderDateHeader","_renderTimePanel","_renderDateTable","_renderAllDayPanel","_shader","appendTo","_sidebarScrollable","$content","_isVerticalGroupedWorkSpace","renderRGroupPanel","_applyCellTemplates","timeDiff","_getTimeDiff","_calculateDurationInCells","today","_getToday","_getIndicationFirstViewDate","differenceInDays","duration","getCellDuration","getHours","cellCount","getIndicationCellCount","integerPart","fractionPart","getCellWidth","rtlOffset","$container","$indicator","width","getIndicationWidth","_createIndicator","css","i","offset","_getCellCount","visible","_this$virtualScrollin","cellHeight","getCellHeight","minHeight","_getWorkSpaceMinHeight","verticalGroupCount","virtualScrollingDispatcher","updateDimensions","_getWorkSpaceHeight","workspaceContainerHeight","outerHeight","getHeaderPanelHeight","groups","groupByDate","tableCreatorStrategy","VERTICAL","makeGroupedTable","groupRowClass","_getGroupRowClass","groupHeaderRowClass","groupHeaderClass","_getGroupHeaderClass","bind","groupHeaderContentClass","_getGroupHeaderContentClass","_getTotalRowCount","minCellHeight","_calculateMinCellHeight","dateTable","_getDateTable","dateTableRowSelector","_getDateTableRowClass","find","length","cellCoordinates","groupIndex","indexes","_groupedStrategy","prepareCellIndexes","eq","trimTime","allDay","startDayHour","endDayHour","getStartViewDate","firstViewDateTime","hiddenInterval","timeZoneOffset","getTimezonesDifference","apptStart","fullInterval","fullDays","tailDuration","tailDelta","_getWeekendsCount","gapBeforeAppt","timeShift","positionShift","left","top","cellPosition","isRtl","$scrollable","getScrollable","cellWidth","scrollableOffset","getScrollableOuterWidth","getScrollableScrollLeft","scrolledCellCount","visibleCellCount","totalCellCount","leftDate","_getDateByIndex","rightDate","hours","minutes","getMinutes","right","coordinates","_getScrollCoordinates","scrollable","getScrollableContainer","setTimeout","scrollBy","scrollLeft","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","concat","removeClass","columnCountPerGroup","getCellIndexByDate","_getCellCoordinatesByIndex","currentTimeCellIndex","Array","map","_","options","daysInView","isGenerateWeekDaysHeaderData","getWeekDaysHeaderText"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS\r\n} from \"../constants\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar HORIZONTAL = \"horizontal\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_HEADER_MARGIN = 10;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimeline extends SchedulerWorkSpace {\r\n    get verticalGroupTableClass() {\r\n        return GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrTimelineDateHeader\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(TIMELINE_CLASS);\r\n        this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS)\r\n    }\r\n    _getCellFromNextRow(direction, isMultiSelection) {\r\n        if (!isMultiSelection) {\r\n            return super._getCellFromNextRow(direction, isMultiSelection)\r\n        }\r\n        return this._$focusedCell\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"vertical\"\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace())\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            groupOrientation: \"vertical\"\r\n        })\r\n    }\r\n    _getRowCount() {\r\n        return 1\r\n    }\r\n    _getCellCount() {\r\n        return this._getCellCountInDay() * this.option(\"intervalCount\")\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0\r\n    }\r\n    _getTotalRowCount(groupCount) {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._getRowCount()\r\n        } else {\r\n            groupCount = groupCount || 1;\r\n            return this._getRowCount() * groupCount\r\n        }\r\n    }\r\n    _getDateForHeaderText(index) {\r\n        var firstViewDate = this._getValidFirstViewDateWithoutDST();\r\n        return this._getDateByIndexCore(firstViewDate, index)\r\n    }\r\n    _getDateByIndexCore(date, index) {\r\n        var result = new Date(date);\r\n        var dayIndex = Math.floor(index / this._getCellCountInDay());\r\n        result.setTime(date.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\r\n        return result\r\n    }\r\n    _getDateByIndex(index) {\r\n        var firstViewDate = this._getValidFirstViewDateWithoutDST();\r\n        var result = this._getDateByIndexCore(firstViewDate, index);\r\n        if (timeZoneUtils.isTimezoneChangeInDate(this._firstViewDate)) {\r\n            result.setDate(result.getDate() - 1)\r\n        }\r\n        return result\r\n    }\r\n    _getValidFirstViewDateWithoutDST() {\r\n        var newFirstViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this._firstViewDate);\r\n        newFirstViewDate.setHours(this.option(\"startDayHour\"));\r\n        return newFirstViewDate\r\n    }\r\n    _getFormat() {\r\n        return \"shorttime\"\r\n    }\r\n    _needApplyLastGroupCellClass() {\r\n        return true\r\n    }\r\n    _calculateHiddenInterval(rowIndex, cellIndex) {\r\n        var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\r\n        return dayIndex * this._getHiddenInterval()\r\n    }\r\n    _getMillisecondsOffset(rowIndex, cellIndex) {\r\n        cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\r\n        return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex)\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceScrollableElements()\r\n    }\r\n    _getWorkSpaceHeight() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            return getBoundingRect(this._$dateTable.get(0)).height\r\n        }\r\n        return getBoundingRect(this.$element().get(0)).height\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = super._dateTableScrollableConfig();\r\n        var timelineConfig = {\r\n            direction: HORIZONTAL\r\n        };\r\n        return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig)\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return true\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = super._headerScrollableConfig();\r\n        return extend(config, {\r\n            scrollByContent: true\r\n        })\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _getTableAllDay() {\r\n        return false\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"timeCellTemplate\")\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._$thead\r\n        }\r\n        return this._$sidebarTable\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _createAllDayPanelElements() {\r\n        return noop()\r\n    }\r\n    _renderDateHeader() {\r\n        var $headerRow = super._renderDateHeader();\r\n        if (this._needRenderWeekHeader()) {\r\n            var firstViewDate = new Date(this._firstViewDate);\r\n            var currentDate = new Date(firstViewDate);\r\n            var $cells = [];\r\n            var groupCount = this._getGroupCount();\r\n            var cellCountInDay = this._getCellCountInDay();\r\n            var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\r\n            var cellTemplate = this.option(\"dateCellTemplate\");\r\n            var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n            var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\r\n            var cellsCount = cellsInGroup * horizontalGroupCount;\r\n            for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\r\n                var $th = $(\"<th>\");\r\n                var text = this._formatWeekdayAndDay(currentDate);\r\n                if (cellTemplate) {\r\n                    var templateOptions = {\r\n                        model: _extends({\r\n                            text: text,\r\n                            date: new Date(currentDate)\r\n                        }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\r\n                        container: $th,\r\n                        index: templateIndex\r\n                    };\r\n                    cellTemplate.render(templateOptions)\r\n                } else {\r\n                    $th.text(text)\r\n                }\r\n                $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\r\n                $cells.push($th);\r\n                if (templateIndex % cellsInGroup === cellsInGroup - 1) {\r\n                    currentDate = new Date(firstViewDate)\r\n                } else {\r\n                    this._incrementDate(currentDate)\r\n                }\r\n            }\r\n            var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\r\n            $headerRow.before($row)\r\n        }\r\n    }\r\n    _needRenderWeekHeader() {\r\n        return false\r\n    }\r\n    _incrementDate(date) {\r\n        date.setDate(date.getDate() + 1)\r\n    }\r\n    _getWeekDuration() {\r\n        return 1\r\n    }\r\n    _renderView() {\r\n        this._setFirstViewDate();\r\n        var groupCellTemplates;\r\n        if (!this.isRenovatedRender()) {\r\n            groupCellTemplates = this._renderGroupHeader()\r\n        }\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkspace()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._shader = new HorizontalShader(this);\r\n        this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\r\n        if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\r\n            this.renderRGroupPanel()\r\n        }\r\n        this._applyCellTemplates(groupCellTemplates)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        return noop()\r\n    }\r\n    getIndicationCellCount() {\r\n        var timeDiff = this._getTimeDiff();\r\n        return this._calculateDurationInCells(timeDiff)\r\n    }\r\n    _getTimeDiff() {\r\n        var today = this._getToday();\r\n        var date = this._getIndicationFirstViewDate();\r\n        return today.getTime() - date.getTime()\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        var today = this._getToday();\r\n        var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\r\n        var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\r\n        if (today.getHours() > this.option(\"endDayHour\")) {\r\n            duration = this._getCellCountInDay()\r\n        }\r\n        if (duration < 0) {\r\n            duration = 0\r\n        }\r\n        return differenceInDays * this._getCellCountInDay() + duration\r\n    }\r\n    getIndicationWidth() {\r\n        if (this.isGroupedByDate()) {\r\n            var cellCount = this.getIndicationCellCount();\r\n            var integerPart = Math.floor(cellCount);\r\n            var fractionPart = cellCount - integerPart;\r\n            return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart)\r\n        } else {\r\n            return this.getIndicationCellCount() * this.getCellWidth()\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var $indicator;\r\n        var width = this.getIndicationWidth();\r\n        if (\"vertical\" === this.option(\"groupOrientation\")) {\r\n            $indicator = this._createIndicator($container);\r\n            $indicator.height(getBoundingRect($container.get(0)).height);\r\n            $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width)\r\n        } else {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\r\n                $indicator = this._createIndicator($container);\r\n                $indicator.height(getBoundingRect($container.get(0)).height);\r\n                $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset)\r\n            }\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return false\r\n    }\r\n    _isCurrentTimeHeaderCell() {\r\n        return false\r\n    }\r\n    _visibilityChanged(visible) {\r\n        super._visibilityChanged(visible)\r\n    }\r\n    _setTableSizes() {\r\n        var _this$virtualScrollin;\r\n        var cellHeight = this.getCellHeight();\r\n        var minHeight = this._getWorkSpaceMinHeight();\r\n        var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\r\n        var height = cellHeight * verticalGroupCount;\r\n        if (height < minHeight) {\r\n            height = minHeight\r\n        }\r\n        this._$sidebarTable.height(height);\r\n        this._$dateTable.height(height);\r\n        super._setTableSizes();\r\n        null === (_this$virtualScrollin = this.virtualScrollingDispatcher) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.updateDimensions()\r\n    }\r\n    _getWorkSpaceMinHeight() {\r\n        var minHeight = this._getWorkSpaceHeight();\r\n        var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\r\n        if (minHeight < workspaceContainerHeight) {\r\n            minHeight = workspaceContainerHeight\r\n        }\r\n        return minHeight\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupHeaderRowClass: this._getGroupRowClass(),\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: this._getGroupHeaderContentClass()\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate)\r\n    }\r\n    _ensureGroupHeaderCellsHeight(cellHeight) {\r\n        var minCellHeight = this._calculateMinCellHeight();\r\n        if (cellHeight < minCellHeight) {\r\n            return minCellHeight\r\n        }\r\n        return cellHeight\r\n    }\r\n    _calculateMinCellHeight() {\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRowSelector = \".\" + this._getDateTableRowClass();\r\n        return getBoundingRect(dateTable).height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        return {\r\n            cellIndex: index % this._getCellCount(),\r\n            rowIndex: 0\r\n        }\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\r\n        return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this._$dateTable.outerWidth(true)\r\n    }\r\n    _getIndicationFirstViewDate() {\r\n        return dateUtils.trimTime(new Date(this._firstViewDate))\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var apptStart = currentDate.getTime();\r\n        var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\r\n        var fullDays = Math.floor(fullInterval / toMs(\"day\"));\r\n        var tailDuration = fullInterval - fullDays * toMs(\"day\");\r\n        var tailDelta = 0;\r\n        var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\r\n        var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\r\n        var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\r\n        if (!allDay) {\r\n            if (currentDate.getHours() < startDayHour) {\r\n                tailDelta = tailDuration - hiddenInterval + gapBeforeAppt\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\r\n                tailDelta = tailDuration\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\r\n                tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"))\r\n            } else if (!fullDays) {\r\n                result = fullInterval\r\n            }\r\n            result += tailDelta\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    getAllDayContainer() {\r\n        return null\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getPositionShift(timeShift) {\r\n        var positionShift = super.getPositionShift(timeShift);\r\n        var left = this.getCellWidth() * timeShift;\r\n        if (this.option(\"rtlEnabled\")) {\r\n            left *= -1\r\n        }\r\n        left += positionShift.left;\r\n        return {\r\n            top: 0,\r\n            left: left,\r\n            cellPosition: left\r\n        }\r\n    }\r\n    getVisibleBounds() {\r\n        var isRtl = this.option(\"rtlEnabled\");\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\r\n        var scrolledCellCount = scrollableOffset / cellWidth;\r\n        var visibleCellCount = $scrollable.width() / cellWidth;\r\n        var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\r\n        var leftDate = this._getDateByIndex(scrolledCellCount);\r\n        var rightDate = this._getDateByIndex(totalCellCount);\r\n        if (isRtl) {\r\n            leftDate = this._getDateByIndex(totalCellCount);\r\n            rightDate = this._getDateByIndex(scrolledCellCount)\r\n        }\r\n        result.left = {\r\n            hours: leftDate.getHours(),\r\n            minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(leftDate)\r\n        };\r\n        result.right = {\r\n            hours: rightDate.getHours(),\r\n            minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(rightDate)\r\n        };\r\n        return result\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return this.getCellDuration()\r\n    }\r\n    _supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n    getCellMinWidth() {\r\n        return 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout((function() {\r\n                scrollable.scrollBy({\r\n                    left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                    top: 0\r\n                })\r\n            }))\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        return this._getRowCount()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"))\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var columnCountPerGroup = this._getCellCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            cellIndex: currentTimeCellIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeCellIndex) {\r\n            return []\r\n        }\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\r\n        return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeCellIndex)\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions(true);\r\n        var groupCount = this._getGroupCount();\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n        var cellsInGroup = this._getWeekDuration() * this.option(\"intervalCount\");\r\n        var daysInView = cellsInGroup * horizontalGroupCount;\r\n        return _extends({}, options, {\r\n            isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\r\n            getWeekDaysHeaderText: this._formatWeekdayAndDay.bind(this),\r\n            daysInView: daysInView,\r\n            cellCountInDay: this._getCellCountInDay()\r\n        })\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\r\nexport default SchedulerTimeline;\r\n"]},"metadata":{},"sourceType":"module"}