{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\n\nvar HorizontalGroupedStrategy = /*#__PURE__*/function (_GroupedStrategy) {\n  _inherits(HorizontalGroupedStrategy, _GroupedStrategy);\n\n  var _super = _createSuper(HorizontalGroupedStrategy);\n\n  function HorizontalGroupedStrategy() {\n    _classCallCheck(this, HorizontalGroupedStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalGroupedStrategy, [{\n    key: \"prepareCellIndexes\",\n    value: function prepareCellIndexes(cellCoordinates, groupIndex, inAllDay) {\n      var groupByDay = this._workSpace.isGroupedByDate();\n\n      if (!groupByDay) {\n        return {\n          rowIndex: cellCoordinates.rowIndex,\n          cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\n        };\n      } else {\n        return {\n          rowIndex: cellCoordinates.rowIndex,\n          cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\n        };\n      }\n    }\n  }, {\n    key: \"calculateCellIndex\",\n    value: function calculateCellIndex(rowIndex, cellIndex) {\n      cellIndex %= this._workSpace._getCellCount();\n      return this._workSpace._getRowCount() * cellIndex + rowIndex;\n    }\n  }, {\n    key: \"getGroupIndex\",\n    value: function getGroupIndex(rowIndex, cellIndex) {\n      var groupByDay = this._workSpace.isGroupedByDate();\n\n      var groupCount = this._workSpace._getGroupCount();\n\n      if (groupByDay) {\n        return cellIndex % groupCount;\n      } else {\n        return Math.floor(cellIndex / this._workSpace._getCellCount());\n      }\n    }\n  }, {\n    key: \"calculateHeaderCellRepeatCount\",\n    value: function calculateHeaderCellRepeatCount() {\n      return this._workSpace._getGroupCount() || 1;\n    }\n  }, {\n    key: \"insertAllDayRowsIntoDateTable\",\n    value: function insertAllDayRowsIntoDateTable() {\n      return false;\n    }\n  }, {\n    key: \"getTotalCellCount\",\n    value: function getTotalCellCount(groupCount) {\n      groupCount = groupCount || 1;\n      return this._workSpace._getCellCount() * groupCount;\n    }\n  }, {\n    key: \"getTotalRowCount\",\n    value: function getTotalRowCount() {\n      return this._workSpace._getRowCount();\n    }\n  }, {\n    key: \"addAdditionalGroupCellClasses\",\n    value: function addAdditionalGroupCellClasses(cellClass, index, i, j) {\n      var applyUnconditionally = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n      cellClass = this._addLastGroupCellClass(cellClass, index, applyUnconditionally);\n      return this._addFirstGroupCellClass(cellClass, index, applyUnconditionally);\n    }\n  }, {\n    key: \"_addLastGroupCellClass\",\n    value: function _addLastGroupCellClass(cellClass, index, applyUnconditionally) {\n      if (applyUnconditionally) {\n        return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n      }\n\n      var groupByDate = this._workSpace.isGroupedByDate();\n\n      if (groupByDate) {\n        if (index % this._workSpace._getGroupCount() === 0) {\n          return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n        }\n      } else if (index % this._workSpace._getCellCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass());\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"_addFirstGroupCellClass\",\n    value: function _addFirstGroupCellClass(cellClass, index, applyUnconditionally) {\n      if (applyUnconditionally) {\n        return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n      }\n\n      var groupByDate = this._workSpace.isGroupedByDate();\n\n      if (groupByDate) {\n        if ((index - 1) % this._workSpace._getGroupCount() === 0) {\n          return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n        }\n      } else if ((index - 1) % this._workSpace._getCellCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass());\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"getHorizontalMax\",\n    value: function getHorizontalMax(groupIndex) {\n      return this._workSpace.getMaxAllowedPosition(groupIndex);\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(groupIndex) {\n      var isVirtualScrolling = this._workSpace.isVirtualScrolling();\n\n      var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\n      return this._workSpace.getMaxAllowedVerticalPosition(correctedGroupIndex);\n    }\n  }, {\n    key: \"calculateTimeCellRepeatCount\",\n    value: function calculateTimeCellRepeatCount() {\n      return 1;\n    }\n  }, {\n    key: \"getWorkSpaceMinWidth\",\n    value: function getWorkSpaceMinWidth() {\n      return getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth();\n    }\n  }, {\n    key: \"getAllDayOffset\",\n    value: function getAllDayOffset() {\n      return this._workSpace.getAllDayHeight();\n    }\n  }, {\n    key: \"getAllDayTableHeight\",\n    value: function getAllDayTableHeight() {\n      return getBoundingRect(this._workSpace._$allDayTable.get(0)).height || 0;\n    }\n  }, {\n    key: \"getGroupCountAttr\",\n    value: function getGroupCountAttr(groups) {\n      return {\n        attr: HORIZONTAL_GROUPED_ATTR,\n        count: null === groups || void 0 === groups ? void 0 : groups.length\n      };\n    }\n  }, {\n    key: \"getLeftOffset\",\n    value: function getLeftOffset() {\n      return this._workSpace.getTimePanelWidth();\n    }\n  }, {\n    key: \"_createGroupBoundOffset\",\n    value: function _createGroupBoundOffset(startCell, endCell, cellWidth) {\n      var extraOffset = cellWidth / 2;\n      var startOffset = startCell ? startCell.offset().left - extraOffset : 0;\n      var endOffset = endCell ? endCell.offset().left + cellWidth + extraOffset : 0;\n      return {\n        left: startOffset,\n        right: endOffset,\n        top: 0,\n        bottom: 0\n      };\n    }\n  }, {\n    key: \"_getGroupedByDateBoundOffset\",\n    value: function _getGroupedByDateBoundOffset($cells, cellWidth) {\n      var lastCellIndex = $cells.length - 1;\n      var startCell = $cells.eq(0);\n      var endCell = $cells.eq(lastCellIndex);\n      return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n    }\n  }, {\n    key: \"getGroupBoundsOffset\",\n    value: function getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n      if (this._workSpace.isGroupedByDate()) {\n        return this._getGroupedByDateBoundOffset($cells, cellWidth);\n      }\n\n      var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n      var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n      var startCellIndex = groupIndex * cellCount;\n      var startCell = $cells.eq(startCellIndex);\n      var endCell = $cells.eq(startCellIndex + cellCount - 1);\n      return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n    }\n  }, {\n    key: \"getVirtualScrollingGroupBoundsOffset\",\n    value: function getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap) {\n      if (this._workSpace.isGroupedByDate()) {\n        return this._getGroupedByDateBoundOffset($cells, cellWidth);\n      }\n\n      var startCell;\n      var endCell;\n\n      var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n      var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n      var currentCellGroup = groupedDataMap.dateTableGroupedMap[groupIndex];\n\n      if (currentCellGroup) {\n        var groupRowLength = currentCellGroup[0].length;\n        var groupStartPosition = currentCellGroup[0][0].position;\n        var groupEndPosition = currentCellGroup[0][groupRowLength - 1].position;\n        startCell = $cells.eq(groupStartPosition.cellIndex);\n        endCell = $cells.eq(groupEndPosition.cellIndex);\n      }\n\n      return this._createGroupBoundOffset(startCell, endCell, cellWidth);\n    }\n  }, {\n    key: \"shiftIndicator\",\n    value: function shiftIndicator($indicator, height, rtlOffset, groupIndex) {\n      var offset = this._getIndicatorOffset(groupIndex);\n\n      var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n      $indicator.css(\"left\", horizontalOffset);\n      $indicator.css(\"top\", height);\n    }\n  }, {\n    key: \"_getIndicatorOffset\",\n    value: function _getIndicatorOffset(groupIndex) {\n      var groupByDay = this._workSpace.isGroupedByDate();\n\n      return groupByDay ? this._calculateGroupByDateOffset(groupIndex) : this._calculateOffset(groupIndex);\n    }\n  }, {\n    key: \"_calculateOffset\",\n    value: function _calculateOffset(groupIndex) {\n      return this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex + this._workSpace.getIndicatorOffset(groupIndex) + groupIndex;\n    }\n  }, {\n    key: \"_calculateGroupByDateOffset\",\n    value: function _calculateGroupByDateOffset(groupIndex) {\n      return this._workSpace.getIndicatorOffset(0) * this._workSpace._getGroupCount() + this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex;\n    }\n  }, {\n    key: \"getShaderOffset\",\n    value: function getShaderOffset(i, width) {\n      var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\n      return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).width - offset - this._workSpace.getTimePanelWidth() - width : offset;\n    }\n  }, {\n    key: \"getShaderTopOffset\",\n    value: function getShaderTopOffset(i) {\n      return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0);\n    }\n  }, {\n    key: \"getShaderHeight\",\n    value: function getShaderHeight() {\n      var height = this._workSpace.getIndicationHeight();\n\n      return height;\n    }\n  }, {\n    key: \"getShaderMaxHeight\",\n    value: function getShaderMaxHeight() {\n      return getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).height;\n    }\n  }, {\n    key: \"getShaderWidth\",\n    value: function getShaderWidth(i) {\n      return this._workSpace.getIndicationWidth(i);\n    }\n  }, {\n    key: \"getScrollableScrollTop\",\n    value: function getScrollableScrollTop(allDay) {\n      return !allDay ? this._workSpace.getScrollable().scrollTop() : 0;\n    }\n  }, {\n    key: \"getGroupIndexByCell\",\n    value: function getGroupIndexByCell($cell) {\n      var rowIndex = $cell.parent().index();\n      var cellIndex = $cell.index();\n      return this.getGroupIndex(rowIndex, cellIndex);\n    }\n  }]);\n\n  return HorizontalGroupedStrategy;\n}(GroupedStrategy);\n\nexport default HorizontalGroupedStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js"],"names":["getBoundingRect","GroupedStrategy","HORIZONTAL_GROUPED_ATTR","HorizontalGroupedStrategy","cellCoordinates","groupIndex","inAllDay","groupByDay","_workSpace","isGroupedByDate","rowIndex","cellIndex","_getCellCount","_getGroupCount","_getRowCount","groupCount","Math","floor","cellClass","index","i","j","applyUnconditionally","arguments","length","_addLastGroupCellClass","_addFirstGroupCellClass","concat","getLastGroupCellClass","groupByDate","getFirstGroupCellClass","getMaxAllowedPosition","isVirtualScrolling","correctedGroupIndex","getMaxAllowedVerticalPosition","$element","get","width","getTimePanelWidth","getAllDayHeight","_$allDayTable","height","groups","attr","count","startCell","endCell","cellWidth","extraOffset","startOffset","offset","left","endOffset","right","top","bottom","$cells","lastCellIndex","eq","_createGroupBoundOffset","cellCount","coordinates","_getGroupedByDateBoundOffset","getCellIndexByCoordinates","startCellIndex","groupedDataMap","currentCellGroup","dateTableGroupedMap","groupRowLength","groupStartPosition","position","groupEndPosition","$indicator","rtlOffset","_getIndicatorOffset","horizontalOffset","css","_calculateGroupByDateOffset","_calculateOffset","getRoundedCellWidth","getIndicatorOffset","option","_dateTableScrollable","$content","getShaderMaxHeight","getIndicationHeight","getIndicationWidth","allDay","getScrollable","scrollTop","$cell","parent","getGroupIndex"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport GroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy\";\r\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\r\nclass HorizontalGroupedStrategy extends GroupedStrategy {\r\n    prepareCellIndexes(cellCoordinates, groupIndex, inAllDay) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        if (!groupByDay) {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\r\n            }\r\n        } else {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\r\n            }\r\n        }\r\n    }\r\n    calculateCellIndex(rowIndex, cellIndex) {\r\n        cellIndex %= this._workSpace._getCellCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    }\r\n    getGroupIndex(rowIndex, cellIndex) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        var groupCount = this._workSpace._getGroupCount();\r\n        if (groupByDay) {\r\n            return cellIndex % groupCount\r\n        } else {\r\n            return Math.floor(cellIndex / this._workSpace._getCellCount())\r\n        }\r\n    }\r\n    calculateHeaderCellRepeatCount() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    }\r\n    insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    getTotalCellCount(groupCount) {\r\n        groupCount = groupCount || 1;\r\n        return this._workSpace._getCellCount() * groupCount\r\n    }\r\n    getTotalRowCount() {\r\n        return this._workSpace._getRowCount()\r\n    }\r\n    addAdditionalGroupCellClasses(cellClass, index, i, j) {\r\n        var applyUnconditionally = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n        cellClass = this._addLastGroupCellClass(cellClass, index, applyUnconditionally);\r\n        return this._addFirstGroupCellClass(cellClass, index, applyUnconditionally)\r\n    }\r\n    _addLastGroupCellClass(cellClass, index, applyUnconditionally) {\r\n        if (applyUnconditionally) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n        }\r\n        var groupByDate = this._workSpace.isGroupedByDate();\r\n        if (groupByDate) {\r\n            if (index % this._workSpace._getGroupCount() === 0) {\r\n                return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n            }\r\n        } else if (index % this._workSpace._getCellCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getLastGroupCellClass())\r\n        }\r\n        return cellClass\r\n    }\r\n    _addFirstGroupCellClass(cellClass, index, applyUnconditionally) {\r\n        if (applyUnconditionally) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n        }\r\n        var groupByDate = this._workSpace.isGroupedByDate();\r\n        if (groupByDate) {\r\n            if ((index - 1) % this._workSpace._getGroupCount() === 0) {\r\n                return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n            }\r\n        } else if ((index - 1) % this._workSpace._getCellCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(this.getFirstGroupCellClass())\r\n        }\r\n        return cellClass\r\n    }\r\n    getHorizontalMax(groupIndex) {\r\n        return this._workSpace.getMaxAllowedPosition(groupIndex)\r\n    }\r\n    getVerticalMax(groupIndex) {\r\n        var isVirtualScrolling = this._workSpace.isVirtualScrolling();\r\n        var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\r\n        return this._workSpace.getMaxAllowedVerticalPosition(correctedGroupIndex)\r\n    }\r\n    calculateTimeCellRepeatCount() {\r\n        return 1\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth()\r\n    }\r\n    getAllDayOffset() {\r\n        return this._workSpace.getAllDayHeight()\r\n    }\r\n    getAllDayTableHeight() {\r\n        return getBoundingRect(this._workSpace._$allDayTable.get(0)).height || 0\r\n    }\r\n    getGroupCountAttr(groups) {\r\n        return {\r\n            attr: HORIZONTAL_GROUPED_ATTR,\r\n            count: null === groups || void 0 === groups ? void 0 : groups.length\r\n        }\r\n    }\r\n    getLeftOffset() {\r\n        return this._workSpace.getTimePanelWidth()\r\n    }\r\n    _createGroupBoundOffset(startCell, endCell, cellWidth) {\r\n        var extraOffset = cellWidth / 2;\r\n        var startOffset = startCell ? startCell.offset().left - extraOffset : 0;\r\n        var endOffset = endCell ? endCell.offset().left + cellWidth + extraOffset : 0;\r\n        return {\r\n            left: startOffset,\r\n            right: endOffset,\r\n            top: 0,\r\n            bottom: 0\r\n        }\r\n    }\r\n    _getGroupedByDateBoundOffset($cells, cellWidth) {\r\n        var lastCellIndex = $cells.length - 1;\r\n        var startCell = $cells.eq(0);\r\n        var endCell = $cells.eq(lastCellIndex);\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            return this._getGroupedByDateBoundOffset($cells, cellWidth)\r\n        }\r\n        var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n        var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\r\n        var startCellIndex = groupIndex * cellCount;\r\n        var startCell = $cells.eq(startCellIndex);\r\n        var endCell = $cells.eq(startCellIndex + cellCount - 1);\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    getVirtualScrollingGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap) {\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            return this._getGroupedByDateBoundOffset($cells, cellWidth)\r\n        }\r\n        var startCell;\r\n        var endCell;\r\n        var cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n        var groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\r\n        var currentCellGroup = groupedDataMap.dateTableGroupedMap[groupIndex];\r\n        if (currentCellGroup) {\r\n            var groupRowLength = currentCellGroup[0].length;\r\n            var groupStartPosition = currentCellGroup[0][0].position;\r\n            var groupEndPosition = currentCellGroup[0][groupRowLength - 1].position;\r\n            startCell = $cells.eq(groupStartPosition.cellIndex);\r\n            endCell = $cells.eq(groupEndPosition.cellIndex)\r\n        }\r\n        return this._createGroupBoundOffset(startCell, endCell, cellWidth)\r\n    }\r\n    shiftIndicator($indicator, height, rtlOffset, groupIndex) {\r\n        var offset = this._getIndicatorOffset(groupIndex);\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        $indicator.css(\"left\", horizontalOffset);\r\n        $indicator.css(\"top\", height)\r\n    }\r\n    _getIndicatorOffset(groupIndex) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        return groupByDay ? this._calculateGroupByDateOffset(groupIndex) : this._calculateOffset(groupIndex)\r\n    }\r\n    _calculateOffset(groupIndex) {\r\n        return this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex + this._workSpace.getIndicatorOffset(groupIndex) + groupIndex\r\n    }\r\n    _calculateGroupByDateOffset(groupIndex) {\r\n        return this._workSpace.getIndicatorOffset(0) * this._workSpace._getGroupCount() + this._workSpace.getRoundedCellWidth(groupIndex - 1, 0) * groupIndex\r\n    }\r\n    getShaderOffset(i, width) {\r\n        var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\r\n        return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).width - offset - this._workSpace.getTimePanelWidth() - width : offset\r\n    }\r\n    getShaderTopOffset(i) {\r\n        return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0)\r\n    }\r\n    getShaderHeight() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        return height\r\n    }\r\n    getShaderMaxHeight() {\r\n        return getBoundingRect(this._workSpace._dateTableScrollable.$content().get(0)).height\r\n    }\r\n    getShaderWidth(i) {\r\n        return this._workSpace.getIndicationWidth(i)\r\n    }\r\n    getScrollableScrollTop(allDay) {\r\n        return !allDay ? this._workSpace.getScrollable().scrollTop() : 0\r\n    }\r\n    getGroupIndexByCell($cell) {\r\n        var rowIndex = $cell.parent().index();\r\n        var cellIndex = $cell.index();\r\n        return this.getGroupIndex(rowIndex, cellIndex)\r\n    }\r\n}\r\nexport default HorizontalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"module"}