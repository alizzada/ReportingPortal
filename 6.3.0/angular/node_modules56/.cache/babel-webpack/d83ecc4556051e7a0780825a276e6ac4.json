{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.name_editor.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport TextBox from \"../text_box\";\nimport FileManagerDialogBase from \"./ui.file_manager.dialog.js\";\nvar FILE_MANAGER_DIALOG_NAME_EDITOR = \"dx-filemanager-dialog-name-editor\";\nvar FILE_MANAGER_DIALOG_NAME_EDITOR_POPUP = \"dx-filemanager-dialog-name-editor-popup\";\n\nvar FileManagerNameEditorDialog = /*#__PURE__*/function (_FileManagerDialogBas) {\n  _inherits(FileManagerNameEditorDialog, _FileManagerDialogBas);\n\n  var _super = _createSuper(FileManagerNameEditorDialog);\n\n  function FileManagerNameEditorDialog() {\n    _classCallCheck(this, FileManagerNameEditorDialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerNameEditorDialog, [{\n    key: \"show\",\n    value: function show(name) {\n      name = name || \"\";\n\n      if (this._nameTextBox) {\n        this._nameTextBox.option(\"value\", name);\n      } else {\n        this._initialNameValue = name;\n      }\n\n      _get(_getPrototypeOf(FileManagerNameEditorDialog.prototype), \"show\", this).call(this);\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {\n      if (!this._nameTextBox) {\n        return;\n      }\n\n      var $textBoxInput = this._nameTextBox._input();\n\n      $textBoxInput.length && $textBoxInput[0].select();\n\n      this._nameTextBox.focus();\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerNameEditorDialog.prototype), \"_getDialogOptions\", this).call(this), {\n        title: this.option(\"title\"),\n        buttonText: this.option(\"buttonText\"),\n        contentCssClass: FILE_MANAGER_DIALOG_NAME_EDITOR,\n        popupCssClass: FILE_MANAGER_DIALOG_NAME_EDITOR_POPUP\n      });\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      _get(_getPrototypeOf(FileManagerNameEditorDialog.prototype), \"_createContentTemplate\", this).call(this, element);\n\n      this._nameTextBox = this._createComponent($(\"<div>\"), TextBox, {\n        value: this._initialNameValue,\n        onEnterKey: this._applyDialogChanges.bind(this)\n      });\n\n      this._$contentElement.append(this._nameTextBox.$element());\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      var nameValue = this._nameTextBox.option(\"value\");\n\n      return nameValue ? {\n        name: nameValue\n      } : null;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerNameEditorDialog.prototype), \"_getDefaultOptions\", this).call(this), {\n        title: \"\",\n        buttonText: \"\"\n      });\n    }\n  }]);\n\n  return FileManagerNameEditorDialog;\n}(FileManagerDialogBase);\n\nexport default FileManagerNameEditorDialog;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.dialog.name_editor.js"],"names":["$","extend","TextBox","FileManagerDialogBase","FILE_MANAGER_DIALOG_NAME_EDITOR","FILE_MANAGER_DIALOG_NAME_EDITOR_POPUP","FileManagerNameEditorDialog","name","_nameTextBox","option","_initialNameValue","$textBoxInput","_input","length","select","focus","title","buttonText","contentCssClass","popupCssClass","element","_createComponent","value","onEnterKey","_applyDialogChanges","bind","_$contentElement","append","$element","nameValue"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,SACIC,MADJ,QAEO,yBAFP;AAGA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,IAAIC,+BAA+B,GAAG,mCAAtC;AACA,IAAIC,qCAAqC,GAAG,yCAA5C;;IACMC,2B;;;;;;;;;;;;;WACF,cAAKC,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,UAAI,KAAKC,YAAT,EAAuB;AACnB,aAAKA,YAAL,CAAkBC,MAAlB,CAAyB,OAAzB,EAAkCF,IAAlC;AACH,OAFD,MAEO;AACH,aAAKG,iBAAL,GAAyBH,IAAzB;AACH;;AACD;AACH;;;WACD,yBAAgB;AACZ,UAAI,CAAC,KAAKC,YAAV,EAAwB;AACpB;AACH;;AACD,UAAIG,aAAa,GAAG,KAAKH,YAAL,CAAkBI,MAAlB,EAApB;;AACAD,MAAAA,aAAa,CAACE,MAAd,IAAwBF,aAAa,CAAC,CAAD,CAAb,CAAiBG,MAAjB,EAAxB;;AACA,WAAKN,YAAL,CAAkBO,KAAlB;AACH;;;WACD,6BAAoB;AAChB,aAAOd,MAAM,qGAA4B;AACrCe,QAAAA,KAAK,EAAE,KAAKP,MAAL,CAAY,OAAZ,CAD8B;AAErCQ,QAAAA,UAAU,EAAE,KAAKR,MAAL,CAAY,YAAZ,CAFyB;AAGrCS,QAAAA,eAAe,EAAEd,+BAHoB;AAIrCe,QAAAA,aAAa,EAAEd;AAJsB,OAA5B,CAAb;AAMH;;;WACD,gCAAuBe,OAAvB,EAAgC;AAC5B,8GAA6BA,OAA7B;;AACA,WAAKZ,YAAL,GAAoB,KAAKa,gBAAL,CAAsBrB,CAAC,CAAC,OAAD,CAAvB,EAAkCE,OAAlC,EAA2C;AAC3DoB,QAAAA,KAAK,EAAE,KAAKZ,iBAD+C;AAE3Da,QAAAA,UAAU,EAAE,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B;AAF+C,OAA3C,CAApB;;AAIA,WAAKC,gBAAL,CAAsBC,MAAtB,CAA6B,KAAKnB,YAAL,CAAkBoB,QAAlB,EAA7B;AACH;;;WACD,4BAAmB;AACf,UAAIC,SAAS,GAAG,KAAKrB,YAAL,CAAkBC,MAAlB,CAAyB,OAAzB,CAAhB;;AACA,aAAOoB,SAAS,GAAG;AACftB,QAAAA,IAAI,EAAEsB;AADS,OAAH,GAEZ,IAFJ;AAGH;;;WACD,8BAAqB;AACjB,aAAO5B,MAAM,sGAA6B;AACtCe,QAAAA,KAAK,EAAE,EAD+B;AAEtCC,QAAAA,UAAU,EAAE;AAF0B,OAA7B,CAAb;AAIH;;;;EA7CqCd,qB;;AA+C1C,eAAeG,2BAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.name_editor.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport TextBox from \"../text_box\";\r\nimport FileManagerDialogBase from \"./ui.file_manager.dialog.js\";\r\nvar FILE_MANAGER_DIALOG_NAME_EDITOR = \"dx-filemanager-dialog-name-editor\";\r\nvar FILE_MANAGER_DIALOG_NAME_EDITOR_POPUP = \"dx-filemanager-dialog-name-editor-popup\";\r\nclass FileManagerNameEditorDialog extends FileManagerDialogBase {\r\n    show(name) {\r\n        name = name || \"\";\r\n        if (this._nameTextBox) {\r\n            this._nameTextBox.option(\"value\", name)\r\n        } else {\r\n            this._initialNameValue = name\r\n        }\r\n        super.show()\r\n    }\r\n    _onPopupShown() {\r\n        if (!this._nameTextBox) {\r\n            return\r\n        }\r\n        var $textBoxInput = this._nameTextBox._input();\r\n        $textBoxInput.length && $textBoxInput[0].select();\r\n        this._nameTextBox.focus()\r\n    }\r\n    _getDialogOptions() {\r\n        return extend(super._getDialogOptions(), {\r\n            title: this.option(\"title\"),\r\n            buttonText: this.option(\"buttonText\"),\r\n            contentCssClass: FILE_MANAGER_DIALOG_NAME_EDITOR,\r\n            popupCssClass: FILE_MANAGER_DIALOG_NAME_EDITOR_POPUP\r\n        })\r\n    }\r\n    _createContentTemplate(element) {\r\n        super._createContentTemplate(element);\r\n        this._nameTextBox = this._createComponent($(\"<div>\"), TextBox, {\r\n            value: this._initialNameValue,\r\n            onEnterKey: this._applyDialogChanges.bind(this)\r\n        });\r\n        this._$contentElement.append(this._nameTextBox.$element())\r\n    }\r\n    _getDialogResult() {\r\n        var nameValue = this._nameTextBox.option(\"value\");\r\n        return nameValue ? {\r\n            name: nameValue\r\n        } : null\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            title: \"\",\r\n            buttonText: \"\"\r\n        })\r\n    }\r\n}\r\nexport default FileManagerNameEditorDialog;\r\n"]},"metadata":{},"sourceType":"module"}