{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxPivotGrid from 'devextreme/ui/pivot_grid';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.1.3\n * Build date: Tue May 18 2021\n *\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/**\n * The PivotGrid is a UI component that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nvar DxPivotGridComponent = /*@__PURE__*/function () {\n  var DxPivotGridComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxPivotGridComponent, _DxComponent);\n\n    var _super = _createSuper(DxPivotGridComponent);\n\n    function DxPivotGridComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxPivotGridComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'cellClick',\n        emit: 'onCellClick'\n      }, {\n        subscribe: 'cellPrepared',\n        emit: 'onCellPrepared'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuPreparing',\n        emit: 'onContextMenuPreparing'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'allowExpandAllChange'\n      }, {\n        emit: 'allowFilteringChange'\n      }, {\n        emit: 'allowSortingChange'\n      }, {\n        emit: 'allowSortingBySummaryChange'\n      }, {\n        emit: 'dataFieldAreaChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'encodeHtmlChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'fieldChooserChange'\n      }, {\n        emit: 'fieldPanelChange'\n      }, {\n        emit: 'headerFilterChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hideEmptySummaryCellsChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'loadPanelChange'\n      }, {\n        emit: 'rowHeaderLayoutChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollingChange'\n      }, {\n        emit: 'showBordersChange'\n      }, {\n        emit: 'showColumnGrandTotalsChange'\n      }, {\n        emit: 'showColumnTotalsChange'\n      }, {\n        emit: 'showRowGrandTotalsChange'\n      }, {\n        emit: 'showRowTotalsChange'\n      }, {\n        emit: 'showTotalsPriorChange'\n      }, {\n        emit: 'stateStoringChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wordWrapEnabledChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     *\n    \r\n     */\n\n\n    _createClass(DxPivotGridComponent, [{\n      key: \"allowExpandAll\",\n      get: function get() {\n        return this._getOption('allowExpandAll');\n      },\n      set: function set(value) {\n        this._setOption('allowExpandAll', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"allowFiltering\",\n      get: function get() {\n        return this._getOption('allowFiltering');\n      },\n      set: function set(value) {\n        this._setOption('allowFiltering', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"allowSorting\",\n      get: function get() {\n        return this._getOption('allowSorting');\n      },\n      set: function set(value) {\n        this._setOption('allowSorting', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"allowSortingBySummary\",\n      get: function get() {\n        return this._getOption('allowSortingBySummary');\n      },\n      set: function set(value) {\n        this._setOption('allowSortingBySummary', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"dataFieldArea\",\n      get: function get() {\n        return this._getOption('dataFieldArea');\n      },\n      set: function set(value) {\n        this._setOption('dataFieldArea', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"encodeHtml\",\n      get: function get() {\n        return this._getOption('encodeHtml');\n      },\n      set: function set(value) {\n        this._setOption('encodeHtml', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"fieldChooser\",\n      get: function get() {\n        return this._getOption('fieldChooser');\n      },\n      set: function set(value) {\n        this._setOption('fieldChooser', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"fieldPanel\",\n      get: function get() {\n        return this._getOption('fieldPanel');\n      },\n      set: function set(value) {\n        this._setOption('fieldPanel', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"headerFilter\",\n      get: function get() {\n        return this._getOption('headerFilter');\n      },\n      set: function set(value) {\n        this._setOption('headerFilter', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"hideEmptySummaryCells\",\n      get: function get() {\n        return this._getOption('hideEmptySummaryCells');\n      },\n      set: function set(value) {\n        this._setOption('hideEmptySummaryCells', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"loadPanel\",\n      get: function get() {\n        return this._getOption('loadPanel');\n      },\n      set: function set(value) {\n        this._setOption('loadPanel', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"rowHeaderLayout\",\n      get: function get() {\n        return this._getOption('rowHeaderLayout');\n      },\n      set: function set(value) {\n        this._setOption('rowHeaderLayout', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"scrolling\",\n      get: function get() {\n        return this._getOption('scrolling');\n      },\n      set: function set(value) {\n        this._setOption('scrolling', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showBorders\",\n      get: function get() {\n        return this._getOption('showBorders');\n      },\n      set: function set(value) {\n        this._setOption('showBorders', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showColumnGrandTotals\",\n      get: function get() {\n        return this._getOption('showColumnGrandTotals');\n      },\n      set: function set(value) {\n        this._setOption('showColumnGrandTotals', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showColumnTotals\",\n      get: function get() {\n        return this._getOption('showColumnTotals');\n      },\n      set: function set(value) {\n        this._setOption('showColumnTotals', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showRowGrandTotals\",\n      get: function get() {\n        return this._getOption('showRowGrandTotals');\n      },\n      set: function set(value) {\n        this._setOption('showRowGrandTotals', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showRowTotals\",\n      get: function get() {\n        return this._getOption('showRowTotals');\n      },\n      set: function set(value) {\n        this._setOption('showRowTotals', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"showTotalsPrior\",\n      get: function get() {\n        return this._getOption('showTotalsPrior');\n      },\n      set: function set(value) {\n        this._setOption('showTotalsPrior', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"stateStoring\",\n      get: function get() {\n        return this._getOption('stateStoring');\n      },\n      set: function set(value) {\n        this._setOption('stateStoring', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"texts\",\n      get: function get() {\n        return this._getOption('texts');\n      },\n      set: function set(value) {\n        this._setOption('texts', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"wordWrapEnabled\",\n      get: function get() {\n        return this._getOption('wordWrapEnabled');\n      },\n      set: function set(value) {\n        this._setOption('wordWrapEnabled', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxPivotGrid(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxPivotGridComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxPivotGridComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxPivotGridComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxPivotGridComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxPivotGridComponent;\n  }(DxComponent);\n\n  DxPivotGridComponent.ɵfac = function DxPivotGridComponent_Factory(t) {\n    return new (t || DxPivotGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxPivotGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: DxPivotGridComponent,\n    selectors: [[\"dx-pivot-grid\"]],\n    inputs: {\n      allowExpandAll: \"allowExpandAll\",\n      allowFiltering: \"allowFiltering\",\n      allowSorting: \"allowSorting\",\n      allowSortingBySummary: \"allowSortingBySummary\",\n      dataFieldArea: \"dataFieldArea\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      encodeHtml: \"encodeHtml\",\n      export: \"export\",\n      fieldChooser: \"fieldChooser\",\n      fieldPanel: \"fieldPanel\",\n      headerFilter: \"headerFilter\",\n      height: \"height\",\n      hideEmptySummaryCells: \"hideEmptySummaryCells\",\n      hint: \"hint\",\n      loadPanel: \"loadPanel\",\n      rowHeaderLayout: \"rowHeaderLayout\",\n      rtlEnabled: \"rtlEnabled\",\n      scrolling: \"scrolling\",\n      showBorders: \"showBorders\",\n      showColumnGrandTotals: \"showColumnGrandTotals\",\n      showColumnTotals: \"showColumnTotals\",\n      showRowGrandTotals: \"showRowGrandTotals\",\n      showRowTotals: \"showRowTotals\",\n      showTotalsPrior: \"showTotalsPrior\",\n      stateStoring: \"stateStoring\",\n      tabIndex: \"tabIndex\",\n      texts: \"texts\",\n      visible: \"visible\",\n      width: \"width\",\n      wordWrapEnabled: \"wordWrapEnabled\"\n    },\n    outputs: {\n      onCellClick: \"onCellClick\",\n      onCellPrepared: \"onCellPrepared\",\n      onContentReady: \"onContentReady\",\n      onContextMenuPreparing: \"onContextMenuPreparing\",\n      onDisposing: \"onDisposing\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      allowExpandAllChange: \"allowExpandAllChange\",\n      allowFilteringChange: \"allowFilteringChange\",\n      allowSortingChange: \"allowSortingChange\",\n      allowSortingBySummaryChange: \"allowSortingBySummaryChange\",\n      dataFieldAreaChange: \"dataFieldAreaChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      encodeHtmlChange: \"encodeHtmlChange\",\n      exportChange: \"exportChange\",\n      fieldChooserChange: \"fieldChooserChange\",\n      fieldPanelChange: \"fieldPanelChange\",\n      headerFilterChange: \"headerFilterChange\",\n      heightChange: \"heightChange\",\n      hideEmptySummaryCellsChange: \"hideEmptySummaryCellsChange\",\n      hintChange: \"hintChange\",\n      loadPanelChange: \"loadPanelChange\",\n      rowHeaderLayoutChange: \"rowHeaderLayoutChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollingChange: \"scrollingChange\",\n      showBordersChange: \"showBordersChange\",\n      showColumnGrandTotalsChange: \"showColumnGrandTotalsChange\",\n      showColumnTotalsChange: \"showColumnTotalsChange\",\n      showRowGrandTotalsChange: \"showRowGrandTotalsChange\",\n      showRowTotalsChange: \"showRowTotalsChange\",\n      showTotalsPriorChange: \"showTotalsPriorChange\",\n      stateStoringChange: \"stateStoringChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textsChange: \"textsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wordWrapEnabledChange: \"wordWrapEnabledChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxPivotGridComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  DxPivotGridComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxPivotGridComponent);\n  return DxPivotGridComponent;\n}();\n\nvar DxPivotGridModule = /*@__PURE__*/function () {\n  var DxPivotGridModule = function DxPivotGridModule() {\n    _classCallCheck(this, DxPivotGridModule);\n  };\n\n  DxPivotGridModule.ɵfac = function DxPivotGridModule_Factory(t) {\n    return new (t || DxPivotGridModule)();\n  };\n\n  DxPivotGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: DxPivotGridModule\n  });\n  DxPivotGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxTemplateModule]\n  });\n  return DxPivotGridModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxPivotGridModule, {\n    declarations: function declarations() {\n      return [DxPivotGridComponent];\n    },\n    imports: function imports() {\n      return [DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxPivotGridComponent, DxoDataSourceModule, DxiFieldModule, DxoFormatModule, DxoHeaderFilterModule, DxoStoreModule, DxoExportModule, DxoFieldChooserModule, DxoTextsModule, DxoFieldPanelModule, DxoLoadPanelModule, DxoScrollingModule, DxoStateStoringModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxPivotGridComponent, DxPivotGridModule };","map":null,"metadata":{},"sourceType":"module"}