{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { when } from \"../../core/utils/deferred\";\nimport { ensureDefined, equalByValue } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Widget from \"../widget/ui.widget\";\nimport notify from \"../notify\";\nimport { findItemsByKeys, extendAttributes } from \"./ui.file_manager.common\";\nimport FileItemsController from \"./file_items_controller\";\nimport { FileManagerCommandManager } from \"./ui.file_manager.command_manager\";\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\nvar FILE_MANAGER_INACTIVE_AREA_CLASS = FILE_MANAGER_CLASS + \"-inactive-area\";\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\nvar VIEW_AREAS = {\n  folders: \"navPane\",\n  items: \"itemView\"\n};\n\nvar FileManager = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManager, _Widget);\n\n  var _super = _createSuper(FileManager);\n\n  function FileManager() {\n    _classCallCheck(this, FileManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManager, [{\n    key: \"_initTemplates\",\n    value: function _initTemplates() {}\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(FileManager.prototype), \"_init\", this).call(this);\n\n      this._controller = new FileItemsController({\n        currentPath: this.option(\"currentPath\"),\n        currentPathKeys: this.option(\"currentPathKeys\"),\n        rootText: this.option(\"rootFolderName\"),\n        fileProvider: this.option(\"fileSystemProvider\"),\n        allowedFileExtensions: this.option(\"allowedFileExtensions\"),\n        uploadMaxFileSize: this.option(\"upload\").maxFileSize,\n        uploadChunkSize: this.option(\"upload\").chunkSize,\n        onInitialized: this._onControllerInitialized.bind(this),\n        onDataLoading: this._onDataLoading.bind(this),\n        onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this)\n      });\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManager.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._firstItemViewLoad = true;\n      this._lockSelectionProcessing = false;\n      this._lockFocusedItemProcessing = false;\n      this._itemKeyToFocus = void 0;\n      this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\n      this.$element().addClass(FILE_MANAGER_CLASS);\n\n      this._createNotificationControl();\n\n      this._initCommandManager();\n\n      this._setItemsViewAreaActive(false);\n    }\n  }, {\n    key: \"_createNotificationControl\",\n    value: function _createNotificationControl() {\n      var _this = this;\n\n      var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\n      this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\n        progressPanelContainer: this.$element(),\n        contentTemplate: function contentTemplate(container, notificationControl) {\n          return _this._createWrapper(container, notificationControl);\n        },\n        onActionProgress: function onActionProgress(e) {\n          return _this._onActionProgress(e);\n        },\n        positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\n        showProgressPanel: this.option(\"notifications.showPanel\"),\n        showNotificationPopup: this.option(\"notifications.showPopup\")\n      });\n    }\n  }, {\n    key: \"_createWrapper\",\n    value: function _createWrapper(container, notificationControl) {\n      var _this2 = this;\n\n      this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\n\n      this._createEditing(notificationControl);\n\n      var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\n      this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\n        commandManager: this._commandManager,\n        generalItems: this.option(\"toolbar.items\"),\n        fileItems: this.option(\"toolbar.fileSelectionItems\"),\n        itemViewMode: this.option(\"itemView\").mode,\n        onItemClick: function onItemClick(args) {\n          return _this2._actions.onToolbarItemClick(args);\n        }\n      });\n\n      this._createAdaptivityControl();\n    }\n  }, {\n    key: \"_createAdaptivityControl\",\n    value: function _createAdaptivityControl() {\n      var _this3 = this;\n\n      var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\n      this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\n        drawerTemplate: function drawerTemplate(container) {\n          return _this3._createFilesTreeView(container);\n        },\n        contentTemplate: function contentTemplate(container) {\n          return _this3._createItemsPanel(container);\n        },\n        onAdaptiveStateChanged: function onAdaptiveStateChanged(e) {\n          return _this3._onAdaptiveStateChanged(e);\n        }\n      });\n    }\n  }, {\n    key: \"_createEditing\",\n    value: function _createEditing(notificationControl) {\n      var _this4 = this;\n\n      var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\n      this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\n        controller: this._controller,\n        model: {\n          getMultipleSelectedItems: this._getMultipleSelectedItems.bind(this)\n        },\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        notificationControl: notificationControl,\n        uploadDropZonePlaceholderContainer: this.$element(),\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        onSuccess: function onSuccess(_ref) {\n          var updatedOnlyFiles = _ref.updatedOnlyFiles;\n          return _this4._redrawComponent(updatedOnlyFiles);\n        },\n        onCreating: function onCreating() {\n          return _this4._setItemsViewAreaActive(false);\n        },\n        onError: function onError(e) {\n          return _this4._onEditingError(e);\n        }\n      });\n    }\n  }, {\n    key: \"_createItemsPanel\",\n    value: function _createItemsPanel($container) {\n      this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\n\n      this._createBreadcrumbs(this._$itemsPanel);\n\n      this._createItemView(this._$itemsPanel);\n\n      if (this._commandManager.isCommandAvailable(\"upload\")) {\n        this._editing.setUploaderDropZone(this._$itemsPanel);\n      }\n    }\n  }, {\n    key: \"_createFilesTreeView\",\n    value: function _createFilesTreeView(container) {\n      var _this5 = this;\n\n      this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\n      var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\n      this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\n        storeExpandedState: true,\n        contextMenu: this._filesTreeViewContextMenu,\n        getDirectories: this.getDirectories.bind(this),\n        getCurrentDirectory: this._getCurrentDirectory.bind(this),\n        onDirectoryClick: this._onFilesTreeViewDirectoryClick.bind(this),\n        onClick: function onClick() {\n          return _this5._setItemsViewAreaActive(false);\n        }\n      });\n\n      this._filesTreeView.updateCurrentDirectory();\n    }\n  }, {\n    key: \"_createItemView\",\n    value: function _createItemView($container, viewMode) {\n      var _this6 = this;\n\n      this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\n      var itemViewOptions = this.option(\"itemView\");\n      var options = {\n        selectionMode: this.option(\"selectionMode\"),\n        selectedItemKeys: this.option(\"selectedItemKeys\"),\n        focusedItemKey: this.option(\"focusedItemKey\"),\n        contextMenu: this._itemViewContextMenu,\n        getItems: this._getItemViewItems.bind(this),\n        onError: function onError(_ref2) {\n          var error = _ref2.error;\n          return _this6._showError(error);\n        },\n        onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\n        onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\n        onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\n        onContextMenuShowing: function onContextMenuShowing(e) {\n          return _this6._onContextMenuShowing(VIEW_AREAS.items, e);\n        },\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        customizeDetailColumns: this.option(\"customizeDetailColumns\"),\n        detailColumns: this.option(\"itemView.details.columns\")\n      };\n      var $itemView = $(\"<div>\").appendTo($container);\n      viewMode = viewMode || itemViewOptions.mode;\n      var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\n      this._itemView = this._createComponent($itemView, widgetClass, options);\n      eventsEngine.on($itemView, \"click\", this._onItemViewClick.bind(this));\n    }\n  }, {\n    key: \"_createBreadcrumbs\",\n    value: function _createBreadcrumbs($container) {\n      var _this7 = this;\n\n      var $breadcrumbs = $(\"<div>\").appendTo($container);\n      this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\n        rootFolderDisplayName: this.option(\"rootFolderName\"),\n        onCurrentDirectoryChanging: function onCurrentDirectoryChanging(_ref3) {\n          var currentDirectory = _ref3.currentDirectory;\n          return _this7._setCurrentDirectory(currentDirectory, true);\n        }\n      });\n\n      this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory());\n    }\n  }, {\n    key: \"_createContextMenu\",\n    value: function _createContextMenu(isolateCreationItemCommands, viewArea) {\n      var _this8 = this;\n\n      var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\n      return this._createComponent($contextMenu, FileManagerContextMenu, {\n        commandManager: this._commandManager,\n        items: this.option(\"contextMenu.items\"),\n        onItemClick: function onItemClick(args) {\n          return _this8._actions.onContextMenuItemClick(args);\n        },\n        onContextMenuShowing: function onContextMenuShowing(e) {\n          return _this8._onContextMenuShowing(viewArea, e);\n        },\n        isolateCreationItemCommands: isolateCreationItemCommands,\n        viewArea: viewArea\n      });\n    }\n  }, {\n    key: \"_initCommandManager\",\n    value: function _initCommandManager() {\n      var _this9 = this;\n\n      var actions = extend(this._editing.getCommandActions(), {\n        refresh: function refresh() {\n          return _this9._refreshAndShowProgress();\n        },\n        thumbnails: function thumbnails() {\n          return _this9.option(\"itemView.mode\", \"thumbnails\");\n        },\n        details: function details() {\n          return _this9.option(\"itemView.mode\", \"details\");\n        },\n        clearSelection: function clearSelection() {\n          return _this9._clearSelection();\n        },\n        showNavPane: function showNavPane() {\n          return _this9._adaptivityControl.toggleDrawer();\n        }\n      });\n\n      this._commandManager.registerActions(actions);\n    }\n  }, {\n    key: \"_onFilesTreeViewDirectoryClick\",\n    value: function _onFilesTreeViewDirectoryClick(_ref4) {\n      var itemData = _ref4.itemData;\n\n      this._setCurrentDirectory(itemData);\n\n      this._setItemsViewAreaActive(false);\n    }\n  }, {\n    key: \"_onItemViewSelectionChanged\",\n    value: function _onItemViewSelectionChanged(_ref5) {\n      var selectedItemInfos = _ref5.selectedItemInfos,\n          selectedItems = _ref5.selectedItems,\n          selectedItemKeys = _ref5.selectedItemKeys,\n          currentSelectedItemKeys = _ref5.currentSelectedItemKeys,\n          currentDeselectedItemKeys = _ref5.currentDeselectedItemKeys;\n      this._lockSelectionProcessing = true;\n      this.option(\"selectedItemKeys\", selectedItemKeys);\n      this._lockSelectionProcessing = false;\n\n      this._actions.onSelectionChanged({\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedItemKeys,\n        currentSelectedItemKeys: currentSelectedItemKeys,\n        currentDeselectedItemKeys: currentDeselectedItemKeys\n      });\n\n      this._updateToolbar(selectedItemInfos);\n\n      this._setItemsViewAreaActive(true);\n    }\n  }, {\n    key: \"_onItemViewFocusedItemChanged\",\n    value: function _onItemViewFocusedItemChanged(e) {\n      this._lockFocusedItemProcessing = true;\n      this.option(\"focusedItemKey\", e.itemKey);\n      this._lockFocusedItemProcessing = false;\n\n      this._actions.onFocusedItemChanged({\n        item: e.item,\n        itemElement: e.itemElement\n      });\n    }\n  }, {\n    key: \"_onAdaptiveStateChanged\",\n    value: function _onAdaptiveStateChanged(_ref6) {\n      var enabled = _ref6.enabled;\n\n      this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onActionProgress\",\n    value: function _onActionProgress(_ref7) {\n      var message = _ref7.message,\n          status = _ref7.status;\n\n      this._toolbar.updateRefreshItem(message, status);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onEditingError\",\n    value: function _onEditingError(e) {\n      var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\n\n      this._actions.onErrorOccurred(args);\n\n      e.errorText = args.errorText;\n    }\n  }, {\n    key: \"_refreshAndShowProgress\",\n    value: function _refreshAndShowProgress() {\n      var _this10 = this;\n\n      return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(function () {\n        return _this10._filesTreeView.refresh();\n      });\n    }\n  }, {\n    key: \"_updateToolbar\",\n    value: function _updateToolbar(selectedItems) {\n      var items = selectedItems || this._getSelectedItemInfos();\n\n      this._toolbar.update(items);\n    }\n  }, {\n    key: \"_setItemsViewAreaActive\",\n    value: function _setItemsViewAreaActive(active) {\n      if (this._itemsViewAreaActive === active) {\n        return;\n      }\n\n      this._itemsViewAreaActive = active;\n      var $activeArea = null;\n      var $inactiveArea = null;\n\n      if (active) {\n        $activeArea = this._itemView.$element();\n        $inactiveArea = this._filesTreeView.$element();\n      } else {\n        $activeArea = this._filesTreeView.$element();\n        $inactiveArea = this._itemView.$element();\n      }\n\n      $activeArea.removeClass(FILE_MANAGER_INACTIVE_AREA_CLASS);\n      $inactiveArea.addClass(FILE_MANAGER_INACTIVE_AREA_CLASS);\n    }\n  }, {\n    key: \"_switchView\",\n    value: function _switchView(viewMode) {\n      this._disposeWidget(this._itemView.option(\"contextMenu\"));\n\n      this._disposeWidget(this._itemView);\n\n      this._createItemView(this._$itemsPanel, viewMode);\n\n      this._toolbar.option({\n        itemViewMode: viewMode\n      });\n    }\n  }, {\n    key: \"_disposeWidget\",\n    value: function _disposeWidget(widget) {\n      widget.dispose();\n      widget.$element().remove();\n    }\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._itemView.clearSelection();\n    }\n  }, {\n    key: \"_getMultipleSelectedItems\",\n    value: function _getMultipleSelectedItems() {\n      return this._itemsViewAreaActive ? this._getSelectedItemInfos() : [this._getCurrentDirectory()];\n    }\n  }, {\n    key: \"_showError\",\n    value: function _showError(message) {\n      this._showNotification(message, false);\n    }\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(message, isSuccess) {\n      notify({\n        message: message,\n        width: 450\n      }, isSuccess ? \"success\" : \"error\", 5e3);\n    }\n  }, {\n    key: \"_redrawComponent\",\n    value: function _redrawComponent(onlyFileItemsView) {\n      var _this11 = this;\n\n      this._itemView.refresh().then(function () {\n        return !onlyFileItemsView && _this11._filesTreeView.refresh();\n      });\n    }\n  }, {\n    key: \"_getItemViewItems\",\n    value: function _getItemViewItems() {\n      var _this12 = this;\n\n      var showFolders = this.option(\"itemView\").showFolders;\n\n      var result = this._controller.getCurrentItems(!showFolders);\n\n      this._updateToolbarWithSelectionOnFirstLoad(result);\n\n      if (this.option(\"itemView.showParentFolder\")) {\n        result = when(result).then(function (items) {\n          return _this12._getPreparedItemViewItems(items);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateToolbarWithSelectionOnFirstLoad\",\n    value: function _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\n      var _this13 = this;\n\n      if (!this._firstItemViewLoad) {\n        return;\n      }\n\n      this._firstItemViewLoad = false;\n      var selectedItemKeys = this.option(\"selectedItemKeys\");\n\n      if (selectedItemKeys.length > 0) {\n        when(itemsResult).done(function (items) {\n          var selectedItems = findItemsByKeys(items, selectedItemKeys);\n\n          if (selectedItems.length > 0) {\n            _this13._updateToolbar(selectedItems);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_getPreparedItemViewItems\",\n    value: function _getPreparedItemViewItems(items) {\n      var selectedDir = this._getCurrentDirectory();\n\n      if (selectedDir.fileItem.isRoot()) {\n        return items;\n      }\n\n      var parentDirItem = selectedDir.fileItem.createClone();\n      parentDirItem.isParentFolder = true;\n      parentDirItem.name = \"..\";\n      parentDirItem.relativeName = \"..\";\n      parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\n\n      var itemsCopy = _toConsumableArray(items);\n\n      itemsCopy.unshift({\n        fileItem: parentDirItem,\n        icon: \"parentfolder\"\n      });\n      return itemsCopy;\n    }\n  }, {\n    key: \"_onItemViewClick\",\n    value: function _onItemViewClick() {\n      this._setItemsViewAreaActive(true);\n    }\n  }, {\n    key: \"_onContextMenuShowing\",\n    value: function _onContextMenuShowing(viewArea, e) {\n      var _e$itemData;\n\n      this._setItemsViewAreaActive(viewArea === VIEW_AREAS.items);\n\n      var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\n      eventArgs = extend(eventArgs, {\n        viewArea: viewArea,\n        fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\n        _isActionButton: e.isActionButton\n      });\n\n      this._actions.onContextMenuShowing(eventArgs);\n\n      e.cancel = ensureDefined(eventArgs.cancel, false);\n    }\n  }, {\n    key: \"_getItemThumbnailInfo\",\n    value: function _getItemThumbnailInfo(fileInfo) {\n      var func = this.option(\"customizeThumbnail\");\n      var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\n\n      if (thumbnail) {\n        return {\n          thumbnail: thumbnail,\n          cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\n        };\n      }\n\n      return {\n        thumbnail: fileInfo.icon\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManager.prototype), \"_getDefaultOptions\", this).call(this), {\n        fileSystemProvider: null,\n        currentPath: \"\",\n        currentPathKeys: [],\n        rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\n        selectionMode: \"multiple\",\n        selectedItemKeys: [],\n        focusedItemKey: void 0,\n        toolbar: {\n          items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"],\n          fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"]\n        },\n        contextMenu: {\n          items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\n        },\n        itemView: {\n          details: {\n            columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\n          },\n          mode: \"details\",\n          showFolders: true,\n          showParentFolder: true\n        },\n        customizeThumbnail: null,\n        customizeDetailColumns: null,\n        onContextMenuItemClick: null,\n        onContextMenuShowing: null,\n        onCurrentDirectoryChanged: null,\n        onSelectedFileOpened: null,\n        onSelectionChanged: null,\n        onFocusedItemChanged: null,\n        onToolbarItemClick: null,\n        onErrorOccurred: null,\n        allowedFileExtensions: [],\n        upload: {\n          maxFileSize: 0,\n          chunkSize: 2e5\n        },\n        permissions: {\n          create: false,\n          copy: false,\n          move: false,\n          delete: false,\n          rename: false,\n          upload: false,\n          download: false\n        },\n        notifications: {\n          showPanel: true,\n          showPopup: true\n        }\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var _this14 = this;\n\n      var name = args.name;\n\n      switch (name) {\n        case \"currentPath\":\n          this._controller.setCurrentPath(args.value);\n\n          break;\n\n        case \"currentPathKeys\":\n          this._controller.setCurrentPathByKeys(args.value);\n\n          break;\n\n        case \"selectedItemKeys\":\n          if (!this._lockSelectionProcessing && this._itemView) {\n            this._itemView.option(\"selectedItemKeys\", args.value);\n          }\n\n          break;\n\n        case \"focusedItemKey\":\n          if (!this._lockFocusedItemProcessing && this._itemView) {\n            this._itemView.option(\"focusedItemKey\", args.value);\n          }\n\n          break;\n\n        case \"rootFolderName\":\n          this._controller.setRootText(args.value);\n\n          this.repaint();\n          break;\n\n        case \"fileSystemProvider\":\n          this._controller.updateProvider(args.value, this.option(\"currentPath\")).then(function () {\n            return _this14.repaint();\n          });\n\n          break;\n\n        case \"allowedFileExtensions\":\n          this._controller.setAllowedFileExtensions(args.value);\n\n          this.repaint();\n          break;\n\n        case \"upload\":\n          this._controller.setUploadOptions(this.option(\"upload\"));\n\n          this.repaint();\n          break;\n\n        case \"permissions\":\n        case \"selectionMode\":\n        case \"customizeThumbnail\":\n        case \"customizeDetailColumns\":\n          this.repaint();\n          break;\n\n        case \"itemView\":\n          if (\"itemView.mode\" === args.fullName) {\n            this._switchView(args.value);\n          } else {\n            this.repaint();\n          }\n\n          break;\n\n        case \"toolbar\":\n          var toolbarOptions = {};\n\n          if (\"toolbar\" === args.fullName) {\n            if (args.value.items) {\n              toolbarOptions.generalItems = args.value.items;\n            }\n\n            if (args.value.fileSelectionItems) {\n              toolbarOptions.fileItems = args.value.fileSelectionItems;\n            }\n          }\n\n          if (0 === args.fullName.indexOf(\"toolbar.items\")) {\n            toolbarOptions.generalItems = this.option(\"toolbar.items\");\n          }\n\n          if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\n            toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\");\n          }\n\n          this._toolbar.option(toolbarOptions);\n\n          break;\n\n        case \"contextMenu\":\n          if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\n            var contextMenuItems = this.option(\"contextMenu.items\");\n\n            this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\n\n            this._itemViewContextMenu.option(\"items\", contextMenuItems);\n          }\n\n          break;\n\n        case \"notifications\":\n          this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\n\n          this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\n\n          break;\n\n        case \"onContextMenuItemClick\":\n        case \"onContextMenuShowing\":\n        case \"onCurrentDirectoryChanged\":\n        case \"onSelectedFileOpened\":\n        case \"onSelectionChanged\":\n        case \"onFocusedItemChanged\":\n        case \"onToolbarItemClick\":\n        case \"onErrorOccurred\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        case \"rtlEnabled\":\n          this._editing.updateDialogRtl(args.value);\n\n          _get(_getPrototypeOf(FileManager.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManager.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\n        onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n        onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\n        onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\n        onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n        onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n        onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\n        onErrorOccurred: this._createActionByOption(\"onErrorOccurred\")\n      };\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(commandName) {\n      return this._commandManager.executeCommand(commandName);\n    }\n  }, {\n    key: \"_setCurrentDirectory\",\n    value: function _setCurrentDirectory(directoryInfo, checkActuality) {\n      this._controller.setCurrentDirectory(directoryInfo, checkActuality);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function _getCurrentDirectory() {\n      return this._controller.getCurrentDirectory();\n    }\n  }, {\n    key: \"_onControllerInitialized\",\n    value: function _onControllerInitialized(_ref8) {\n      var controller = _ref8.controller;\n      this._controller = this._controller || controller;\n      var currentDirectory = controller.getCurrentDirectory();\n\n      if (!currentDirectory.fileItem.isRoot()) {\n        this._syncToCurrentDirectory();\n      }\n    }\n  }, {\n    key: \"_onDataLoading\",\n    value: function _onDataLoading(_ref9) {\n      var operation = _ref9.operation;\n      var options = null;\n\n      if (\"navigation\" === operation) {\n        options = {\n          focusedItemKey: this._itemKeyToFocus\n        };\n        this._itemKeyToFocus = void 0;\n      }\n\n      this._itemView.refresh(options);\n    }\n  }, {\n    key: \"_onSelectedDirectoryChanged\",\n    value: function _onSelectedDirectoryChanged() {\n      var currentDirectory = this._getCurrentDirectory();\n\n      this._syncToCurrentDirectory();\n\n      this._actions.onCurrentDirectoryChanged({\n        directory: currentDirectory.fileItem\n      });\n    }\n  }, {\n    key: \"_syncToCurrentDirectory\",\n    value: function _syncToCurrentDirectory() {\n      var currentDirectory = this._getCurrentDirectory();\n\n      var currentPath = this._controller.getCurrentPath();\n\n      var currentPathKeys = currentDirectory.fileItem.pathKeys;\n\n      if (this._filesTreeView) {\n        this._filesTreeView.updateCurrentDirectory();\n      }\n\n      if (this._breadcrumbs) {\n        this._breadcrumbs.setCurrentDirectory(currentDirectory);\n      }\n\n      var options = {\n        currentPath: currentPath\n      };\n\n      if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\n        options.currentPathKeys = currentPathKeys;\n      }\n\n      this.option(options);\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n      return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError);\n    }\n  }, {\n    key: \"_getSelectedItemInfos\",\n    value: function _getSelectedItemInfos() {\n      return this._itemView ? this._itemView.getSelectedItems() : [];\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      return this.executeCommand(\"refresh\");\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function getCurrentDirectory() {\n      var directoryInfo = this._getCurrentDirectory();\n\n      return directoryInfo && directoryInfo.fileItem || null;\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {\n      return this._getSelectedItemInfos().map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n    }\n  }, {\n    key: \"_onSelectedItemOpened\",\n    value: function _onSelectedItemOpened(_ref10) {\n      var fileItemInfo = _ref10.fileItemInfo;\n      var fileItem = fileItemInfo.fileItem;\n\n      if (!fileItem.isDirectory) {\n        this._actions.onSelectedFileOpened({\n          file: fileItem\n        });\n\n        return;\n      }\n\n      if (fileItem.isParentFolder) {\n        this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key;\n      }\n\n      var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\n\n      this._setCurrentDirectory(newCurrentDirectory);\n\n      if (newCurrentDirectory) {\n        this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true);\n      }\n    }\n  }]);\n\n  return FileManager;\n}(Widget);\n\nregisterComponent(\"dxFileManager\", FileManager);\nexport default FileManager;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.js"],"names":["$","eventsEngine","extend","isFunction","when","ensureDefined","equalByValue","messageLocalization","registerComponent","Widget","notify","findItemsByKeys","extendAttributes","FileItemsController","FileManagerCommandManager","FileManagerContextMenu","FileManagerFilesTreeView","FileManagerDetailsItemList","FileManagerThumbnailsItemList","FileManagerToolbar","FileManagerNotificationControl","FileManagerEditingControl","FileManagerBreadcrumbs","FileManagerAdaptivityControl","FILE_MANAGER_CLASS","FILE_MANAGER_WRAPPER_CLASS","FILE_MANAGER_CONTAINER_CLASS","FILE_MANAGER_DIRS_PANEL_CLASS","FILE_MANAGER_INACTIVE_AREA_CLASS","FILE_MANAGER_EDITING_CONTAINER_CLASS","FILE_MANAGER_ITEMS_PANEL_CLASS","FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS","PARENT_DIRECTORY_KEY_PREFIX","VIEW_AREAS","folders","items","FileManager","_controller","currentPath","option","currentPathKeys","rootText","fileProvider","allowedFileExtensions","uploadMaxFileSize","maxFileSize","uploadChunkSize","chunkSize","onInitialized","_onControllerInitialized","bind","onDataLoading","_onDataLoading","onSelectedDirectoryChanged","_onSelectedDirectoryChanged","_initActions","_firstItemViewLoad","_lockSelectionProcessing","_lockFocusedItemProcessing","_itemKeyToFocus","_commandManager","$element","addClass","_createNotificationControl","_initCommandManager","_setItemsViewAreaActive","$notificationControl","appendTo","_notificationControl","_createComponent","progressPanelContainer","contentTemplate","container","notificationControl","_createWrapper","onActionProgress","e","_onActionProgress","positionTarget","concat","showProgressPanel","showNotificationPopup","_$wrapper","_createEditing","$toolbar","_toolbar","commandManager","generalItems","fileItems","itemViewMode","mode","onItemClick","args","_actions","onToolbarItemClick","_createAdaptivityControl","$container","_adaptivityControl","drawerTemplate","_createFilesTreeView","_createItemsPanel","onAdaptiveStateChanged","_onAdaptiveStateChanged","$editingContainer","_editing","controller","model","getMultipleSelectedItems","_getMultipleSelectedItems","getItemThumbnail","_getItemThumbnailInfo","uploadDropZonePlaceholderContainer","rtlEnabled","onSuccess","_ref","updatedOnlyFiles","_redrawComponent","onCreating","onError","_onEditingError","_$itemsPanel","_createBreadcrumbs","_createItemView","isCommandAvailable","setUploaderDropZone","_filesTreeViewContextMenu","_createContextMenu","$filesTreeView","_filesTreeView","storeExpandedState","contextMenu","getDirectories","getCurrentDirectory","_getCurrentDirectory","onDirectoryClick","_onFilesTreeViewDirectoryClick","onClick","updateCurrentDirectory","viewMode","_itemViewContextMenu","itemViewOptions","options","selectionMode","selectedItemKeys","focusedItemKey","getItems","_getItemViewItems","_ref2","error","_showError","onSelectionChanged","_onItemViewSelectionChanged","onFocusedItemChanged","_onItemViewFocusedItemChanged","onSelectedItemOpened","_onSelectedItemOpened","onContextMenuShowing","_onContextMenuShowing","customizeDetailColumns","detailColumns","$itemView","widgetClass","_itemView","on","_onItemViewClick","$breadcrumbs","_breadcrumbs","rootFolderDisplayName","onCurrentDirectoryChanging","_ref3","currentDirectory","_setCurrentDirectory","setCurrentDirectory","isolateCreationItemCommands","viewArea","$contextMenu","onContextMenuItemClick","actions","getCommandActions","refresh","_refreshAndShowProgress","thumbnails","details","clearSelection","_clearSelection","showNavPane","toggleDrawer","registerActions","_ref4","itemData","_ref5","selectedItemInfos","selectedItems","currentSelectedItemKeys","currentDeselectedItemKeys","_updateToolbar","itemKey","item","itemElement","_ref6","enabled","setCommandEnabled","_ref7","message","status","updateRefreshItem","onErrorOccurred","errorText","tryShowProgressPanel","then","_getSelectedItemInfos","update","active","_itemsViewAreaActive","$activeArea","$inactiveArea","removeClass","_disposeWidget","widget","dispose","remove","_showNotification","isSuccess","width","onlyFileItemsView","showFolders","result","getCurrentItems","_updateToolbarWithSelectionOnFirstLoad","_getPreparedItemViewItems","itemsResult","length","done","selectedDir","fileItem","isRoot","parentDirItem","createClone","isParentFolder","name","relativeName","key","itemsCopy","unshift","icon","_e$itemData","eventArgs","fileSystemItem","_isActionButton","isActionButton","cancel","fileInfo","func","thumbnail","cssClass","fileSystemProvider","rootFolderName","format","toolbar","location","fileSelectionItems","itemView","columns","showParentFolder","customizeThumbnail","onCurrentDirectoryChanged","onSelectedFileOpened","upload","permissions","create","copy","move","delete","rename","download","notifications","showPanel","showPopup","setCurrentPath","value","setCurrentPathByKeys","setRootText","repaint","updateProvider","setAllowedFileExtensions","setUploadOptions","fullName","_switchView","toolbarOptions","indexOf","contextMenuItems","_createActionByOption","updateDialogRtl","commandName","executeCommand","directoryInfo","checkActuality","_ref8","_syncToCurrentDirectory","_ref9","operation","directory","getCurrentPath","pathKeys","parentDirectoryInfo","skipNavigationOnError","getSelectedItems","map","itemInfo","_ref10","fileItemInfo","isDirectory","file","newCurrentDirectory","parentDirectory","toggleDirectoryExpandedState"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    ensureDefined,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport notify from \"../notify\";\r\nimport {\r\n    findItemsByKeys,\r\n    extendAttributes\r\n} from \"./ui.file_manager.common\";\r\nimport FileItemsController from \"./file_items_controller\";\r\nimport {\r\n    FileManagerCommandManager\r\n} from \"./ui.file_manager.command_manager\";\r\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\r\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\r\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\r\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\r\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\r\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\r\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\r\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\r\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\r\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\r\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\r\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\r\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\r\nvar FILE_MANAGER_INACTIVE_AREA_CLASS = FILE_MANAGER_CLASS + \"-inactive-area\";\r\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\r\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\r\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\r\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\r\nvar VIEW_AREAS = {\r\n    folders: \"navPane\",\r\n    items: \"itemView\"\r\n};\r\nclass FileManager extends Widget {\r\n    _initTemplates() {}\r\n    _init() {\r\n        super._init();\r\n        this._controller = new FileItemsController({\r\n            currentPath: this.option(\"currentPath\"),\r\n            currentPathKeys: this.option(\"currentPathKeys\"),\r\n            rootText: this.option(\"rootFolderName\"),\r\n            fileProvider: this.option(\"fileSystemProvider\"),\r\n            allowedFileExtensions: this.option(\"allowedFileExtensions\"),\r\n            uploadMaxFileSize: this.option(\"upload\").maxFileSize,\r\n            uploadChunkSize: this.option(\"upload\").chunkSize,\r\n            onInitialized: this._onControllerInitialized.bind(this),\r\n            onDataLoading: this._onDataLoading.bind(this),\r\n            onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this)\r\n        })\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._firstItemViewLoad = true;\r\n        this._lockSelectionProcessing = false;\r\n        this._lockFocusedItemProcessing = false;\r\n        this._itemKeyToFocus = void 0;\r\n        this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\r\n        this.$element().addClass(FILE_MANAGER_CLASS);\r\n        this._createNotificationControl();\r\n        this._initCommandManager();\r\n        this._setItemsViewAreaActive(false)\r\n    }\r\n    _createNotificationControl() {\r\n        var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\r\n        this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\r\n            progressPanelContainer: this.$element(),\r\n            contentTemplate: (container, notificationControl) => this._createWrapper(container, notificationControl),\r\n            onActionProgress: e => this._onActionProgress(e),\r\n            positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\r\n            showProgressPanel: this.option(\"notifications.showPanel\"),\r\n            showNotificationPopup: this.option(\"notifications.showPopup\")\r\n        })\r\n    }\r\n    _createWrapper(container, notificationControl) {\r\n        this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\r\n        this._createEditing(notificationControl);\r\n        var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\r\n        this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\r\n            commandManager: this._commandManager,\r\n            generalItems: this.option(\"toolbar.items\"),\r\n            fileItems: this.option(\"toolbar.fileSelectionItems\"),\r\n            itemViewMode: this.option(\"itemView\").mode,\r\n            onItemClick: args => this._actions.onToolbarItemClick(args)\r\n        });\r\n        this._createAdaptivityControl()\r\n    }\r\n    _createAdaptivityControl() {\r\n        var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\r\n        this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\r\n            drawerTemplate: container => this._createFilesTreeView(container),\r\n            contentTemplate: container => this._createItemsPanel(container),\r\n            onAdaptiveStateChanged: e => this._onAdaptiveStateChanged(e)\r\n        })\r\n    }\r\n    _createEditing(notificationControl) {\r\n        var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\r\n        this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\r\n            controller: this._controller,\r\n            model: {\r\n                getMultipleSelectedItems: this._getMultipleSelectedItems.bind(this)\r\n            },\r\n            getItemThumbnail: this._getItemThumbnailInfo.bind(this),\r\n            notificationControl: notificationControl,\r\n            uploadDropZonePlaceholderContainer: this.$element(),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            onSuccess: _ref => {\r\n                var {\r\n                    updatedOnlyFiles: updatedOnlyFiles\r\n                } = _ref;\r\n                return this._redrawComponent(updatedOnlyFiles)\r\n            },\r\n            onCreating: () => this._setItemsViewAreaActive(false),\r\n            onError: e => this._onEditingError(e)\r\n        })\r\n    }\r\n    _createItemsPanel($container) {\r\n        this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\r\n        this._createBreadcrumbs(this._$itemsPanel);\r\n        this._createItemView(this._$itemsPanel);\r\n        if (this._commandManager.isCommandAvailable(\"upload\")) {\r\n            this._editing.setUploaderDropZone(this._$itemsPanel)\r\n        }\r\n    }\r\n    _createFilesTreeView(container) {\r\n        this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\r\n        var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\r\n        this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\r\n            storeExpandedState: true,\r\n            contextMenu: this._filesTreeViewContextMenu,\r\n            getDirectories: this.getDirectories.bind(this),\r\n            getCurrentDirectory: this._getCurrentDirectory.bind(this),\r\n            onDirectoryClick: this._onFilesTreeViewDirectoryClick.bind(this),\r\n            onClick: () => this._setItemsViewAreaActive(false)\r\n        });\r\n        this._filesTreeView.updateCurrentDirectory()\r\n    }\r\n    _createItemView($container, viewMode) {\r\n        this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\r\n        var itemViewOptions = this.option(\"itemView\");\r\n        var options = {\r\n            selectionMode: this.option(\"selectionMode\"),\r\n            selectedItemKeys: this.option(\"selectedItemKeys\"),\r\n            focusedItemKey: this.option(\"focusedItemKey\"),\r\n            contextMenu: this._itemViewContextMenu,\r\n            getItems: this._getItemViewItems.bind(this),\r\n            onError: _ref2 => {\r\n                var {\r\n                    error: error\r\n                } = _ref2;\r\n                return this._showError(error)\r\n            },\r\n            onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\r\n            onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\r\n            onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\r\n            onContextMenuShowing: e => this._onContextMenuShowing(VIEW_AREAS.items, e),\r\n            getItemThumbnail: this._getItemThumbnailInfo.bind(this),\r\n            customizeDetailColumns: this.option(\"customizeDetailColumns\"),\r\n            detailColumns: this.option(\"itemView.details.columns\")\r\n        };\r\n        var $itemView = $(\"<div>\").appendTo($container);\r\n        viewMode = viewMode || itemViewOptions.mode;\r\n        var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\r\n        this._itemView = this._createComponent($itemView, widgetClass, options);\r\n        eventsEngine.on($itemView, \"click\", this._onItemViewClick.bind(this))\r\n    }\r\n    _createBreadcrumbs($container) {\r\n        var $breadcrumbs = $(\"<div>\").appendTo($container);\r\n        this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\r\n            rootFolderDisplayName: this.option(\"rootFolderName\"),\r\n            onCurrentDirectoryChanging: _ref3 => {\r\n                var {\r\n                    currentDirectory: currentDirectory\r\n                } = _ref3;\r\n                return this._setCurrentDirectory(currentDirectory, true)\r\n            }\r\n        });\r\n        this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory())\r\n    }\r\n    _createContextMenu(isolateCreationItemCommands, viewArea) {\r\n        var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\r\n        return this._createComponent($contextMenu, FileManagerContextMenu, {\r\n            commandManager: this._commandManager,\r\n            items: this.option(\"contextMenu.items\"),\r\n            onItemClick: args => this._actions.onContextMenuItemClick(args),\r\n            onContextMenuShowing: e => this._onContextMenuShowing(viewArea, e),\r\n            isolateCreationItemCommands: isolateCreationItemCommands,\r\n            viewArea: viewArea\r\n        })\r\n    }\r\n    _initCommandManager() {\r\n        var actions = extend(this._editing.getCommandActions(), {\r\n            refresh: () => this._refreshAndShowProgress(),\r\n            thumbnails: () => this.option(\"itemView.mode\", \"thumbnails\"),\r\n            details: () => this.option(\"itemView.mode\", \"details\"),\r\n            clearSelection: () => this._clearSelection(),\r\n            showNavPane: () => this._adaptivityControl.toggleDrawer()\r\n        });\r\n        this._commandManager.registerActions(actions)\r\n    }\r\n    _onFilesTreeViewDirectoryClick(_ref4) {\r\n        var {\r\n            itemData: itemData\r\n        } = _ref4;\r\n        this._setCurrentDirectory(itemData);\r\n        this._setItemsViewAreaActive(false)\r\n    }\r\n    _onItemViewSelectionChanged(_ref5) {\r\n        var {\r\n            selectedItemInfos: selectedItemInfos,\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedItemKeys,\r\n            currentSelectedItemKeys: currentSelectedItemKeys,\r\n            currentDeselectedItemKeys: currentDeselectedItemKeys\r\n        } = _ref5;\r\n        this._lockSelectionProcessing = true;\r\n        this.option(\"selectedItemKeys\", selectedItemKeys);\r\n        this._lockSelectionProcessing = false;\r\n        this._actions.onSelectionChanged({\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedItemKeys,\r\n            currentSelectedItemKeys: currentSelectedItemKeys,\r\n            currentDeselectedItemKeys: currentDeselectedItemKeys\r\n        });\r\n        this._updateToolbar(selectedItemInfos);\r\n        this._setItemsViewAreaActive(true)\r\n    }\r\n    _onItemViewFocusedItemChanged(e) {\r\n        this._lockFocusedItemProcessing = true;\r\n        this.option(\"focusedItemKey\", e.itemKey);\r\n        this._lockFocusedItemProcessing = false;\r\n        this._actions.onFocusedItemChanged({\r\n            item: e.item,\r\n            itemElement: e.itemElement\r\n        })\r\n    }\r\n    _onAdaptiveStateChanged(_ref6) {\r\n        var {\r\n            enabled: enabled\r\n        } = _ref6;\r\n        this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\r\n        this._updateToolbar()\r\n    }\r\n    _onActionProgress(_ref7) {\r\n        var {\r\n            message: message,\r\n            status: status\r\n        } = _ref7;\r\n        this._toolbar.updateRefreshItem(message, status);\r\n        this._updateToolbar()\r\n    }\r\n    _onEditingError(e) {\r\n        var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\r\n        this._actions.onErrorOccurred(args);\r\n        e.errorText = args.errorText\r\n    }\r\n    _refreshAndShowProgress() {\r\n        return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(() => this._filesTreeView.refresh())\r\n    }\r\n    _updateToolbar(selectedItems) {\r\n        var items = selectedItems || this._getSelectedItemInfos();\r\n        this._toolbar.update(items)\r\n    }\r\n    _setItemsViewAreaActive(active) {\r\n        if (this._itemsViewAreaActive === active) {\r\n            return\r\n        }\r\n        this._itemsViewAreaActive = active;\r\n        var $activeArea = null;\r\n        var $inactiveArea = null;\r\n        if (active) {\r\n            $activeArea = this._itemView.$element();\r\n            $inactiveArea = this._filesTreeView.$element()\r\n        } else {\r\n            $activeArea = this._filesTreeView.$element();\r\n            $inactiveArea = this._itemView.$element()\r\n        }\r\n        $activeArea.removeClass(FILE_MANAGER_INACTIVE_AREA_CLASS);\r\n        $inactiveArea.addClass(FILE_MANAGER_INACTIVE_AREA_CLASS)\r\n    }\r\n    _switchView(viewMode) {\r\n        this._disposeWidget(this._itemView.option(\"contextMenu\"));\r\n        this._disposeWidget(this._itemView);\r\n        this._createItemView(this._$itemsPanel, viewMode);\r\n        this._toolbar.option({\r\n            itemViewMode: viewMode\r\n        })\r\n    }\r\n    _disposeWidget(widget) {\r\n        widget.dispose();\r\n        widget.$element().remove()\r\n    }\r\n    _clearSelection() {\r\n        this._itemView.clearSelection()\r\n    }\r\n    _getMultipleSelectedItems() {\r\n        return this._itemsViewAreaActive ? this._getSelectedItemInfos() : [this._getCurrentDirectory()]\r\n    }\r\n    _showError(message) {\r\n        this._showNotification(message, false)\r\n    }\r\n    _showNotification(message, isSuccess) {\r\n        notify({\r\n            message: message,\r\n            width: 450\r\n        }, isSuccess ? \"success\" : \"error\", 5e3)\r\n    }\r\n    _redrawComponent(onlyFileItemsView) {\r\n        this._itemView.refresh().then(() => !onlyFileItemsView && this._filesTreeView.refresh())\r\n    }\r\n    _getItemViewItems() {\r\n        var showFolders = this.option(\"itemView\").showFolders;\r\n        var result = this._controller.getCurrentItems(!showFolders);\r\n        this._updateToolbarWithSelectionOnFirstLoad(result);\r\n        if (this.option(\"itemView.showParentFolder\")) {\r\n            result = when(result).then(items => this._getPreparedItemViewItems(items))\r\n        }\r\n        return result\r\n    }\r\n    _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\r\n        if (!this._firstItemViewLoad) {\r\n            return\r\n        }\r\n        this._firstItemViewLoad = false;\r\n        var selectedItemKeys = this.option(\"selectedItemKeys\");\r\n        if (selectedItemKeys.length > 0) {\r\n            when(itemsResult).done(items => {\r\n                var selectedItems = findItemsByKeys(items, selectedItemKeys);\r\n                if (selectedItems.length > 0) {\r\n                    this._updateToolbar(selectedItems)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    _getPreparedItemViewItems(items) {\r\n        var selectedDir = this._getCurrentDirectory();\r\n        if (selectedDir.fileItem.isRoot()) {\r\n            return items\r\n        }\r\n        var parentDirItem = selectedDir.fileItem.createClone();\r\n        parentDirItem.isParentFolder = true;\r\n        parentDirItem.name = \"..\";\r\n        parentDirItem.relativeName = \"..\";\r\n        parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\r\n        var itemsCopy = [...items];\r\n        itemsCopy.unshift({\r\n            fileItem: parentDirItem,\r\n            icon: \"parentfolder\"\r\n        });\r\n        return itemsCopy\r\n    }\r\n    _onItemViewClick() {\r\n        this._setItemsViewAreaActive(true)\r\n    }\r\n    _onContextMenuShowing(viewArea, e) {\r\n        var _e$itemData;\r\n        this._setItemsViewAreaActive(viewArea === VIEW_AREAS.items);\r\n        var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\r\n        eventArgs = extend(eventArgs, {\r\n            viewArea: viewArea,\r\n            fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\r\n            _isActionButton: e.isActionButton\r\n        });\r\n        this._actions.onContextMenuShowing(eventArgs);\r\n        e.cancel = ensureDefined(eventArgs.cancel, false)\r\n    }\r\n    _getItemThumbnailInfo(fileInfo) {\r\n        var func = this.option(\"customizeThumbnail\");\r\n        var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\r\n        if (thumbnail) {\r\n            return {\r\n                thumbnail: thumbnail,\r\n                cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\r\n            }\r\n        }\r\n        return {\r\n            thumbnail: fileInfo.icon\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            fileSystemProvider: null,\r\n            currentPath: \"\",\r\n            currentPathKeys: [],\r\n            rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\r\n            selectionMode: \"multiple\",\r\n            selectedItemKeys: [],\r\n            focusedItemKey: void 0,\r\n            toolbar: {\r\n                items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\r\n                    name: \"separator\",\r\n                    location: \"after\"\r\n                }, \"refresh\"],\r\n                fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\r\n                    name: \"separator\",\r\n                    location: \"after\"\r\n                }, \"refresh\"]\r\n            },\r\n            contextMenu: {\r\n                items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\r\n            },\r\n            itemView: {\r\n                details: {\r\n                    columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\r\n                },\r\n                mode: \"details\",\r\n                showFolders: true,\r\n                showParentFolder: true\r\n            },\r\n            customizeThumbnail: null,\r\n            customizeDetailColumns: null,\r\n            onContextMenuItemClick: null,\r\n            onContextMenuShowing: null,\r\n            onCurrentDirectoryChanged: null,\r\n            onSelectedFileOpened: null,\r\n            onSelectionChanged: null,\r\n            onFocusedItemChanged: null,\r\n            onToolbarItemClick: null,\r\n            onErrorOccurred: null,\r\n            allowedFileExtensions: [],\r\n            upload: {\r\n                maxFileSize: 0,\r\n                chunkSize: 2e5\r\n            },\r\n            permissions: {\r\n                create: false,\r\n                copy: false,\r\n                move: false,\r\n                delete: false,\r\n                rename: false,\r\n                upload: false,\r\n                download: false\r\n            },\r\n            notifications: {\r\n                showPanel: true,\r\n                showPopup: true\r\n            }\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"currentPath\":\r\n                this._controller.setCurrentPath(args.value);\r\n                break;\r\n            case \"currentPathKeys\":\r\n                this._controller.setCurrentPathByKeys(args.value);\r\n                break;\r\n            case \"selectedItemKeys\":\r\n                if (!this._lockSelectionProcessing && this._itemView) {\r\n                    this._itemView.option(\"selectedItemKeys\", args.value)\r\n                }\r\n                break;\r\n            case \"focusedItemKey\":\r\n                if (!this._lockFocusedItemProcessing && this._itemView) {\r\n                    this._itemView.option(\"focusedItemKey\", args.value)\r\n                }\r\n                break;\r\n            case \"rootFolderName\":\r\n                this._controller.setRootText(args.value);\r\n                this.repaint();\r\n                break;\r\n            case \"fileSystemProvider\":\r\n                this._controller.updateProvider(args.value, this.option(\"currentPath\")).then(() => this.repaint());\r\n                break;\r\n            case \"allowedFileExtensions\":\r\n                this._controller.setAllowedFileExtensions(args.value);\r\n                this.repaint();\r\n                break;\r\n            case \"upload\":\r\n                this._controller.setUploadOptions(this.option(\"upload\"));\r\n                this.repaint();\r\n                break;\r\n            case \"permissions\":\r\n            case \"selectionMode\":\r\n            case \"customizeThumbnail\":\r\n            case \"customizeDetailColumns\":\r\n                this.repaint();\r\n                break;\r\n            case \"itemView\":\r\n                if (\"itemView.mode\" === args.fullName) {\r\n                    this._switchView(args.value)\r\n                } else {\r\n                    this.repaint()\r\n                }\r\n                break;\r\n            case \"toolbar\":\r\n                var toolbarOptions = {};\r\n                if (\"toolbar\" === args.fullName) {\r\n                    if (args.value.items) {\r\n                        toolbarOptions.generalItems = args.value.items\r\n                    }\r\n                    if (args.value.fileSelectionItems) {\r\n                        toolbarOptions.fileItems = args.value.fileSelectionItems\r\n                    }\r\n                }\r\n                if (0 === args.fullName.indexOf(\"toolbar.items\")) {\r\n                    toolbarOptions.generalItems = this.option(\"toolbar.items\")\r\n                }\r\n                if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\r\n                    toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\")\r\n                }\r\n                this._toolbar.option(toolbarOptions);\r\n                break;\r\n            case \"contextMenu\":\r\n                if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\r\n                    var contextMenuItems = this.option(\"contextMenu.items\");\r\n                    this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\r\n                    this._itemViewContextMenu.option(\"items\", contextMenuItems)\r\n                }\r\n                break;\r\n            case \"notifications\":\r\n                this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\r\n                this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\r\n                break;\r\n            case \"onContextMenuItemClick\":\r\n            case \"onContextMenuShowing\":\r\n            case \"onCurrentDirectoryChanged\":\r\n            case \"onSelectedFileOpened\":\r\n            case \"onSelectionChanged\":\r\n            case \"onFocusedItemChanged\":\r\n            case \"onToolbarItemClick\":\r\n            case \"onErrorOccurred\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            case \"rtlEnabled\":\r\n                this._editing.updateDialogRtl(args.value);\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\r\n            onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\r\n            onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\r\n            onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\r\n            onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\r\n            onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\r\n            onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\r\n            onErrorOccurred: this._createActionByOption(\"onErrorOccurred\")\r\n        }\r\n    }\r\n    executeCommand(commandName) {\r\n        return this._commandManager.executeCommand(commandName)\r\n    }\r\n    _setCurrentDirectory(directoryInfo, checkActuality) {\r\n        this._controller.setCurrentDirectory(directoryInfo, checkActuality)\r\n    }\r\n    _getCurrentDirectory() {\r\n        return this._controller.getCurrentDirectory()\r\n    }\r\n    _onControllerInitialized(_ref8) {\r\n        var {\r\n            controller: controller\r\n        } = _ref8;\r\n        this._controller = this._controller || controller;\r\n        var currentDirectory = controller.getCurrentDirectory();\r\n        if (!currentDirectory.fileItem.isRoot()) {\r\n            this._syncToCurrentDirectory()\r\n        }\r\n    }\r\n    _onDataLoading(_ref9) {\r\n        var {\r\n            operation: operation\r\n        } = _ref9;\r\n        var options = null;\r\n        if (\"navigation\" === operation) {\r\n            options = {\r\n                focusedItemKey: this._itemKeyToFocus\r\n            };\r\n            this._itemKeyToFocus = void 0\r\n        }\r\n        this._itemView.refresh(options)\r\n    }\r\n    _onSelectedDirectoryChanged() {\r\n        var currentDirectory = this._getCurrentDirectory();\r\n        this._syncToCurrentDirectory();\r\n        this._actions.onCurrentDirectoryChanged({\r\n            directory: currentDirectory.fileItem\r\n        })\r\n    }\r\n    _syncToCurrentDirectory() {\r\n        var currentDirectory = this._getCurrentDirectory();\r\n        var currentPath = this._controller.getCurrentPath();\r\n        var currentPathKeys = currentDirectory.fileItem.pathKeys;\r\n        if (this._filesTreeView) {\r\n            this._filesTreeView.updateCurrentDirectory()\r\n        }\r\n        if (this._breadcrumbs) {\r\n            this._breadcrumbs.setCurrentDirectory(currentDirectory)\r\n        }\r\n        var options = {\r\n            currentPath: currentPath\r\n        };\r\n        if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\r\n            options.currentPathKeys = currentPathKeys\r\n        }\r\n        this.option(options)\r\n    }\r\n    getDirectories(parentDirectoryInfo, skipNavigationOnError) {\r\n        return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError)\r\n    }\r\n    _getSelectedItemInfos() {\r\n        return this._itemView ? this._itemView.getSelectedItems() : []\r\n    }\r\n    refresh() {\r\n        return this.executeCommand(\"refresh\")\r\n    }\r\n    getCurrentDirectory() {\r\n        var directoryInfo = this._getCurrentDirectory();\r\n        return directoryInfo && directoryInfo.fileItem || null\r\n    }\r\n    getSelectedItems() {\r\n        return this._getSelectedItemInfos().map(itemInfo => itemInfo.fileItem)\r\n    }\r\n    _onSelectedItemOpened(_ref10) {\r\n        var {\r\n            fileItemInfo: fileItemInfo\r\n        } = _ref10;\r\n        var fileItem = fileItemInfo.fileItem;\r\n        if (!fileItem.isDirectory) {\r\n            this._actions.onSelectedFileOpened({\r\n                file: fileItem\r\n            });\r\n            return\r\n        }\r\n        if (fileItem.isParentFolder) {\r\n            this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key\r\n        }\r\n        var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\r\n        this._setCurrentDirectory(newCurrentDirectory);\r\n        if (newCurrentDirectory) {\r\n            this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true)\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxFileManager\", FileManager);\r\nexport default FileManager;\r\n"]},"metadata":{},"sourceType":"module"}