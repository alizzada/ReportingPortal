{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_week.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../../core/component_registrator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dateLocalization from \"../../../localization/date\";\nimport SchedulerWorkSpaceVertical from \"./ui.scheduler.work_space_vertical\";\nvar WEEK_CLASS = \"dx-scheduler-work-space-week\";\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerWorkSpaceWeek = /*#__PURE__*/function (_SchedulerWorkSpaceVe) {\n  _inherits(SchedulerWorkSpaceWeek, _SchedulerWorkSpaceVe);\n\n  var _super = _createSuper(SchedulerWorkSpaceWeek);\n\n  function SchedulerWorkSpaceWeek() {\n    _classCallCheck(this, SchedulerWorkSpaceWeek);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpaceWeek, [{\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return WEEK_CLASS;\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return this._getCellCountInDay();\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return 7 * this.option(\"intervalCount\");\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(headerIndex) {\n      var resultDate = new Date(this._firstViewDate);\n      resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n      return resultDate;\n    }\n  }, {\n    key: \"_getStartViewDate\",\n    value: function _getStartViewDate() {\n      return dateUtils.getFirstWeekDate(this.option(\"startDate\"), this._firstDayOfWeek() || dateLocalization.firstDayOfWeekIndex());\n    }\n  }, {\n    key: \"_getIntervalDuration\",\n    value: function _getIntervalDuration() {\n      return 7 * toMs(\"day\") * this.option(\"intervalCount\");\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift, isAllDay) {\n      if (!isAllDay && this.invoke(\"isAdaptive\") && 0 === this.invoke(\"getMaxAppointmentCountPerCellByType\")) {\n        return {\n          top: 0,\n          left: 0,\n          cellPosition: 0\n        };\n      }\n\n      return _get(_getPrototypeOf(SchedulerWorkSpaceWeek.prototype), \"getPositionShift\", this).call(this, timeShift, isAllDay);\n    }\n  }, {\n    key: \"_isApplyCompactAppointmentOffset\",\n    value: function _isApplyCompactAppointmentOffset() {\n      if (this.invoke(\"isAdaptive\") && 0 === this.invoke(\"getMaxAppointmentCountPerCellByType\")) {\n        return false;\n      }\n\n      return _get(_getPrototypeOf(SchedulerWorkSpaceWeek.prototype), \"_isApplyCompactAppointmentOffset\", this).call(this);\n    }\n  }]);\n\n  return SchedulerWorkSpaceWeek;\n}(SchedulerWorkSpaceVertical);\n\nregisterComponent(\"dxSchedulerWorkSpaceWeek\", SchedulerWorkSpaceWeek);\nexport default SchedulerWorkSpaceWeek;","map":null,"metadata":{},"sourceType":"module"}