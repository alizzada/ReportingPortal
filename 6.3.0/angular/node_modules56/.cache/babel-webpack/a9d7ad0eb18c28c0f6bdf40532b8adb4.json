{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isDefined } from \"../../core/utils/type\";\nimport Widget from \"../widget/ui.widget\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport { GanttView } from \"./ui.gantt.view\";\nimport { GanttToolbar, GanttContextMenuBar } from \"./ui.gantt.bars\";\nimport dxTreeList from \"../tree_list\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { hasWindow, getWindow } from \"../../core/utils/window\";\nimport DataOption from \"./ui.gantt.data.option\";\nimport SplitterControl from \"../splitter\";\nimport { GanttDialog } from \"./ui.gantt.dialogs\";\nimport LoadPanel from \"../load_panel\";\nimport { getPublicElement } from \"../../core/element\";\nimport { GanttDataCache } from \"./ui.gantt.cache\";\nimport { GanttExportHelper } from \"./ui.gantt.export_helper\";\nvar window = getWindow();\nvar GANTT_CLASS = \"dx-gantt\";\nvar GANTT_VIEW_CLASS = \"dx-gantt-view\";\nvar GANTT_COLLAPSABLE_ROW = \"dx-gantt-collapsable-row\";\nvar GANTT_TREE_LIST_WRAPPER = \"dx-gantt-treelist-wrapper\";\nvar GANTT_TOOLBAR_WRAPPER = \"dx-gantt-toolbar-wrapper\";\nvar GANTT_MAIN_WRAPPER = \"dx-gantt-main-wrapper\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_DEPENDENCIES = \"dependencies\";\nvar GANTT_RESOURCES = \"resources\";\nvar GANTT_RESOURCE_ASSIGNMENTS = \"resourceAssignments\";\nvar GANTT_NEW_TASK_CACHE_KEY = \"gantt_new_task_key\";\nvar GANTT_DEFAULT_ROW_HEIGHT = 34;\nvar GANTT_MAPPED_FIELD_REGEX = /(\\w*)Expr/;\n\nvar Gantt = /*#__PURE__*/function (_Widget) {\n  _inherits(Gantt, _Widget);\n\n  var _super = _createSuper(Gantt);\n\n  function Gantt() {\n    _classCallCheck(this, Gantt);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Gantt, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(Gantt.prototype), \"_init\", this).call(this);\n\n      this._cache = new GanttDataCache();\n      this._isGanttRendered = false;\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(Gantt.prototype), \"_initMarkup\", this).call(this);\n\n      this.$element().addClass(GANTT_CLASS);\n      this._$toolbarWrapper = $(\"<div>\").addClass(GANTT_TOOLBAR_WRAPPER).appendTo(this.$element());\n      this._$toolbar = $(\"<div>\").appendTo(this._$toolbarWrapper);\n      this._$mainWrapper = $(\"<div>\").addClass(GANTT_MAIN_WRAPPER).appendTo(this.$element());\n      this._$treeListWrapper = $(\"<div>\").addClass(GANTT_TREE_LIST_WRAPPER).appendTo(this._$mainWrapper);\n      this._$treeList = $(\"<div>\").appendTo(this._$treeListWrapper);\n      this._$splitter = $(\"<div>\").appendTo(this._$mainWrapper);\n      this._$ganttView = $(\"<div>\").addClass(GANTT_VIEW_CLASS).appendTo(this._$mainWrapper);\n      this._$dialog = $(\"<div>\").appendTo(this.$element());\n      this._$loadPanel = $(\"<div>\").appendTo(this.$element());\n      this._$contextMenu = $(\"<div>\").appendTo(this.$element());\n\n      this._refreshDataSource(GANTT_TASKS);\n\n      this._refreshDataSource(GANTT_DEPENDENCIES);\n\n      this._refreshDataSource(GANTT_RESOURCES);\n\n      this._refreshDataSource(GANTT_RESOURCE_ASSIGNMENTS);\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      this._isGanttRendered = false;\n\n      _get(_getPrototypeOf(Gantt.prototype), \"_refresh\", this).call(this);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent() {\n      this._isMainElementVisible = this.$element().is(\":visible\");\n\n      if (this._isMainElementVisible && !this._isGanttRendered) {\n        this._isGanttRendered = true;\n\n        this._renderBars();\n\n        this._renderTreeList();\n\n        this._renderSplitter();\n      }\n    }\n  }, {\n    key: \"_renderTreeList\",\n    value: function _renderTreeList() {\n      var _this = this;\n\n      var _this$option = this.option(GANTT_TASKS),\n          keyExpr = _this$option.keyExpr,\n          parentIdExpr = _this$option.parentIdExpr;\n\n      this._treeList = this._createComponent(this._$treeList, dxTreeList, {\n        dataSource: this._tasksRaw,\n        keyExpr: keyExpr,\n        parentIdExpr: parentIdExpr,\n        columns: this._getTreeListColumns(),\n        columnResizingMode: \"nextColumn\",\n        height: this._getTreeListHeight(),\n        width: this.option(\"taskListWidth\"),\n        selection: {\n          mode: this._getSelectionMode(this.option(\"allowSelection\"))\n        },\n        selectedRowKeys: this._getArrayFromOneElement(this.option(\"selectedRowKey\")),\n        sorting: {\n          mode: \"none\"\n        },\n        scrolling: {\n          showScrollbar: \"onHover\",\n          mode: \"virtual\"\n        },\n        allowColumnResizing: true,\n        autoExpandAll: true,\n        showRowLines: this.option(\"showRowLines\"),\n        rootValue: this.option(\"rootValue\"),\n        onContentReady: function onContentReady(e) {\n          _this._onTreeListContentReady(e);\n        },\n        onSelectionChanged: function onSelectionChanged(e) {\n          _this._onTreeListSelectionChanged(e);\n        },\n        onRowCollapsed: function onRowCollapsed(e) {\n          _this._onTreeListRowCollapsed(e);\n        },\n        onRowExpanded: function onRowExpanded(e) {\n          _this._onTreeListRowExpanded(e);\n        },\n        onRowPrepared: function onRowPrepared(e) {\n          _this._onTreeListRowPrepared(e);\n        },\n        onContextMenuPreparing: function onContextMenuPreparing(e) {\n          _this._onTreeListContextMenuPreparing(e);\n        },\n        onRowClick: function onRowClick(e) {\n          _this._onTreeListRowClick(e);\n        },\n        onRowDblClick: function onRowDblClick(e) {\n          _this._onTreeListRowDblClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_renderSplitter\",\n    value: function _renderSplitter() {\n      this._splitter = this._createComponent(this._$splitter, SplitterControl, {\n        container: this.$element(),\n        leftElement: this._$treeListWrapper,\n        rightElement: this._$ganttView,\n        onApplyPanelSize: this._onApplyPanelSize.bind(this)\n      });\n\n      this._splitter.option(\"initialLeftPanelWidth\", this.option(\"taskListWidth\"));\n    }\n  }, {\n    key: \"_renderBars\",\n    value: function _renderBars() {\n      this._bars = [];\n      this._toolbar = new GanttToolbar(this._$toolbar, this);\n\n      this._updateToolbarContent();\n\n      this._bars.push(this._toolbar);\n\n      this._contextMenuBar = new GanttContextMenuBar(this._$contextMenu, this);\n\n      this._updateContextMenu();\n\n      this._bars.push(this._contextMenuBar);\n    }\n  }, {\n    key: \"_initGanttView\",\n    value: function _initGanttView() {\n      var _this2 = this;\n\n      if (this._ganttView) {\n        return;\n      }\n\n      this._ganttView = this._createComponent(this._$ganttView, GanttView, {\n        width: \"100%\",\n        height: this._treeList._$element.get(0).offsetHeight,\n        rowHeight: this._getTreeListRowHeight(),\n        headerHeight: this._getTreeListHeaderHeight(),\n        tasks: this._tasks,\n        dependencies: this._dependencies,\n        resources: this._resources,\n        resourceAssignments: this._resourceAssignments,\n        allowSelection: this.option(\"allowSelection\"),\n        selectedRowKey: this.option(\"selectedRowKey\"),\n        showResources: this.option(\"showResources\"),\n        taskTitlePosition: this.option(\"taskTitlePosition\"),\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        showRowLines: this.option(\"showRowLines\"),\n        scaleType: this.option(\"scaleType\"),\n        editing: this.option(\"editing\"),\n        validation: this.option(\"validation\"),\n        stripLines: this.option(\"stripLines\"),\n        bars: this._bars,\n        mainElement: this.$element(),\n        onSelectionChanged: this._onGanttViewSelectionChanged.bind(this),\n        onScroll: this._onGanttViewScroll.bind(this),\n        onDialogShowing: this._showDialog.bind(this),\n        onPopupMenuShowing: this._showPopupMenu.bind(this),\n        onExpandAll: this._expandAll.bind(this),\n        onCollapseAll: this._collapseAll.bind(this),\n        modelChangesListener: this._createModelChangesListener(),\n        exportHelper: this._getExportHelper(),\n        taskTooltipContentTemplate: this._getTaskTooltipContentTemplateFunc(this.option(\"taskTooltipContentTemplate\")),\n        taskProgressTooltipContentTemplate: this._getTaskProgressTooltipContentTemplateFunc(this.option(\"taskProgressTooltipContentTemplate\")),\n        taskTimeTooltipContentTemplate: this._getTaskTimeTooltipContentTemplateFunc(this.option(\"taskTimeTooltipContentTemplate\")),\n        taskContentTemplate: this._getTaskContentTemplateFunc(this.option(\"taskContentTemplate\")),\n        onTaskClick: function onTaskClick(e) {\n          _this2._onTreeListRowClick(e);\n        },\n        onTaskDblClick: function onTaskDblClick(e) {\n          _this2._onTreeListRowDblClick(e);\n        },\n        onAdjustControl: function onAdjustControl() {\n          _this2._onAdjustControl();\n        }\n      });\n\n      this._fireContentReadyAction();\n    }\n  }, {\n    key: \"_onAdjustControl\",\n    value: function _onAdjustControl() {\n      var elementHeight = this._$element.height();\n\n      this._updateGanttWidth();\n\n      this._setGanttHeight(elementHeight);\n    }\n  }, {\n    key: \"_onApplyPanelSize\",\n    value: function _onApplyPanelSize(e) {\n      this._setInnerElementsWidth(e);\n\n      this._updateGanttRowHeights();\n    }\n  }, {\n    key: \"_updateGanttRowHeights\",\n    value: function _updateGanttRowHeights() {\n      var rowHeight = this._getTreeListRowHeight();\n\n      if (this._getGanttViewOption(\"rowHeight\") !== rowHeight) {\n        var _this$_ganttView;\n\n        this._setGanttViewOption(\"rowHeight\", rowHeight);\n\n        null === (_this$_ganttView = this._ganttView) || void 0 === _this$_ganttView ? void 0 : _this$_ganttView._ganttViewCore.updateRowHeights(rowHeight);\n      }\n    }\n  }, {\n    key: \"_onTreeListContentReady\",\n    value: function _onTreeListContentReady(e) {\n      if (e.component.getDataSource()) {\n        this._initGanttView();\n\n        this._initScrollSync(e.component);\n      }\n    }\n  }, {\n    key: \"_onTreeListRowPrepared\",\n    value: function _onTreeListRowPrepared(e) {\n      if (\"data\" === e.rowType && e.node.children.length > 0) {\n        $(e.rowElement).addClass(GANTT_COLLAPSABLE_ROW);\n      }\n    }\n  }, {\n    key: \"_onTreeListContextMenuPreparing\",\n    value: function _onTreeListContextMenuPreparing(e) {\n      var _e$row, _e$row2;\n\n      if (\"data\" === (null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.rowType)) {\n        this._setTreeListOption(\"selectedRowKeys\", [e.row.data[this.option(\"tasks.keyExpr\")]]);\n      }\n\n      e.items = [];\n      var info = {\n        cancel: false,\n        event: e.event,\n        type: \"task\",\n        key: null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.key,\n        position: {\n          x: e.event.pageX,\n          y: e.event.pageY\n        }\n      };\n\n      this._showPopupMenu(info);\n    }\n  }, {\n    key: \"_onTreeListRowClick\",\n    value: function _onTreeListRowClick(e) {\n      this._raiseTaskClickAction(e.key, e.event);\n    }\n  }, {\n    key: \"_onTreeListRowDblClick\",\n    value: function _onTreeListRowDblClick(e) {\n      if (this._raiseTaskDblClickAction(e.key, e.event)) {\n        this._ganttView._ganttViewCore.showTaskEditDialog();\n      }\n    }\n  }, {\n    key: \"_onTreeListSelectionChanged\",\n    value: function _onTreeListSelectionChanged(e) {\n      var selectedRowKey = e.currentSelectedRowKeys[0];\n\n      this._setGanttViewOption(\"selectedRowKey\", selectedRowKey);\n\n      this._setOptionWithoutOptionChange(\"selectedRowKey\", selectedRowKey);\n\n      this._raiseSelectionChangedAction(selectedRowKey);\n    }\n  }, {\n    key: \"_onTreeListRowCollapsed\",\n    value: function _onTreeListRowCollapsed(e) {\n      this._ganttView.changeTaskExpanded(e.key, false);\n\n      this._adjustHeight();\n    }\n  }, {\n    key: \"_onTreeListRowExpanded\",\n    value: function _onTreeListRowExpanded(e) {\n      this._ganttView.changeTaskExpanded(e.key, true);\n\n      this._adjustHeight();\n    }\n  }, {\n    key: \"_adjustHeight\",\n    value: function _adjustHeight() {\n      if (!this._hasHeight) {\n        this._setGanttViewOption(\"height\", 0);\n\n        this._setGanttViewOption(\"height\", this._treeList._$element.get(0).offsetHeight);\n      }\n    }\n  }, {\n    key: \"_getTreeListHeight\",\n    value: function _getTreeListHeight() {\n      if (this._$treeList.height()) {\n        return this._$treeList.height();\n      }\n\n      this._hasHeight = isDefined(this.option(\"height\")) && \"\" !== this.option(\"height\");\n      return this._hasHeight ? \"100%\" : \"\";\n    }\n  }, {\n    key: \"_getTreeListColumns\",\n    value: function _getTreeListColumns() {\n      var columns = this.option(\"columns\");\n\n      if (columns) {\n        for (var i = 0; i < columns.length; i++) {\n          var column = columns[i];\n          var isKeyColumn = column.dataField === this.option(\"\".concat(GANTT_TASKS, \".keyExpr\")) || column.dataField === this.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\"));\n\n          if (isKeyColumn && !column.dataType) {\n            column.dataType = \"object\";\n          }\n        }\n      }\n\n      return columns;\n    }\n  }, {\n    key: \"_onGanttViewSelectionChanged\",\n    value: function _onGanttViewSelectionChanged(e) {\n      this._setTreeListOption(\"selectedRowKeys\", this._getArrayFromOneElement(e.id));\n    }\n  }, {\n    key: \"_onGanttViewScroll\",\n    value: function _onGanttViewScroll(e) {\n      var treeListScrollable = this._treeList.getScrollable();\n\n      if (treeListScrollable) {\n        var diff = e.scrollTop - treeListScrollable.scrollTop();\n\n        if (0 !== diff) {\n          treeListScrollable.scrollBy({\n            left: 0,\n            top: diff\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onTreeListScroll\",\n    value: function _onTreeListScroll(treeListScrollView) {\n      var ganttViewTaskAreaContainer = this._ganttView.getTaskAreaContainer();\n\n      if (ganttViewTaskAreaContainer.scrollTop !== treeListScrollView.component.scrollTop()) {\n        ganttViewTaskAreaContainer.scrollTop = treeListScrollView.component.scrollTop();\n      }\n    }\n  }, {\n    key: \"_expandAll\",\n    value: function _expandAll() {\n      var _this3 = this;\n\n      this._treeList.forEachNode(function (node) {\n        if (node.children && node.children.length) {\n          _this3._treeList.expandRow(node.key);\n\n          _this3._ganttView.changeTaskExpanded(node.key, true);\n        }\n      });\n    }\n  }, {\n    key: \"_collapseAll\",\n    value: function _collapseAll() {\n      var _this4 = this;\n\n      this._treeList.forEachNode(function (node) {\n        if (node.children && node.children.length) {\n          _this4._treeList.collapseRow(node.key);\n\n          _this4._ganttView.changeTaskExpanded(node.key, false);\n        }\n      });\n    }\n  }, {\n    key: \"_initScrollSync\",\n    value: function _initScrollSync(treeList) {\n      var _this5 = this;\n\n      var treeListScrollable = treeList.getScrollable();\n\n      if (treeListScrollable) {\n        treeListScrollable.off(\"scroll\");\n        treeListScrollable.on(\"scroll\", function (e) {\n          _this5._onTreeListScroll(e);\n        });\n      }\n    }\n  }, {\n    key: \"_getTreeListRowHeight\",\n    value: function _getTreeListRowHeight() {\n      var $row = this._treeList._$element.find(\".dx-data-row\");\n\n      var height = $row.length ? getBoundingRect($row.last().get(0)).height : GANTT_DEFAULT_ROW_HEIGHT;\n\n      if (!height) {\n        height = GANTT_DEFAULT_ROW_HEIGHT;\n      }\n\n      this._correctRowsViewRowHeight(height);\n\n      return height;\n    }\n  }, {\n    key: \"_correctRowsViewRowHeight\",\n    value: function _correctRowsViewRowHeight(height) {\n      var view = this._treeList._views && this._treeList._views.rowsView;\n\n      if ((null === view || void 0 === view ? void 0 : view._rowHeight) !== height) {\n        view._rowHeight = height;\n      }\n    }\n  }, {\n    key: \"_getTreeListHeaderHeight\",\n    value: function _getTreeListHeaderHeight() {\n      return getBoundingRect(this._treeList._$element.find(\".dx-treelist-headers\").get(0)).height;\n    }\n  }, {\n    key: \"_setInnerElementsWidth\",\n    value: function _setInnerElementsWidth(widths) {\n      if (!hasWindow()) {\n        return;\n      }\n\n      if (!widths) {\n        widths = this._getPanelsWidthByOption();\n      }\n\n      this._setTreeListDimension(\"width\", widths.leftPanelWidth);\n\n      this._setGanttViewDimension(\"width\", widths.rightPanelWidth);\n    }\n  }, {\n    key: \"_setTreeListDimension\",\n    value: function _setTreeListDimension(dimension, value) {\n      this._$treeListWrapper[dimension](value);\n\n      this._setTreeListOption(dimension, this._$treeListWrapper[dimension]());\n    }\n  }, {\n    key: \"_setGanttViewDimension\",\n    value: function _setGanttViewDimension(dimension, value) {\n      this._$ganttView[dimension](value);\n\n      this._setGanttViewOption(dimension, this._$ganttView[dimension]());\n    }\n  }, {\n    key: \"_updateGanttWidth\",\n    value: function _updateGanttWidth() {\n      this._splitter._dimensionChanged();\n    }\n  }, {\n    key: \"_setGanttHeight\",\n    value: function _setGanttHeight(height) {\n      var _this$_ganttView2;\n\n      var toolbarHeightOffset = this._$toolbarWrapper.get(0).offsetHeight;\n\n      var mainWrapperHeight = height - toolbarHeightOffset;\n\n      this._setTreeListDimension(\"height\", mainWrapperHeight);\n\n      this._setGanttViewDimension(\"height\", mainWrapperHeight);\n\n      null === (_this$_ganttView2 = this._ganttView) || void 0 === _this$_ganttView2 ? void 0 : _this$_ganttView2._ganttViewCore.resetAndUpdate();\n    }\n  }, {\n    key: \"_getPanelsWidthByOption\",\n    value: function _getPanelsWidthByOption() {\n      return {\n        leftPanelWidth: this.option(\"taskListWidth\"),\n        rightPanelWidth: this._$element.width() - this.option(\"taskListWidth\")\n      };\n    }\n  }, {\n    key: \"_setGanttViewOption\",\n    value: function _setGanttViewOption(optionName, value) {\n      this._ganttView && this._ganttView.option(optionName, value);\n    }\n  }, {\n    key: \"_getGanttViewOption\",\n    value: function _getGanttViewOption(optionName, value) {\n      var _this$_ganttView3;\n\n      return null === (_this$_ganttView3 = this._ganttView) || void 0 === _this$_ganttView3 ? void 0 : _this$_ganttView3.option(optionName);\n    }\n  }, {\n    key: \"_setTreeListOption\",\n    value: function _setTreeListOption(optionName, value) {\n      this._treeList && this._treeList.option(optionName, value);\n    }\n  }, {\n    key: \"_refreshDataSource\",\n    value: function _refreshDataSource(name) {\n      var _this6 = this;\n\n      var dataOption = this[\"_\".concat(name, \"Option\")];\n\n      if (dataOption) {\n        dataOption._disposeDataSource();\n\n        delete this[\"_\".concat(name, \"Option\")];\n        delete this[\"_\".concat(name)];\n      }\n\n      if (this.option(\"\".concat(name, \".dataSource\"))) {\n        dataOption = new DataOption(name, this._getLoadPanel(), function (name, data) {\n          _this6._dataSourceChanged(name, data);\n        });\n        dataOption.option(\"dataSource\", this._getSpecificDataSourceOption(name));\n\n        dataOption._refreshDataSource();\n\n        this[\"_\".concat(name, \"Option\")] = dataOption;\n      }\n    }\n  }, {\n    key: \"_getSpecificDataSourceOption\",\n    value: function _getSpecificDataSourceOption(name) {\n      var dataSource = this.option(\"\".concat(name, \".dataSource\"));\n\n      if (Array.isArray(dataSource)) {\n        return {\n          store: {\n            type: \"array\",\n            data: dataSource,\n            key: this.option(\"\".concat(name, \".keyExpr\"))\n          }\n        };\n      }\n\n      return dataSource;\n    }\n  }, {\n    key: \"_compileGettersByOption\",\n    value: function _compileGettersByOption(optionName) {\n      var getters = {};\n      var optionValue = this.option(optionName);\n\n      for (var field in optionValue) {\n        var exprMatches = field.match(/(\\w*)Expr/);\n\n        if (exprMatches) {\n          getters[exprMatches[1]] = compileGetter(optionValue[exprMatches[0]]);\n        }\n      }\n\n      return getters;\n    }\n  }, {\n    key: \"_compileSettersByOption\",\n    value: function _compileSettersByOption(optionName) {\n      var setters = {};\n      var optionValue = this.option(optionName);\n\n      for (var field in optionValue) {\n        var exprMatches = field.match(/(\\w*)Expr/);\n\n        if (exprMatches) {\n          setters[exprMatches[1]] = compileSetter(optionValue[exprMatches[0]]);\n        }\n      }\n\n      return setters;\n    }\n  }, {\n    key: \"_getStoreObject\",\n    value: function _getStoreObject(optionName, modelObject) {\n      var setters = this._compileSettersByOption(optionName);\n\n      return Object.keys(setters).reduce(function (previous, key) {\n        if (\"key\" !== key) {\n          setters[key](previous, modelObject[key]);\n        }\n\n        return previous;\n      }, {});\n    }\n  }, {\n    key: \"_prepareSetterMapHandler\",\n    value: function _prepareSetterMapHandler(setters) {\n      return function (data) {\n        return Object.keys(setters).reduce(function (previous, key) {\n          var resultKey = \"key\" === key ? \"id\" : key;\n          setters[key](previous, data[resultKey]);\n          return previous;\n        }, {});\n      };\n    }\n  }, {\n    key: \"_prepareMapHandler\",\n    value: function _prepareMapHandler(getters) {\n      return function (data) {\n        return Object.keys(getters).reduce(function (previous, key) {\n          var resultKey = \"key\" === key ? \"id\" : key;\n          previous[resultKey] = getters[key](data);\n          return previous;\n        }, {});\n      };\n    }\n  }, {\n    key: \"_dataSourceChanged\",\n    value: function _dataSourceChanged(dataSourceName, data) {\n      var _this7 = this;\n\n      var getters = this._compileGettersByOption(dataSourceName);\n\n      var mappedData = data.map(this._prepareMapHandler(getters));\n      this[\"_\".concat(dataSourceName)] = mappedData;\n\n      this._setGanttViewOption(dataSourceName, mappedData);\n\n      if (dataSourceName === GANTT_TASKS) {\n        this._tasksRaw = data;\n        var expandedRowKeys = data.map(function (t) {\n          return t[_this7.option(\"tasks.parentIdExpr\")];\n        }).filter(function (value, index, self) {\n          return value && self.indexOf(value) === index;\n        });\n\n        this._setTreeListOption(\"expandedRowKeys\", expandedRowKeys);\n\n        this._setTreeListOption(\"dataSource\", data);\n      }\n    }\n  }, {\n    key: \"_createModelChangesListener\",\n    value: function _createModelChangesListener() {\n      var _this8 = this;\n\n      return {\n        NotifyTaskCreated: function NotifyTaskCreated(task, callback, errorCallback) {\n          _this8._onRecordInserted(GANTT_TASKS, task, callback);\n        },\n        NotifyTaskRemoved: function NotifyTaskRemoved(taskId, errorCallback, task) {\n          _this8._onRecordRemoved(GANTT_TASKS, taskId, task);\n        },\n        NotifyTaskTitleChanged: function NotifyTaskTitleChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"title\", newValue);\n        },\n        NotifyTaskDescriptionChanged: function NotifyTaskDescriptionChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"description\", newValue);\n        },\n        NotifyTaskStartChanged: function NotifyTaskStartChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"start\", newValue);\n        },\n        NotifyTaskEndChanged: function NotifyTaskEndChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"end\", newValue);\n        },\n        NotifyTaskProgressChanged: function NotifyTaskProgressChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"progress\", newValue);\n        },\n        NotifyTaskColorChanged: function NotifyTaskColorChanged(taskId, newValue, errorCallback) {\n          _this8._onRecordUpdated(GANTT_TASKS, taskId, \"color\", newValue);\n        },\n        NotifyParentTaskUpdated: function NotifyParentTaskUpdated(task, errorCallback) {\n          _this8._onParentTaskUpdated(task);\n        },\n        NotifyDependencyInserted: function NotifyDependencyInserted(dependency, callback, errorCallback) {\n          _this8._onRecordInserted(GANTT_DEPENDENCIES, dependency, callback);\n        },\n        NotifyDependencyRemoved: function NotifyDependencyRemoved(dependencyId, errorCallback, dependency) {\n          _this8._onRecordRemoved(GANTT_DEPENDENCIES, dependencyId, dependency);\n        },\n        NotifyResourceCreated: function NotifyResourceCreated(resource, callback, errorCallback) {\n          _this8._onRecordInserted(GANTT_RESOURCES, resource, callback);\n        },\n        NotifyResourceRemoved: function NotifyResourceRemoved(resourceId, errorCallback, resource) {\n          _this8._onRecordRemoved(GANTT_RESOURCES, resourceId, resource);\n        },\n        NotifyResourceAssigned: function NotifyResourceAssigned(assignment, callback, errorCallback) {\n          _this8._onRecordInserted(GANTT_RESOURCE_ASSIGNMENTS, assignment, callback);\n        },\n        NotifyResourceUnassigned: function NotifyResourceUnassigned(assignmentId, errorCallback, assignment) {\n          _this8._onRecordRemoved(GANTT_RESOURCE_ASSIGNMENTS, assignmentId, assignment);\n        },\n        NotifyParentDataRecalculated: function NotifyParentDataRecalculated(data) {\n          _this8._onParentTasksRecalculated(data);\n        },\n        NotifyTaskCreating: function NotifyTaskCreating(args) {\n          _this8._raiseInsertingAction(GANTT_TASKS, args);\n        },\n        NotifyTaskRemoving: function NotifyTaskRemoving(args) {\n          _this8._raiseDeletingAction(GANTT_TASKS, args);\n        },\n        NotifyTaskUpdating: function NotifyTaskUpdating(args) {\n          _this8._raiseUpdatingAction(GANTT_TASKS, args);\n        },\n        NotifyTaskMoving: function NotifyTaskMoving(args) {\n          _this8._raiseUpdatingAction(GANTT_TASKS, args, _this8._getTaskMovingAction());\n        },\n        NotifyTaskEditDialogShowing: function NotifyTaskEditDialogShowing(args) {\n          _this8._raiseTaskEditDialogShowingAction(args);\n        },\n        NotifyResourceManagerDialogShowing: function NotifyResourceManagerDialogShowing(args) {\n          _this8._raiseResourceManagerDialogShowingAction(args);\n        },\n        NotifyDependencyInserting: function NotifyDependencyInserting(args) {\n          _this8._raiseInsertingAction(GANTT_DEPENDENCIES, args);\n        },\n        NotifyDependencyRemoving: function NotifyDependencyRemoving(args) {\n          _this8._raiseDeletingAction(GANTT_DEPENDENCIES, args);\n        },\n        NotifyResourceCreating: function NotifyResourceCreating(args) {\n          _this8._raiseInsertingAction(GANTT_RESOURCES, args);\n        },\n        NotifyResourceRemoving: function NotifyResourceRemoving(args) {\n          _this8._raiseDeletingAction(GANTT_RESOURCES, args);\n        },\n        NotifyResourceAssigning: function NotifyResourceAssigning(args) {\n          _this8._raiseInsertingAction(GANTT_RESOURCE_ASSIGNMENTS, args);\n        },\n        NotifyResourceUnassigning: function NotifyResourceUnassigning(args) {\n          _this8._raiseDeletingAction(GANTT_RESOURCE_ASSIGNMENTS, args);\n        }\n      };\n    }\n  }, {\n    key: \"_onRecordInserted\",\n    value: function _onRecordInserted(optionName, record, callback) {\n      var _this9 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n\n      if (dataOption) {\n        var data = this._getStoreObject(optionName, record);\n\n        if (optionName === GANTT_TASKS) {\n          this._addCustomFieldsDataFromCache(GANTT_NEW_TASK_CACHE_KEY, data);\n        }\n\n        dataOption.insert(data, function (response) {\n          var keyGetter = compileGetter(_this9.option(\"\".concat(optionName, \".keyExpr\")));\n          var insertedId = keyGetter(response);\n          callback(insertedId);\n\n          if (optionName === GANTT_TASKS) {\n            _this9._updateTreeListDataSource();\n\n            var parentId = record.parentId;\n\n            if (void 0 !== parentId) {\n              var expandedRowKeys = _this9._treeList.option(\"expandedRowKeys\");\n\n              if (-1 === expandedRowKeys.indexOf(parentId)) {\n                expandedRowKeys.push(parentId);\n\n                _this9._treeList.option(\"expandedRowKeys\", expandedRowKeys);\n              }\n            }\n\n            _this9._selectTreeListRows(_this9._getArrayFromOneElement(insertedId));\n\n            _this9._setTreeListOption(\"focusedRowKey\", insertedId);\n\n            setTimeout(function () {\n              _this9._updateGanttRowHeights();\n            }, 300);\n          }\n\n          _this9._raiseInsertedAction(optionName, data, insertedId);\n        });\n      }\n    }\n  }, {\n    key: \"_onRecordRemoved\",\n    value: function _onRecordRemoved(optionName, key, data) {\n      var _this10 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n\n      if (dataOption) {\n        dataOption.remove(key, function () {\n          if (optionName === GANTT_TASKS) {\n            _this10._updateTreeListDataSource();\n          }\n\n          _this10._raiseDeletedAction(optionName, key, _this10._convertCoreToMappedData(optionName, data));\n        });\n      }\n    }\n  }, {\n    key: \"_onRecordUpdated\",\n    value: function _onRecordUpdated(optionName, key, fieldName, value) {\n      var _this11 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n      var isTaskUpdated = optionName === GANTT_TASKS;\n\n      if (dataOption) {\n        var setter = compileSetter(this.option(\"\".concat(optionName, \".\").concat(fieldName, \"Expr\")));\n        var data = {};\n        setter(data, value);\n\n        var hasCustomFieldsData = isTaskUpdated && this._cache.hasData(key);\n\n        if (hasCustomFieldsData) {\n          this._addCustomFieldsDataFromCache(key, data);\n        }\n\n        dataOption.update(key, data, function () {\n          if (isTaskUpdated) {\n            if (hasCustomFieldsData) {\n              dataOption._refreshDataSource();\n            }\n\n            _this11._updateTreeListDataSource();\n          }\n\n          _this11._raiseUpdatedAction(optionName, data, key);\n        });\n      }\n    }\n  }, {\n    key: \"_onParentTaskUpdated\",\n    value: function _onParentTaskUpdated(data) {\n      var mappedData = this.getTaskDataByCoreData(data);\n\n      this._raiseUpdatedAction(GANTT_TASKS, mappedData, data.id);\n    }\n  }, {\n    key: \"_onParentTasksRecalculated\",\n    value: function _onParentTasksRecalculated(data) {\n      var setters = this._compileSettersByOption(GANTT_TASKS);\n\n      var treeDataSource = this._appendCustomFields(data.map(this._prepareSetterMapHandler(setters)));\n\n      this._setTreeListOption(\"dataSource\", treeDataSource);\n    }\n  }, {\n    key: \"_appendCustomFields\",\n    value: function _appendCustomFields(data) {\n      var modelData = this._tasksOption && this._tasksOption._getItems();\n\n      var keyGetter = this._getTaskKeyGetter();\n\n      var invertedData = this.getInvertedData(modelData, keyGetter);\n      return data.reduce(function (previous, item) {\n        var key = keyGetter(item);\n        var modelItem = invertedData[key];\n\n        if (!modelItem) {\n          previous.push(item);\n        } else {\n          var updatedItem = {};\n\n          for (var field in modelItem) {\n            updatedItem[field] = Object.prototype.hasOwnProperty.call(item, field) ? item[field] : modelItem[field];\n          }\n\n          previous.push(updatedItem);\n        }\n\n        return previous;\n      }, []);\n    }\n  }, {\n    key: \"_getTaskKeyGetter\",\n    value: function _getTaskKeyGetter() {\n      return compileGetter(this.option(\"\".concat(GANTT_TASKS, \".keyExpr\")));\n    }\n  }, {\n    key: \"getInvertedData\",\n    value: function getInvertedData(data, keyGetter) {\n      var inverted = {};\n\n      if (data) {\n        for (var i = 0; i < data.length; i++) {\n          var dataItem = data[i];\n          var key = keyGetter(dataItem);\n          inverted[key] = dataItem;\n        }\n      }\n\n      return inverted;\n    }\n  }, {\n    key: \"_updateTreeListDataSource\",\n    value: function _updateTreeListDataSource() {\n      if (!this._skipUpdateTreeListDataSource()) {\n        var dataSource = this.option(\"tasks.dataSource\");\n        var storeArray = this._tasksOption._getStore()._array || dataSource.items && dataSource.items();\n\n        this._setTreeListOption(\"dataSource\", storeArray ? storeArray : dataSource);\n      }\n    }\n  }, {\n    key: \"_skipUpdateTreeListDataSource\",\n    value: function _skipUpdateTreeListDataSource() {\n      return this.option(\"validation.autoUpdateParentTasks\");\n    }\n  }, {\n    key: \"_selectTreeListRows\",\n    value: function _selectTreeListRows(keys) {\n      this._setTreeListOption(\"selectedRowKeys\", keys);\n    }\n  }, {\n    key: \"_addCustomFieldsDataFromCache\",\n    value: function _addCustomFieldsDataFromCache(key, data) {\n      this._cache.pullDataFromCache(key, data);\n    }\n  }, {\n    key: \"_saveCustomFieldsDataToCache\",\n    value: function _saveCustomFieldsDataToCache(key, data) {\n      var _this12 = this;\n\n      var forceUpdateOnKeyExpire = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n\n      var customFieldsData = this._getCustomFieldsData(data);\n\n      if (Object.keys(customFieldsData).length > 0) {\n        this._cache.saveData(key, customFieldsData, forceUpdateOnKeyExpire ? function (key, data) {\n          var dataOption = _this12[\"_\".concat(GANTT_TASKS, \"Option\")];\n\n          if (dataOption && data) {\n            dataOption.update(key, data, function (data, key) {\n              var updatedCustomFields = {};\n\n              _this12._addCustomFieldsData(key, updatedCustomFields);\n\n              _this12._updateTreeListDataSource();\n\n              dataOption._refreshDataSource();\n\n              var selectedRowKey = _this12.option(\"selectedRowKey\");\n\n              _this12._ganttView._selectTask(selectedRowKey);\n\n              _this12._raiseUpdatedAction(GANTT_TASKS, updatedCustomFields, key);\n            });\n          }\n        } : null);\n      }\n    }\n  }, {\n    key: \"_getLoadPanel\",\n    value: function _getLoadPanel() {\n      if (!this._loadPanel) {\n        this._loadPanel = this._createComponent(this._$loadPanel, LoadPanel, {\n          position: {\n            of: this.$element()\n          }\n        });\n      }\n\n      return this._loadPanel;\n    }\n  }, {\n    key: \"_createSelectionChangedAction\",\n    value: function _createSelectionChangedAction() {\n      this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n    }\n  }, {\n    key: \"_createTaskClickAction\",\n    value: function _createTaskClickAction() {\n      this._taskClickAction = this._createActionByOption(\"onTaskClick\");\n    }\n  }, {\n    key: \"_createTaskDblClickAction\",\n    value: function _createTaskDblClickAction() {\n      this._taskDblClickAction = this._createActionByOption(\"onTaskDblClick\");\n    }\n  }, {\n    key: \"_createCustomCommandAction\",\n    value: function _createCustomCommandAction() {\n      this._customCommandAction = this._createActionByOption(\"onCustomCommand\");\n    }\n  }, {\n    key: \"_createContextMenuPreparingAction\",\n    value: function _createContextMenuPreparingAction() {\n      this._contextMenuPreparingAction = this._createActionByOption(\"onContextMenuPreparing\");\n    }\n  }, {\n    key: \"_raiseSelectionChangedAction\",\n    value: function _raiseSelectionChangedAction(selectedRowKey) {\n      if (!this._selectionChangedAction) {\n        this._createSelectionChangedAction();\n      }\n\n      this._selectionChangedAction({\n        selectedRowKey: selectedRowKey\n      });\n    }\n  }, {\n    key: \"_raiseCustomCommand\",\n    value: function _raiseCustomCommand(commandName) {\n      if (!this._customCommandAction) {\n        this._createCustomCommandAction();\n      }\n\n      this._customCommandAction({\n        name: commandName\n      });\n    }\n  }, {\n    key: \"_raiseContextMenuPreparing\",\n    value: function _raiseContextMenuPreparing(options) {\n      if (!this._contextMenuPreparingAction) {\n        this._createContextMenuPreparingAction();\n      }\n\n      this._contextMenuPreparingAction(options);\n    }\n  }, {\n    key: \"_raiseInsertingAction\",\n    value: function _raiseInsertingAction(optionName, coreArgs) {\n      var action = this._getInsertingAction(optionName);\n\n      if (action) {\n        var args = {\n          cancel: false,\n          values: this._convertCoreToMappedData(optionName, coreArgs.values)\n        };\n        action(args);\n        coreArgs.cancel = args.cancel;\n        coreArgs.values = this._convertMappedToCoreData(optionName, args.values);\n\n        if (optionName === GANTT_TASKS) {\n          this._saveCustomFieldsDataToCache(GANTT_NEW_TASK_CACHE_KEY, args.values);\n        }\n      }\n    }\n  }, {\n    key: \"_raiseInsertedAction\",\n    value: function _raiseInsertedAction(optionName, data, key) {\n      var action = this._getInsertedAction(optionName);\n\n      if (action) {\n        var args = {\n          values: data,\n          key: key\n        };\n        action(args);\n      }\n    }\n  }, {\n    key: \"_raiseDeletingAction\",\n    value: function _raiseDeletingAction(optionName, coreArgs) {\n      var action = this._getDeletingAction(optionName);\n\n      if (action) {\n        var args = {\n          cancel: false,\n          key: coreArgs.key,\n          values: this._convertCoreToMappedData(optionName, coreArgs.values)\n        };\n        action(args);\n        coreArgs.cancel = args.cancel;\n      }\n    }\n  }, {\n    key: \"_raiseDeletedAction\",\n    value: function _raiseDeletedAction(optionName, key, data) {\n      var action = this._getDeletedAction(optionName);\n\n      if (action) {\n        var args = {\n          key: key,\n          values: data\n        };\n        action(args);\n      }\n    }\n  }, {\n    key: \"_raiseUpdatingAction\",\n    value: function _raiseUpdatingAction(optionName, coreArgs, action) {\n      action = action || this._getUpdatingAction(optionName);\n\n      if (action) {\n        var args = {\n          cancel: false,\n          key: coreArgs.key,\n          newValues: this._convertCoreToMappedData(optionName, coreArgs.newValues),\n          values: this._convertCoreToMappedData(optionName, coreArgs.values)\n        };\n        action(args);\n        coreArgs.cancel = args.cancel;\n        coreArgs.newValues = this._convertMappedToCoreData(optionName, args.newValues);\n\n        if (optionName === GANTT_TASKS) {\n          this._saveCustomFieldsDataToCache(args.key, args.newValues);\n        }\n      }\n    }\n  }, {\n    key: \"_raiseUpdatedAction\",\n    value: function _raiseUpdatedAction(optionName, data, key) {\n      var action = this._getUpdatedAction(optionName);\n\n      if (action) {\n        var args = {\n          values: data,\n          key: key\n        };\n        action(args);\n      }\n    }\n  }, {\n    key: \"_raiseTaskEditDialogShowingAction\",\n    value: function _raiseTaskEditDialogShowingAction(coreArgs) {\n      var action = this._getTaskEditDialogShowingAction();\n\n      if (action) {\n        var args = {\n          cancel: false,\n          key: coreArgs.key,\n          values: this._convertCoreToMappedData(GANTT_TASKS, coreArgs.values),\n          readOnlyFields: this._convertCoreToMappedFields(GANTT_TASKS, coreArgs.readOnlyFields),\n          hiddenFields: this._convertCoreToMappedFields(GANTT_TASKS, coreArgs.hiddenFields)\n        };\n        action(args);\n        coreArgs.cancel = args.cancel;\n        coreArgs.values = this._convertMappedToCoreData(GANTT_TASKS, args.values);\n        coreArgs.readOnlyFields = this._convertMappedToCoreFields(GANTT_TASKS, args.readOnlyFields);\n        coreArgs.hiddenFields = this._convertMappedToCoreFields(GANTT_TASKS, args.hiddenFields);\n      }\n    }\n  }, {\n    key: \"_raiseResourceManagerDialogShowingAction\",\n    value: function _raiseResourceManagerDialogShowingAction(coreArgs) {\n      var _this13 = this;\n\n      var action = this._getResourceManagerDialogShowingAction();\n\n      if (action) {\n        var mappedResources = coreArgs.values.resources.items.map(function (r) {\n          return _this13._convertMappedToCoreData(GANTT_RESOURCES, r);\n        });\n        var args = {\n          cancel: false,\n          values: mappedResources\n        };\n        action(args);\n        coreArgs.cancel = args.cancel;\n      }\n    }\n  }, {\n    key: \"_raiseTaskClickAction\",\n    value: function _raiseTaskClickAction(key, event) {\n      if (!this._taskClickAction) {\n        this._createTaskClickAction();\n      }\n\n      var args = {\n        key: key,\n        event: event,\n        data: this.getTaskData(key)\n      };\n\n      this._taskClickAction(args);\n    }\n  }, {\n    key: \"_raiseTaskDblClickAction\",\n    value: function _raiseTaskDblClickAction(key, event) {\n      if (!this._taskDblClickAction) {\n        this._createTaskDblClickAction();\n      }\n\n      var args = {\n        cancel: false,\n        data: this.getTaskData(key),\n        event: event,\n        key: key\n      };\n\n      this._taskDblClickAction(args);\n\n      return !args.cancel;\n    }\n  }, {\n    key: \"_getInsertingAction\",\n    value: function _getInsertingAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskInsertingAction();\n\n        case GANTT_DEPENDENCIES:\n          return this._getDependencyInsertingAction();\n\n        case GANTT_RESOURCES:\n          return this._getResourceInsertingAction();\n\n        case GANTT_RESOURCE_ASSIGNMENTS:\n          return this._getResourceAssigningAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getInsertedAction\",\n    value: function _getInsertedAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskInsertedAction();\n\n        case GANTT_DEPENDENCIES:\n          return this._getDependencyInsertedAction();\n\n        case GANTT_RESOURCES:\n          return this._getResourceInsertedAction();\n\n        case GANTT_RESOURCE_ASSIGNMENTS:\n          return this._getResourceAssignedAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getDeletingAction\",\n    value: function _getDeletingAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskDeletingAction();\n\n        case GANTT_DEPENDENCIES:\n          return this._getDependencyDeletingAction();\n\n        case GANTT_RESOURCES:\n          return this._getResourceDeletingAction();\n\n        case GANTT_RESOURCE_ASSIGNMENTS:\n          return this._getResourceUnassigningAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getDeletedAction\",\n    value: function _getDeletedAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskDeletedAction();\n\n        case GANTT_DEPENDENCIES:\n          return this._getDependencyDeletedAction();\n\n        case GANTT_RESOURCES:\n          return this._getResourceDeletedAction();\n\n        case GANTT_RESOURCE_ASSIGNMENTS:\n          return this._getResourceUnassignedAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getUpdatingAction\",\n    value: function _getUpdatingAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskUpdatingAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getUpdatedAction\",\n    value: function _getUpdatedAction(optionName) {\n      switch (optionName) {\n        case GANTT_TASKS:\n          return this._getTaskUpdatedAction();\n      }\n\n      return function () {};\n    }\n  }, {\n    key: \"_getTaskInsertingAction\",\n    value: function _getTaskInsertingAction() {\n      if (!this._taskInsertingAction) {\n        this._createTaskInsertingAction();\n      }\n\n      return this._taskInsertingAction;\n    }\n  }, {\n    key: \"_getTaskInsertedAction\",\n    value: function _getTaskInsertedAction() {\n      if (!this._taskInsertedAction) {\n        this._createTaskInsertedAction();\n      }\n\n      return this._taskInsertedAction;\n    }\n  }, {\n    key: \"_getTaskDeletingAction\",\n    value: function _getTaskDeletingAction() {\n      if (!this._taskDeletingAction) {\n        this._createTaskDeletingAction();\n      }\n\n      return this._taskDeletingAction;\n    }\n  }, {\n    key: \"_getTaskDeletedAction\",\n    value: function _getTaskDeletedAction() {\n      if (!this._taskDeletedAction) {\n        this._createTaskDeletedAction();\n      }\n\n      return this._taskDeletedAction;\n    }\n  }, {\n    key: \"_getTaskUpdatingAction\",\n    value: function _getTaskUpdatingAction() {\n      if (!this._taskUpdatingAction) {\n        this._createTaskUpdatingAction();\n      }\n\n      return this._taskUpdatingAction;\n    }\n  }, {\n    key: \"_getTaskUpdatedAction\",\n    value: function _getTaskUpdatedAction() {\n      if (!this._taskUpdatedAction) {\n        this._createTaskUpdatedAction();\n      }\n\n      return this._taskUpdatedAction;\n    }\n  }, {\n    key: \"_getTaskMovingAction\",\n    value: function _getTaskMovingAction() {\n      if (!this._taskMovingAction) {\n        this._createTaskMovingAction();\n      }\n\n      return this._taskMovingAction;\n    }\n  }, {\n    key: \"_getTaskEditDialogShowingAction\",\n    value: function _getTaskEditDialogShowingAction() {\n      if (!this._taskEditDialogShowingAction) {\n        this._createTaskEditDialogShowingAction();\n      }\n\n      return this._taskEditDialogShowingAction;\n    }\n  }, {\n    key: \"_getResourceManagerDialogShowingAction\",\n    value: function _getResourceManagerDialogShowingAction() {\n      if (!this._resourceManagerDialogShowingAction) {\n        this._createResourceManagerDialogShowingAction();\n      }\n\n      return this._resourceManagerDialogShowingAction;\n    }\n  }, {\n    key: \"_getDependencyInsertingAction\",\n    value: function _getDependencyInsertingAction() {\n      if (!this._dependencyInsertingAction) {\n        this._createDependencyInsertingAction();\n      }\n\n      return this._dependencyInsertingAction;\n    }\n  }, {\n    key: \"_getDependencyInsertedAction\",\n    value: function _getDependencyInsertedAction() {\n      if (!this._dependencyInsertedAction) {\n        this._createDependencyInsertedAction();\n      }\n\n      return this._dependencyInsertedAction;\n    }\n  }, {\n    key: \"_getDependencyDeletingAction\",\n    value: function _getDependencyDeletingAction() {\n      if (!this._dependencyDeletingAction) {\n        this._createDependencyDeletingAction();\n      }\n\n      return this._dependencyDeletingAction;\n    }\n  }, {\n    key: \"_getDependencyDeletedAction\",\n    value: function _getDependencyDeletedAction() {\n      if (!this._dependencyDeletedAction) {\n        this._createDependencyDeletedAction();\n      }\n\n      return this._dependencyDeletedAction;\n    }\n  }, {\n    key: \"_getResourceInsertingAction\",\n    value: function _getResourceInsertingAction() {\n      if (!this._resourceInsertingAction) {\n        this._createResourceInsertingAction();\n      }\n\n      return this._resourceInsertingAction;\n    }\n  }, {\n    key: \"_getResourceInsertedAction\",\n    value: function _getResourceInsertedAction() {\n      if (!this._resourceInsertedAction) {\n        this._createResourceInsertedAction();\n      }\n\n      return this._resourceInsertedAction;\n    }\n  }, {\n    key: \"_getResourceDeletingAction\",\n    value: function _getResourceDeletingAction() {\n      if (!this._resourceDeletingAction) {\n        this._createResourceDeletingAction();\n      }\n\n      return this._resourceDeletingAction;\n    }\n  }, {\n    key: \"_getResourceDeletedAction\",\n    value: function _getResourceDeletedAction() {\n      if (!this._resourceDeletedAction) {\n        this._createResourceDeletedAction();\n      }\n\n      return this._resourceDeletedAction;\n    }\n  }, {\n    key: \"_getResourceAssigningAction\",\n    value: function _getResourceAssigningAction() {\n      if (!this._resourceAssigningAction) {\n        this._createResourceAssigningAction();\n      }\n\n      return this._resourceAssigningAction;\n    }\n  }, {\n    key: \"_getResourceAssignedAction\",\n    value: function _getResourceAssignedAction() {\n      if (!this._resourceAssignedAction) {\n        this._createResourceAssignedAction();\n      }\n\n      return this._resourceAssignedAction;\n    }\n  }, {\n    key: \"_getResourceUnassigningAction\",\n    value: function _getResourceUnassigningAction() {\n      if (!this._resourceUnassigningAction) {\n        this._createResourceUnassigningAction();\n      }\n\n      return this._resourceUnassigningAction;\n    }\n  }, {\n    key: \"_getResourceUnassignedAction\",\n    value: function _getResourceUnassignedAction() {\n      if (!this._resourceUnassignedAction) {\n        this._createResourceUnassignedAction();\n      }\n\n      return this._resourceUnassignedAction;\n    }\n  }, {\n    key: \"_createResourceUnassigningAction\",\n    value: function _createResourceUnassigningAction() {\n      this._resourceUnassigningAction = this._createActionByOption(\"onResourceUnassigning\");\n    }\n  }, {\n    key: \"_createResourceUnassignedAction\",\n    value: function _createResourceUnassignedAction() {\n      this._resourceUnassignedAction = this._createActionByOption(\"onResourceUnassigned\");\n    }\n  }, {\n    key: \"_createTaskInsertingAction\",\n    value: function _createTaskInsertingAction() {\n      this._taskInsertingAction = this._createActionByOption(\"onTaskInserting\");\n    }\n  }, {\n    key: \"_createTaskInsertedAction\",\n    value: function _createTaskInsertedAction() {\n      this._taskInsertedAction = this._createActionByOption(\"onTaskInserted\");\n    }\n  }, {\n    key: \"_createTaskDeletingAction\",\n    value: function _createTaskDeletingAction() {\n      this._taskDeletingAction = this._createActionByOption(\"onTaskDeleting\");\n    }\n  }, {\n    key: \"_createTaskDeletedAction\",\n    value: function _createTaskDeletedAction() {\n      this._taskDeletedAction = this._createActionByOption(\"onTaskDeleted\");\n    }\n  }, {\n    key: \"_createTaskUpdatingAction\",\n    value: function _createTaskUpdatingAction() {\n      this._taskUpdatingAction = this._createActionByOption(\"onTaskUpdating\");\n    }\n  }, {\n    key: \"_createTaskUpdatedAction\",\n    value: function _createTaskUpdatedAction() {\n      this._taskUpdatedAction = this._createActionByOption(\"onTaskUpdated\");\n    }\n  }, {\n    key: \"_createTaskMovingAction\",\n    value: function _createTaskMovingAction() {\n      this._taskMovingAction = this._createActionByOption(\"onTaskMoving\");\n    }\n  }, {\n    key: \"_createTaskEditDialogShowingAction\",\n    value: function _createTaskEditDialogShowingAction() {\n      this._taskEditDialogShowingAction = this._createActionByOption(\"onTaskEditDialogShowing\");\n    }\n  }, {\n    key: \"_createResourceManagerDialogShowingAction\",\n    value: function _createResourceManagerDialogShowingAction() {\n      this._resourceManagerDialogShowingAction = this._createActionByOption(\"onResourceManagerDialogShowing\");\n    }\n  }, {\n    key: \"_createDependencyInsertingAction\",\n    value: function _createDependencyInsertingAction() {\n      this._dependencyInsertingAction = this._createActionByOption(\"onDependencyInserting\");\n    }\n  }, {\n    key: \"_createDependencyInsertedAction\",\n    value: function _createDependencyInsertedAction() {\n      this._dependencyInsertedAction = this._createActionByOption(\"onDependencyInserted\");\n    }\n  }, {\n    key: \"_createDependencyDeletingAction\",\n    value: function _createDependencyDeletingAction() {\n      this._dependencyDeletingAction = this._createActionByOption(\"onDependencyDeleting\");\n    }\n  }, {\n    key: \"_createDependencyDeletedAction\",\n    value: function _createDependencyDeletedAction() {\n      this._dependencyDeletedAction = this._createActionByOption(\"onDependencyDeleted\");\n    }\n  }, {\n    key: \"_createResourceInsertingAction\",\n    value: function _createResourceInsertingAction() {\n      this._resourceInsertingAction = this._createActionByOption(\"onResourceInserting\");\n    }\n  }, {\n    key: \"_createResourceInsertedAction\",\n    value: function _createResourceInsertedAction() {\n      this._resourceInsertedAction = this._createActionByOption(\"onResourceInserted\");\n    }\n  }, {\n    key: \"_createResourceDeletingAction\",\n    value: function _createResourceDeletingAction() {\n      this._resourceDeletingAction = this._createActionByOption(\"onResourceDeleting\");\n    }\n  }, {\n    key: \"_createResourceDeletedAction\",\n    value: function _createResourceDeletedAction() {\n      this._resourceDeletedAction = this._createActionByOption(\"onResourceDeleted\");\n    }\n  }, {\n    key: \"_createResourceAssigningAction\",\n    value: function _createResourceAssigningAction() {\n      this._resourceAssigningAction = this._createActionByOption(\"onResourceAssigning\");\n    }\n  }, {\n    key: \"_createResourceAssignedAction\",\n    value: function _createResourceAssignedAction() {\n      this._resourceAssignedAction = this._createActionByOption(\"onResourceAssigned\");\n    }\n  }, {\n    key: \"_convertCoreToMappedData\",\n    value: function _convertCoreToMappedData(optionName, coreData) {\n      var _this14 = this;\n\n      return Object.keys(coreData).reduce(function (previous, f) {\n        var mappedField = _this14._getMappedFieldName(optionName, f);\n\n        if (mappedField) {\n          var setter = compileSetter(mappedField);\n          setter(previous, coreData[f]);\n        }\n\n        return previous;\n      }, {});\n    }\n  }, {\n    key: \"_convertMappedToCoreData\",\n    value: function _convertMappedToCoreData(optionName, mappedData) {\n      var coreData = {};\n\n      if (mappedData) {\n        var mappedFields = this.option(optionName);\n\n        for (var field in mappedFields) {\n          var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n          var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n          if (mappedFieldName && void 0 !== mappedData[mappedFieldName]) {\n            var getter = compileGetter(mappedFieldName);\n            var coreFieldName = exprMatches[1];\n            coreData[coreFieldName] = getter(mappedData);\n          }\n        }\n      }\n\n      return coreData;\n    }\n  }, {\n    key: \"_getMappedFieldName\",\n    value: function _getMappedFieldName(optionName, coreField) {\n      var coreFieldName = coreField;\n\n      if (\"id\" === coreField) {\n        coreFieldName = \"key\";\n      }\n\n      return this.option(\"\".concat(optionName, \".\").concat(coreFieldName, \"Expr\"));\n    }\n  }, {\n    key: \"_convertCoreToMappedFields\",\n    value: function _convertCoreToMappedFields(optionName, fields) {\n      var _this15 = this;\n\n      return fields.reduce(function (previous, f) {\n        var mappedField = _this15._getMappedFieldName(optionName, f);\n\n        if (mappedField) {\n          previous.push(mappedField);\n        }\n\n        return previous;\n      }, []);\n    }\n  }, {\n    key: \"_convertMappedToCoreFields\",\n    value: function _convertMappedToCoreFields(optionName, fields) {\n      var coreFields = [];\n      var mappedFields = this.option(optionName);\n\n      for (var field in mappedFields) {\n        var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n        var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n        if (mappedFieldName && fields.indexOf(mappedFieldName) > -1) {\n          var coreFieldName = exprMatches[1];\n          coreFields.push(coreFieldName);\n        }\n      }\n\n      return coreFields;\n    }\n  }, {\n    key: \"_getTaskMappedFieldNames\",\n    value: function _getTaskMappedFieldNames() {\n      var mappedFields = [];\n      var mappedFieldsData = this.option(GANTT_TASKS);\n\n      for (var field in mappedFieldsData) {\n        var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n        var mappedFieldName = exprMatches && mappedFieldsData[exprMatches[0]];\n\n        if (mappedFieldName) {\n          mappedFields.push(mappedFieldName);\n        }\n      }\n\n      return mappedFields;\n    }\n  }, {\n    key: \"_getTaskCustomFields\",\n    value: function _getTaskCustomFields() {\n      var columns = this.option(\"columns\");\n      var columnFields = columns && columns.map(function (c) {\n        return c.dataField;\n      });\n\n      var mappedFields = this._getTaskMappedFieldNames();\n\n      return columnFields ? columnFields.filter(function (f) {\n        return mappedFields.indexOf(f) < 0;\n      }) : [];\n    }\n  }, {\n    key: \"_getCustomFieldsData\",\n    value: function _getCustomFieldsData(data) {\n      return this._getTaskCustomFields().reduce(function (previous, field) {\n        if (data && void 0 !== data[field]) {\n          previous[field] = data[field];\n        }\n\n        return previous;\n      }, {});\n    }\n  }, {\n    key: \"_addCustomFieldsData\",\n    value: function _addCustomFieldsData(key, data) {\n      if (data) {\n        var modelData = this._tasksOption && this._tasksOption._getItems();\n\n        var keyGetter = compileGetter(this.option(\"\".concat(GANTT_TASKS, \".keyExpr\")));\n        var modelItem = modelData && modelData.filter(function (obj) {\n          return keyGetter(obj) === key;\n        })[0];\n\n        var customFields = this._getTaskCustomFields();\n\n        for (var i = 0; i < customFields.length; i++) {\n          var field = customFields[i];\n\n          if (Object.prototype.hasOwnProperty.call(modelItem, field)) {\n            data[field] = modelItem[field];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getSelectionMode\",\n    value: function _getSelectionMode(allowSelection) {\n      return allowSelection ? \"single\" : \"none\";\n    }\n  }, {\n    key: \"_getArrayFromOneElement\",\n    value: function _getArrayFromOneElement(element) {\n      return void 0 === element || null === element ? [] : [element];\n    }\n  }, {\n    key: \"_getToolbarItems\",\n    value: function _getToolbarItems() {\n      var items = this.option(\"toolbar.items\");\n      return items ? items : [];\n    }\n  }, {\n    key: \"_updateToolbarContent\",\n    value: function _updateToolbarContent() {\n      var items = this._getToolbarItems();\n\n      if (items.length) {\n        this._$toolbarWrapper.show();\n      } else {\n        this._$toolbarWrapper.hide();\n      }\n\n      this._toolbar && this._toolbar.createItems(items);\n\n      this._updateBarItemsState();\n    }\n  }, {\n    key: \"_updateContextMenu\",\n    value: function _updateContextMenu() {\n      var contextMenuOptions = this.option(\"contextMenu\");\n\n      if (contextMenuOptions.enabled && this._contextMenuBar) {\n        this._contextMenuBar.createItems(contextMenuOptions.items);\n\n        this._updateBarItemsState();\n      }\n    }\n  }, {\n    key: \"_updateBarItemsState\",\n    value: function _updateBarItemsState() {\n      this._ganttView && this._ganttView.updateBarItemsState();\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function _showDialog(e) {\n      if (!this._dialogInstance) {\n        this._dialogInstance = new GanttDialog(this, this._$dialog);\n      }\n\n      this._dialogInstance.show(e.name, e.parameters, e.callback, e.afterClosing, this.option(\"editing\"));\n    }\n  }, {\n    key: \"_showPopupMenu\",\n    value: function _showPopupMenu(info) {\n      if (this.option(\"contextMenu.enabled\")) {\n        this._ganttView.getBarManager().updateContextMenu();\n\n        var args = {\n          cancel: false,\n          event: info.event,\n          targetType: info.type,\n          targetKey: info.key,\n          items: extend(true, [], this._contextMenuBar._items),\n          data: \"task\" === info.type ? this.getTaskData(info.key) : this.getDependencyData(info.key)\n        };\n\n        this._raiseContextMenuPreparing(args);\n\n        if (!args.cancel) {\n          this._contextMenuBar.show(info.position, args.items);\n        }\n      }\n    }\n  }, {\n    key: \"_executeCoreCommand\",\n    value: function _executeCoreCommand(id) {\n      this._ganttView.executeCoreCommand(id);\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      var _this$_ganttView4;\n\n      null === (_this$_ganttView4 = this._ganttView) || void 0 === _this$_ganttView4 ? void 0 : _this$_ganttView4._ganttViewCore.cleanMarkup();\n      delete this._ganttView;\n      delete this._dialogInstance;\n\n      _get(_getPrototypeOf(Gantt.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_getTaskTooltipContentTemplateFunc\",\n    value: function _getTaskTooltipContentTemplateFunc(taskTooltipContentTemplateOption) {\n      var _this16 = this;\n\n      var template = taskTooltipContentTemplateOption && this._getTemplate(taskTooltipContentTemplateOption);\n\n      var createTemplateFunction = template && function (container, item) {\n        template.render({\n          model: _this16.getTaskDataByCoreData(item),\n          container: getPublicElement($(container))\n        });\n        return true;\n      };\n\n      return createTemplateFunction;\n    }\n  }, {\n    key: \"_getTaskProgressTooltipContentTemplateFunc\",\n    value: function _getTaskProgressTooltipContentTemplateFunc(taskTooltipContentTemplateOption) {\n      var template = taskTooltipContentTemplateOption && this._getTemplate(taskTooltipContentTemplateOption);\n\n      var createTemplateFunction = template && function (container, item, callback, posX) {\n        template.render({\n          model: item,\n          container: getPublicElement($(container)),\n          onRendered: function onRendered() {\n            callback(posX);\n          }\n        });\n        return true;\n      };\n\n      return createTemplateFunction;\n    }\n  }, {\n    key: \"_getTaskTimeTooltipContentTemplateFunc\",\n    value: function _getTaskTimeTooltipContentTemplateFunc(taskTooltipContentTemplateOption) {\n      var template = taskTooltipContentTemplateOption && this._getTemplate(taskTooltipContentTemplateOption);\n\n      var createTemplateFunction = template && function (container, item, callback, posX) {\n        template.render({\n          model: item,\n          container: getPublicElement($(container)),\n          onRendered: function onRendered() {\n            callback(posX);\n          }\n        });\n        return true;\n      };\n\n      return createTemplateFunction;\n    }\n  }, {\n    key: \"_getTaskContentTemplateFunc\",\n    value: function _getTaskContentTemplateFunc(taskContentTemplateOption) {\n      var _this17 = this;\n\n      var template = taskContentTemplateOption && this._getTemplate(taskContentTemplateOption);\n\n      var createTemplateFunction = template && function (container, item, callback, index) {\n        item.taskData = _this17.getTaskDataByCoreData(item.taskData);\n        template.render({\n          model: item,\n          container: getPublicElement($(container)),\n          onRendered: function onRendered() {\n            callback(container, index);\n          }\n        });\n        return true;\n      };\n\n      return createTemplateFunction;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Gantt.prototype), \"_getDefaultOptions\", this).call(this), {\n        tasks: {\n          dataSource: null,\n          keyExpr: \"id\",\n          parentIdExpr: \"parentId\",\n          startExpr: \"start\",\n          endExpr: \"end\",\n          progressExpr: \"progress\",\n          titleExpr: \"title\",\n          colorExpr: \"color\"\n        },\n        dependencies: {\n          dataSource: null,\n          keyExpr: \"id\",\n          predecessorIdExpr: \"predecessorId\",\n          successorIdExpr: \"successorId\",\n          typeExpr: \"type\"\n        },\n        resources: {\n          dataSource: null,\n          keyExpr: \"id\",\n          textExpr: \"text\",\n          colorExpr: \"color\"\n        },\n        resourceAssignments: {\n          dataSource: null,\n          keyExpr: \"id\",\n          taskIdExpr: \"taskId\",\n          resourceIdExpr: \"resourceId\"\n        },\n        columns: void 0,\n        taskListWidth: 300,\n        showResources: true,\n        taskTitlePosition: \"inside\",\n        firstDayOfWeek: void 0,\n        selectedRowKey: void 0,\n        onSelectionChanged: null,\n        onTaskClick: null,\n        onTaskDblClick: null,\n        onTaskInserting: null,\n        onTaskInserted: null,\n        onTaskDeleting: null,\n        onTaskDeleted: null,\n        onTaskUpdating: null,\n        onTaskUpdated: null,\n        onTaskMoving: null,\n        onTaskEditDialogShowing: null,\n        onDependencyInserting: null,\n        onDependencyInserted: null,\n        onDependencyDeleting: null,\n        onDependencyDeleted: null,\n        onResourceInserting: null,\n        onResourceInserted: null,\n        onResourceDeleting: null,\n        onResourceDeleted: null,\n        onResourceAssigning: null,\n        onResourceAssigned: null,\n        onResourceUnassigning: null,\n        onResourceUnassigned: null,\n        onCustomCommand: null,\n        onContextMenuPreparing: null,\n        allowSelection: true,\n        showRowLines: true,\n        stripLines: void 0,\n        scaleType: \"auto\",\n        editing: {\n          enabled: false,\n          allowTaskAdding: true,\n          allowTaskDeleting: true,\n          allowTaskUpdating: true,\n          allowDependencyAdding: true,\n          allowDependencyDeleting: true,\n          allowResourceAdding: true,\n          allowResourceDeleting: true,\n          allowResourceUpdating: true,\n          allowTaskResourceUpdating: true\n        },\n        validation: {\n          validateDependencies: false,\n          autoUpdateParentTasks: false\n        },\n        toolbar: null,\n        contextMenu: {\n          enabled: true,\n          items: void 0\n        },\n        taskTooltipContentTemplate: null,\n        taskProgressTooltipContentTemplate: null,\n        taskTimeTooltipContentTemplate: null,\n        taskContentTemplate: null,\n        rootValue: 0\n      });\n    }\n  }, {\n    key: \"getTaskResources\",\n    value: function getTaskResources(key) {\n      var _this18 = this;\n\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getTaskResources(key);\n\n      return coreData.map(function (r) {\n        return _this18._convertCoreToMappedData(GANTT_RESOURCES, r);\n      });\n    }\n  }, {\n    key: \"getVisibleTaskKeys\",\n    value: function getVisibleTaskKeys() {\n      return this._ganttView._ganttViewCore.getVisibleTaskKeys();\n    }\n  }, {\n    key: \"getVisibleDependencyKeys\",\n    value: function getVisibleDependencyKeys() {\n      return this._ganttView._ganttViewCore.getVisibleDependencyKeys();\n    }\n  }, {\n    key: \"getVisibleResourceKeys\",\n    value: function getVisibleResourceKeys() {\n      return this._ganttView._ganttViewCore.getVisibleResourceKeys();\n    }\n  }, {\n    key: \"getVisibleResourceAssignmentKeys\",\n    value: function getVisibleResourceAssignmentKeys() {\n      return this._ganttView._ganttViewCore.getVisibleResourceAssignmentKeys();\n    }\n  }, {\n    key: \"getTaskData\",\n    value: function getTaskData(key) {\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getTaskData(key);\n\n      var mappedData = this.getTaskDataByCoreData(coreData);\n      return mappedData;\n    }\n  }, {\n    key: \"getTaskDataByCoreData\",\n    value: function getTaskDataByCoreData(coreData) {\n      var mappedData = coreData ? this._convertCoreToMappedData(GANTT_TASKS, coreData) : null;\n\n      this._addCustomFieldsData(coreData.id, mappedData);\n\n      return mappedData;\n    }\n  }, {\n    key: \"insertTask\",\n    value: function insertTask(data) {\n      this._saveCustomFieldsDataToCache(GANTT_NEW_TASK_CACHE_KEY, data);\n\n      this._ganttView._ganttViewCore.insertTask(this._convertMappedToCoreData(GANTT_TASKS, data));\n    }\n  }, {\n    key: \"deleteTask\",\n    value: function deleteTask(key) {\n      this._ganttView._ganttViewCore.deleteTask(key);\n    }\n  }, {\n    key: \"updateTask\",\n    value: function updateTask(key, data) {\n      this._saveCustomFieldsDataToCache(key, data, true);\n\n      this._ganttView._ganttViewCore.updateTask(key, this._convertMappedToCoreData(GANTT_TASKS, data));\n    }\n  }, {\n    key: \"getDependencyData\",\n    value: function getDependencyData(key) {\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getDependencyData(key);\n\n      return coreData ? this._convertCoreToMappedData(GANTT_DEPENDENCIES, coreData) : null;\n    }\n  }, {\n    key: \"insertDependency\",\n    value: function insertDependency(data) {\n      this._ganttView._ganttViewCore.insertDependency(this._convertMappedToCoreData(GANTT_DEPENDENCIES, data));\n    }\n  }, {\n    key: \"deleteDependency\",\n    value: function deleteDependency(key) {\n      this._ganttView._ganttViewCore.deleteDependency(key);\n    }\n  }, {\n    key: \"getResourceData\",\n    value: function getResourceData(key) {\n      var coreData = this._ganttView._ganttViewCore.getResourceData(key);\n\n      return coreData ? this._convertCoreToMappedData(GANTT_RESOURCES, coreData) : null;\n    }\n  }, {\n    key: \"deleteResource\",\n    value: function deleteResource(key) {\n      this._ganttView._ganttViewCore.deleteResource(key);\n    }\n  }, {\n    key: \"insertResource\",\n    value: function insertResource(data, taskKeys) {\n      this._ganttView._ganttViewCore.insertResource(this._convertMappedToCoreData(GANTT_RESOURCES, data), taskKeys);\n    }\n  }, {\n    key: \"getResourceAssignmentData\",\n    value: function getResourceAssignmentData(key) {\n      var coreData = this._ganttView._ganttViewCore.getResourceAssignmentData(key);\n\n      return coreData ? this._convertCoreToMappedData(GANTT_RESOURCE_ASSIGNMENTS, coreData) : null;\n    }\n  }, {\n    key: \"assignResourceToTask\",\n    value: function assignResourceToTask(resourceKey, taskKey) {\n      this._ganttView._ganttViewCore.assignResourceToTask(resourceKey, taskKey);\n    }\n  }, {\n    key: \"unassignResourceFromTask\",\n    value: function unassignResourceFromTask(resourceKey, taskKey) {\n      this._ganttView._ganttViewCore.unassignResourceFromTask(resourceKey, taskKey);\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      this._onAdjustControl();\n    }\n  }, {\n    key: \"scrollToDate\",\n    value: function scrollToDate(date) {\n      this._ganttView._ganttViewCore.scrollToDate(date);\n    }\n  }, {\n    key: \"showResourceManagerDialog\",\n    value: function showResourceManagerDialog() {\n      this._ganttView._ganttViewCore.showResourcesDialog();\n    }\n  }, {\n    key: \"exportToPdf\",\n    value: function exportToPdf(options) {\n      var _this19 = this;\n\n      var _fullOptions$docCreat, _window$jspdf$jsPDF, _window$jspdf, _fullOptions$format;\n\n      this._exportHelper.reset();\n\n      var fullOptions = extend({}, options);\n\n      if (fullOptions.createDocumentMethod) {\n        fullOptions.docCreateMethod = fullOptions.createDocumentMethod;\n      }\n\n      null !== (_fullOptions$docCreat = fullOptions.docCreateMethod) && void 0 !== _fullOptions$docCreat ? _fullOptions$docCreat : fullOptions.docCreateMethod = null !== (_window$jspdf$jsPDF = null === (_window$jspdf = window.jspdf) || void 0 === _window$jspdf ? void 0 : _window$jspdf.jsPDF) && void 0 !== _window$jspdf$jsPDF ? _window$jspdf$jsPDF : window.jsPDF;\n      null !== (_fullOptions$format = fullOptions.format) && void 0 !== _fullOptions$format ? _fullOptions$format : fullOptions.format = \"a4\";\n      return new Promise(function (resolve) {\n        var _this$_ganttView5;\n\n        var doc = null === (_this$_ganttView5 = _this19._ganttView) || void 0 === _this$_ganttView5 ? void 0 : _this$_ganttView5._ganttViewCore.exportToPdf(fullOptions);\n        resolve(doc);\n      });\n    }\n  }, {\n    key: \"_getExportHelper\",\n    value: function _getExportHelper() {\n      var _this$_exportHelper;\n\n      null !== (_this$_exportHelper = this._exportHelper) && void 0 !== _this$_exportHelper ? _this$_exportHelper : this._exportHelper = new GanttExportHelper(this);\n      return this._exportHelper;\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"tasks\":\n          this._refreshDataSource(GANTT_TASKS);\n\n          break;\n\n        case \"dependencies\":\n          this._refreshDataSource(GANTT_DEPENDENCIES);\n\n          break;\n\n        case \"resources\":\n          this._refreshDataSource(GANTT_RESOURCES);\n\n          break;\n\n        case \"resourceAssignments\":\n          this._refreshDataSource(GANTT_RESOURCE_ASSIGNMENTS);\n\n          break;\n\n        case \"columns\":\n          this._setTreeListOption(\"columns\", this._getTreeListColumns());\n\n          break;\n\n        case \"taskListWidth\":\n          this._setInnerElementsWidth();\n\n          break;\n\n        case \"showResources\":\n          this._setGanttViewOption(\"showResources\", args.value);\n\n          break;\n\n        case \"taskTitlePosition\":\n          this._setGanttViewOption(\"taskTitlePosition\", args.value);\n\n          break;\n\n        case \"firstDayOfWeek\":\n          this._setGanttViewOption(\"firstDayOfWeek\", args.value);\n\n          break;\n\n        case \"selectedRowKey\":\n          this._selectTreeListRows(this._getArrayFromOneElement(args.value));\n\n          break;\n\n        case \"onSelectionChanged\":\n          this._createSelectionChangedAction();\n\n          break;\n\n        case \"onTaskClick\":\n          this._createTaskClickAction();\n\n          break;\n\n        case \"onTaskDblClick\":\n          this._createTaskDblClickAction();\n\n          break;\n\n        case \"onTaskInserting\":\n          this._createTaskInsertingAction();\n\n          break;\n\n        case \"onTaskInserted\":\n          this._createTaskInsertedAction();\n\n          break;\n\n        case \"onTaskDeleting\":\n          this._createTaskDeletingAction();\n\n          break;\n\n        case \"onTaskDeleted\":\n          this._createTaskDeletedAction();\n\n          break;\n\n        case \"onTaskUpdating\":\n          this._createTaskUpdatingAction();\n\n          break;\n\n        case \"onTaskUpdated\":\n          this._createTaskUpdatedAction();\n\n          break;\n\n        case \"onTaskMoving\":\n          this._createTaskMovingAction();\n\n          break;\n\n        case \"onTaskEditDialogShowing\":\n          this._createTaskEditDialogShowingAction();\n\n          break;\n\n        case \"onResourceManagerDialogShowing\":\n          this._createResourceManagerDialogShowingAction();\n\n          break;\n\n        case \"onDependencyInserting\":\n          this._createDependencyInsertingAction();\n\n          break;\n\n        case \"onDependencyInserted\":\n          this._createDependencyInsertedAction();\n\n          break;\n\n        case \"onDependencyDeleting\":\n          this._createDependencyDeletingAction();\n\n          break;\n\n        case \"onDependencyDeleted\":\n          this._createDependencyDeletedAction();\n\n          break;\n\n        case \"onResourceInserting\":\n          this._createResourceInsertingAction();\n\n          break;\n\n        case \"onResourceInserted\":\n          this._createResourceInsertedAction();\n\n          break;\n\n        case \"onResourceDeleting\":\n          this._createResourceDeletingAction();\n\n          break;\n\n        case \"onResourceDeleted\":\n          this._createResourceDeletedAction();\n\n          break;\n\n        case \"onResourceAssigning\":\n          this._createResourceAssigningAction();\n\n          break;\n\n        case \"onResourceAssigned\":\n          this._createResourceAssignedAction();\n\n          break;\n\n        case \"onResourceUnassigning\":\n          this._createResourceUnassigningAction();\n\n          break;\n\n        case \"onResourceUnassigned\":\n          this._createResourceUnassignedAction();\n\n          break;\n\n        case \"onCustomCommand\":\n          this._createCustomCommandAction();\n\n          break;\n\n        case \"onContextMenuPreparing\":\n          this._createContextMenuPreparingAction();\n\n          break;\n\n        case \"allowSelection\":\n          this._setTreeListOption(\"selection.mode\", this._getSelectionMode(args.value));\n\n          this._setGanttViewOption(\"allowSelection\", args.value);\n\n          break;\n\n        case \"showRowLines\":\n          this._setTreeListOption(\"showRowLines\", args.value);\n\n          this._setGanttViewOption(\"showRowLines\", args.value);\n\n          break;\n\n        case \"stripLines\":\n          this._setGanttViewOption(\"stripLines\", args.value);\n\n          break;\n\n        case \"scaleType\":\n          this._setGanttViewOption(\"scaleType\", args.value);\n\n          break;\n\n        case \"editing\":\n          this._setGanttViewOption(\"editing\", this.option(args.name));\n\n          break;\n\n        case \"validation\":\n          this._setGanttViewOption(\"validation\", this.option(args.name));\n\n          break;\n\n        case \"toolbar\":\n          this._updateToolbarContent();\n\n          break;\n\n        case \"contextMenu\":\n          this._updateContextMenu();\n\n          break;\n\n        case \"taskTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskTooltipContentTemplate\", this._getTaskTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskProgressTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskProgressTooltipContentTemplate\", this._getTaskProgressTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskTimeTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskTimeTooltipContentTemplate\", this._getTaskTimeTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskContentTemplate\":\n          this._setGanttViewOption(\"taskContentTemplate\", this._getTaskContentTemplateFunc(args.value));\n\n          break;\n\n        case \"rootValue\":\n          this._setTreeListOption(\"rootValue\", args.value);\n\n          break;\n\n        case \"width\":\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._updateGanttWidth();\n\n          break;\n\n        case \"height\":\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._setGanttHeight(this._$element.height());\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return Gantt;\n}(Widget);\n\nregisterComponent(\"dxGantt\", Gantt);\nexport default Gantt;","map":null,"metadata":{},"sourceType":"module"}