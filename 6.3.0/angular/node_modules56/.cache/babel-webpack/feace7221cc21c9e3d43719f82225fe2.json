{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/circular_indicators.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { BaseIndicator, BaseTextCloudMarker, BaseRangeBar } from \"./base_indicators\";\nimport { getCosAndSin, convertAngleToRendererSpace, normalizeAngle } from \"../core/utils\";\nvar _Number = Number;\nvar _getCosAndSin = getCosAndSin;\nvar _convertAngleToRendererSpace = convertAngleToRendererSpace;\nvar SimpleIndicator = BaseIndicator.inherit({\n  _move: function _move() {\n    var options = this._options;\n\n    var angle = _convertAngleToRendererSpace(this._actualPosition);\n\n    this._rootElement.rotate(angle, options.x, options.y);\n\n    this._trackerElement && this._trackerElement.rotate(angle, options.x, options.y);\n  },\n  _isEnabled: function _isEnabled() {\n    return this._options.width > 0;\n  },\n  _isVisible: function _isVisible(layout) {\n    return layout.radius - _Number(this._options.indentFromCenter) > 0;\n  },\n  _getTrackerSettings: function _getTrackerSettings() {\n    var options = this._options;\n\n    var radius = this._getRadius();\n\n    var indentFromCenter = this._getIndentFromCenter();\n\n    var x = options.x;\n    var y = options.y - (radius + indentFromCenter) / 2;\n    var width = options.width / 2;\n    var length = (radius - indentFromCenter) / 2;\n    width > 10 || (width = 10);\n    length > 10 || (length = 10);\n    return {\n      points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\n    };\n  },\n  _render: function _render() {\n    this._renderPointer();\n  },\n  _clearPointer: function _clearPointer() {\n    delete this._element;\n  },\n  _clear: function _clear() {\n    this._clearPointer();\n  },\n  _getIndentFromCenter: function _getIndentFromCenter(radius) {\n    return Number(this._options.indentFromCenter) || 0;\n  },\n  _getRadius: function _getRadius() {\n    return 0;\n  },\n  measure: function measure(layout) {\n    var result = {\n      max: layout.radius\n    };\n\n    if (this._options.indentFromCenter < 0) {\n      result.inverseHorizontalOffset = result.inverseVerticalOffset = -_Number(this._options.indentFromCenter);\n    }\n\n    return result;\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var options = this._options;\n\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var r = (this._getRadius() + this._getIndentFromCenter()) / 2;\n    return {\n      x: options.x + cosSin.cos * r,\n      y: options.y - cosSin.sin * r,\n      value: this._currentValue,\n      color: options.color,\n      offset: options.width / 2\n    };\n  }\n});\nvar NeedleIndicator = SimpleIndicator.inherit({\n  _isVisible: function _isVisible(layout) {\n    var indentFromCenter = this._adjustOffset(Number(this._options.indentFromCenter), layout.radius);\n\n    var offset = this._adjustOffset(Number(this._options.offset), layout.radius);\n\n    return layout.radius - indentFromCenter - offset > 0;\n  },\n  getOffset: function getOffset() {\n    return 0;\n  },\n  _adjustOffset: function _adjustOffset(value, radius) {\n    var minRadius = Number(this._options.beginAdaptingAtRadius);\n    var diff = radius / minRadius;\n\n    if (diff < 1) {\n      value = Math.floor(value * diff);\n    }\n\n    return value || 0;\n  },\n  _getIndentFromCenter: function _getIndentFromCenter(radius) {\n    return this._adjustOffset(Number(this._options.indentFromCenter), this._options.radius);\n  },\n  _getRadius: function _getRadius() {\n    var options = this._options;\n    return options.radius - this._adjustOffset(Number(options.offset), options.radius);\n  },\n  _renderSpindle: function _renderSpindle() {\n    var options = this._options;\n    var radius = options.radius;\n\n    var spindleSize = 2 * this._adjustOffset(_Number(options.spindleSize) / 2, radius);\n\n    var gapSize = 2 * this._adjustOffset(_Number(options.spindleGapSize) / 2, radius) || 0;\n\n    if (gapSize > 0) {\n      gapSize = gapSize <= spindleSize ? gapSize : spindleSize;\n    }\n\n    if (spindleSize > 0) {\n      this._spindleOuter = this._spindleOuter || this._renderer.circle().append(this._rootElement);\n      this._spindleInner = this._spindleInner || this._renderer.circle().append(this._rootElement);\n\n      this._spindleOuter.attr({\n        class: \"dxg-spindle-border\",\n        cx: options.x,\n        cy: options.y,\n        r: spindleSize / 2\n      });\n\n      this._spindleInner.attr({\n        class: \"dxg-spindle-hole\",\n        cx: options.x,\n        cy: options.y,\n        r: gapSize / 2,\n        fill: options.containerBackgroundColor\n      });\n    }\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderSpindle();\n  },\n  _clear: function _clear() {\n    this.callBase();\n    delete this._spindleOuter;\n    delete this._spindleInner;\n  }\n});\nvar rectangleNeedle = NeedleIndicator.inherit({\n  _renderPointer: function _renderPointer() {\n    var options = this._options;\n\n    var y2 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var x1 = options.x - options.width / 2;\n\n    var x2 = x1 + _Number(options.width);\n\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._element.attr({\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    });\n  }\n});\nvar triangleNeedle = NeedleIndicator.inherit({\n  _renderPointer: function _renderPointer() {\n    var options = this._options;\n\n    var y2 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var x1 = options.x - options.width / 2;\n    var x2 = options.x + options.width / 2;\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._element.attr({\n      points: [x1, y1, options.x, y2, x2, y1]\n    });\n  }\n});\nvar twoColorNeedle = NeedleIndicator.inherit({\n  _renderPointer: function _renderPointer() {\n    var options = this._options;\n    var x1 = options.x - options.width / 2;\n    var x2 = options.x + options.width / 2;\n\n    var y4 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var fraction = _Number(options.secondFraction) || 0;\n    var y2;\n    var y3;\n\n    if (fraction >= 1) {\n      y2 = y3 = y1;\n    } else if (fraction <= 0) {\n      y2 = y3 = y4;\n    } else {\n      y3 = y4 + (y1 - y4) * fraction;\n      y2 = y3 + _Number(options.space);\n    }\n\n    this._firstElement = this._firstElement || this._renderer.path([], \"area\").append(this._rootElement);\n    this._spaceElement = this._spaceElement || this._renderer.path([], \"area\").append(this._rootElement);\n    this._secondElement = this._secondElement || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._firstElement.attr({\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    });\n\n    this._spaceElement.attr({\n      points: [x1, y2, x1, y3, x2, y3, x2, y2],\n      class: \"dxg-hole\",\n      fill: options.containerBackgroundColor\n    });\n\n    this._secondElement.attr({\n      points: [x1, y3, x1, y4, x2, y4, x2, y3],\n      class: \"dxg-part\",\n      fill: options.secondColor\n    });\n  },\n  _clearPointer: function _clearPointer() {\n    delete this._firstElement;\n    delete this._secondElement;\n    delete this._spaceElement;\n  }\n});\nvar triangleMarker = SimpleIndicator.inherit({\n  _isEnabled: function _isEnabled() {\n    return this._options.length > 0 && this._options.width > 0;\n  },\n  _isVisible: function _isVisible(layout) {\n    return layout.radius > 0;\n  },\n  _render: function _render() {\n    var options = this._options;\n    var x = options.x;\n    var y1 = options.y - options.radius;\n    var dx = options.width / 2 || 0;\n\n    var y2 = y1 - _Number(options.length);\n\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n    var settings = {\n      points: [x, y1, x - dx, y2, x + dx, y2],\n      stroke: \"none\",\n      \"stroke-width\": 0,\n      \"stroke-linecap\": \"square\"\n    };\n\n    if (options.space > 0) {\n      settings[\"stroke-width\"] = Math.min(options.space, options.width / 4) || 0;\n      settings.stroke = settings[\"stroke-width\"] > 0 ? options.containerBackgroundColor || \"none\" : \"none\";\n    }\n\n    this._element.attr(settings).sharp();\n  },\n  _clear: function _clear() {\n    delete this._element;\n  },\n  _getTrackerSettings: function _getTrackerSettings() {\n    var options = this._options;\n    var x = options.x;\n    var y = options.y - options.radius - options.length / 2;\n    var width = options.width / 2;\n    var length = options.length / 2;\n    width > 10 || (width = 10);\n    length > 10 || (length = 10);\n    return {\n      points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\n    };\n  },\n  measure: function measure(layout) {\n    return {\n      min: layout.radius,\n      max: layout.radius + _Number(this._options.length)\n    };\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var options = this._options;\n\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var r = options.radius + options.length / 2;\n    var parameters = this.callBase();\n    parameters.x = options.x + cosSin.cos * r;\n    parameters.y = options.y - cosSin.sin * r;\n    parameters.offset = options.length / 2;\n    return parameters;\n  }\n});\nvar textCloud = BaseTextCloudMarker.inherit({\n  _isEnabled: function _isEnabled() {\n    return true;\n  },\n  _isVisible: function _isVisible(layout) {\n    return layout.radius > 0;\n  },\n  _getTextCloudOptions: function _getTextCloudOptions() {\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var nAngle = normalizeAngle(this._actualPosition);\n    return {\n      x: this._options.x + cosSin.cos * this._options.radius,\n      y: this._options.y - cosSin.sin * this._options.radius,\n      type: nAngle > 270 ? \"left-top\" : nAngle > 180 ? \"top-right\" : nAngle > 90 ? \"right-bottom\" : \"bottom-left\"\n    };\n  },\n  measure: function measure(layout) {\n    var arrowLength = _Number(this._options.arrowLength) || 0;\n\n    this._measureText();\n\n    var verticalOffset = this._textFullHeight + arrowLength;\n    var horizontalOffset = this._textFullWidth + arrowLength;\n    return {\n      min: layout.radius,\n      max: layout.radius,\n      horizontalOffset: horizontalOffset,\n      verticalOffset: verticalOffset,\n      inverseHorizontalOffset: horizontalOffset,\n      inverseVerticalOffset: verticalOffset\n    };\n  }\n});\nvar rangeBar = BaseRangeBar.inherit({\n  _isEnabled: function _isEnabled() {\n    return this._options.size > 0;\n  },\n  _isVisible: function _isVisible(layout) {\n    return layout.radius - _Number(this._options.size) > 0;\n  },\n  _createBarItem: function _createBarItem() {\n    return this._renderer.arc().attr({\n      \"stroke-linejoin\": \"round\"\n    }).append(this._rootElement);\n  },\n  _createTracker: function _createTracker() {\n    return this._renderer.arc().attr({\n      \"stroke-linejoin\": \"round\"\n    });\n  },\n  _setBarSides: function _setBarSides() {\n    this._maxSide = this._options.radius;\n    this._minSide = this._maxSide - _Number(this._options.size);\n  },\n  _getSpace: function _getSpace() {\n    var options = this._options;\n    return options.space > 0 ? 180 * options.space / options.radius / Math.PI : 0;\n  },\n  _isTextVisible: function _isTextVisible() {\n    var options = this._options.text || {};\n    return options.indent > 0;\n  },\n  _setTextItemsSides: function _setTextItemsSides() {\n    var options = this._options;\n\n    var indent = _Number(options.text.indent);\n\n    this._lineFrom = options.y - options.radius;\n    this._lineTo = this._lineFrom - indent;\n    this._textRadius = options.radius + indent;\n  },\n  _getPositions: function _getPositions() {\n    var basePosition = this._basePosition;\n    var actualPosition = this._actualPosition;\n    var mainPosition1;\n    var mainPosition2;\n\n    if (basePosition >= actualPosition) {\n      mainPosition1 = basePosition;\n      mainPosition2 = actualPosition;\n    } else {\n      mainPosition1 = actualPosition;\n      mainPosition2 = basePosition;\n    }\n\n    return {\n      start: this._startPosition,\n      end: this._endPosition,\n      main1: mainPosition1,\n      main2: mainPosition2,\n      back1: Math.min(mainPosition1 + this._space, this._startPosition),\n      back2: Math.max(mainPosition2 - this._space, this._endPosition)\n    };\n  },\n  _buildItemSettings: function _buildItemSettings(from, to) {\n    return {\n      x: this._options.x,\n      y: this._options.y,\n      innerRadius: this._minSide,\n      outerRadius: this._maxSide,\n      startAngle: to,\n      endAngle: from\n    };\n  },\n  _updateTextPosition: function _updateTextPosition() {\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var x = this._options.x + this._textRadius * cosSin.cos;\n    var y = this._options.y - this._textRadius * cosSin.sin;\n    x += cosSin.cos * this._textWidth * .6;\n    y -= cosSin.sin * this._textHeight * .6;\n\n    this._text.attr({\n      x: x,\n      y: y + this._textVerticalOffset\n    });\n  },\n  _updateLinePosition: function _updateLinePosition() {\n    var x = this._options.x;\n    var x1;\n    var x2;\n\n    if (this._basePosition > this._actualPosition) {\n      x1 = x - 2;\n      x2 = x;\n    } else if (this._basePosition < this._actualPosition) {\n      x1 = x;\n      x2 = x + 2;\n    } else {\n      x1 = x - 1;\n      x2 = x + 1;\n    }\n\n    this._line.attr({\n      points: [x1, this._lineFrom, x1, this._lineTo, x2, this._lineTo, x2, this._lineFrom]\n    }).rotate(_convertAngleToRendererSpace(this._actualPosition), x, this._options.y).sharp();\n  },\n  _getTooltipPosition: function _getTooltipPosition() {\n    var cosSin = _getCosAndSin((this._basePosition + this._actualPosition) / 2);\n\n    var r = (this._minSide + this._maxSide) / 2;\n    return {\n      x: this._options.x + cosSin.cos * r,\n      y: this._options.y - cosSin.sin * r\n    };\n  },\n  measure: function measure(layout) {\n    var result = {\n      min: layout.radius - _Number(this._options.size),\n      max: layout.radius\n    };\n\n    this._measureText();\n\n    if (this._hasText) {\n      result.max += _Number(this._options.text.indent);\n      result.horizontalOffset = this._textWidth;\n      result.verticalOffset = this._textHeight;\n    }\n\n    return result;\n  }\n});\nexport { rectangleNeedle as _default, rectangleNeedle as rectangleneedle, triangleNeedle as triangleneedle, twoColorNeedle as twocolorneedle, triangleMarker as trianglemarker, textCloud as textcloud, rangeBar as rangebar };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/viz/gauges/circular_indicators.js"],"names":["BaseIndicator","BaseTextCloudMarker","BaseRangeBar","getCosAndSin","convertAngleToRendererSpace","normalizeAngle","_Number","Number","_getCosAndSin","_convertAngleToRendererSpace","SimpleIndicator","inherit","_move","options","_options","angle","_actualPosition","_rootElement","rotate","x","y","_trackerElement","_isEnabled","width","_isVisible","layout","radius","indentFromCenter","_getTrackerSettings","_getRadius","_getIndentFromCenter","length","points","_render","_renderPointer","_clearPointer","_element","_clear","measure","result","max","inverseHorizontalOffset","inverseVerticalOffset","getTooltipParameters","cosSin","r","cos","sin","value","_currentValue","color","offset","NeedleIndicator","_adjustOffset","getOffset","minRadius","beginAdaptingAtRadius","diff","Math","floor","_renderSpindle","spindleSize","gapSize","spindleGapSize","_spindleOuter","_renderer","circle","append","_spindleInner","attr","class","cx","cy","fill","containerBackgroundColor","callBase","rectangleNeedle","y2","y1","x1","x2","path","triangleNeedle","twoColorNeedle","y4","fraction","secondFraction","y3","space","_firstElement","_spaceElement","_secondElement","secondColor","triangleMarker","dx","settings","stroke","min","sharp","parameters","textCloud","_getTextCloudOptions","nAngle","type","arrowLength","_measureText","verticalOffset","_textFullHeight","horizontalOffset","_textFullWidth","rangeBar","size","_createBarItem","arc","_createTracker","_setBarSides","_maxSide","_minSide","_getSpace","PI","_isTextVisible","text","indent","_setTextItemsSides","_lineFrom","_lineTo","_textRadius","_getPositions","basePosition","_basePosition","actualPosition","mainPosition1","mainPosition2","start","_startPosition","end","_endPosition","main1","main2","back1","_space","back2","_buildItemSettings","from","to","innerRadius","outerRadius","startAngle","endAngle","_updateTextPosition","_textWidth","_textHeight","_text","_textVerticalOffset","_updateLinePosition","_line","_getTooltipPosition","_hasText","_default","rectangleneedle","triangleneedle","twocolorneedle","trianglemarker","textcloud","rangebar"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/gauges/circular_indicators.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    BaseIndicator,\r\n    BaseTextCloudMarker,\r\n    BaseRangeBar\r\n} from \"./base_indicators\";\r\nimport {\r\n    getCosAndSin,\r\n    convertAngleToRendererSpace,\r\n    normalizeAngle\r\n} from \"../core/utils\";\r\nvar _Number = Number;\r\nvar _getCosAndSin = getCosAndSin;\r\nvar _convertAngleToRendererSpace = convertAngleToRendererSpace;\r\nvar SimpleIndicator = BaseIndicator.inherit({\r\n    _move: function() {\r\n        var options = this._options;\r\n        var angle = _convertAngleToRendererSpace(this._actualPosition);\r\n        this._rootElement.rotate(angle, options.x, options.y);\r\n        this._trackerElement && this._trackerElement.rotate(angle, options.x, options.y)\r\n    },\r\n    _isEnabled: function() {\r\n        return this._options.width > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius - _Number(this._options.indentFromCenter) > 0\r\n    },\r\n    _getTrackerSettings: function() {\r\n        var options = this._options;\r\n        var radius = this._getRadius();\r\n        var indentFromCenter = this._getIndentFromCenter();\r\n        var x = options.x;\r\n        var y = options.y - (radius + indentFromCenter) / 2;\r\n        var width = options.width / 2;\r\n        var length = (radius - indentFromCenter) / 2;\r\n        width > 10 || (width = 10);\r\n        length > 10 || (length = 10);\r\n        return {\r\n            points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\r\n        }\r\n    },\r\n    _render: function() {\r\n        this._renderPointer()\r\n    },\r\n    _clearPointer: function() {\r\n        delete this._element\r\n    },\r\n    _clear: function() {\r\n        this._clearPointer()\r\n    },\r\n    _getIndentFromCenter: function(radius) {\r\n        return Number(this._options.indentFromCenter) || 0\r\n    },\r\n    _getRadius: function() {\r\n        return 0\r\n    },\r\n    measure: function(layout) {\r\n        var result = {\r\n            max: layout.radius\r\n        };\r\n        if (this._options.indentFromCenter < 0) {\r\n            result.inverseHorizontalOffset = result.inverseVerticalOffset = -_Number(this._options.indentFromCenter)\r\n        }\r\n        return result\r\n    },\r\n    getTooltipParameters: function() {\r\n        var options = this._options;\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var r = (this._getRadius() + this._getIndentFromCenter()) / 2;\r\n        return {\r\n            x: options.x + cosSin.cos * r,\r\n            y: options.y - cosSin.sin * r,\r\n            value: this._currentValue,\r\n            color: options.color,\r\n            offset: options.width / 2\r\n        }\r\n    }\r\n});\r\nvar NeedleIndicator = SimpleIndicator.inherit({\r\n    _isVisible: function(layout) {\r\n        var indentFromCenter = this._adjustOffset(Number(this._options.indentFromCenter), layout.radius);\r\n        var offset = this._adjustOffset(Number(this._options.offset), layout.radius);\r\n        return layout.radius - indentFromCenter - offset > 0\r\n    },\r\n    getOffset: function() {\r\n        return 0\r\n    },\r\n    _adjustOffset: function(value, radius) {\r\n        var minRadius = Number(this._options.beginAdaptingAtRadius);\r\n        var diff = radius / minRadius;\r\n        if (diff < 1) {\r\n            value = Math.floor(value * diff)\r\n        }\r\n        return value || 0\r\n    },\r\n    _getIndentFromCenter: function(radius) {\r\n        return this._adjustOffset(Number(this._options.indentFromCenter), this._options.radius)\r\n    },\r\n    _getRadius: function() {\r\n        var options = this._options;\r\n        return options.radius - this._adjustOffset(Number(options.offset), options.radius)\r\n    },\r\n    _renderSpindle: function() {\r\n        var options = this._options;\r\n        var radius = options.radius;\r\n        var spindleSize = 2 * this._adjustOffset(_Number(options.spindleSize) / 2, radius);\r\n        var gapSize = 2 * this._adjustOffset(_Number(options.spindleGapSize) / 2, radius) || 0;\r\n        if (gapSize > 0) {\r\n            gapSize = gapSize <= spindleSize ? gapSize : spindleSize\r\n        }\r\n        if (spindleSize > 0) {\r\n            this._spindleOuter = this._spindleOuter || this._renderer.circle().append(this._rootElement);\r\n            this._spindleInner = this._spindleInner || this._renderer.circle().append(this._rootElement);\r\n            this._spindleOuter.attr({\r\n                class: \"dxg-spindle-border\",\r\n                cx: options.x,\r\n                cy: options.y,\r\n                r: spindleSize / 2\r\n            });\r\n            this._spindleInner.attr({\r\n                class: \"dxg-spindle-hole\",\r\n                cx: options.x,\r\n                cy: options.y,\r\n                r: gapSize / 2,\r\n                fill: options.containerBackgroundColor\r\n            })\r\n        }\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderSpindle()\r\n    },\r\n    _clear: function() {\r\n        this.callBase();\r\n        delete this._spindleOuter;\r\n        delete this._spindleInner\r\n    }\r\n});\r\nvar rectangleNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var options = this._options;\r\n        var y2 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = x1 + _Number(options.width);\r\n        this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\r\n        this._element.attr({\r\n            points: [x1, y1, x1, y2, x2, y2, x2, y1]\r\n        })\r\n    }\r\n});\r\nvar triangleNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var options = this._options;\r\n        var y2 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = options.x + options.width / 2;\r\n        this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\r\n        this._element.attr({\r\n            points: [x1, y1, options.x, y2, x2, y1]\r\n        })\r\n    }\r\n});\r\nvar twoColorNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var options = this._options;\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = options.x + options.width / 2;\r\n        var y4 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var fraction = _Number(options.secondFraction) || 0;\r\n        var y2;\r\n        var y3;\r\n        if (fraction >= 1) {\r\n            y2 = y3 = y1\r\n        } else if (fraction <= 0) {\r\n            y2 = y3 = y4\r\n        } else {\r\n            y3 = y4 + (y1 - y4) * fraction;\r\n            y2 = y3 + _Number(options.space)\r\n        }\r\n        this._firstElement = this._firstElement || this._renderer.path([], \"area\").append(this._rootElement);\r\n        this._spaceElement = this._spaceElement || this._renderer.path([], \"area\").append(this._rootElement);\r\n        this._secondElement = this._secondElement || this._renderer.path([], \"area\").append(this._rootElement);\r\n        this._firstElement.attr({\r\n            points: [x1, y1, x1, y2, x2, y2, x2, y1]\r\n        });\r\n        this._spaceElement.attr({\r\n            points: [x1, y2, x1, y3, x2, y3, x2, y2],\r\n            class: \"dxg-hole\",\r\n            fill: options.containerBackgroundColor\r\n        });\r\n        this._secondElement.attr({\r\n            points: [x1, y3, x1, y4, x2, y4, x2, y3],\r\n            class: \"dxg-part\",\r\n            fill: options.secondColor\r\n        })\r\n    },\r\n    _clearPointer: function() {\r\n        delete this._firstElement;\r\n        delete this._secondElement;\r\n        delete this._spaceElement\r\n    }\r\n});\r\nvar triangleMarker = SimpleIndicator.inherit({\r\n    _isEnabled: function() {\r\n        return this._options.length > 0 && this._options.width > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius > 0\r\n    },\r\n    _render: function() {\r\n        var options = this._options;\r\n        var x = options.x;\r\n        var y1 = options.y - options.radius;\r\n        var dx = options.width / 2 || 0;\r\n        var y2 = y1 - _Number(options.length);\r\n        this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\r\n        var settings = {\r\n            points: [x, y1, x - dx, y2, x + dx, y2],\r\n            stroke: \"none\",\r\n            \"stroke-width\": 0,\r\n            \"stroke-linecap\": \"square\"\r\n        };\r\n        if (options.space > 0) {\r\n            settings[\"stroke-width\"] = Math.min(options.space, options.width / 4) || 0;\r\n            settings.stroke = settings[\"stroke-width\"] > 0 ? options.containerBackgroundColor || \"none\" : \"none\"\r\n        }\r\n        this._element.attr(settings).sharp()\r\n    },\r\n    _clear: function() {\r\n        delete this._element\r\n    },\r\n    _getTrackerSettings: function() {\r\n        var options = this._options;\r\n        var x = options.x;\r\n        var y = options.y - options.radius - options.length / 2;\r\n        var width = options.width / 2;\r\n        var length = options.length / 2;\r\n        width > 10 || (width = 10);\r\n        length > 10 || (length = 10);\r\n        return {\r\n            points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        return {\r\n            min: layout.radius,\r\n            max: layout.radius + _Number(this._options.length)\r\n        }\r\n    },\r\n    getTooltipParameters: function() {\r\n        var options = this._options;\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var r = options.radius + options.length / 2;\r\n        var parameters = this.callBase();\r\n        parameters.x = options.x + cosSin.cos * r;\r\n        parameters.y = options.y - cosSin.sin * r;\r\n        parameters.offset = options.length / 2;\r\n        return parameters\r\n    }\r\n});\r\nvar textCloud = BaseTextCloudMarker.inherit({\r\n    _isEnabled: function() {\r\n        return true\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius > 0\r\n    },\r\n    _getTextCloudOptions: function() {\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var nAngle = normalizeAngle(this._actualPosition);\r\n        return {\r\n            x: this._options.x + cosSin.cos * this._options.radius,\r\n            y: this._options.y - cosSin.sin * this._options.radius,\r\n            type: nAngle > 270 ? \"left-top\" : nAngle > 180 ? \"top-right\" : nAngle > 90 ? \"right-bottom\" : \"bottom-left\"\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        var arrowLength = _Number(this._options.arrowLength) || 0;\r\n        this._measureText();\r\n        var verticalOffset = this._textFullHeight + arrowLength;\r\n        var horizontalOffset = this._textFullWidth + arrowLength;\r\n        return {\r\n            min: layout.radius,\r\n            max: layout.radius,\r\n            horizontalOffset: horizontalOffset,\r\n            verticalOffset: verticalOffset,\r\n            inverseHorizontalOffset: horizontalOffset,\r\n            inverseVerticalOffset: verticalOffset\r\n        }\r\n    }\r\n});\r\nvar rangeBar = BaseRangeBar.inherit({\r\n    _isEnabled: function() {\r\n        return this._options.size > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius - _Number(this._options.size) > 0\r\n    },\r\n    _createBarItem: function() {\r\n        return this._renderer.arc().attr({\r\n            \"stroke-linejoin\": \"round\"\r\n        }).append(this._rootElement)\r\n    },\r\n    _createTracker: function() {\r\n        return this._renderer.arc().attr({\r\n            \"stroke-linejoin\": \"round\"\r\n        })\r\n    },\r\n    _setBarSides: function() {\r\n        this._maxSide = this._options.radius;\r\n        this._minSide = this._maxSide - _Number(this._options.size)\r\n    },\r\n    _getSpace: function() {\r\n        var options = this._options;\r\n        return options.space > 0 ? 180 * options.space / options.radius / Math.PI : 0\r\n    },\r\n    _isTextVisible: function() {\r\n        var options = this._options.text || {};\r\n        return options.indent > 0\r\n    },\r\n    _setTextItemsSides: function() {\r\n        var options = this._options;\r\n        var indent = _Number(options.text.indent);\r\n        this._lineFrom = options.y - options.radius;\r\n        this._lineTo = this._lineFrom - indent;\r\n        this._textRadius = options.radius + indent\r\n    },\r\n    _getPositions: function() {\r\n        var basePosition = this._basePosition;\r\n        var actualPosition = this._actualPosition;\r\n        var mainPosition1;\r\n        var mainPosition2;\r\n        if (basePosition >= actualPosition) {\r\n            mainPosition1 = basePosition;\r\n            mainPosition2 = actualPosition\r\n        } else {\r\n            mainPosition1 = actualPosition;\r\n            mainPosition2 = basePosition\r\n        }\r\n        return {\r\n            start: this._startPosition,\r\n            end: this._endPosition,\r\n            main1: mainPosition1,\r\n            main2: mainPosition2,\r\n            back1: Math.min(mainPosition1 + this._space, this._startPosition),\r\n            back2: Math.max(mainPosition2 - this._space, this._endPosition)\r\n        }\r\n    },\r\n    _buildItemSettings: function(from, to) {\r\n        return {\r\n            x: this._options.x,\r\n            y: this._options.y,\r\n            innerRadius: this._minSide,\r\n            outerRadius: this._maxSide,\r\n            startAngle: to,\r\n            endAngle: from\r\n        }\r\n    },\r\n    _updateTextPosition: function() {\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var x = this._options.x + this._textRadius * cosSin.cos;\r\n        var y = this._options.y - this._textRadius * cosSin.sin;\r\n        x += cosSin.cos * this._textWidth * .6;\r\n        y -= cosSin.sin * this._textHeight * .6;\r\n        this._text.attr({\r\n            x: x,\r\n            y: y + this._textVerticalOffset\r\n        })\r\n    },\r\n    _updateLinePosition: function() {\r\n        var x = this._options.x;\r\n        var x1;\r\n        var x2;\r\n        if (this._basePosition > this._actualPosition) {\r\n            x1 = x - 2;\r\n            x2 = x\r\n        } else if (this._basePosition < this._actualPosition) {\r\n            x1 = x;\r\n            x2 = x + 2\r\n        } else {\r\n            x1 = x - 1;\r\n            x2 = x + 1\r\n        }\r\n        this._line.attr({\r\n            points: [x1, this._lineFrom, x1, this._lineTo, x2, this._lineTo, x2, this._lineFrom]\r\n        }).rotate(_convertAngleToRendererSpace(this._actualPosition), x, this._options.y).sharp()\r\n    },\r\n    _getTooltipPosition: function() {\r\n        var cosSin = _getCosAndSin((this._basePosition + this._actualPosition) / 2);\r\n        var r = (this._minSide + this._maxSide) / 2;\r\n        return {\r\n            x: this._options.x + cosSin.cos * r,\r\n            y: this._options.y - cosSin.sin * r\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        var result = {\r\n            min: layout.radius - _Number(this._options.size),\r\n            max: layout.radius\r\n        };\r\n        this._measureText();\r\n        if (this._hasText) {\r\n            result.max += _Number(this._options.text.indent);\r\n            result.horizontalOffset = this._textWidth;\r\n            result.verticalOffset = this._textHeight\r\n        }\r\n        return result\r\n    }\r\n});\r\nexport {\r\n    rectangleNeedle as _default, rectangleNeedle as rectangleneedle, triangleNeedle as triangleneedle, twoColorNeedle as twocolorneedle, triangleMarker as trianglemarker, textCloud as textcloud, rangeBar as rangebar\r\n};\r\n"]},"metadata":{},"sourceType":"module"}