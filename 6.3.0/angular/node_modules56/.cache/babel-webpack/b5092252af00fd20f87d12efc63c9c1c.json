{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/resources/resourceManager.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { wrapToArray, inArray } from \"../../../core/utils/array\";\nimport { grep } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { deepExtendArraySafe } from \"../../../core/utils/object\";\nimport { each, map } from \"../../../core/utils/iterator\";\nimport { extend } from \"../../../core/utils/extend\";\nimport query from \"../../../data/query\";\nimport { compileGetter, compileSetter } from \"../../../core/utils/data\";\nimport { when, Deferred } from \"../../../core/utils/deferred\";\nimport { AgendaResourceProcessor } from \"./agendaResourceProcessor\";\nimport { getDisplayExpr, getFieldExpr, getValueExpr, getWrappedDataSource } from \"./utils\";\nexport var ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager(resources) {\n    _classCallCheck(this, ResourceManager);\n\n    this._resourceLoader = {};\n    this.agendaProcessor = new AgendaResourceProcessor();\n    this.setResources(resources);\n  }\n\n  _createClass(ResourceManager, [{\n    key: \"_mapResourceData\",\n    value: function _mapResourceData(resource, data) {\n      var valueGetter = compileGetter(getValueExpr(resource));\n      var displayGetter = compileGetter(getDisplayExpr(resource));\n      return map(data, function (item) {\n        var result = {\n          id: valueGetter(item),\n          text: displayGetter(item)\n        };\n\n        if (item.color) {\n          result.color = item.color;\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_isMultipleResource\",\n    value: function _isMultipleResource(resourceField) {\n      var result = false;\n      each(this.getResources(), function (_, resource) {\n        var field = getFieldExpr(resource);\n\n        if (field === resourceField) {\n          result = resource.allowMultiple;\n          return false;\n        }\n      }.bind(this));\n      return result;\n    }\n  }, {\n    key: \"getDataAccessors\",\n    value: function getDataAccessors(field, type) {\n      var result = null;\n      each(this._dataAccessors[type], function (accessorName, accessors) {\n        if (field === accessorName) {\n          result = accessors;\n          return false;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"setResources\",\n    value: function setResources(resources) {\n      this._resources = resources;\n      this._dataAccessors = {\n        getter: {},\n        setter: {}\n      };\n      this._resourceFields = map(resources || [], function (resource) {\n        var field = getFieldExpr(resource);\n        this._dataAccessors.getter[field] = compileGetter(field);\n        this._dataAccessors.setter[field] = compileSetter(field);\n        return field;\n      }.bind(this));\n      this.agendaProcessor.initializeState(resources);\n    }\n  }, {\n    key: \"getResources\",\n    value: function getResources() {\n      return this._resources || [];\n    }\n  }, {\n    key: \"getResourcesData\",\n    value: function getResourcesData() {\n      return this._resourcesData || [];\n    }\n  }, {\n    key: \"getEditors\",\n    value: function getEditors() {\n      var result = [];\n      var that = this;\n      each(this.getResources(), function (i, resource) {\n        var field = getFieldExpr(resource);\n\n        var currentResourceItems = that._getResourceDataByField(field);\n\n        result.push({\n          editorOptions: {\n            dataSource: currentResourceItems.length ? currentResourceItems : getWrappedDataSource(resource.dataSource),\n            displayExpr: getDisplayExpr(resource),\n            valueExpr: getValueExpr(resource)\n          },\n          dataField: field,\n          editorType: resource.allowMultiple ? \"dxTagBox\" : \"dxSelectBox\",\n          label: {\n            text: resource.label || field\n          }\n        });\n      });\n      return result;\n    }\n  }, {\n    key: \"getResourceDataByValue\",\n    value: function getResourceDataByValue(field, value) {\n      var that = this;\n      var result = new Deferred();\n      each(this.getResources(), function (_, resource) {\n        var resourceField = getFieldExpr(resource);\n\n        if (resourceField === field) {\n          var dataSource = getWrappedDataSource(resource.dataSource);\n          var valueExpr = getValueExpr(resource);\n\n          if (!that._resourceLoader[field]) {\n            that._resourceLoader[field] = dataSource.load();\n          }\n\n          that._resourceLoader[field].done(function (data) {\n            var filteredData = query(data).filter(valueExpr, value).toArray();\n            delete that._resourceLoader[field];\n            result.resolve(filteredData[0]);\n          }).fail(function () {\n            delete that._resourceLoader[field];\n            result.reject();\n          });\n\n          return false;\n        }\n      });\n      return result.promise();\n    }\n  }, {\n    key: \"setResourcesToItem\",\n    value: function setResourcesToItem(itemData, resources) {\n      var resourcesSetter = this._dataAccessors.setter;\n\n      for (var name in resources) {\n        if (Object.prototype.hasOwnProperty.call(resources, name)) {\n          var resourceData = resources[name];\n          resourcesSetter[name](itemData, this._isMultipleResource(name) ? wrapToArray(resourceData) : resourceData);\n        }\n      }\n    }\n  }, {\n    key: \"getResourcesFromItem\",\n    value: function getResourcesFromItem(itemData, wrapOnlyMultipleResources) {\n      var _this = this;\n\n      var result = null;\n\n      if (!isDefined(wrapOnlyMultipleResources)) {\n        wrapOnlyMultipleResources = false;\n      }\n\n      this._resourceFields.forEach(function (field) {\n        each(itemData, function (fieldName, fieldValue) {\n          var tempObject = {};\n          tempObject[fieldName] = fieldValue;\n\n          var resourceData = _this.getDataAccessors(field, \"getter\")(tempObject);\n\n          if (isDefined(resourceData)) {\n            if (!result) {\n              result = {};\n            }\n\n            if (1 === resourceData.length) {\n              resourceData = resourceData[0];\n            }\n\n            if (!wrapOnlyMultipleResources || wrapOnlyMultipleResources && _this._isMultipleResource(field)) {\n              _this.getDataAccessors(field, \"setter\")(tempObject, wrapToArray(resourceData));\n            } else {\n              _this.getDataAccessors(field, \"setter\")(tempObject, resourceData);\n            }\n\n            extend(result, tempObject);\n            return true;\n          }\n        });\n      });\n\n      return result;\n    }\n  }, {\n    key: \"loadResources\",\n    value: function loadResources(groups) {\n      var result = new Deferred();\n      var that = this;\n      var deferreds = [];\n      each(this.getResourcesByFields(groups), function (i, resource) {\n        var deferred = new Deferred();\n        var field = getFieldExpr(resource);\n        deferreds.push(deferred);\n        getWrappedDataSource(resource.dataSource).load().done(function (data) {\n          deferred.resolve({\n            name: field,\n            items: that._mapResourceData(resource, data),\n            data: data\n          });\n        }).fail(function () {\n          deferred.reject();\n        });\n      });\n\n      if (!deferreds.length) {\n        that._resourcesData = [];\n        return result.resolve([]);\n      }\n\n      when.apply(null, deferreds).done(function () {\n        var data = Array.prototype.slice.call(arguments);\n\n        var mapFunction = function mapFunction(obj) {\n          return {\n            name: obj.name,\n            items: obj.items,\n            data: obj.data\n          };\n        };\n\n        var isValidResources = that._isValidResourcesForGrouping(data);\n\n        that._resourcesData = isValidResources ? data : [];\n        result.resolve(isValidResources ? data.map(mapFunction) : []);\n      }).fail(function () {\n        result.reject();\n      });\n      return result.promise();\n    }\n  }, {\n    key: \"getResourcesByFields\",\n    value: function getResourcesByFields(fields) {\n      return grep(this.getResources(), function (resource) {\n        var field = getFieldExpr(resource);\n        return inArray(field, fields) > -1;\n      }.bind(this));\n    }\n  }, {\n    key: \"getResourceByField\",\n    value: function getResourceByField(field) {\n      return this.getResourcesByFields([field])[0] || {};\n    }\n  }, {\n    key: \"getResourceColor\",\n    value: function getResourceColor(field, value) {\n      var valueExpr = this.getResourceByField(field).valueExpr || \"id\";\n      var valueGetter = compileGetter(valueExpr);\n      var colorExpr = this.getResourceByField(field).colorExpr || \"color\";\n      var colorGetter = compileGetter(colorExpr);\n      var result = new Deferred();\n\n      var resourceData = this._getResourceDataByField(field);\n\n      var resourceDataLength = resourceData.length;\n      var color;\n\n      if (resourceDataLength) {\n        for (var i = 0; i < resourceDataLength; i++) {\n          if (valueGetter(resourceData[i]) === value) {\n            color = colorGetter(resourceData[i]);\n            break;\n          }\n        }\n\n        result.resolve(color);\n      } else {\n        this.getResourceDataByValue(field, value).done(function (resourceData) {\n          if (resourceData) {\n            color = colorGetter(resourceData);\n          }\n\n          result.resolve(color);\n        }).fail(function () {\n          result.reject();\n        });\n      }\n\n      return result.promise();\n    }\n  }, {\n    key: \"getResourceForPainting\",\n    value: function getResourceForPainting(groups) {\n      var resources = this.getResources();\n      var result;\n      each(resources, function (index, resource) {\n        if (resource.useColorAsDefault) {\n          result = resource;\n          return false;\n        }\n      });\n\n      if (!result) {\n        if (Array.isArray(groups) && groups.length) {\n          resources = this.getResourcesByFields(groups);\n        }\n\n        result = resources[resources.length - 1];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"createResourcesTree\",\n    value: function createResourcesTree(groups) {\n      var leafIndex = 0;\n      return function make(group, groupIndex, result, parent) {\n        result = result || [];\n\n        for (var i = 0; i < group.items.length; i++) {\n          var currentGroupItem = group.items[i];\n          var resultItem = {\n            name: group.name,\n            value: currentGroupItem.id,\n            title: currentGroupItem.text,\n            data: group.data && group.data[i],\n            children: [],\n            parent: parent ? parent : null\n          };\n          result.push(resultItem);\n          var nextGroupIndex = groupIndex + 1;\n\n          if (groups[nextGroupIndex]) {\n            make.call(this, groups[nextGroupIndex], nextGroupIndex, resultItem.children, resultItem);\n          }\n\n          if (!resultItem.children.length) {\n            resultItem.leafIndex = leafIndex;\n            leafIndex++;\n          }\n        }\n\n        return result;\n      }.call(this, groups[0], 0);\n    }\n  }, {\n    key: \"_hasGroupItem\",\n    value: function _hasGroupItem(appointmentResources, groupName, itemValue) {\n      var group = this.getDataAccessors(groupName, \"getter\")(appointmentResources);\n\n      if (group) {\n        if (inArray(itemValue, group) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_createPlainResourcesByAppointmentAsync\",\n    value: function _createPlainResourcesByAppointmentAsync(rawAppointment) {\n      return this.agendaProcessor.createListAsync(rawAppointment);\n    }\n  }, {\n    key: \"_getResourceDataByField\",\n    value: function _getResourceDataByField(fieldName) {\n      var loadedResources = this.getResourcesData();\n      var currentResourceData = [];\n\n      for (var i = 0, resourceCount = loadedResources.length; i < resourceCount; i++) {\n        if (loadedResources[i].name === fieldName) {\n          currentResourceData = loadedResources[i].data;\n          break;\n        }\n      }\n\n      return currentResourceData;\n    }\n  }, {\n    key: \"getResourceTreeLeaves\",\n    value: function getResourceTreeLeaves(tree, appointmentResources, result) {\n      result = result || [];\n\n      for (var i = 0; i < tree.length; i++) {\n        if (!this._hasGroupItem(appointmentResources, tree[i].name, tree[i].value)) {\n          continue;\n        }\n\n        if (isDefined(tree[i].leafIndex)) {\n          result.push(tree[i].leafIndex);\n        }\n\n        if (tree[i].children) {\n          this.getResourceTreeLeaves(tree[i].children, appointmentResources, result);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"groupAppointmentsByResources\",\n    value: function groupAppointmentsByResources(appointments, resources) {\n      var tree = this.createResourcesTree(resources);\n      var result = {};\n      each(appointments, function (_, appointment) {\n        var appointmentResources = this.getResourcesFromItem(appointment);\n        var treeLeaves = this.getResourceTreeLeaves(tree, appointmentResources);\n\n        for (var i = 0; i < treeLeaves.length; i++) {\n          if (!result[treeLeaves[i]]) {\n            result[treeLeaves[i]] = [];\n          }\n\n          result[treeLeaves[i]].push(deepExtendArraySafe({}, appointment, true));\n        }\n      }.bind(this));\n      return result;\n    }\n  }, {\n    key: \"reduceResourcesTree\",\n    value: function reduceResourcesTree(tree, existingAppointments, _result) {\n      _result = _result ? _result.children : [];\n      var that = this;\n      tree.forEach(function (node, index) {\n        var ok = false;\n        var resourceName = node.name;\n        var resourceValue = node.value;\n        var resourceTitle = node.title;\n        var resourceData = node.data;\n        var resourceGetter = that.getDataAccessors(resourceName, \"getter\");\n        existingAppointments.forEach(function (appointment) {\n          if (!ok) {\n            var resourceFromAppointment = resourceGetter(appointment);\n\n            if (Array.isArray(resourceFromAppointment)) {\n              if (resourceFromAppointment.indexOf(resourceValue) > -1) {\n                _result.push({\n                  name: resourceName,\n                  value: resourceValue,\n                  title: resourceTitle,\n                  data: resourceData,\n                  children: []\n                });\n\n                ok = true;\n              }\n            } else if (resourceFromAppointment === resourceValue) {\n              _result.push({\n                name: resourceName,\n                value: resourceValue,\n                title: resourceTitle,\n                data: resourceData,\n                children: []\n              });\n\n              ok = true;\n            }\n          }\n        });\n\n        if (ok && node.children && node.children.length) {\n          that.reduceResourcesTree(node.children, existingAppointments, _result[index]);\n        }\n      });\n      return _result;\n    }\n  }, {\n    key: \"getResourcesDataByGroups\",\n    value: function getResourcesDataByGroups(groups) {\n      var _this2 = this;\n\n      var resourcesData = this.getResourcesData();\n\n      if (!groups || !groups.length) {\n        return resourcesData;\n      }\n\n      var fieldNames = {};\n      var currentResourcesData = [];\n      groups.forEach(function (group) {\n        each(group, function (name, value) {\n          return fieldNames[name] = value;\n        });\n      });\n      var resourceData = resourcesData.filter(function (_ref) {\n        var name = _ref.name;\n        return isDefined(fieldNames[name]);\n      });\n      resourceData.forEach(function (data) {\n        return currentResourcesData.push(extend({}, data));\n      });\n      currentResourcesData.forEach(function (currentResource) {\n        var items = currentResource.items,\n            data = currentResource.data,\n            resourceName = currentResource.name;\n\n        var resource = _this2.getResourceByField(resourceName);\n\n        var valueExpr = getValueExpr(resource);\n        var filteredItems = [];\n        var filteredData = [];\n        groups.filter(function (group) {\n          return isDefined(group[resourceName]);\n        }).forEach(function (group) {\n          each(group, function (name, value) {\n            if (!filteredItems.filter(function (item) {\n              return item.id === value && item[valueExpr] === name;\n            }).length) {\n              var currentItems = items.filter(function (item) {\n                return item.id === value;\n              });\n              var currentData = data.filter(function (item) {\n                return item[valueExpr] === value;\n              });\n              filteredItems.push.apply(filteredItems, _toConsumableArray(currentItems));\n              filteredData.push.apply(filteredData, _toConsumableArray(currentData));\n            }\n          });\n        });\n        currentResource.items = filteredItems;\n        currentResource.data = filteredData;\n      });\n      return currentResourcesData;\n    }\n  }, {\n    key: \"_isValidResourcesForGrouping\",\n    value: function _isValidResourcesForGrouping(resources) {\n      var result = resources.reduce(function (isValidResources, currentResource) {\n        return isValidResources && currentResource.items.length > 0;\n      }, true);\n      return result;\n    }\n  }]);\n\n  return ResourceManager;\n}();","map":null,"metadata":{},"sourceType":"module"}