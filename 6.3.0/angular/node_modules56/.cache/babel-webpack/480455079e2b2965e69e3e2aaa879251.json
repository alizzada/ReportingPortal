{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.summary_display_modes.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isFunction, isDefined, isObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport { findField, foreachTree, setFieldProperty } from \"./ui.pivot_grid.utils\";\nvar COLUMN = \"column\";\nvar ROW = \"row\";\nvar NULL = null;\n\nvar calculatePercentValue = function calculatePercentValue(value, totalValue) {\n  var result = value / totalValue;\n\n  if (!isDefined(value) || isNaN(result)) {\n    result = NULL;\n  }\n\n  return result;\n};\n\nvar _percentOfGrandTotal = function _percentOfGrandTotal(e, dimension) {\n  return calculatePercentValue(e.value(), e.grandTotal(dimension).value());\n};\n\nvar percentOfParent = function percentOfParent(e, dimension) {\n  var parent = e.parent(dimension);\n  var parentValue = parent ? parent.value() : e.value();\n  return calculatePercentValue(e.value(), parentValue);\n};\n\nvar createAbsoluteVariationExp = function createAbsoluteVariationExp(allowCrossGroup) {\n  return function (e) {\n    var prevCell = e.prev(COLUMN, allowCrossGroup);\n    var prevValue = prevCell && prevCell.value();\n\n    if (isDefined(prevValue) && isDefined(e.value())) {\n      return e.value() - prevValue;\n    }\n\n    return NULL;\n  };\n};\n\nvar createPercentVariationExp = function createPercentVariationExp(allowCrossGroup) {\n  var absoluteExp = createAbsoluteVariationExp(allowCrossGroup);\n  return function (e) {\n    var absVar = absoluteExp(e);\n    var prevCell = e.prev(COLUMN, allowCrossGroup);\n    var prevValue = prevCell && prevCell.value();\n    return absVar !== NULL && prevValue ? absVar / prevValue : NULL;\n  };\n};\n\nvar summaryDictionary = {\n  percentOfColumnTotal: function percentOfColumnTotal(e) {\n    return percentOfParent(e, ROW);\n  },\n  percentOfRowTotal: function percentOfRowTotal(e) {\n    return percentOfParent(e, COLUMN);\n  },\n  percentOfColumnGrandTotal: function percentOfColumnGrandTotal(e) {\n    return _percentOfGrandTotal(e, ROW);\n  },\n  percentOfRowGrandTotal: function percentOfRowGrandTotal(e) {\n    return _percentOfGrandTotal(e, COLUMN);\n  },\n  percentOfGrandTotal: function percentOfGrandTotal(e) {\n    return _percentOfGrandTotal(e);\n  }\n};\n\nvar getPrevCellCrossGroup = function getPrevCellCrossGroup(cell, direction) {\n  if (!cell || !cell.parent(direction)) {\n    return;\n  }\n\n  var prevCell = cell.prev(direction);\n\n  if (!prevCell) {\n    prevCell = getPrevCellCrossGroup(cell.parent(direction), direction);\n  }\n\n  return prevCell;\n};\n\nvar createRunningTotalExpr = function createRunningTotalExpr(field) {\n  if (!field.runningTotal) {\n    return;\n  }\n\n  var direction = field.runningTotal === COLUMN ? ROW : COLUMN;\n  return function (e) {\n    var prevCell = field.allowCrossGroupCalculation ? getPrevCellCrossGroup(e, direction) : e.prev(direction, false);\n    var value = e.value(true);\n    var prevValue = prevCell && prevCell.value(true);\n\n    if (isDefined(prevValue) && isDefined(value)) {\n      value = prevValue + value;\n    } else if (isDefined(prevValue)) {\n      value = prevValue;\n    }\n\n    return value;\n  };\n};\n\nfunction createCache() {\n  return {\n    fields: {},\n    positions: {}\n  };\n}\n\nfunction getFieldPos(descriptions, field, cache) {\n  var fieldParams = {\n    index: -1\n  };\n\n  if (!isObject(field)) {\n    if (cache.fields[field]) {\n      field = cache[field];\n    } else {\n      var allFields = descriptions.columns.concat(descriptions.rows).concat(descriptions.values);\n      var fieldIndex = findField(allFields, field);\n      field = cache[field] = allFields[fieldIndex];\n    }\n  }\n\n  if (field) {\n    var area = field.area || \"data\";\n    fieldParams = cache.positions[field.index] = cache.positions[field.index] || {\n      area: area,\n      index: inArray(field, descriptions[\"data\" === area ? \"values\" : area + \"s\"])\n    };\n  }\n\n  return fieldParams;\n}\n\nfunction getPathFieldName(dimension) {\n  return dimension === ROW ? \"_rowPath\" : \"_columnPath\";\n}\n\nvar SummaryCell = function SummaryCell(columnPath, rowPath, data, descriptions, fieldIndex, fieldsCache) {\n  this._columnPath = columnPath;\n  this._rowPath = rowPath;\n  this._fieldIndex = fieldIndex;\n  this._fieldsCache = fieldsCache || createCache();\n  this._data = data;\n  this._descriptions = descriptions;\n  var cell = data.values && data.values[rowPath[0].index] && data.values[rowPath[0].index][columnPath[0].index];\n\n  if (cell) {\n    cell.originalCell = cell.originalCell || cell.slice();\n    cell.postProcessedFlags = cell.postProcessedFlags || [];\n    this._cell = cell;\n  }\n};\n\nSummaryCell.prototype = extend(SummaryCell.prototype, {\n  _getPath: function _getPath(dimension) {\n    return this[getPathFieldName(dimension)];\n  },\n  _getDimension: function _getDimension(dimension) {\n    dimension = dimension === ROW ? \"rows\" : \"columns\";\n    return this._descriptions[dimension];\n  },\n  _createCell: function _createCell(config) {\n    return new SummaryCell(config._columnPath || this._columnPath, config._rowPath || this._rowPath, this._data, this._descriptions, this._fieldIndex);\n  },\n  parent: function parent(direction) {\n    var path = this._getPath(direction).slice();\n\n    var config = {};\n    path.shift();\n\n    if (path.length) {\n      config[getPathFieldName(direction)] = path;\n      return this._createCell(config);\n    }\n\n    return NULL;\n  },\n  children: function children(direction) {\n    var path = this._getPath(direction).slice();\n\n    var item = path[0];\n    var result = [];\n    var cellConfig = {};\n\n    if (item.children) {\n      for (var i = 0; i < item.children.length; i++) {\n        cellConfig[getPathFieldName(direction)] = [item.children[i]].concat(path.slice());\n        result.push(this._createCell(cellConfig));\n      }\n    }\n\n    return result;\n  },\n  grandTotal: function grandTotal(direction) {\n    var config = {};\n    var rowPath = this._rowPath;\n    var columnPath = this._columnPath;\n\n    var dimensionPath = this._getPath(direction);\n\n    var pathFieldName = getPathFieldName(direction);\n\n    if (!direction) {\n      config._rowPath = [rowPath[rowPath.length - 1]];\n      config._columnPath = [columnPath[columnPath.length - 1]];\n    } else {\n      config[pathFieldName] = [dimensionPath[dimensionPath.length - 1]];\n    }\n\n    return this._createCell(config);\n  },\n  next: function next(direction, allowCrossGroup) {\n    var currentPath = this._getPath(direction);\n\n    var item = currentPath[0];\n    var parent = this.parent(direction);\n    var siblings;\n\n    if (parent) {\n      var index = inArray(item, currentPath[1].children);\n      siblings = parent.children(direction);\n\n      if (siblings[index + 1]) {\n        return siblings[index + 1];\n      }\n    }\n\n    if (allowCrossGroup && parent) {\n      do {\n        parent = parent.next(direction, allowCrossGroup);\n        siblings = parent ? parent.children(direction) : [];\n      } while (parent && !siblings.length);\n\n      return siblings[0] || NULL;\n    }\n\n    return NULL;\n  },\n  prev: function prev(direction, allowCrossGroup) {\n    var currentPath = this._getPath(direction);\n\n    var item = currentPath[0];\n    var parent = this.parent(direction);\n    var siblings;\n\n    if (parent) {\n      var index = inArray(item, currentPath[1].children);\n      siblings = parent.children(direction);\n\n      if (siblings[index - 1]) {\n        return siblings[index - 1];\n      }\n    }\n\n    if (allowCrossGroup && parent) {\n      do {\n        parent = parent.prev(direction, allowCrossGroup);\n        siblings = parent ? parent.children(direction) : [];\n      } while (parent && !siblings.length);\n\n      return siblings[siblings.length - 1] || NULL;\n    }\n\n    return NULL;\n  },\n  cell: function cell() {\n    return this._cell;\n  },\n  field: function field(area) {\n    if (\"data\" === area) {\n      return this._descriptions.values[this._fieldIndex];\n    }\n\n    var path = this._getPath(area);\n\n    var descriptions = this._getDimension(area);\n\n    var field = descriptions[path.length - 2];\n    return field || NULL;\n  },\n  child: function child(direction, fieldValue) {\n    var children = this.children(direction);\n\n    for (var i = 0; i < children.length; i++) {\n      var childLevelField = childLevelField || children[i].field(direction);\n\n      if (children[i].value(childLevelField) === fieldValue) {\n        return children[i];\n      }\n    }\n\n    return NULL;\n  },\n  slice: function slice(field, value) {\n    var config = {};\n    var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n    var area = fieldPos.area;\n    var fieldIndex = fieldPos.index;\n    var sliceCell = NULL;\n\n    if (area === ROW || area === COLUMN) {\n      var path = this._getPath(area).slice();\n\n      var level = -1 !== fieldIndex && path.length - 2 - fieldIndex;\n\n      if (path[level]) {\n        [][path.length - 1] = path[path.length - 1];\n\n        for (var i = level; i >= 0; i--) {\n          if (path[i + 1]) {\n            var childItems = path[i + 1].children || [];\n            var currentValue = i === level ? value : path[i].value;\n            path[i] = void 0;\n\n            for (var childIndex = 0; childIndex < childItems.length; childIndex++) {\n              if (childItems[childIndex].value === currentValue) {\n                path[i] = childItems[childIndex];\n                break;\n              }\n            }\n          }\n\n          if (void 0 === path[i]) {\n            return sliceCell;\n          }\n        }\n\n        config[getPathFieldName(area)] = path;\n        sliceCell = this._createCell(config);\n      }\n    }\n\n    return sliceCell;\n  },\n  value: function value(arg1, arg2) {\n    var cell = this._cell;\n    var fieldIndex = this._fieldIndex;\n    var fistArgIsBoolean = true === arg1 || false === arg1;\n    var field = !fistArgIsBoolean ? arg1 : NULL;\n    var needCalculatedValue = fistArgIsBoolean && arg1 || arg2;\n\n    if (isDefined(field)) {\n      var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n      fieldIndex = fieldPos.index;\n\n      if (\"data\" !== fieldPos.area) {\n        var path = this._getPath(fieldPos.area);\n\n        var level = -1 !== fieldIndex && path.length - 2 - fieldIndex;\n        return path[level] && path[level].value;\n      }\n    }\n\n    if (cell && cell.originalCell) {\n      return needCalculatedValue ? cell[fieldIndex] : cell.originalCell[fieldIndex];\n    }\n\n    return NULL;\n  },\n  isPostProcessed: function isPostProcessed(field) {\n    var fieldIndex = this._fieldIndex;\n\n    if (isDefined(field)) {\n      var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n      fieldIndex = fieldPos.index;\n\n      if (\"data\" !== fieldPos.area) {\n        return false;\n      }\n    }\n\n    return !!(this._cell && this._cell.postProcessedFlags[fieldIndex]);\n  }\n});\n\nfunction getExpression(field) {\n  var summaryDisplayMode = field.summaryDisplayMode;\n  var crossGroupCalculation = field.allowCrossGroupCalculation;\n  var expression = NULL;\n\n  if (isFunction(field.calculateSummaryValue)) {\n    expression = field.calculateSummaryValue;\n  } else if (summaryDisplayMode) {\n    if (\"absoluteVariation\" === summaryDisplayMode) {\n      expression = createAbsoluteVariationExp(crossGroupCalculation);\n    } else if (\"percentVariation\" === summaryDisplayMode) {\n      expression = createPercentVariationExp(crossGroupCalculation);\n    } else {\n      expression = summaryDictionary[summaryDisplayMode];\n    }\n\n    if (expression && !field.format && -1 !== summaryDisplayMode.indexOf(\"percent\")) {\n      setFieldProperty(field, \"format\", \"percent\");\n    }\n  }\n\n  return expression;\n}\n\nfunction processDataCell(data, rowIndex, columnIndex, isRunningTotalCalculation) {\n  var values = data.values[rowIndex][columnIndex] = data.values[rowIndex][columnIndex] || [];\n  var originalCell = values.originalCell;\n\n  if (!originalCell) {\n    return;\n  }\n\n  if (values.allowResetting || !isRunningTotalCalculation) {\n    data.values[rowIndex][columnIndex] = originalCell.slice();\n  }\n\n  data.values[rowIndex][columnIndex].allowResetting = isRunningTotalCalculation;\n}\n\nexport function applyDisplaySummaryMode(descriptions, data) {\n  var expressions = [];\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var valueFields = descriptions.values;\n  var fieldsCache = createCache();\n  data.values = data.values || [];\n  foreachTree(columnElements, function (columnPath) {\n    columnPath[0].isEmpty = [];\n  }, false);\n  foreachTree(rowElements, function (rowPath) {\n    var rowItem = rowPath[0];\n    rowItem.isEmpty = [];\n    data.values[rowItem.index] = data.values[rowItem.index] || [];\n    foreachTree(columnElements, function (columnPath) {\n      var columnItem = columnPath[0];\n      var isEmptyCell;\n      processDataCell(data, rowItem.index, columnItem.index, false);\n\n      for (var i = 0; i < valueFields.length; i++) {\n        var field = valueFields[i];\n        var expression = expressions[i] = void 0 === expressions[i] ? getExpression(field) : expressions[i];\n        isEmptyCell = false;\n\n        if (expression) {\n          var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\n          var cell = expressionArg.cell();\n          var value = cell[i] = expression(expressionArg);\n          cell.postProcessedFlags[i] = true;\n          isEmptyCell = null === value || void 0 === value;\n        }\n\n        if (void 0 === columnItem.isEmpty[i]) {\n          columnItem.isEmpty[i] = true;\n        }\n\n        if (void 0 === rowItem.isEmpty[i]) {\n          rowItem.isEmpty[i] = true;\n        }\n\n        if (!isEmptyCell) {\n          rowItem.isEmpty[i] = columnItem.isEmpty[i] = false;\n        }\n      }\n    }, false);\n  }, false);\n  data.isEmptyGrandTotalRow = rowElements[0].isEmpty;\n  data.isEmptyGrandTotalColumn = columnElements[0].isEmpty;\n}\nexport function applyRunningTotal(descriptions, data) {\n  var expressions = [];\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var valueFields = descriptions.values;\n  var fieldsCache = createCache();\n  data.values = data.values || [];\n  foreachTree(rowElements, function (rowPath) {\n    var rowItem = rowPath[0];\n    data.values[rowItem.index] = data.values[rowItem.index] || [];\n    foreachTree(columnElements, function (columnPath) {\n      var columnItem = columnPath[0];\n      processDataCell(data, rowItem.index, columnItem.index, true);\n\n      for (var i = 0; i < valueFields.length; i++) {\n        var field = valueFields[i];\n        var expression = expressions[i] = void 0 === expressions[i] ? createRunningTotalExpr(field) : expressions[i];\n\n        if (expression) {\n          var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\n          var cell = expressionArg.cell();\n          cell[i] = expression(expressionArg);\n          cell.postProcessedFlags[i] = true;\n        }\n      }\n    }, false);\n  }, false);\n}\nexport function createMockSummaryCell(descriptions, fields, indices) {\n  var summaryCell = new SummaryCell([], [], {}, descriptions, 0);\n\n  summaryCell.value = function (fieldId) {\n    if (isDefined(fieldId)) {\n      var index = findField(fields, fieldId);\n      var field = fields[index];\n\n      if (!indices[index] && field && !isDefined(field.area)) {\n        descriptions.values.push(field);\n        indices[index] = true;\n      }\n    }\n  };\n\n  summaryCell.grandTotal = function () {\n    return this;\n  };\n\n  summaryCell.children = function () {\n    return [];\n  };\n\n  return summaryCell;\n}","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/pivot_grid/ui.pivot_grid.summary_display_modes.js"],"names":["isFunction","isDefined","isObject","extend","inArray","findField","foreachTree","setFieldProperty","COLUMN","ROW","NULL","calculatePercentValue","value","totalValue","result","isNaN","_percentOfGrandTotal","e","dimension","grandTotal","percentOfParent","parent","parentValue","createAbsoluteVariationExp","allowCrossGroup","prevCell","prev","prevValue","createPercentVariationExp","absoluteExp","absVar","summaryDictionary","percentOfColumnTotal","percentOfRowTotal","percentOfColumnGrandTotal","percentOfRowGrandTotal","percentOfGrandTotal","getPrevCellCrossGroup","cell","direction","createRunningTotalExpr","field","runningTotal","allowCrossGroupCalculation","createCache","fields","positions","getFieldPos","descriptions","cache","fieldParams","index","allFields","columns","concat","rows","values","fieldIndex","area","getPathFieldName","SummaryCell","columnPath","rowPath","data","fieldsCache","_columnPath","_rowPath","_fieldIndex","_fieldsCache","_data","_descriptions","originalCell","slice","postProcessedFlags","_cell","prototype","_getPath","_getDimension","_createCell","config","path","shift","length","children","item","cellConfig","i","push","dimensionPath","pathFieldName","next","currentPath","siblings","child","fieldValue","childLevelField","fieldPos","sliceCell","level","childItems","currentValue","childIndex","arg1","arg2","fistArgIsBoolean","needCalculatedValue","isPostProcessed","getExpression","summaryDisplayMode","crossGroupCalculation","expression","calculateSummaryValue","format","indexOf","processDataCell","rowIndex","columnIndex","isRunningTotalCalculation","allowResetting","applyDisplaySummaryMode","expressions","columnElements","grandTotalColumnIndex","rowElements","grandTotalRowIndex","valueFields","isEmpty","rowItem","columnItem","isEmptyCell","expressionArg","isEmptyGrandTotalRow","isEmptyGrandTotalColumn","applyRunningTotal","createMockSummaryCell","indices","summaryCell","fieldId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,UADJ,EAEIC,SAFJ,EAGIC,QAHJ,QAIO,uBAJP;AAKA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,OADJ,QAEO,wBAFP;AAGA,SACIC,SADJ,EAEIC,WAFJ,EAGIC,gBAHJ,QAIO,uBAJP;AAKA,IAAIC,MAAM,GAAG,QAAb;AACA,IAAIC,GAAG,GAAG,KAAV;AACA,IAAIC,IAAI,GAAG,IAAX;;AACA,IAAIC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAASC,KAAT,EAAgBC,UAAhB,EAA4B;AACpD,MAAIC,MAAM,GAAGF,KAAK,GAAGC,UAArB;;AACA,MAAI,CAACZ,SAAS,CAACW,KAAD,CAAV,IAAqBG,KAAK,CAACD,MAAD,CAA9B,EAAwC;AACpCA,IAAAA,MAAM,GAAGJ,IAAT;AACH;;AACD,SAAOI,MAAP;AACH,CAND;;AAOA,IAAIE,oBAAoB,GAAG,SAAvBA,oBAAuB,CAASC,CAAT,EAAYC,SAAZ,EAAuB;AAC9C,SAAOP,qBAAqB,CAACM,CAAC,CAACL,KAAF,EAAD,EAAYK,CAAC,CAACE,UAAF,CAAaD,SAAb,EAAwBN,KAAxB,EAAZ,CAA5B;AACH,CAFD;;AAGA,IAAIQ,eAAe,GAAG,SAAlBA,eAAkB,CAASH,CAAT,EAAYC,SAAZ,EAAuB;AACzC,MAAIG,MAAM,GAAGJ,CAAC,CAACI,MAAF,CAASH,SAAT,CAAb;AACA,MAAII,WAAW,GAAGD,MAAM,GAAGA,MAAM,CAACT,KAAP,EAAH,GAAoBK,CAAC,CAACL,KAAF,EAA5C;AACA,SAAOD,qBAAqB,CAACM,CAAC,CAACL,KAAF,EAAD,EAAYU,WAAZ,CAA5B;AACH,CAJD;;AAKA,IAAIC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAASC,eAAT,EAA0B;AACvD,SAAO,UAASP,CAAT,EAAY;AACf,QAAIQ,QAAQ,GAAGR,CAAC,CAACS,IAAF,CAAOlB,MAAP,EAAegB,eAAf,CAAf;AACA,QAAIG,SAAS,GAAGF,QAAQ,IAAIA,QAAQ,CAACb,KAAT,EAA5B;;AACA,QAAIX,SAAS,CAAC0B,SAAD,CAAT,IAAwB1B,SAAS,CAACgB,CAAC,CAACL,KAAF,EAAD,CAArC,EAAkD;AAC9C,aAAOK,CAAC,CAACL,KAAF,KAAYe,SAAnB;AACH;;AACD,WAAOjB,IAAP;AACH,GAPD;AAQH,CATD;;AAUA,IAAIkB,yBAAyB,GAAG,SAA5BA,yBAA4B,CAASJ,eAAT,EAA0B;AACtD,MAAIK,WAAW,GAAGN,0BAA0B,CAACC,eAAD,CAA5C;AACA,SAAO,UAASP,CAAT,EAAY;AACf,QAAIa,MAAM,GAAGD,WAAW,CAACZ,CAAD,CAAxB;AACA,QAAIQ,QAAQ,GAAGR,CAAC,CAACS,IAAF,CAAOlB,MAAP,EAAegB,eAAf,CAAf;AACA,QAAIG,SAAS,GAAGF,QAAQ,IAAIA,QAAQ,CAACb,KAAT,EAA5B;AACA,WAAOkB,MAAM,KAAKpB,IAAX,IAAmBiB,SAAnB,GAA+BG,MAAM,GAAGH,SAAxC,GAAoDjB,IAA3D;AACH,GALD;AAMH,CARD;;AASA,IAAIqB,iBAAiB,GAAG;AACpBC,EAAAA,oBAAoB,EAAE,8BAASf,CAAT,EAAY;AAC9B,WAAOG,eAAe,CAACH,CAAD,EAAIR,GAAJ,CAAtB;AACH,GAHmB;AAIpBwB,EAAAA,iBAAiB,EAAE,2BAAShB,CAAT,EAAY;AAC3B,WAAOG,eAAe,CAACH,CAAD,EAAIT,MAAJ,CAAtB;AACH,GANmB;AAOpB0B,EAAAA,yBAAyB,EAAE,mCAASjB,CAAT,EAAY;AACnC,WAAOD,oBAAoB,CAACC,CAAD,EAAIR,GAAJ,CAA3B;AACH,GATmB;AAUpB0B,EAAAA,sBAAsB,EAAE,gCAASlB,CAAT,EAAY;AAChC,WAAOD,oBAAoB,CAACC,CAAD,EAAIT,MAAJ,CAA3B;AACH,GAZmB;AAapB4B,EAAAA,mBAAmB,EAAE,6BAASnB,CAAT,EAAY;AAC7B,WAAOD,oBAAoB,CAACC,CAAD,CAA3B;AACH;AAfmB,CAAxB;;AAiBA,IAAIoB,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,IAA/B,EAAqCC,SAArC,EAAgD;AACxE,MAAI,CAACD,IAAD,IAAS,CAACA,IAAI,CAACjB,MAAL,CAAYkB,SAAZ,CAAd,EAAsC;AAClC;AACH;;AACD,MAAId,QAAQ,GAAGa,IAAI,CAACZ,IAAL,CAAUa,SAAV,CAAf;;AACA,MAAI,CAACd,QAAL,EAAe;AACXA,IAAAA,QAAQ,GAAGY,qBAAqB,CAACC,IAAI,CAACjB,MAAL,CAAYkB,SAAZ,CAAD,EAAyBA,SAAzB,CAAhC;AACH;;AACD,SAAOd,QAAP;AACH,CATD;;AAUA,IAAIe,sBAAsB,GAAG,SAAzBA,sBAAyB,CAASC,KAAT,EAAgB;AACzC,MAAI,CAACA,KAAK,CAACC,YAAX,EAAyB;AACrB;AACH;;AACD,MAAIH,SAAS,GAAGE,KAAK,CAACC,YAAN,KAAuBlC,MAAvB,GAAgCC,GAAhC,GAAsCD,MAAtD;AACA,SAAO,UAASS,CAAT,EAAY;AACf,QAAIQ,QAAQ,GAAGgB,KAAK,CAACE,0BAAN,GAAmCN,qBAAqB,CAACpB,CAAD,EAAIsB,SAAJ,CAAxD,GAAyEtB,CAAC,CAACS,IAAF,CAAOa,SAAP,EAAkB,KAAlB,CAAxF;AACA,QAAI3B,KAAK,GAAGK,CAAC,CAACL,KAAF,CAAQ,IAAR,CAAZ;AACA,QAAIe,SAAS,GAAGF,QAAQ,IAAIA,QAAQ,CAACb,KAAT,CAAe,IAAf,CAA5B;;AACA,QAAIX,SAAS,CAAC0B,SAAD,CAAT,IAAwB1B,SAAS,CAACW,KAAD,CAArC,EAA8C;AAC1CA,MAAAA,KAAK,GAAGe,SAAS,GAAGf,KAApB;AACH,KAFD,MAEO,IAAIX,SAAS,CAAC0B,SAAD,CAAb,EAA0B;AAC7Bf,MAAAA,KAAK,GAAGe,SAAR;AACH;;AACD,WAAOf,KAAP;AACH,GAVD;AAWH,CAhBD;;AAkBA,SAASgC,WAAT,GAAuB;AACnB,SAAO;AACHC,IAAAA,MAAM,EAAE,EADL;AAEHC,IAAAA,SAAS,EAAE;AAFR,GAAP;AAIH;;AAED,SAASC,WAAT,CAAqBC,YAArB,EAAmCP,KAAnC,EAA0CQ,KAA1C,EAAiD;AAC7C,MAAIC,WAAW,GAAG;AACdC,IAAAA,KAAK,EAAE,CAAC;AADM,GAAlB;;AAGA,MAAI,CAACjD,QAAQ,CAACuC,KAAD,CAAb,EAAsB;AAClB,QAAIQ,KAAK,CAACJ,MAAN,CAAaJ,KAAb,CAAJ,EAAyB;AACrBA,MAAAA,KAAK,GAAGQ,KAAK,CAACR,KAAD,CAAb;AACH,KAFD,MAEO;AACH,UAAIW,SAAS,GAAGJ,YAAY,CAACK,OAAb,CAAqBC,MAArB,CAA4BN,YAAY,CAACO,IAAzC,EAA+CD,MAA/C,CAAsDN,YAAY,CAACQ,MAAnE,CAAhB;AACA,UAAIC,UAAU,GAAGpD,SAAS,CAAC+C,SAAD,EAAYX,KAAZ,CAA1B;AACAA,MAAAA,KAAK,GAAGQ,KAAK,CAACR,KAAD,CAAL,GAAeW,SAAS,CAACK,UAAD,CAAhC;AACH;AACJ;;AACD,MAAIhB,KAAJ,EAAW;AACP,QAAIiB,IAAI,GAAGjB,KAAK,CAACiB,IAAN,IAAc,MAAzB;AACAR,IAAAA,WAAW,GAAGD,KAAK,CAACH,SAAN,CAAgBL,KAAK,CAACU,KAAtB,IAA+BF,KAAK,CAACH,SAAN,CAAgBL,KAAK,CAACU,KAAtB,KAAgC;AACzEO,MAAAA,IAAI,EAAEA,IADmE;AAEzEP,MAAAA,KAAK,EAAE/C,OAAO,CAACqC,KAAD,EAAQO,YAAY,CAAC,WAAWU,IAAX,GAAkB,QAAlB,GAA6BA,IAAI,GAAG,GAArC,CAApB;AAF2D,KAA7E;AAIH;;AACD,SAAOR,WAAP;AACH;;AAED,SAASS,gBAAT,CAA0BzC,SAA1B,EAAqC;AACjC,SAAOA,SAAS,KAAKT,GAAd,GAAoB,UAApB,GAAiC,aAAxC;AACH;;AACD,IAAImD,WAAW,GAAG,SAAdA,WAAc,CAASC,UAAT,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoCf,YAApC,EAAkDS,UAAlD,EAA8DO,WAA9D,EAA2E;AACzF,OAAKC,WAAL,GAAmBJ,UAAnB;AACA,OAAKK,QAAL,GAAgBJ,OAAhB;AACA,OAAKK,WAAL,GAAmBV,UAAnB;AACA,OAAKW,YAAL,GAAoBJ,WAAW,IAAIpB,WAAW,EAA9C;AACA,OAAKyB,KAAL,GAAaN,IAAb;AACA,OAAKO,aAAL,GAAqBtB,YAArB;AACA,MAAIV,IAAI,GAAGyB,IAAI,CAACP,MAAL,IAAeO,IAAI,CAACP,MAAL,CAAYM,OAAO,CAAC,CAAD,CAAP,CAAWX,KAAvB,CAAf,IAAgDY,IAAI,CAACP,MAAL,CAAYM,OAAO,CAAC,CAAD,CAAP,CAAWX,KAAvB,EAA8BU,UAAU,CAAC,CAAD,CAAV,CAAcV,KAA5C,CAA3D;;AACA,MAAIb,IAAJ,EAAU;AACNA,IAAAA,IAAI,CAACiC,YAAL,GAAoBjC,IAAI,CAACiC,YAAL,IAAqBjC,IAAI,CAACkC,KAAL,EAAzC;AACAlC,IAAAA,IAAI,CAACmC,kBAAL,GAA0BnC,IAAI,CAACmC,kBAAL,IAA2B,EAArD;AACA,SAAKC,KAAL,GAAapC,IAAb;AACH;AACJ,CAbD;;AAcAsB,WAAW,CAACe,SAAZ,GAAwBxE,MAAM,CAACyD,WAAW,CAACe,SAAb,EAAwB;AAClDC,EAAAA,QAAQ,EAAE,kBAAS1D,SAAT,EAAoB;AAC1B,WAAO,KAAKyC,gBAAgB,CAACzC,SAAD,CAArB,CAAP;AACH,GAHiD;AAIlD2D,EAAAA,aAAa,EAAE,uBAAS3D,SAAT,EAAoB;AAC/BA,IAAAA,SAAS,GAAGA,SAAS,KAAKT,GAAd,GAAoB,MAApB,GAA6B,SAAzC;AACA,WAAO,KAAK6D,aAAL,CAAmBpD,SAAnB,CAAP;AACH,GAPiD;AAQlD4D,EAAAA,WAAW,EAAE,qBAASC,MAAT,EAAiB;AAC1B,WAAO,IAAInB,WAAJ,CAAgBmB,MAAM,CAACd,WAAP,IAAsB,KAAKA,WAA3C,EAAwDc,MAAM,CAACb,QAAP,IAAmB,KAAKA,QAAhF,EAA0F,KAAKG,KAA/F,EAAsG,KAAKC,aAA3G,EAA0H,KAAKH,WAA/H,CAAP;AACH,GAViD;AAWlD9C,EAAAA,MAAM,EAAE,gBAASkB,SAAT,EAAoB;AACxB,QAAIyC,IAAI,GAAG,KAAKJ,QAAL,CAAcrC,SAAd,EAAyBiC,KAAzB,EAAX;;AACA,QAAIO,MAAM,GAAG,EAAb;AACAC,IAAAA,IAAI,CAACC,KAAL;;AACA,QAAID,IAAI,CAACE,MAAT,EAAiB;AACbH,MAAAA,MAAM,CAACpB,gBAAgB,CAACpB,SAAD,CAAjB,CAAN,GAAsCyC,IAAtC;AACA,aAAO,KAAKF,WAAL,CAAiBC,MAAjB,CAAP;AACH;;AACD,WAAOrE,IAAP;AACH,GApBiD;AAqBlDyE,EAAAA,QAAQ,EAAE,kBAAS5C,SAAT,EAAoB;AAC1B,QAAIyC,IAAI,GAAG,KAAKJ,QAAL,CAAcrC,SAAd,EAAyBiC,KAAzB,EAAX;;AACA,QAAIY,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAf;AACA,QAAIlE,MAAM,GAAG,EAAb;AACA,QAAIuE,UAAU,GAAG,EAAjB;;AACA,QAAID,IAAI,CAACD,QAAT,EAAmB;AACf,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACD,QAAL,CAAcD,MAAlC,EAA0CI,CAAC,EAA3C,EAA+C;AAC3CD,QAAAA,UAAU,CAAC1B,gBAAgB,CAACpB,SAAD,CAAjB,CAAV,GAA0C,CAAC6C,IAAI,CAACD,QAAL,CAAcG,CAAd,CAAD,EAAmBhC,MAAnB,CAA0B0B,IAAI,CAACR,KAAL,EAA1B,CAA1C;AACA1D,QAAAA,MAAM,CAACyE,IAAP,CAAY,KAAKT,WAAL,CAAiBO,UAAjB,CAAZ;AACH;AACJ;;AACD,WAAOvE,MAAP;AACH,GAjCiD;AAkClDK,EAAAA,UAAU,EAAE,oBAASoB,SAAT,EAAoB;AAC5B,QAAIwC,MAAM,GAAG,EAAb;AACA,QAAIjB,OAAO,GAAG,KAAKI,QAAnB;AACA,QAAIL,UAAU,GAAG,KAAKI,WAAtB;;AACA,QAAIuB,aAAa,GAAG,KAAKZ,QAAL,CAAcrC,SAAd,CAApB;;AACA,QAAIkD,aAAa,GAAG9B,gBAAgB,CAACpB,SAAD,CAApC;;AACA,QAAI,CAACA,SAAL,EAAgB;AACZwC,MAAAA,MAAM,CAACb,QAAP,GAAkB,CAACJ,OAAO,CAACA,OAAO,CAACoB,MAAR,GAAiB,CAAlB,CAAR,CAAlB;AACAH,MAAAA,MAAM,CAACd,WAAP,GAAqB,CAACJ,UAAU,CAACA,UAAU,CAACqB,MAAX,GAAoB,CAArB,CAAX,CAArB;AACH,KAHD,MAGO;AACHH,MAAAA,MAAM,CAACU,aAAD,CAAN,GAAwB,CAACD,aAAa,CAACA,aAAa,CAACN,MAAd,GAAuB,CAAxB,CAAd,CAAxB;AACH;;AACD,WAAO,KAAKJ,WAAL,CAAiBC,MAAjB,CAAP;AACH,GA/CiD;AAgDlDW,EAAAA,IAAI,EAAE,cAASnD,SAAT,EAAoBf,eAApB,EAAqC;AACvC,QAAImE,WAAW,GAAG,KAAKf,QAAL,CAAcrC,SAAd,CAAlB;;AACA,QAAI6C,IAAI,GAAGO,WAAW,CAAC,CAAD,CAAtB;AACA,QAAItE,MAAM,GAAG,KAAKA,MAAL,CAAYkB,SAAZ,CAAb;AACA,QAAIqD,QAAJ;;AACA,QAAIvE,MAAJ,EAAY;AACR,UAAI8B,KAAK,GAAG/C,OAAO,CAACgF,IAAD,EAAOO,WAAW,CAAC,CAAD,CAAX,CAAeR,QAAtB,CAAnB;AACAS,MAAAA,QAAQ,GAAGvE,MAAM,CAAC8D,QAAP,CAAgB5C,SAAhB,CAAX;;AACA,UAAIqD,QAAQ,CAACzC,KAAK,GAAG,CAAT,CAAZ,EAAyB;AACrB,eAAOyC,QAAQ,CAACzC,KAAK,GAAG,CAAT,CAAf;AACH;AACJ;;AACD,QAAI3B,eAAe,IAAIH,MAAvB,EAA+B;AAC3B,SAAG;AACCA,QAAAA,MAAM,GAAGA,MAAM,CAACqE,IAAP,CAAYnD,SAAZ,EAAuBf,eAAvB,CAAT;AACAoE,QAAAA,QAAQ,GAAGvE,MAAM,GAAGA,MAAM,CAAC8D,QAAP,CAAgB5C,SAAhB,CAAH,GAAgC,EAAjD;AACH,OAHD,QAGSlB,MAAM,IAAI,CAACuE,QAAQ,CAACV,MAH7B;;AAIA,aAAOU,QAAQ,CAAC,CAAD,CAAR,IAAelF,IAAtB;AACH;;AACD,WAAOA,IAAP;AACH,GApEiD;AAqElDgB,EAAAA,IAAI,EAAE,cAASa,SAAT,EAAoBf,eAApB,EAAqC;AACvC,QAAImE,WAAW,GAAG,KAAKf,QAAL,CAAcrC,SAAd,CAAlB;;AACA,QAAI6C,IAAI,GAAGO,WAAW,CAAC,CAAD,CAAtB;AACA,QAAItE,MAAM,GAAG,KAAKA,MAAL,CAAYkB,SAAZ,CAAb;AACA,QAAIqD,QAAJ;;AACA,QAAIvE,MAAJ,EAAY;AACR,UAAI8B,KAAK,GAAG/C,OAAO,CAACgF,IAAD,EAAOO,WAAW,CAAC,CAAD,CAAX,CAAeR,QAAtB,CAAnB;AACAS,MAAAA,QAAQ,GAAGvE,MAAM,CAAC8D,QAAP,CAAgB5C,SAAhB,CAAX;;AACA,UAAIqD,QAAQ,CAACzC,KAAK,GAAG,CAAT,CAAZ,EAAyB;AACrB,eAAOyC,QAAQ,CAACzC,KAAK,GAAG,CAAT,CAAf;AACH;AACJ;;AACD,QAAI3B,eAAe,IAAIH,MAAvB,EAA+B;AAC3B,SAAG;AACCA,QAAAA,MAAM,GAAGA,MAAM,CAACK,IAAP,CAAYa,SAAZ,EAAuBf,eAAvB,CAAT;AACAoE,QAAAA,QAAQ,GAAGvE,MAAM,GAAGA,MAAM,CAAC8D,QAAP,CAAgB5C,SAAhB,CAAH,GAAgC,EAAjD;AACH,OAHD,QAGSlB,MAAM,IAAI,CAACuE,QAAQ,CAACV,MAH7B;;AAIA,aAAOU,QAAQ,CAACA,QAAQ,CAACV,MAAT,GAAkB,CAAnB,CAAR,IAAiCxE,IAAxC;AACH;;AACD,WAAOA,IAAP;AACH,GAzFiD;AA0FlD4B,EAAAA,IAAI,EAAE,gBAAW;AACb,WAAO,KAAKoC,KAAZ;AACH,GA5FiD;AA6FlDjC,EAAAA,KAAK,EAAE,eAASiB,IAAT,EAAe;AAClB,QAAI,WAAWA,IAAf,EAAqB;AACjB,aAAO,KAAKY,aAAL,CAAmBd,MAAnB,CAA0B,KAAKW,WAA/B,CAAP;AACH;;AACD,QAAIa,IAAI,GAAG,KAAKJ,QAAL,CAAclB,IAAd,CAAX;;AACA,QAAIV,YAAY,GAAG,KAAK6B,aAAL,CAAmBnB,IAAnB,CAAnB;;AACA,QAAIjB,KAAK,GAAGO,YAAY,CAACgC,IAAI,CAACE,MAAL,GAAc,CAAf,CAAxB;AACA,WAAOzC,KAAK,IAAI/B,IAAhB;AACH,GArGiD;AAsGlDmF,EAAAA,KAAK,EAAE,eAAStD,SAAT,EAAoBuD,UAApB,EAAgC;AACnC,QAAIX,QAAQ,GAAG,KAAKA,QAAL,CAAc5C,SAAd,CAAf;;AACA,SAAK,IAAI+C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACD,MAA7B,EAAqCI,CAAC,EAAtC,EAA0C;AACtC,UAAIS,eAAe,GAAGA,eAAe,IAAIZ,QAAQ,CAACG,CAAD,CAAR,CAAY7C,KAAZ,CAAkBF,SAAlB,CAAzC;;AACA,UAAI4C,QAAQ,CAACG,CAAD,CAAR,CAAY1E,KAAZ,CAAkBmF,eAAlB,MAAuCD,UAA3C,EAAuD;AACnD,eAAOX,QAAQ,CAACG,CAAD,CAAf;AACH;AACJ;;AACD,WAAO5E,IAAP;AACH,GA/GiD;AAgHlD8D,EAAAA,KAAK,EAAE,eAAS/B,KAAT,EAAgB7B,KAAhB,EAAuB;AAC1B,QAAImE,MAAM,GAAG,EAAb;AACA,QAAIiB,QAAQ,GAAGjD,WAAW,CAAC,KAAKuB,aAAN,EAAqB7B,KAArB,EAA4B,KAAK2B,YAAjC,CAA1B;AACA,QAAIV,IAAI,GAAGsC,QAAQ,CAACtC,IAApB;AACA,QAAID,UAAU,GAAGuC,QAAQ,CAAC7C,KAA1B;AACA,QAAI8C,SAAS,GAAGvF,IAAhB;;AACA,QAAIgD,IAAI,KAAKjD,GAAT,IAAgBiD,IAAI,KAAKlD,MAA7B,EAAqC;AACjC,UAAIwE,IAAI,GAAG,KAAKJ,QAAL,CAAclB,IAAd,EAAoBc,KAApB,EAAX;;AACA,UAAI0B,KAAK,GAAG,CAAC,CAAD,KAAOzC,UAAP,IAAqBuB,IAAI,CAACE,MAAL,GAAc,CAAd,GAAkBzB,UAAnD;;AACA,UAAIuB,IAAI,CAACkB,KAAD,CAAR,EAAiB;AACb,WAAGlB,IAAI,CAACE,MAAL,GAAc,CAAjB,IAAsBF,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAA1B;;AACA,aAAK,IAAII,CAAC,GAAGY,KAAb,EAAoBZ,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAC7B,cAAIN,IAAI,CAACM,CAAC,GAAG,CAAL,CAAR,EAAiB;AACb,gBAAIa,UAAU,GAAGnB,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYH,QAAZ,IAAwB,EAAzC;AACA,gBAAIiB,YAAY,GAAGd,CAAC,KAAKY,KAAN,GAActF,KAAd,GAAsBoE,IAAI,CAACM,CAAD,CAAJ,CAAQ1E,KAAjD;AACAoE,YAAAA,IAAI,CAACM,CAAD,CAAJ,GAAU,KAAK,CAAf;;AACA,iBAAK,IAAIe,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGF,UAAU,CAACjB,MAAjD,EAAyDmB,UAAU,EAAnE,EAAuE;AACnE,kBAAIF,UAAU,CAACE,UAAD,CAAV,CAAuBzF,KAAvB,KAAiCwF,YAArC,EAAmD;AAC/CpB,gBAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUa,UAAU,CAACE,UAAD,CAApB;AACA;AACH;AACJ;AACJ;;AACD,cAAI,KAAK,CAAL,KAAWrB,IAAI,CAACM,CAAD,CAAnB,EAAwB;AACpB,mBAAOW,SAAP;AACH;AACJ;;AACDlB,QAAAA,MAAM,CAACpB,gBAAgB,CAACD,IAAD,CAAjB,CAAN,GAAiCsB,IAAjC;AACAiB,QAAAA,SAAS,GAAG,KAAKnB,WAAL,CAAiBC,MAAjB,CAAZ;AACH;AACJ;;AACD,WAAOkB,SAAP;AACH,GAhJiD;AAiJlDrF,EAAAA,KAAK,EAAE,eAAS0F,IAAT,EAAeC,IAAf,EAAqB;AACxB,QAAIjE,IAAI,GAAG,KAAKoC,KAAhB;AACA,QAAIjB,UAAU,GAAG,KAAKU,WAAtB;AACA,QAAIqC,gBAAgB,GAAG,SAASF,IAAT,IAAiB,UAAUA,IAAlD;AACA,QAAI7D,KAAK,GAAG,CAAC+D,gBAAD,GAAoBF,IAApB,GAA2B5F,IAAvC;AACA,QAAI+F,mBAAmB,GAAGD,gBAAgB,IAAIF,IAApB,IAA4BC,IAAtD;;AACA,QAAItG,SAAS,CAACwC,KAAD,CAAb,EAAsB;AAClB,UAAIuD,QAAQ,GAAGjD,WAAW,CAAC,KAAKuB,aAAN,EAAqB7B,KAArB,EAA4B,KAAK2B,YAAjC,CAA1B;AACAX,MAAAA,UAAU,GAAGuC,QAAQ,CAAC7C,KAAtB;;AACA,UAAI,WAAW6C,QAAQ,CAACtC,IAAxB,EAA8B;AAC1B,YAAIsB,IAAI,GAAG,KAAKJ,QAAL,CAAcoB,QAAQ,CAACtC,IAAvB,CAAX;;AACA,YAAIwC,KAAK,GAAG,CAAC,CAAD,KAAOzC,UAAP,IAAqBuB,IAAI,CAACE,MAAL,GAAc,CAAd,GAAkBzB,UAAnD;AACA,eAAOuB,IAAI,CAACkB,KAAD,CAAJ,IAAelB,IAAI,CAACkB,KAAD,CAAJ,CAAYtF,KAAlC;AACH;AACJ;;AACD,QAAI0B,IAAI,IAAIA,IAAI,CAACiC,YAAjB,EAA+B;AAC3B,aAAOkC,mBAAmB,GAAGnE,IAAI,CAACmB,UAAD,CAAP,GAAsBnB,IAAI,CAACiC,YAAL,CAAkBd,UAAlB,CAAhD;AACH;;AACD,WAAO/C,IAAP;AACH,GApKiD;AAqKlDgG,EAAAA,eArKkD,2BAqKlCjE,KArKkC,EAqK3B;AACnB,QAAIgB,UAAU,GAAG,KAAKU,WAAtB;;AACA,QAAIlE,SAAS,CAACwC,KAAD,CAAb,EAAsB;AAClB,UAAIuD,QAAQ,GAAGjD,WAAW,CAAC,KAAKuB,aAAN,EAAqB7B,KAArB,EAA4B,KAAK2B,YAAjC,CAA1B;AACAX,MAAAA,UAAU,GAAGuC,QAAQ,CAAC7C,KAAtB;;AACA,UAAI,WAAW6C,QAAQ,CAACtC,IAAxB,EAA8B;AAC1B,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,CAAC,EAAE,KAAKgB,KAAL,IAAc,KAAKA,KAAL,CAAWD,kBAAX,CAA8BhB,UAA9B,CAAhB,CAAR;AACH;AA/KiD,CAAxB,CAA9B;;AAkLA,SAASkD,aAAT,CAAuBlE,KAAvB,EAA8B;AAC1B,MAAImE,kBAAkB,GAAGnE,KAAK,CAACmE,kBAA/B;AACA,MAAIC,qBAAqB,GAAGpE,KAAK,CAACE,0BAAlC;AACA,MAAImE,UAAU,GAAGpG,IAAjB;;AACA,MAAIV,UAAU,CAACyC,KAAK,CAACsE,qBAAP,CAAd,EAA6C;AACzCD,IAAAA,UAAU,GAAGrE,KAAK,CAACsE,qBAAnB;AACH,GAFD,MAEO,IAAIH,kBAAJ,EAAwB;AAC3B,QAAI,wBAAwBA,kBAA5B,EAAgD;AAC5CE,MAAAA,UAAU,GAAGvF,0BAA0B,CAACsF,qBAAD,CAAvC;AACH,KAFD,MAEO,IAAI,uBAAuBD,kBAA3B,EAA+C;AAClDE,MAAAA,UAAU,GAAGlF,yBAAyB,CAACiF,qBAAD,CAAtC;AACH,KAFM,MAEA;AACHC,MAAAA,UAAU,GAAG/E,iBAAiB,CAAC6E,kBAAD,CAA9B;AACH;;AACD,QAAIE,UAAU,IAAI,CAACrE,KAAK,CAACuE,MAArB,IAA+B,CAAC,CAAD,KAAOJ,kBAAkB,CAACK,OAAnB,CAA2B,SAA3B,CAA1C,EAAiF;AAC7E1G,MAAAA,gBAAgB,CAACkC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAAhB;AACH;AACJ;;AACD,SAAOqE,UAAP;AACH;;AAED,SAASI,eAAT,CAAyBnD,IAAzB,EAA+BoD,QAA/B,EAAyCC,WAAzC,EAAsDC,yBAAtD,EAAiF;AAC7E,MAAI7D,MAAM,GAAGO,IAAI,CAACP,MAAL,CAAY2D,QAAZ,EAAsBC,WAAtB,IAAqCrD,IAAI,CAACP,MAAL,CAAY2D,QAAZ,EAAsBC,WAAtB,KAAsC,EAAxF;AACA,MAAI7C,YAAY,GAAGf,MAAM,CAACe,YAA1B;;AACA,MAAI,CAACA,YAAL,EAAmB;AACf;AACH;;AACD,MAAIf,MAAM,CAAC8D,cAAP,IAAyB,CAACD,yBAA9B,EAAyD;AACrDtD,IAAAA,IAAI,CAACP,MAAL,CAAY2D,QAAZ,EAAsBC,WAAtB,IAAqC7C,YAAY,CAACC,KAAb,EAArC;AACH;;AACDT,EAAAA,IAAI,CAACP,MAAL,CAAY2D,QAAZ,EAAsBC,WAAtB,EAAmCE,cAAnC,GAAoDD,yBAApD;AACH;;AACD,OAAO,SAASE,uBAAT,CAAiCvE,YAAjC,EAA+Ce,IAA/C,EAAqD;AACxD,MAAIyD,WAAW,GAAG,EAAlB;AACA,MAAIC,cAAc,GAAG,CAAC;AAClBtE,IAAAA,KAAK,EAAEY,IAAI,CAAC2D,qBADM;AAElBvC,IAAAA,QAAQ,EAAEpB,IAAI,CAACV;AAFG,GAAD,CAArB;AAIA,MAAIsE,WAAW,GAAG,CAAC;AACfxE,IAAAA,KAAK,EAAEY,IAAI,CAAC6D,kBADG;AAEfzC,IAAAA,QAAQ,EAAEpB,IAAI,CAACR;AAFA,GAAD,CAAlB;AAIA,MAAIsE,WAAW,GAAG7E,YAAY,CAACQ,MAA/B;AACA,MAAIQ,WAAW,GAAGpB,WAAW,EAA7B;AACAmB,EAAAA,IAAI,CAACP,MAAL,GAAcO,IAAI,CAACP,MAAL,IAAe,EAA7B;AACAlD,EAAAA,WAAW,CAACmH,cAAD,EAAiB,UAAA5D,UAAU,EAAI;AACtCA,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAciE,OAAd,GAAwB,EAAxB;AACH,GAFU,EAER,KAFQ,CAAX;AAGAxH,EAAAA,WAAW,CAACqH,WAAD,EAAe,UAAS7D,OAAT,EAAkB;AACxC,QAAIiE,OAAO,GAAGjE,OAAO,CAAC,CAAD,CAArB;AACAiE,IAAAA,OAAO,CAACD,OAAR,GAAkB,EAAlB;AACA/D,IAAAA,IAAI,CAACP,MAAL,CAAYuE,OAAO,CAAC5E,KAApB,IAA6BY,IAAI,CAACP,MAAL,CAAYuE,OAAO,CAAC5E,KAApB,KAA8B,EAA3D;AACA7C,IAAAA,WAAW,CAACmH,cAAD,EAAkB,UAAS5D,UAAT,EAAqB;AAC9C,UAAImE,UAAU,GAAGnE,UAAU,CAAC,CAAD,CAA3B;AACA,UAAIoE,WAAJ;AACAf,MAAAA,eAAe,CAACnD,IAAD,EAAOgE,OAAO,CAAC5E,KAAf,EAAsB6E,UAAU,CAAC7E,KAAjC,EAAwC,KAAxC,CAAf;;AACA,WAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,WAAW,CAAC3C,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;AACzC,YAAI7C,KAAK,GAAGoF,WAAW,CAACvC,CAAD,CAAvB;AACA,YAAIwB,UAAU,GAAGU,WAAW,CAAClC,CAAD,CAAX,GAAiB,KAAK,CAAL,KAAWkC,WAAW,CAAClC,CAAD,CAAtB,GAA4BqB,aAAa,CAAClE,KAAD,CAAzC,GAAmD+E,WAAW,CAAClC,CAAD,CAAhG;AACA2C,QAAAA,WAAW,GAAG,KAAd;;AACA,YAAInB,UAAJ,EAAgB;AACZ,cAAIoB,aAAa,GAAG,IAAItE,WAAJ,CAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2Cf,YAA3C,EAAyDsC,CAAzD,EAA4DtB,WAA5D,CAApB;AACA,cAAI1B,IAAI,GAAG4F,aAAa,CAAC5F,IAAd,EAAX;AACA,cAAI1B,KAAK,GAAG0B,IAAI,CAACgD,CAAD,CAAJ,GAAUwB,UAAU,CAACoB,aAAD,CAAhC;AACA5F,UAAAA,IAAI,CAACmC,kBAAL,CAAwBa,CAAxB,IAA6B,IAA7B;AACA2C,UAAAA,WAAW,GAAG,SAASrH,KAAT,IAAkB,KAAK,CAAL,KAAWA,KAA3C;AACH;;AACD,YAAI,KAAK,CAAL,KAAWoH,UAAU,CAACF,OAAX,CAAmBxC,CAAnB,CAAf,EAAsC;AAClC0C,UAAAA,UAAU,CAACF,OAAX,CAAmBxC,CAAnB,IAAwB,IAAxB;AACH;;AACD,YAAI,KAAK,CAAL,KAAWyC,OAAO,CAACD,OAAR,CAAgBxC,CAAhB,CAAf,EAAmC;AAC/ByC,UAAAA,OAAO,CAACD,OAAR,CAAgBxC,CAAhB,IAAqB,IAArB;AACH;;AACD,YAAI,CAAC2C,WAAL,EAAkB;AACdF,UAAAA,OAAO,CAACD,OAAR,CAAgBxC,CAAhB,IAAqB0C,UAAU,CAACF,OAAX,CAAmBxC,CAAnB,IAAwB,KAA7C;AACH;AACJ;AACJ,KAzBU,EAyBP,KAzBO,CAAX;AA0BH,GA9BU,EA8BP,KA9BO,CAAX;AA+BAvB,EAAAA,IAAI,CAACoE,oBAAL,GAA4BR,WAAW,CAAC,CAAD,CAAX,CAAeG,OAA3C;AACA/D,EAAAA,IAAI,CAACqE,uBAAL,GAA+BX,cAAc,CAAC,CAAD,CAAd,CAAkBK,OAAjD;AACH;AACD,OAAO,SAASO,iBAAT,CAA2BrF,YAA3B,EAAyCe,IAAzC,EAA+C;AAClD,MAAIyD,WAAW,GAAG,EAAlB;AACA,MAAIC,cAAc,GAAG,CAAC;AAClBtE,IAAAA,KAAK,EAAEY,IAAI,CAAC2D,qBADM;AAElBvC,IAAAA,QAAQ,EAAEpB,IAAI,CAACV;AAFG,GAAD,CAArB;AAIA,MAAIsE,WAAW,GAAG,CAAC;AACfxE,IAAAA,KAAK,EAAEY,IAAI,CAAC6D,kBADG;AAEfzC,IAAAA,QAAQ,EAAEpB,IAAI,CAACR;AAFA,GAAD,CAAlB;AAIA,MAAIsE,WAAW,GAAG7E,YAAY,CAACQ,MAA/B;AACA,MAAIQ,WAAW,GAAGpB,WAAW,EAA7B;AACAmB,EAAAA,IAAI,CAACP,MAAL,GAAcO,IAAI,CAACP,MAAL,IAAe,EAA7B;AACAlD,EAAAA,WAAW,CAACqH,WAAD,EAAe,UAAS7D,OAAT,EAAkB;AACxC,QAAIiE,OAAO,GAAGjE,OAAO,CAAC,CAAD,CAArB;AACAC,IAAAA,IAAI,CAACP,MAAL,CAAYuE,OAAO,CAAC5E,KAApB,IAA6BY,IAAI,CAACP,MAAL,CAAYuE,OAAO,CAAC5E,KAApB,KAA8B,EAA3D;AACA7C,IAAAA,WAAW,CAACmH,cAAD,EAAkB,UAAS5D,UAAT,EAAqB;AAC9C,UAAImE,UAAU,GAAGnE,UAAU,CAAC,CAAD,CAA3B;AACAqD,MAAAA,eAAe,CAACnD,IAAD,EAAOgE,OAAO,CAAC5E,KAAf,EAAsB6E,UAAU,CAAC7E,KAAjC,EAAwC,IAAxC,CAAf;;AACA,WAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,WAAW,CAAC3C,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;AACzC,YAAI7C,KAAK,GAAGoF,WAAW,CAACvC,CAAD,CAAvB;AACA,YAAIwB,UAAU,GAAGU,WAAW,CAAClC,CAAD,CAAX,GAAiB,KAAK,CAAL,KAAWkC,WAAW,CAAClC,CAAD,CAAtB,GAA4B9C,sBAAsB,CAACC,KAAD,CAAlD,GAA4D+E,WAAW,CAAClC,CAAD,CAAzG;;AACA,YAAIwB,UAAJ,EAAgB;AACZ,cAAIoB,aAAa,GAAG,IAAItE,WAAJ,CAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2Cf,YAA3C,EAAyDsC,CAAzD,EAA4DtB,WAA5D,CAApB;AACA,cAAI1B,IAAI,GAAG4F,aAAa,CAAC5F,IAAd,EAAX;AACAA,UAAAA,IAAI,CAACgD,CAAD,CAAJ,GAAUwB,UAAU,CAACoB,aAAD,CAApB;AACA5F,UAAAA,IAAI,CAACmC,kBAAL,CAAwBa,CAAxB,IAA6B,IAA7B;AACH;AACJ;AACJ,KAbU,EAaP,KAbO,CAAX;AAcH,GAjBU,EAiBP,KAjBO,CAAX;AAkBH;AACD,OAAO,SAASgD,qBAAT,CAA+BtF,YAA/B,EAA6CH,MAA7C,EAAqD0F,OAArD,EAA8D;AACjE,MAAIC,WAAW,GAAG,IAAI5E,WAAJ,CAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4BZ,YAA5B,EAA0C,CAA1C,CAAlB;;AACAwF,EAAAA,WAAW,CAAC5H,KAAZ,GAAoB,UAAS6H,OAAT,EAAkB;AAClC,QAAIxI,SAAS,CAACwI,OAAD,CAAb,EAAwB;AACpB,UAAItF,KAAK,GAAG9C,SAAS,CAACwC,MAAD,EAAS4F,OAAT,CAArB;AACA,UAAIhG,KAAK,GAAGI,MAAM,CAACM,KAAD,CAAlB;;AACA,UAAI,CAACoF,OAAO,CAACpF,KAAD,CAAR,IAAmBV,KAAnB,IAA4B,CAACxC,SAAS,CAACwC,KAAK,CAACiB,IAAP,CAA1C,EAAwD;AACpDV,QAAAA,YAAY,CAACQ,MAAb,CAAoB+B,IAApB,CAAyB9C,KAAzB;AACA8F,QAAAA,OAAO,CAACpF,KAAD,CAAP,GAAiB,IAAjB;AACH;AACJ;AACJ,GATD;;AAUAqF,EAAAA,WAAW,CAACrH,UAAZ,GAAyB,YAAW;AAChC,WAAO,IAAP;AACH,GAFD;;AAGAqH,EAAAA,WAAW,CAACrD,QAAZ,GAAuB,YAAW;AAC9B,WAAO,EAAP;AACH,GAFD;;AAGA,SAAOqD,WAAP;AACH","sourcesContent":["/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.summary_display_modes.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isFunction,\r\n    isDefined,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    findField,\r\n    foreachTree,\r\n    setFieldProperty\r\n} from \"./ui.pivot_grid.utils\";\r\nvar COLUMN = \"column\";\r\nvar ROW = \"row\";\r\nvar NULL = null;\r\nvar calculatePercentValue = function(value, totalValue) {\r\n    var result = value / totalValue;\r\n    if (!isDefined(value) || isNaN(result)) {\r\n        result = NULL\r\n    }\r\n    return result\r\n};\r\nvar _percentOfGrandTotal = function(e, dimension) {\r\n    return calculatePercentValue(e.value(), e.grandTotal(dimension).value())\r\n};\r\nvar percentOfParent = function(e, dimension) {\r\n    var parent = e.parent(dimension);\r\n    var parentValue = parent ? parent.value() : e.value();\r\n    return calculatePercentValue(e.value(), parentValue)\r\n};\r\nvar createAbsoluteVariationExp = function(allowCrossGroup) {\r\n    return function(e) {\r\n        var prevCell = e.prev(COLUMN, allowCrossGroup);\r\n        var prevValue = prevCell && prevCell.value();\r\n        if (isDefined(prevValue) && isDefined(e.value())) {\r\n            return e.value() - prevValue\r\n        }\r\n        return NULL\r\n    }\r\n};\r\nvar createPercentVariationExp = function(allowCrossGroup) {\r\n    var absoluteExp = createAbsoluteVariationExp(allowCrossGroup);\r\n    return function(e) {\r\n        var absVar = absoluteExp(e);\r\n        var prevCell = e.prev(COLUMN, allowCrossGroup);\r\n        var prevValue = prevCell && prevCell.value();\r\n        return absVar !== NULL && prevValue ? absVar / prevValue : NULL\r\n    }\r\n};\r\nvar summaryDictionary = {\r\n    percentOfColumnTotal: function(e) {\r\n        return percentOfParent(e, ROW)\r\n    },\r\n    percentOfRowTotal: function(e) {\r\n        return percentOfParent(e, COLUMN)\r\n    },\r\n    percentOfColumnGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e, ROW)\r\n    },\r\n    percentOfRowGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e, COLUMN)\r\n    },\r\n    percentOfGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e)\r\n    }\r\n};\r\nvar getPrevCellCrossGroup = function getPrevCellCrossGroup(cell, direction) {\r\n    if (!cell || !cell.parent(direction)) {\r\n        return\r\n    }\r\n    var prevCell = cell.prev(direction);\r\n    if (!prevCell) {\r\n        prevCell = getPrevCellCrossGroup(cell.parent(direction), direction)\r\n    }\r\n    return prevCell\r\n};\r\nvar createRunningTotalExpr = function(field) {\r\n    if (!field.runningTotal) {\r\n        return\r\n    }\r\n    var direction = field.runningTotal === COLUMN ? ROW : COLUMN;\r\n    return function(e) {\r\n        var prevCell = field.allowCrossGroupCalculation ? getPrevCellCrossGroup(e, direction) : e.prev(direction, false);\r\n        var value = e.value(true);\r\n        var prevValue = prevCell && prevCell.value(true);\r\n        if (isDefined(prevValue) && isDefined(value)) {\r\n            value = prevValue + value\r\n        } else if (isDefined(prevValue)) {\r\n            value = prevValue\r\n        }\r\n        return value\r\n    }\r\n};\r\n\r\nfunction createCache() {\r\n    return {\r\n        fields: {},\r\n        positions: {}\r\n    }\r\n}\r\n\r\nfunction getFieldPos(descriptions, field, cache) {\r\n    var fieldParams = {\r\n        index: -1\r\n    };\r\n    if (!isObject(field)) {\r\n        if (cache.fields[field]) {\r\n            field = cache[field]\r\n        } else {\r\n            var allFields = descriptions.columns.concat(descriptions.rows).concat(descriptions.values);\r\n            var fieldIndex = findField(allFields, field);\r\n            field = cache[field] = allFields[fieldIndex]\r\n        }\r\n    }\r\n    if (field) {\r\n        var area = field.area || \"data\";\r\n        fieldParams = cache.positions[field.index] = cache.positions[field.index] || {\r\n            area: area,\r\n            index: inArray(field, descriptions[\"data\" === area ? \"values\" : area + \"s\"])\r\n        }\r\n    }\r\n    return fieldParams\r\n}\r\n\r\nfunction getPathFieldName(dimension) {\r\n    return dimension === ROW ? \"_rowPath\" : \"_columnPath\"\r\n}\r\nvar SummaryCell = function(columnPath, rowPath, data, descriptions, fieldIndex, fieldsCache) {\r\n    this._columnPath = columnPath;\r\n    this._rowPath = rowPath;\r\n    this._fieldIndex = fieldIndex;\r\n    this._fieldsCache = fieldsCache || createCache();\r\n    this._data = data;\r\n    this._descriptions = descriptions;\r\n    var cell = data.values && data.values[rowPath[0].index] && data.values[rowPath[0].index][columnPath[0].index];\r\n    if (cell) {\r\n        cell.originalCell = cell.originalCell || cell.slice();\r\n        cell.postProcessedFlags = cell.postProcessedFlags || [];\r\n        this._cell = cell\r\n    }\r\n};\r\nSummaryCell.prototype = extend(SummaryCell.prototype, {\r\n    _getPath: function(dimension) {\r\n        return this[getPathFieldName(dimension)]\r\n    },\r\n    _getDimension: function(dimension) {\r\n        dimension = dimension === ROW ? \"rows\" : \"columns\";\r\n        return this._descriptions[dimension]\r\n    },\r\n    _createCell: function(config) {\r\n        return new SummaryCell(config._columnPath || this._columnPath, config._rowPath || this._rowPath, this._data, this._descriptions, this._fieldIndex)\r\n    },\r\n    parent: function(direction) {\r\n        var path = this._getPath(direction).slice();\r\n        var config = {};\r\n        path.shift();\r\n        if (path.length) {\r\n            config[getPathFieldName(direction)] = path;\r\n            return this._createCell(config)\r\n        }\r\n        return NULL\r\n    },\r\n    children: function(direction) {\r\n        var path = this._getPath(direction).slice();\r\n        var item = path[0];\r\n        var result = [];\r\n        var cellConfig = {};\r\n        if (item.children) {\r\n            for (var i = 0; i < item.children.length; i++) {\r\n                cellConfig[getPathFieldName(direction)] = [item.children[i]].concat(path.slice());\r\n                result.push(this._createCell(cellConfig))\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    grandTotal: function(direction) {\r\n        var config = {};\r\n        var rowPath = this._rowPath;\r\n        var columnPath = this._columnPath;\r\n        var dimensionPath = this._getPath(direction);\r\n        var pathFieldName = getPathFieldName(direction);\r\n        if (!direction) {\r\n            config._rowPath = [rowPath[rowPath.length - 1]];\r\n            config._columnPath = [columnPath[columnPath.length - 1]]\r\n        } else {\r\n            config[pathFieldName] = [dimensionPath[dimensionPath.length - 1]]\r\n        }\r\n        return this._createCell(config)\r\n    },\r\n    next: function(direction, allowCrossGroup) {\r\n        var currentPath = this._getPath(direction);\r\n        var item = currentPath[0];\r\n        var parent = this.parent(direction);\r\n        var siblings;\r\n        if (parent) {\r\n            var index = inArray(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index + 1]) {\r\n                return siblings[index + 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.next(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[0] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    prev: function(direction, allowCrossGroup) {\r\n        var currentPath = this._getPath(direction);\r\n        var item = currentPath[0];\r\n        var parent = this.parent(direction);\r\n        var siblings;\r\n        if (parent) {\r\n            var index = inArray(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index - 1]) {\r\n                return siblings[index - 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.prev(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[siblings.length - 1] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    cell: function() {\r\n        return this._cell\r\n    },\r\n    field: function(area) {\r\n        if (\"data\" === area) {\r\n            return this._descriptions.values[this._fieldIndex]\r\n        }\r\n        var path = this._getPath(area);\r\n        var descriptions = this._getDimension(area);\r\n        var field = descriptions[path.length - 2];\r\n        return field || NULL\r\n    },\r\n    child: function(direction, fieldValue) {\r\n        var children = this.children(direction);\r\n        for (var i = 0; i < children.length; i++) {\r\n            var childLevelField = childLevelField || children[i].field(direction);\r\n            if (children[i].value(childLevelField) === fieldValue) {\r\n                return children[i]\r\n            }\r\n        }\r\n        return NULL\r\n    },\r\n    slice: function(field, value) {\r\n        var config = {};\r\n        var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n        var area = fieldPos.area;\r\n        var fieldIndex = fieldPos.index;\r\n        var sliceCell = NULL;\r\n        if (area === ROW || area === COLUMN) {\r\n            var path = this._getPath(area).slice();\r\n            var level = -1 !== fieldIndex && path.length - 2 - fieldIndex;\r\n            if (path[level]) {\r\n                [][path.length - 1] = path[path.length - 1];\r\n                for (var i = level; i >= 0; i--) {\r\n                    if (path[i + 1]) {\r\n                        var childItems = path[i + 1].children || [];\r\n                        var currentValue = i === level ? value : path[i].value;\r\n                        path[i] = void 0;\r\n                        for (var childIndex = 0; childIndex < childItems.length; childIndex++) {\r\n                            if (childItems[childIndex].value === currentValue) {\r\n                                path[i] = childItems[childIndex];\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    if (void 0 === path[i]) {\r\n                        return sliceCell\r\n                    }\r\n                }\r\n                config[getPathFieldName(area)] = path;\r\n                sliceCell = this._createCell(config)\r\n            }\r\n        }\r\n        return sliceCell\r\n    },\r\n    value: function(arg1, arg2) {\r\n        var cell = this._cell;\r\n        var fieldIndex = this._fieldIndex;\r\n        var fistArgIsBoolean = true === arg1 || false === arg1;\r\n        var field = !fistArgIsBoolean ? arg1 : NULL;\r\n        var needCalculatedValue = fistArgIsBoolean && arg1 || arg2;\r\n        if (isDefined(field)) {\r\n            var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n            fieldIndex = fieldPos.index;\r\n            if (\"data\" !== fieldPos.area) {\r\n                var path = this._getPath(fieldPos.area);\r\n                var level = -1 !== fieldIndex && path.length - 2 - fieldIndex;\r\n                return path[level] && path[level].value\r\n            }\r\n        }\r\n        if (cell && cell.originalCell) {\r\n            return needCalculatedValue ? cell[fieldIndex] : cell.originalCell[fieldIndex]\r\n        }\r\n        return NULL\r\n    },\r\n    isPostProcessed(field) {\r\n        var fieldIndex = this._fieldIndex;\r\n        if (isDefined(field)) {\r\n            var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n            fieldIndex = fieldPos.index;\r\n            if (\"data\" !== fieldPos.area) {\r\n                return false\r\n            }\r\n        }\r\n        return !!(this._cell && this._cell.postProcessedFlags[fieldIndex])\r\n    }\r\n});\r\n\r\nfunction getExpression(field) {\r\n    var summaryDisplayMode = field.summaryDisplayMode;\r\n    var crossGroupCalculation = field.allowCrossGroupCalculation;\r\n    var expression = NULL;\r\n    if (isFunction(field.calculateSummaryValue)) {\r\n        expression = field.calculateSummaryValue\r\n    } else if (summaryDisplayMode) {\r\n        if (\"absoluteVariation\" === summaryDisplayMode) {\r\n            expression = createAbsoluteVariationExp(crossGroupCalculation)\r\n        } else if (\"percentVariation\" === summaryDisplayMode) {\r\n            expression = createPercentVariationExp(crossGroupCalculation)\r\n        } else {\r\n            expression = summaryDictionary[summaryDisplayMode]\r\n        }\r\n        if (expression && !field.format && -1 !== summaryDisplayMode.indexOf(\"percent\")) {\r\n            setFieldProperty(field, \"format\", \"percent\")\r\n        }\r\n    }\r\n    return expression\r\n}\r\n\r\nfunction processDataCell(data, rowIndex, columnIndex, isRunningTotalCalculation) {\r\n    var values = data.values[rowIndex][columnIndex] = data.values[rowIndex][columnIndex] || [];\r\n    var originalCell = values.originalCell;\r\n    if (!originalCell) {\r\n        return\r\n    }\r\n    if (values.allowResetting || !isRunningTotalCalculation) {\r\n        data.values[rowIndex][columnIndex] = originalCell.slice()\r\n    }\r\n    data.values[rowIndex][columnIndex].allowResetting = isRunningTotalCalculation\r\n}\r\nexport function applyDisplaySummaryMode(descriptions, data) {\r\n    var expressions = [];\r\n    var columnElements = [{\r\n        index: data.grandTotalColumnIndex,\r\n        children: data.columns\r\n    }];\r\n    var rowElements = [{\r\n        index: data.grandTotalRowIndex,\r\n        children: data.rows\r\n    }];\r\n    var valueFields = descriptions.values;\r\n    var fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    foreachTree(columnElements, columnPath => {\r\n        columnPath[0].isEmpty = []\r\n    }, false);\r\n    foreachTree(rowElements, (function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        rowItem.isEmpty = [];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        foreachTree(columnElements, (function(columnPath) {\r\n            var columnItem = columnPath[0];\r\n            var isEmptyCell;\r\n            processDataCell(data, rowItem.index, columnItem.index, false);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                var field = valueFields[i];\r\n                var expression = expressions[i] = void 0 === expressions[i] ? getExpression(field) : expressions[i];\r\n                isEmptyCell = false;\r\n                if (expression) {\r\n                    var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    var cell = expressionArg.cell();\r\n                    var value = cell[i] = expression(expressionArg);\r\n                    cell.postProcessedFlags[i] = true;\r\n                    isEmptyCell = null === value || void 0 === value\r\n                }\r\n                if (void 0 === columnItem.isEmpty[i]) {\r\n                    columnItem.isEmpty[i] = true\r\n                }\r\n                if (void 0 === rowItem.isEmpty[i]) {\r\n                    rowItem.isEmpty[i] = true\r\n                }\r\n                if (!isEmptyCell) {\r\n                    rowItem.isEmpty[i] = columnItem.isEmpty[i] = false\r\n                }\r\n            }\r\n        }), false)\r\n    }), false);\r\n    data.isEmptyGrandTotalRow = rowElements[0].isEmpty;\r\n    data.isEmptyGrandTotalColumn = columnElements[0].isEmpty\r\n}\r\nexport function applyRunningTotal(descriptions, data) {\r\n    var expressions = [];\r\n    var columnElements = [{\r\n        index: data.grandTotalColumnIndex,\r\n        children: data.columns\r\n    }];\r\n    var rowElements = [{\r\n        index: data.grandTotalRowIndex,\r\n        children: data.rows\r\n    }];\r\n    var valueFields = descriptions.values;\r\n    var fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    foreachTree(rowElements, (function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        foreachTree(columnElements, (function(columnPath) {\r\n            var columnItem = columnPath[0];\r\n            processDataCell(data, rowItem.index, columnItem.index, true);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                var field = valueFields[i];\r\n                var expression = expressions[i] = void 0 === expressions[i] ? createRunningTotalExpr(field) : expressions[i];\r\n                if (expression) {\r\n                    var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    var cell = expressionArg.cell();\r\n                    cell[i] = expression(expressionArg);\r\n                    cell.postProcessedFlags[i] = true\r\n                }\r\n            }\r\n        }), false)\r\n    }), false)\r\n}\r\nexport function createMockSummaryCell(descriptions, fields, indices) {\r\n    var summaryCell = new SummaryCell([], [], {}, descriptions, 0);\r\n    summaryCell.value = function(fieldId) {\r\n        if (isDefined(fieldId)) {\r\n            var index = findField(fields, fieldId);\r\n            var field = fields[index];\r\n            if (!indices[index] && field && !isDefined(field.area)) {\r\n                descriptions.values.push(field);\r\n                indices[index] = true\r\n            }\r\n        }\r\n    };\r\n    summaryCell.grandTotal = function() {\r\n        return this\r\n    };\r\n    summaryCell.children = function() {\r\n        return []\r\n    };\r\n    return summaryCell\r\n}\r\n"]},"metadata":{},"sourceType":"module"}