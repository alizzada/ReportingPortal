{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerTimeline from \"./ui.scheduler.timeline\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerTimelineMonth = /*#__PURE__*/function (_SchedulerTimeline) {\n  _inherits(SchedulerTimelineMonth, _SchedulerTimeline);\n\n  var _super = _createSuper(SchedulerTimelineMonth);\n\n  function SchedulerTimelineMonth() {\n    _classCallCheck(this, SchedulerTimelineMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerTimelineMonth, [{\n    key: \"isDateAndTimeView\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"viewDirection\",\n    get: function get() {\n      return \"horizontal\";\n    }\n  }, {\n    key: \"renovatedHeaderPanelComponent\",\n    get: function get() {\n      return dxrDateHeader;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), \"_renderView\", this).call(this);\n\n      this._updateScrollable();\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return TIMELINE_CLASS;\n    }\n  }, {\n    key: \"_getDateHeaderTemplate\",\n    value: function _getDateHeaderTemplate() {\n      return this.option(\"dateCellTemplate\");\n    }\n  }, {\n    key: \"_getHiddenInterval\",\n    value: function _getHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_calculateDurationInCells\",\n    value: function _calculateDurationInCells(timeDiff) {\n      return timeDiff / this.getCellDuration();\n    }\n  }, {\n    key: \"getCellDuration\",\n    value: function getCellDuration() {\n      return toMs(\"day\");\n    }\n  }, {\n    key: \"calculateEndViewDate\",\n    value: function calculateEndViewDate(dateOfLastViewCell) {\n      return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"));\n    }\n  }, {\n    key: \"isIndicatorVisible\",\n    value: function isIndicatorVisible() {\n      return true;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      var currentDate = this.option(\"currentDate\");\n      var cellCount = 0;\n\n      if (this._isWorkSpaceWithCount()) {\n        var intervalCount = this.option(\"intervalCount\");\n\n        for (var i = 1; i <= intervalCount; i++) {\n          cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate();\n        }\n      } else {\n        cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n      }\n\n      return cellCount;\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\n\n      this._setStartDayHour(this._firstViewDate);\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return this._formatWeekdayAndDay;\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(headerIndex) {\n      var resultDate = new Date(this._firstViewDate);\n      resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n      return resultDate;\n    }\n  }, {\n    key: \"_getInterval\",\n    value: function _getInterval() {\n      return DAY_IN_MILLISECONDS;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate) {\n      var firstViewDate = this.getStartViewDate();\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate) {\n      var startDateCopy = new Date(startDate);\n      return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_getDateByCellIndexes\",\n    value: function _getDateByCellIndexes(rowIndex, cellIndex) {\n      var date = _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), \"_getDateByCellIndexes\", this).call(this, rowIndex, cellIndex);\n\n      this._setStartDayHour(date);\n\n      return date;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift() {\n      return {\n        top: 0,\n        left: 0,\n        cellPosition: 0\n      };\n    }\n  }]);\n\n  return SchedulerTimelineMonth;\n}(SchedulerTimeline);\n\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\nexport default SchedulerTimelineMonth;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js"],"names":["registerComponent","SchedulerTimeline","dateUtils","dxrDateHeader","TIMELINE_CLASS","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerTimelineMonth","_updateScrollable","option","timeDiff","getCellDuration","dateOfLastViewCell","Date","getTime","_calculateDayDuration","currentDate","cellCount","_isWorkSpaceWithCount","intervalCount","i","getFullYear","getMonth","getDate","_firstViewDate","getFirstMonthDate","_setStartDayHour","_formatWeekdayAndDay","headerIndex","resultDate","setDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","startDate","startDateCopy","setHours","rowIndex","cellIndex","date","top","left","cellPosition"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerTimeline from \"./ui.scheduler.timeline\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimelineMonth extends SchedulerTimeline {\r\n    get isDateAndTimeView() {\r\n        return false\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    _renderView() {\r\n        super._renderView();\r\n        this._updateScrollable()\r\n    }\r\n    _getElementClass() {\r\n        return TIMELINE_CLASS\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _getHiddenInterval() {\r\n        return 0\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        return timeDiff / this.getCellDuration()\r\n    }\r\n    getCellDuration() {\r\n        return toMs(\"day\")\r\n    }\r\n    calculateEndViewDate(dateOfLastViewCell) {\r\n        return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"))\r\n    }\r\n    isIndicatorVisible() {\r\n        return true\r\n    }\r\n    _getCellCount() {\r\n        var currentDate = this.option(\"currentDate\");\r\n        var cellCount = 0;\r\n        if (this._isWorkSpaceWithCount()) {\r\n            var intervalCount = this.option(\"intervalCount\");\r\n            for (var i = 1; i <= intervalCount; i++) {\r\n                cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate()\r\n            }\r\n        } else {\r\n            cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()\r\n        }\r\n        return cellCount\r\n    }\r\n    _setFirstViewDate() {\r\n        this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\r\n        this._setStartDayHour(this._firstViewDate)\r\n    }\r\n    _getFormat() {\r\n        return this._formatWeekdayAndDay\r\n    }\r\n    _getDateByIndex(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    }\r\n    _getInterval() {\r\n        return DAY_IN_MILLISECONDS\r\n    }\r\n    _getIntervalBetween(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    }\r\n    _calculateHiddenInterval() {\r\n        return 0\r\n    }\r\n    _getDateByCellIndexes(rowIndex, cellIndex) {\r\n        var date = super._getDateByCellIndexes(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    }\r\n    getPositionShift() {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\r\nexport default SchedulerTimelineMonth;\r\n"]},"metadata":{},"sourceType":"module"}