{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/ui.scheduler.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport registerComponent from \"../../core/component_registrator\";\nimport config from \"../../core/config\";\nimport devices from \"../../core/devices\";\nimport $ from \"../../core/renderer\";\nimport { BindableTemplate } from \"../../core/templates/bindable_template\";\nimport { EmptyTemplate } from \"../../core/templates/empty_template\";\nimport { inArray } from \"../../core/utils/array\";\nimport browser from \"../../core/utils/browser\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { noop } from \"../../core/utils/common\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport dateUtils from \"../../core/utils/date\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport { Deferred, when, fromPromise } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { touch } from \"../../core/utils/support\";\nimport { isDefined, isString, isObject, isFunction, isEmptyObject, isDeferred, isPromise } from \"../../core/utils/type\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport DataHelperMixin from \"../../data_helper\";\nimport { triggerResizeEvent } from \"../../events/visibility_change\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport { custom as customDialog } from \"../dialog\";\nimport { isMaterial } from \"../themes\";\nimport errors from \"../widget/ui.errors\";\nimport Widget from \"../widget/ui.widget\";\nimport AppointmentPopup from \"./appointmentPopup\";\nimport { CompactAppointmentsHelper } from \"./compactAppointmentsHelper\";\nimport { DesktopTooltipStrategy } from \"./tooltip_strategies/desktopTooltipStrategy\";\nimport { MobileTooltipStrategy } from \"./tooltip_strategies/mobileTooltipStrategy\";\nimport { hide as hideLoading, show as showLoading } from \"./loading\";\nimport AppointmentCollection from \"./appointments/appointmentCollection\";\nimport AppointmentLayoutManager from \"./appointments.layout_manager\";\nimport SchedulerAppointmentModel from \"./appointment_model\";\nimport { Header } from \"./header/header\";\nimport { ResourceManager } from \"./resources/resourceManager\";\nimport subscribes from \"./subscribes\";\nimport { getRecurrenceProcessor } from \"./recurrence\";\nimport timeZoneUtils from \"./utils.timeZone\";\nimport SchedulerAgenda from \"./workspaces/ui.scheduler.agenda\";\nimport SchedulerTimelineDay from \"./workspaces/ui.scheduler.timeline_day\";\nimport SchedulerTimelineMonth from \"./workspaces/ui.scheduler.timeline_month\";\nimport SchedulerTimelineWeek from \"./workspaces/ui.scheduler.timeline_week\";\nimport SchedulerTimelineWorkWeek from \"./workspaces/ui.scheduler.timeline_work_week\";\nimport SchedulerWorkSpaceDay from \"./workspaces/ui.scheduler.work_space_day\";\nimport SchedulerWorkSpaceMonth from \"./workspaces/ui.scheduler.work_space_month\";\nimport SchedulerWorkSpaceWeek from \"./workspaces/ui.scheduler.work_space_week\";\nimport SchedulerWorkSpaceWorkWeek from \"./workspaces/ui.scheduler.work_space_work_week\";\nimport AppointmentAdapter from \"./appointmentAdapter\";\nimport { TimeZoneCalculator } from \"./timeZoneCalculator\";\nimport { AppointmentTooltipInfo } from \"./dataStructures\";\nimport { AppointmentSettingsGenerator } from \"./appointmentSettingsGenerator\";\nimport AppointmentFilter from \"./appointments/appointmentFilter\";\nimport utils from \"./utils\";\nvar MINUTES_IN_HOUR = 60;\nvar WIDGET_CLASS = \"dx-scheduler\";\nvar WIDGET_SMALL_CLASS = \"\".concat(WIDGET_CLASS, \"-small\");\nvar WIDGET_ADAPTIVE_CLASS = \"\".concat(WIDGET_CLASS, \"-adaptive\");\nvar WIDGET_WIN_NO_TOUCH_CLASS = \"\".concat(WIDGET_CLASS, \"-win-no-touch\");\nvar WIDGET_READONLY_CLASS = \"\".concat(WIDGET_CLASS, \"-readonly\");\nvar WIDGET_SMALL_WIDTH = 400;\nvar FULL_DATE_FORMAT = \"yyyyMMddTHHmmss\";\nvar UTC_FULL_DATE_FORMAT = FULL_DATE_FORMAT + \"Z\";\nvar VIEWS_CONFIG = {\n  day: {\n    workSpace: SchedulerWorkSpaceDay,\n    renderingStrategy: \"vertical\"\n  },\n  week: {\n    workSpace: SchedulerWorkSpaceWeek,\n    renderingStrategy: \"vertical\"\n  },\n  workWeek: {\n    workSpace: SchedulerWorkSpaceWorkWeek,\n    renderingStrategy: \"vertical\"\n  },\n  month: {\n    workSpace: SchedulerWorkSpaceMonth,\n    renderingStrategy: \"horizontalMonth\"\n  },\n  timelineDay: {\n    workSpace: SchedulerTimelineDay,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineWeek: {\n    workSpace: SchedulerTimelineWeek,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineWorkWeek: {\n    workSpace: SchedulerTimelineWorkWeek,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineMonth: {\n    workSpace: SchedulerTimelineMonth,\n    renderingStrategy: \"horizontalMonthLine\"\n  },\n  agenda: {\n    workSpace: SchedulerAgenda,\n    renderingStrategy: \"agenda\"\n  }\n};\nvar StoreEventNames = {\n  ADDING: \"onAppointmentAdding\",\n  ADDED: \"onAppointmentAdded\",\n  DELETING: \"onAppointmentDeleting\",\n  DELETED: \"onAppointmentDeleted\",\n  UPDATING: \"onAppointmentUpdating\",\n  UPDATED: \"onAppointmentUpdated\"\n};\nvar RECURRENCE_EDITING_MODE = {\n  SERIES: \"editSeries\",\n  OCCURENCE: \"editOccurence\",\n  CANCEL: \"cancel\"\n};\n\nvar Scheduler = /*#__PURE__*/function (_Widget) {\n  _inherits(Scheduler, _Widget);\n\n  var _super = _createSuper(Scheduler);\n\n  function Scheduler() {\n    _classCallCheck(this, Scheduler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Scheduler, [{\n    key: \"appointmentFilter\",\n    get: function get() {\n      return new AppointmentFilter(this);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      var defaultOptions = extend(_get(_getPrototypeOf(Scheduler.prototype), \"_getDefaultOptions\", this).call(this), {\n        views: [\"day\", \"week\"],\n        currentView: \"day\",\n        currentDate: dateUtils.trimTime(new Date()),\n        min: void 0,\n        max: void 0,\n        dateSerializationFormat: void 0,\n        firstDayOfWeek: void 0,\n        groups: [],\n        resources: [],\n        dataSource: null,\n        customizeDateNavigatorText: void 0,\n        appointmentTemplate: \"item\",\n        dropDownAppointmentTemplate: \"dropDownAppointment\",\n        appointmentCollectorTemplate: \"appointmentCollector\",\n        dataCellTemplate: null,\n        timeCellTemplate: null,\n        resourceCellTemplate: null,\n        dateCellTemplate: null,\n        startDayHour: 0,\n        endDayHour: 24,\n        editing: {\n          allowAdding: true,\n          allowDeleting: true,\n          allowDragging: true,\n          allowResizing: true,\n          allowUpdating: true,\n          allowTimeZoneEditing: false,\n          allowEditingTimeZones: false\n        },\n        showAllDayPanel: true,\n        showCurrentTimeIndicator: true,\n        shadeUntilCurrentTime: false,\n        indicatorUpdateInterval: 3e5,\n        indicatorTime: void 0,\n        recurrenceEditMode: \"dialog\",\n        cellDuration: 30,\n        maxAppointmentsPerCell: \"auto\",\n        selectedCellData: [],\n        groupByDate: false,\n        onAppointmentRendered: null,\n        onAppointmentClick: null,\n        onAppointmentDblClick: null,\n        onAppointmentContextMenu: null,\n        onCellClick: null,\n        onCellContextMenu: null,\n        onAppointmentAdding: null,\n        onAppointmentAdded: null,\n        onAppointmentUpdating: null,\n        onAppointmentUpdated: null,\n        onAppointmentDeleting: null,\n        onAppointmentDeleted: null,\n        onAppointmentFormOpening: null,\n        appointmentTooltipTemplate: \"appointmentTooltip\",\n        appointmentPopupTemplate: \"appointmentPopup\",\n        crossScrollingEnabled: false,\n        useDropDownViewSwitcher: false,\n        startDateExpr: \"startDate\",\n        endDateExpr: \"endDate\",\n        textExpr: \"text\",\n        descriptionExpr: \"description\",\n        allDayExpr: \"allDay\",\n        recurrenceRuleExpr: \"recurrenceRule\",\n        recurrenceExceptionExpr: \"recurrenceException\",\n        disabledExpr: \"disabled\",\n        remoteFiltering: false,\n        timeZone: \"\",\n        startDateTimeZoneExpr: \"startDateTimeZone\",\n        endDateTimeZoneExpr: \"endDateTimeZone\",\n        noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\n        adaptivityEnabled: false,\n        allowMultipleCellSelection: true,\n        scrolling: {\n          mode: \"standard\"\n        },\n        renovateRender: true,\n        _draggingMode: \"outlook\",\n        _appointmentTooltipOffset: {\n          x: 0,\n          y: 0\n        },\n        _appointmentTooltipButtonsPosition: \"bottom\",\n        _appointmentTooltipOpenButtonText: messageLocalization.format(\"dxScheduler-openAppointment\"),\n        _dropDownButtonIcon: \"overflow\",\n        _appointmentCountPerCell: 2,\n        _collectorOffset: 0,\n        _appointmentOffset: 26\n      });\n      return extend(true, defaultOptions, {\n        integrationOptions: {\n          useDeferUpdateForTemplates: false\n        }\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(Scheduler.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: function device() {\n          return !devices.current().generic;\n        },\n        options: {\n          useDropDownViewSwitcher: true,\n          editing: {\n            allowDragging: false,\n            allowResizing: false\n          }\n        }\n      }, {\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          useDropDownViewSwitcher: true,\n          dateCellTemplate: function dateCellTemplate(data, index, element) {\n            var text = data.text;\n            text.split(\" \").forEach(function (text, index) {\n              var span = $(\"<span>\").text(text).addClass(\"dx-scheduler-header-panel-cell-date\");\n              $(element).append(span);\n\n              if (!index) {\n                $(element).append(\" \");\n              }\n            });\n          },\n          _appointmentTooltipOffset: {\n            x: 0,\n            y: 11\n          },\n          _appointmentTooltipButtonsPosition: \"top\",\n          _appointmentTooltipOpenButtonText: null,\n          _dropDownButtonIcon: \"chevrondown\",\n          _appointmentCountPerCell: 1,\n          _collectorOffset: 20,\n          _appointmentOffset: 30\n        }\n      }]);\n    }\n  }, {\n    key: \"_setDeprecatedOptions\",\n    value: function _setDeprecatedOptions() {\n      _get(_getPrototypeOf(Scheduler.prototype), \"_setDeprecatedOptions\", this).call(this);\n\n      extend(this._deprecatedOptions, {\n        dropDownAppointmentTemplate: {\n          since: \"19.2\",\n          message: \"appointmentTooltipTemplate\"\n        },\n        allowEditingTimeZones: {\n          since: \"20.1\",\n          alias: \"allowTimeZoneEditing\"\n        }\n      });\n    }\n  }, {\n    key: \"_getAppointmentSettingsGenerator\",\n    value: function _getAppointmentSettingsGenerator() {\n      return new AppointmentSettingsGenerator(this);\n    }\n  }, {\n    key: \"_postponeDataSourceLoading\",\n    value: function _postponeDataSourceLoading(promise) {\n      this.postponedOperations.add(\"_reloadDataSource\", this._reloadDataSource.bind(this), promise);\n    }\n  }, {\n    key: \"_postponeResourceLoading\",\n    value: function _postponeResourceLoading() {\n      var _this = this;\n\n      var whenLoaded = this.postponedOperations.add(\"_loadResources\", function () {\n        return _this._loadResources();\n      });\n      var resolveCallbacks = new Deferred();\n      whenLoaded.done(function (resources) {\n        resolveCallbacks.resolve(resources);\n      });\n\n      this._postponeDataSourceLoading(whenLoaded);\n\n      return resolveCallbacks.promise();\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var _this2 = this;\n\n      var value = args.value;\n      var name = args.name;\n\n      switch (args.name) {\n        case \"customizeDateNavigatorText\":\n          this._updateOption(\"header\", name, value);\n\n          break;\n\n        case \"firstDayOfWeek\":\n          this._updateOption(\"workSpace\", name, value);\n\n          this._updateOption(\"header\", name, value);\n\n          break;\n\n        case \"currentDate\":\n          value = this._dateOption(name);\n          value = dateUtils.trimTime(new Date(value));\n          this.option(\"selectedCellData\", []);\n\n          this._workSpace.option(name, new Date(value));\n\n          this._header.option(name, new Date(value));\n\n          this._header.option(\"displayedDate\", this._workSpace._getViewStartByOptions());\n\n          this._appointments.option(\"items\", []);\n\n          this._filterAppointmentsByDate();\n\n          this._postponeDataSourceLoading();\n\n          break;\n\n        case \"dataSource\":\n          this._initDataSource();\n\n          this._appointmentModel.setDataSource(this._dataSource);\n\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._filterAppointmentsByDate();\n\n            _this2._updateOption(\"workSpace\", \"showAllDayPanel\", _this2.option(\"showAllDayPanel\"));\n          });\n\n          break;\n\n        case \"min\":\n        case \"max\":\n          value = this._dateOption(name);\n\n          this._updateOption(\"header\", name, new Date(value));\n\n          this._updateOption(\"workSpace\", name, new Date(value));\n\n          break;\n\n        case \"views\":\n          this._processCurrentView();\n\n          if (this._getCurrentViewOptions()) {\n            this.repaint();\n          } else {\n            this._header.option(name, value);\n          }\n\n          break;\n\n        case \"useDropDownViewSwitcher\":\n          this._header.option(name, value);\n\n          break;\n\n        case \"currentView\":\n          this._processCurrentView();\n\n          this.fire(\"validateDayHours\");\n          this.getLayoutManager().initRenderingStrategy(this._getAppointmentsRenderingStrategy());\n\n          this._validateCellDuration();\n\n          this._appointments.option({\n            items: [],\n            allowDrag: this._allowDragging(),\n            allowResize: this._allowResizing(),\n            itemTemplate: this._getAppointmentTemplate(\"appointmentTemplate\")\n          });\n\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._refreshWorkSpace(resources);\n\n            _this2._updateHeader();\n\n            _this2._filterAppointmentsByDate();\n\n            _this2._appointments.option(\"allowAllDayResize\", \"day\" !== value);\n          });\n\n          break;\n\n        case \"appointmentTemplate\":\n          this._appointments.option(\"itemTemplate\", value);\n\n          break;\n\n        case \"dateCellTemplate\":\n        case \"resourceCellTemplate\":\n        case \"dataCellTemplate\":\n        case \"timeCellTemplate\":\n          this._updateOption(\"workSpace\", name, value);\n\n          this.repaint();\n          break;\n\n        case \"groups\":\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._refreshWorkSpace(resources);\n\n            _this2._filterAppointmentsByDate();\n          });\n\n          break;\n\n        case \"resources\":\n          this._resourcesManager.setResources(this.option(\"resources\"));\n\n          this._appointmentModel.setDataAccessors(this._combineDataAccessors());\n\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._appointments.option(\"items\", []);\n\n            _this2._refreshWorkSpace(resources);\n\n            _this2._filterAppointmentsByDate();\n          });\n\n          break;\n\n        case \"startDayHour\":\n        case \"endDayHour\":\n          this.fire(\"validateDayHours\");\n\n          this._appointments.option(\"items\", []);\n\n          this._updateOption(\"workSpace\", name, value);\n\n          this._appointments.repaint();\n\n          this._filterAppointmentsByDate();\n\n          this._postponeDataSourceLoading();\n\n          break;\n\n        case StoreEventNames.ADDING:\n        case StoreEventNames.ADDED:\n        case StoreEventNames.UPDATING:\n        case StoreEventNames.UPDATED:\n        case StoreEventNames.DELETING:\n        case StoreEventNames.DELETED:\n        case \"onAppointmentFormOpening\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        case \"onAppointmentRendered\":\n          this._appointments.option(\"onItemRendered\", this._getAppointmentRenderedAction());\n\n          break;\n\n        case \"onAppointmentClick\":\n          this._appointments.option(\"onItemClick\", this._createActionByOption(name));\n\n          break;\n\n        case \"onAppointmentDblClick\":\n          this._appointments.option(name, this._createActionByOption(name));\n\n          break;\n\n        case \"onAppointmentContextMenu\":\n          this._appointments.option(\"onItemContextMenu\", this._createActionByOption(name));\n\n          break;\n\n        case \"noDataText\":\n        case \"allowMultipleCellSelection\":\n        case \"selectedCellData\":\n        case \"accessKey\":\n        case \"onCellClick\":\n        case \"onCellContextMenu\":\n          this._workSpace.option(name, value);\n\n          break;\n\n        case \"crossScrollingEnabled\":\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._appointments.option(\"items\", []);\n\n            _this2._refreshWorkSpace(resources);\n\n            if (_this2._readyToRenderAppointments) {\n              _this2._appointments.option(\"items\", _this2._getAppointmentsToRepaint());\n            }\n          });\n\n          break;\n\n        case \"cellDuration\":\n          this._validateCellDuration();\n\n          this._appointments.option(\"items\", []);\n\n          if (this._readyToRenderAppointments) {\n            this._updateOption(\"workSpace\", \"hoursInterval\", value / 60);\n\n            this._appointments.option(\"items\", this._getAppointmentsToRepaint());\n          }\n\n          break;\n\n        case \"tabIndex\":\n        case \"focusStateEnabled\":\n          this._updateOption(\"header\", name, value);\n\n          this._updateOption(\"workSpace\", name, value);\n\n          this._appointments.option(name, value);\n\n          _get(_getPrototypeOf(Scheduler.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"width\":\n          this._updateOption(\"header\", name, value);\n\n          if (this.option(\"crossScrollingEnabled\")) {\n            this._updateOption(\"workSpace\", \"width\", value);\n          }\n\n          _get(_getPrototypeOf(Scheduler.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._dimensionChanged();\n\n          break;\n\n        case \"height\":\n          _get(_getPrototypeOf(Scheduler.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._dimensionChanged();\n\n          break;\n\n        case \"editing\":\n          this._initEditing();\n\n          var editing = this._editing;\n\n          this._bringEditingModeToAppointments(editing);\n\n          this.hideAppointmentTooltip();\n\n          this._cleanPopup();\n\n          break;\n\n        case \"showAllDayPanel\":\n          this._postponeResourceLoading().done(function (resources) {\n            _this2._filterAppointmentsByDate();\n\n            _this2._updateOption(\"workSpace\", \"allDayExpanded\", value);\n\n            _this2._updateOption(\"workSpace\", name, value);\n          });\n\n          break;\n\n        case \"showCurrentTimeIndicator\":\n        case \"indicatorTime\":\n        case \"indicatorUpdateInterval\":\n        case \"shadeUntilCurrentTime\":\n        case \"groupByDate\":\n          this._updateOption(\"workSpace\", name, value);\n\n          this.repaint();\n          break;\n\n        case \"appointmentDragging\":\n        case \"appointmentTooltipTemplate\":\n        case \"appointmentPopupTemplate\":\n        case \"recurrenceEditMode\":\n        case \"remoteFiltering\":\n        case \"timeZone\":\n        case \"dropDownAppointmentTemplate\":\n        case \"appointmentCollectorTemplate\":\n        case \"_appointmentTooltipOffset\":\n        case \"_appointmentTooltipButtonsPosition\":\n        case \"_appointmentTooltipOpenButtonText\":\n        case \"_dropDownButtonIcon\":\n        case \"_appointmentCountPerCell\":\n        case \"_collectorOffset\":\n        case \"_appointmentOffset\":\n          this.repaint();\n          break;\n\n        case \"dateSerializationFormat\":\n        case \"maxAppointmentsPerCell\":\n          break;\n\n        case \"startDateExpr\":\n        case \"endDateExpr\":\n        case \"startDateTimeZoneExpr\":\n        case \"endDateTimeZoneExpr\":\n        case \"textExpr\":\n        case \"descriptionExpr\":\n        case \"allDayExpr\":\n        case \"recurrenceRuleExpr\":\n        case \"recurrenceExceptionExpr\":\n        case \"disabledExpr\":\n          this._updateExpression(name, value);\n\n          this._appointmentModel.setDataAccessors(this._combineDataAccessors());\n\n          this._initAppointmentTemplate();\n\n          this.repaint();\n          break;\n\n        case \"adaptivityEnabled\":\n          this._toggleAdaptiveClass();\n\n          this.repaint();\n          break;\n\n        case \"scrolling\":\n          this.option(\"crossScrollingEnabled\", this._isHorizontalVirtualScrolling() || this.option(\"crossScrollingEnabled\"));\n\n          this._updateOption(\"workSpace\", args.fullName, value);\n\n          break;\n\n        case \"renovateRender\":\n          this._updateOption(\"workSpace\", name, value);\n\n          break;\n\n        case \"_draggingMode\":\n          this._workSpace.option(\"draggingMode\", value);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(Scheduler.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_updateHeader\",\n    value: function _updateHeader() {\n      var viewCountConfig = this._getViewCountConfig();\n\n      this._header.option(\"intervalCount\", viewCountConfig.intervalCount);\n\n      this._header.option(\"displayedDate\", this._workSpace._getViewStartByOptions());\n\n      this._header.option(\"min\", this._dateOption(\"min\"));\n\n      this._header.option(\"max\", this._dateOption(\"max\"));\n\n      this._header.option(\"currentDate\", this._dateOption(\"currentDate\"));\n\n      this._header.option(\"firstDayOfWeek\", this._getCurrentViewOption(\"firstDayOfWeek\"));\n\n      this._header.option(\"currentView\", this._currentView);\n    }\n  }, {\n    key: \"_dateOption\",\n    value: function _dateOption(optionName) {\n      var optionValue = this._getCurrentViewOption(optionName);\n\n      return dateSerialization.deserializeDate(optionValue);\n    }\n  }, {\n    key: \"_getSerializationFormat\",\n    value: function _getSerializationFormat(optionName) {\n      var value = this._getCurrentViewOption(optionName);\n\n      if (\"number\" === typeof value) {\n        return \"number\";\n      }\n\n      if (!isString(value)) {\n        return;\n      }\n\n      return dateSerialization.getDateSerializationFormat(value);\n    }\n  }, {\n    key: \"_bringEditingModeToAppointments\",\n    value: function _bringEditingModeToAppointments(editing) {\n      var editingConfig = {\n        allowDelete: editing.allowUpdating && editing.allowDeleting\n      };\n\n      if (!this._isAgenda()) {\n        editingConfig.allowDrag = editing.allowDragging;\n        editingConfig.allowResize = editing.allowResizing;\n        editingConfig.allowAllDayResize = editing.allowResizing && this._supportAllDayResizing();\n      }\n\n      this._appointments.option(editingConfig);\n\n      this.repaint();\n    }\n  }, {\n    key: \"_isAgenda\",\n    value: function _isAgenda() {\n      return \"agenda\" === this._getAppointmentsRenderingStrategy();\n    }\n  }, {\n    key: \"_allowDragging\",\n    value: function _allowDragging() {\n      return this._editing.allowDragging && !this._isAgenda();\n    }\n  }, {\n    key: \"_allowResizing\",\n    value: function _allowResizing() {\n      return this._editing.allowResizing && !this._isAgenda();\n    }\n  }, {\n    key: \"_allowAllDayResizing\",\n    value: function _allowAllDayResizing() {\n      return this._editing.allowResizing && this._supportAllDayResizing();\n    }\n  }, {\n    key: \"_supportAllDayResizing\",\n    value: function _supportAllDayResizing() {\n      return \"day\" !== this._getCurrentViewType() || this._currentView.intervalCount > 1;\n    }\n  }, {\n    key: \"_isAllDayExpanded\",\n    value: function _isAllDayExpanded(items) {\n      return this.option(\"showAllDayPanel\") && this.appointmentFilter.hasAllDayAppointments(items);\n    }\n  }, {\n    key: \"_getTimezoneOffsetByOption\",\n    value: function _getTimezoneOffsetByOption(date) {\n      return timeZoneUtils.calculateTimezoneByValue(this.option(\"timeZone\"), date);\n    }\n  }, {\n    key: \"_filterAppointmentsByDate\",\n    value: function _filterAppointmentsByDate() {\n      var dateRange = this._workSpace.getDateRange();\n\n      var startDate = this.timeZoneCalculator.createDate(dateRange[0], {\n        path: \"fromGrid\"\n      });\n      var endDate = this.timeZoneCalculator.createDate(dateRange[1], {\n        path: \"fromGrid\"\n      });\n\n      this._appointmentModel.filterByDate(startDate, endDate, this.option(\"remoteFiltering\"), this.option(\"dateSerializationFormat\"));\n    }\n  }, {\n    key: \"_loadResources\",\n    value: function _loadResources() {\n      var groups = this._getCurrentViewOption(\"groups\");\n\n      var result = new Deferred();\n\n      this._resourcesManager.loadResources(groups).done(function (resources) {\n        this._loadedResources = resources;\n        result.resolve(resources);\n      }.bind(this));\n\n      return result.promise();\n    }\n  }, {\n    key: \"_reloadDataSource\",\n    value: function _reloadDataSource() {\n      var result = new Deferred();\n\n      if (this._dataSource) {\n        this._dataSource.load().done(function () {\n          hideLoading();\n\n          this._fireContentReadyAction(result);\n        }.bind(this)).fail(function () {\n          hideLoading();\n          result.reject();\n        });\n\n        this._dataSource.isLoading() && showLoading({\n          container: this.$element(),\n          position: {\n            of: this.$element()\n          }\n        });\n      } else {\n        this._fireContentReadyAction(result);\n      }\n\n      return result.promise();\n    }\n  }, {\n    key: \"_fireContentReadyAction\",\n    value: function _fireContentReadyAction(result) {\n      var contentReadyBase = _get(_getPrototypeOf(Scheduler.prototype), \"_fireContentReadyAction\", this).bind(this);\n\n      var fireContentReady = function fireContentReady() {\n        contentReadyBase();\n        null === result || void 0 === result ? void 0 : result.resolve();\n      };\n\n      if (this._workSpaceRecalculation) {\n        var _this$_workSpaceRecal;\n\n        null === (_this$_workSpaceRecal = this._workSpaceRecalculation) || void 0 === _this$_workSpaceRecal ? void 0 : _this$_workSpaceRecal.done(function () {\n          fireContentReady();\n        });\n      } else {\n        fireContentReady();\n      }\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged() {\n      var filteredItems = this.getFilteredItems();\n\n      this._toggleSmallClass();\n\n      if (!this._isAgenda() && filteredItems && this._isVisible()) {\n        this._workSpace._cleanAllowedPositions();\n\n        this._workSpace.option(\"allDayExpanded\", this._isAllDayExpanded(filteredItems));\n\n        this._workSpace._dimensionChanged();\n\n        var appointments = this._layoutManager.createAppointmentsMap(filteredItems);\n\n        this._appointments.option(\"items\", appointments);\n      }\n\n      this.hideAppointmentTooltip();\n\n      this._appointmentPopup.triggerResize();\n\n      this._appointmentPopup.updatePopupFullScreenMode();\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._cleanPopup();\n\n      _get(_getPrototypeOf(Scheduler.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_toggleSmallClass\",\n    value: function _toggleSmallClass() {\n      var width = getBoundingRect(this.$element().get(0)).width;\n      this.$element().toggleClass(WIDGET_SMALL_CLASS, width < WIDGET_SMALL_WIDTH);\n    }\n  }, {\n    key: \"_toggleAdaptiveClass\",\n    value: function _toggleAdaptiveClass() {\n      this.$element().toggleClass(WIDGET_ADAPTIVE_CLASS, this.option(\"adaptivityEnabled\"));\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      visible && this._dimensionChanged();\n    }\n  }, {\n    key: \"_dataSourceOptions\",\n    value: function _dataSourceOptions() {\n      return {\n        paginate: false\n      };\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this3 = this;\n\n      this._initExpressions({\n        startDate: this.option(\"startDateExpr\"),\n        endDate: this.option(\"endDateExpr\"),\n        startDateTimeZone: this.option(\"startDateTimeZoneExpr\"),\n        endDateTimeZone: this.option(\"endDateTimeZoneExpr\"),\n        allDay: this.option(\"allDayExpr\"),\n        text: this.option(\"textExpr\"),\n        description: this.option(\"descriptionExpr\"),\n        recurrenceRule: this.option(\"recurrenceRuleExpr\"),\n        recurrenceException: this.option(\"recurrenceExceptionExpr\"),\n        disabled: this.option(\"disabledExpr\")\n      });\n\n      _get(_getPrototypeOf(Scheduler.prototype), \"_init\", this).call(this);\n\n      this._initDataSource();\n\n      this._loadedResources = [];\n      this.$element().addClass(WIDGET_CLASS).toggleClass(WIDGET_WIN_NO_TOUCH_CLASS, !!(browser.msie && touch));\n\n      this._initEditing();\n\n      this._resourcesManager = new ResourceManager(this.option(\"resources\"));\n\n      var combinedDataAccessors = this._combineDataAccessors();\n\n      this._appointmentModel = new SchedulerAppointmentModel(this._dataSource, combinedDataAccessors, this.getAppointmentDurationInMinutes());\n\n      this._initActions();\n\n      this._compactAppointmentsHelper = new CompactAppointmentsHelper(this);\n      this._asyncTemplatesTimers = [];\n      this._dataSourceLoadedCallback = Callbacks();\n      this._subscribes = subscribes;\n      this.timeZoneCalculator = new TimeZoneCalculator({\n        getClientOffset: function getClientOffset(date) {\n          return timeZoneUtils.getClientTimezoneOffset(date);\n        },\n        getCommonOffset: function getCommonOffset(date, timeZone) {\n          return timeZoneUtils.calculateTimezoneByValue(timeZone || _this3.option(\"timeZone\"), date);\n        },\n        getAppointmentOffset: function getAppointmentOffset(date, appointmentTimezone) {\n          return timeZoneUtils.calculateTimezoneByValue(appointmentTimezone, date);\n        }\n      });\n    }\n  }, {\n    key: \"_initTemplates\",\n    value: function _initTemplates() {\n      this._initAppointmentTemplate();\n\n      this._templateManager.addDefaultTemplates({\n        appointmentTooltip: new EmptyTemplate(),\n        dropDownAppointment: new EmptyTemplate()\n      });\n\n      _get(_getPrototypeOf(Scheduler.prototype), \"_initTemplates\", this).call(this);\n    }\n  }, {\n    key: \"_initAppointmentTemplate\",\n    value: function _initAppointmentTemplate() {\n      var _this4 = this;\n\n      var expr = this._dataAccessors.expr;\n\n      var createGetter = function createGetter(property) {\n        return compileGetter(\"appointmentData.\".concat(property));\n      };\n\n      var getDate = function getDate(getter) {\n        return function (data) {\n          var value = getter(data);\n\n          if (value instanceof Date) {\n            return value.valueOf();\n          }\n\n          return value;\n        };\n      };\n\n      this._templateManager.addDefaultTemplates({\n        item: new BindableTemplate(function ($container, data, model) {\n          return _this4.getAppointmentsInstance()._renderAppointmentTemplate($container, data, model);\n        }, [\"html\", \"text\", \"startDate\", \"endDate\", \"allDay\", \"description\", \"recurrenceRule\", \"recurrenceException\", \"startDateTimeZone\", \"endDateTimeZone\"], this.option(\"integrationOptions.watchMethod\"), {\n          text: createGetter(expr.textExpr),\n          startDate: getDate(createGetter(expr.startDateExpr)),\n          endDate: getDate(createGetter(expr.endDateExpr)),\n          startDateTimeZone: createGetter(expr.startDateTimeZoneExpr),\n          endDateTimeZone: createGetter(expr.endDateTimeZoneExpr),\n          allDay: createGetter(expr.allDayExpr),\n          recurrenceRule: createGetter(expr.recurrenceRuleExpr)\n        })\n      });\n    }\n  }, {\n    key: \"_combineDataAccessors\",\n    value: function _combineDataAccessors() {\n      var resourcesDataAccessors = this._resourcesManager._dataAccessors;\n      var result = extend(true, {}, this._dataAccessors);\n      each(resourcesDataAccessors, function (type, accessor) {\n        result[type].resources = accessor;\n      }.bind(this));\n      return result;\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent() {\n      this._renderContentImpl();\n    }\n  }, {\n    key: \"_dataSourceChangedHandler\",\n    value: function _dataSourceChangedHandler(result) {\n      if (this._readyToRenderAppointments) {\n        this._workSpaceRecalculation.done(function () {\n          this._renderAppointments();\n\n          var filteredItems = this.getFilteredItems();\n          this.getWorkSpace().onDataSourceChanged(filteredItems);\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"isVirtualScrolling\",\n    value: function isVirtualScrolling() {\n      var _this$getWorkSpace;\n\n      return null === (_this$getWorkSpace = this.getWorkSpace()) || void 0 === _this$getWorkSpace ? void 0 : _this$getWorkSpace.isVirtualScrolling();\n    }\n  }, {\n    key: \"_filterAppointments\",\n    value: function _filterAppointments() {\n      return this.appointmentFilter.filter();\n    }\n  }, {\n    key: \"_renderAppointments\",\n    value: function _renderAppointments() {\n      var workspace = this.getWorkSpace();\n      this._filteredItems = this._filterAppointments();\n      workspace.preRenderAppointments({\n        allDayExpanded: this._isAllDayExpanded(this._filteredItems),\n        appointments: this._filteredItems\n      });\n\n      if (this._filteredItems.length && this._isVisible()) {\n        this._appointments.option(\"items\", this._getAppointmentsToRepaint());\n\n        this._appointmentModel.cleanModelState();\n      } else {\n        this._appointments.option(\"items\", []);\n      }\n    }\n  }, {\n    key: \"_getAppointmentsToRepaint\",\n    value: function _getAppointmentsToRepaint() {\n      var appointments = this._layoutManager.createAppointmentsMap(this._filteredItems);\n\n      return this._layoutManager.getRepaintedAppointments(appointments, this.getAppointmentsInstance().option(\"items\"));\n    }\n  }, {\n    key: \"_initExpressions\",\n    value: function _initExpressions(fields) {\n      if (!this._dataAccessors) {\n        this._dataAccessors = {\n          getter: {},\n          setter: {},\n          expr: {}\n        };\n      }\n\n      each(fields, function (name, expr) {\n        if (expr) {\n          var getter = compileGetter(expr);\n          var setter = compileSetter(expr);\n          var dateGetter;\n          var dateSetter;\n\n          if (field = name, \"startDate\" === field || \"endDate\" === field) {\n            var that = this;\n\n            dateGetter = function dateGetter() {\n              var value = getter.apply(this, arguments);\n\n              if (config().forceIsoDateParsing) {\n                if (!that.option(\"dateSerializationFormat\")) {\n                  var format = dateSerialization.getDateSerializationFormat(value);\n\n                  if (format) {\n                    that.option(\"dateSerializationFormat\", format);\n                  }\n                }\n\n                value = dateSerialization.deserializeDate(value);\n              }\n\n              return value;\n            };\n\n            dateSetter = function dateSetter(object, value) {\n              if (config().forceIsoDateParsing || that.option(\"dateSerializationFormat\")) {\n                value = dateSerialization.serializeDate(value, that.option(\"dateSerializationFormat\"));\n              }\n\n              setter.call(this, object, value);\n            };\n          }\n\n          this._dataAccessors.getter[name] = dateGetter || getter;\n          this._dataAccessors.setter[name] = dateSetter || setter;\n          this._dataAccessors.expr[name + \"Expr\"] = expr;\n        } else {\n          delete this._dataAccessors.getter[name];\n          delete this._dataAccessors.setter[name];\n          delete this._dataAccessors.expr[name + \"Expr\"];\n        }\n\n        var field;\n      }.bind(this));\n    }\n  }, {\n    key: \"_updateExpression\",\n    value: function _updateExpression(name, value) {\n      var exprObj = {};\n      exprObj[name.replace(\"Expr\", \"\")] = value;\n\n      this._initExpressions(exprObj);\n    }\n  }, {\n    key: \"_initEditing\",\n    value: function _initEditing() {\n      var editing = this.option(\"editing\");\n      this._editing = {\n        allowAdding: !!editing,\n        allowUpdating: !!editing,\n        allowDeleting: !!editing,\n        allowResizing: !!editing,\n        allowDragging: !!editing\n      };\n\n      if (isObject(editing)) {\n        this._editing = extend(this._editing, editing);\n      }\n\n      this._editing.allowDragging = this._editing.allowDragging && this._editing.allowUpdating;\n      this._editing.allowResizing = this._editing.allowResizing && this._editing.allowUpdating;\n      this.$element().toggleClass(WIDGET_READONLY_CLASS, this._isReadOnly());\n    }\n  }, {\n    key: \"_isReadOnly\",\n    value: function _isReadOnly() {\n      var result = true;\n      var editing = this._editing;\n\n      for (var prop in editing) {\n        if (Object.prototype.hasOwnProperty.call(editing, prop)) {\n          result = result && !editing[prop];\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      var _this$_recurrenceDial;\n\n      this._appointmentTooltip && this._appointmentTooltip.dispose();\n      null === (_this$_recurrenceDial = this._recurrenceDialog) || void 0 === _this$_recurrenceDial ? void 0 : _this$_recurrenceDial.hide(RECURRENCE_EDITING_MODE.CANCEL);\n      this.hideAppointmentPopup();\n      this.hideAppointmentTooltip();\n\n      this._asyncTemplatesTimers.forEach(clearTimeout);\n\n      this._asyncTemplatesTimers = [];\n\n      _get(_getPrototypeOf(Scheduler.prototype), \"_dispose\", this).call(this);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onAppointmentAdding: this._createActionByOption(StoreEventNames.ADDING),\n        onAppointmentAdded: this._createActionByOption(StoreEventNames.ADDED),\n        onAppointmentUpdating: this._createActionByOption(StoreEventNames.UPDATING),\n        onAppointmentUpdated: this._createActionByOption(StoreEventNames.UPDATED),\n        onAppointmentDeleting: this._createActionByOption(StoreEventNames.DELETING),\n        onAppointmentDeleted: this._createActionByOption(StoreEventNames.DELETED),\n        onAppointmentFormOpening: this._createActionByOption(\"onAppointmentFormOpening\")\n      };\n    }\n  }, {\n    key: \"_getAppointmentRenderedAction\",\n    value: function _getAppointmentRenderedAction() {\n      return this._createActionByOption(\"onAppointmentRendered\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_renderFocusTarget\",\n    value: function _renderFocusTarget() {\n      return noop();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(Scheduler.prototype), \"_initMarkup\", this).call(this);\n\n      this.fire(\"validateDayHours\");\n\n      this._validateCellDuration();\n\n      this._processCurrentView();\n\n      this._renderHeader();\n\n      this._layoutManager = new AppointmentLayoutManager(this, this._getAppointmentsRenderingStrategy());\n      this._appointments = this._createComponent(\"<div>\", AppointmentCollection, this._appointmentsConfig());\n\n      this._appointments.option(\"itemTemplate\", this._getAppointmentTemplate(\"appointmentTemplate\"));\n\n      this._appointmentTooltip = new (this.option(\"adaptivityEnabled\") ? MobileTooltipStrategy : DesktopTooltipStrategy)(this._getAppointmentTooltipOptions());\n      this._appointmentPopup = new AppointmentPopup(this);\n\n      if (this._isLoaded() || this._isDataSourceLoading()) {\n        this._initMarkupCore(this._loadedResources);\n\n        this._dataSourceChangedHandler(this._dataSource.items());\n\n        this._fireContentReadyAction();\n      } else {\n        this._loadResources().done(function (resources) {\n          this._initMarkupCore(resources);\n\n          this._reloadDataSource();\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"_getAppointmentTooltipOptions\",\n    value: function _getAppointmentTooltipOptions() {\n      var _this5 = this;\n\n      return {\n        createComponent: this._createComponent.bind(this),\n        container: this.$element(),\n        getScrollableContainer: this.getWorkSpaceScrollableContainer.bind(this),\n        addDefaultTemplates: this._templateManager.addDefaultTemplates.bind(this._templateManager),\n        getAppointmentTemplate: this._getAppointmentTemplate.bind(this),\n        showAppointmentPopup: this.showAppointmentPopup.bind(this),\n        checkAndDeleteAppointment: this.checkAndDeleteAppointment.bind(this),\n        isAppointmentInAllDayPanel: this.isAppointmentInAllDayPanel.bind(this),\n        createFormattedDateText: function createFormattedDateText(appointment, targetedAppointment, format) {\n          return _this5.fire(\"getTextAndFormatDate\", appointment, targetedAppointment, format);\n        },\n        getAppointmentDisabled: function getAppointmentDisabled(appointment) {\n          return _this5.createAppointmentAdapter(appointment).disabled;\n        }\n      };\n    }\n  }, {\n    key: \"checkAndDeleteAppointment\",\n    value: function checkAndDeleteAppointment(appointment, targetedAppointment) {\n      var _this6 = this;\n\n      var targetedAdapter = this.createAppointmentAdapter(targetedAppointment);\n\n      this._checkRecurringAppointment(appointment, targetedAppointment, targetedAdapter.startDate, function () {\n        _this6.deleteAppointment(appointment);\n      }, true);\n    }\n  }, {\n    key: \"_getExtraAppointmentTooltipOptions\",\n    value: function _getExtraAppointmentTooltipOptions() {\n      return {\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        editing: this.option(\"editing\"),\n        offset: this.option(\"_appointmentTooltipOffset\")\n      };\n    }\n  }, {\n    key: \"isAppointmentInAllDayPanel\",\n    value: function isAppointmentInAllDayPanel(appointmentData) {\n      var workSpace = this._workSpace;\n      var itTakesAllDay = this.appointmentTakesAllDay(appointmentData);\n      return itTakesAllDay && workSpace.supportAllDayRow() && workSpace.option(\"showAllDayPanel\");\n    }\n  }, {\n    key: \"_initMarkupCore\",\n    value: function _initMarkupCore(resources) {\n      var _this7 = this;\n\n      this._readyToRenderAppointments = hasWindow();\n      this._workSpace && this._cleanWorkspace();\n\n      this._renderWorkSpace(resources);\n\n      this._appointments.option({\n        fixedContainer: this._workSpace.getFixedContainer(),\n        allDayContainer: this._workSpace.getAllDayContainer()\n      });\n\n      this._waitAsyncTemplate(function () {\n        var _this$_workSpaceRecal2;\n\n        return null === (_this$_workSpaceRecal2 = _this7._workSpaceRecalculation) || void 0 === _this$_workSpaceRecal2 ? void 0 : _this$_workSpaceRecal2.resolve();\n      });\n\n      this._filterAppointmentsByDate();\n    }\n  }, {\n    key: \"_isLoaded\",\n    value: function _isLoaded() {\n      return this._isResourcesLoaded() && this._isDataSourceLoaded();\n    }\n  }, {\n    key: \"_isResourcesLoaded\",\n    value: function _isResourcesLoaded() {\n      return isDefined(this._loadedResources);\n    }\n  }, {\n    key: \"_isDataSourceLoaded\",\n    value: function _isDataSourceLoaded() {\n      return this._dataSource && this._dataSource.isLoaded();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this._toggleSmallClass();\n\n      this._toggleAdaptiveClass();\n\n      _get(_getPrototypeOf(Scheduler.prototype), \"_render\", this).call(this);\n    }\n  }, {\n    key: \"_renderHeader\",\n    value: function _renderHeader() {\n      var $header = $(\"<div>\").appendTo(this.$element());\n      this._header = this._createComponent($header, Header, this._headerConfig());\n    }\n  }, {\n    key: \"_headerConfig\",\n    value: function _headerConfig() {\n      var _this8 = this;\n\n      var currentViewOptions = this._getCurrentViewOptions();\n\n      var countConfig = this._getViewCountConfig();\n\n      var result = extend({\n        isAdaptive: this.option(\"adaptivityEnabled\"),\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        currentView: this._currentView,\n        tabIndex: this.option(\"tabIndex\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        width: this.option(\"width\"),\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        useDropDownViewSwitcher: this.option(\"useDropDownViewSwitcher\"),\n        _dropDownButtonIcon: this.option(\"_dropDownButtonIcon\"),\n        customizeDateNavigatorText: this.option(\"customizeDateNavigatorText\")\n      }, currentViewOptions);\n      result.observer = this;\n      result.intervalCount = countConfig.intervalCount;\n      result.views = this.option(\"views\");\n      result.min = new Date(this._dateOption(\"min\"));\n      result.max = new Date(this._dateOption(\"max\"));\n      result.currentDate = dateUtils.trimTime(new Date(this._dateOption(\"currentDate\")));\n\n      result.todayDate = function () {\n        var result = _this8.timeZoneCalculator.createDate(new Date(), {\n          path: \"toGrid\"\n        });\n\n        return result;\n      };\n\n      return result;\n    }\n  }, {\n    key: \"_appointmentsConfig\",\n    value: function _appointmentsConfig() {\n      var that = this;\n      var config = {\n        observer: this,\n        onItemRendered: this._getAppointmentRenderedAction(),\n        onItemClick: this._createActionByOption(\"onAppointmentClick\"),\n        onItemContextMenu: this._createActionByOption(\"onAppointmentContextMenu\"),\n        onAppointmentDblClick: this._createActionByOption(\"onAppointmentDblClick\"),\n        tabIndex: this.option(\"tabIndex\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        allowDrag: this._allowDragging(),\n        allowDelete: this._editing.allowUpdating && this._editing.allowDeleting,\n        allowResize: this._allowResizing(),\n        allowAllDayResize: this._allowAllDayResizing(),\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        currentView: this.option(\"currentView\"),\n        onContentReady: function onContentReady() {\n          that._workSpace && that._workSpace.option(\"allDayExpanded\", that._isAllDayExpanded(that.getFilteredItems()));\n        }\n      };\n      return config;\n    }\n  }, {\n    key: \"getCollectorOffset\",\n    value: function getCollectorOffset() {\n      if (this._workSpace.needApplyCollectorOffset() && !this.option(\"adaptivityEnabled\")) {\n        return this.option(\"_collectorOffset\");\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"getAppointmentDurationInMinutes\",\n    value: function getAppointmentDurationInMinutes() {\n      return this._getCurrentViewOption(\"cellDuration\");\n    }\n  }, {\n    key: \"_processCurrentView\",\n    value: function _processCurrentView() {\n      var views = this.option(\"views\");\n      var currentView = this.option(\"currentView\");\n      var that = this;\n      this._currentView = null;\n      each(views, function (_, view) {\n        var isViewIsObject = isObject(view);\n        var viewName = isViewIsObject ? view.name : view;\n        var viewType = view.type;\n\n        if (currentView === viewName || currentView === viewType) {\n          that._currentView = view;\n          return false;\n        }\n      });\n\n      if (!this._currentView) {\n        var isCurrentViewValid = !!VIEWS_CONFIG[currentView];\n\n        if (isCurrentViewValid) {\n          this._currentView = currentView;\n        } else {\n          this._currentView = views[0];\n        }\n      }\n    }\n  }, {\n    key: \"_validateCellDuration\",\n    value: function _validateCellDuration() {\n      var endDayHour = this._getCurrentViewOption(\"endDayHour\");\n\n      var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n      var cellDuration = this._getCurrentViewOption(\"cellDuration\");\n\n      if ((endDayHour - startDayHour) * MINUTES_IN_HOUR % cellDuration !== 0) {\n        errors.log(\"W1015\");\n      }\n    }\n  }, {\n    key: \"_getCurrentViewType\",\n    value: function _getCurrentViewType() {\n      return this._currentView.type || this._currentView;\n    }\n  }, {\n    key: \"_getAppointmentsRenderingStrategy\",\n    value: function _getAppointmentsRenderingStrategy() {\n      return VIEWS_CONFIG[this._getCurrentViewType()].renderingStrategy;\n    }\n  }, {\n    key: \"_renderWorkSpace\",\n    value: function _renderWorkSpace(groups) {\n      this._readyToRenderAppointments && this._toggleSmallClass();\n      var $workSpace = $(\"<div>\").appendTo(this.$element());\n\n      var countConfig = this._getViewCountConfig();\n\n      var workSpaceComponent = VIEWS_CONFIG[this._getCurrentViewType()].workSpace;\n\n      var workSpaceConfig = this._workSpaceConfig(groups, countConfig);\n\n      this._workSpace = this._createComponent($workSpace, workSpaceComponent, workSpaceConfig);\n      this._allowDragging() && this._workSpace.initDragBehavior(this, this._all);\n\n      this._workSpace._attachTablesEvents();\n\n      this._workSpace.getWorkArea().append(this._appointments.$element());\n\n      this._recalculateWorkspace();\n\n      countConfig.startDate && this._header && this._header.option(\"currentDate\", this._workSpace._getHeaderDate());\n\n      this._appointments.option(\"_collectorOffset\", this.getCollectorOffset());\n    }\n  }, {\n    key: \"_getViewCountConfig\",\n    value: function _getViewCountConfig() {\n      var currentView = this.option(\"currentView\");\n\n      var view = this._getViewByName(currentView);\n\n      var viewCount = view && view.intervalCount || 1;\n      var startDate = view && view.startDate || null;\n      return {\n        intervalCount: viewCount,\n        startDate: startDate\n      };\n    }\n  }, {\n    key: \"_getViewByName\",\n    value: function _getViewByName(name) {\n      var views = this.option(\"views\");\n\n      for (var i = 0; i < views.length; i++) {\n        if (views[i].name === name || views[i].type === name || views[i] === name) {\n          return views[i];\n        }\n      }\n    }\n  }, {\n    key: \"_recalculateWorkspace\",\n    value: function _recalculateWorkspace() {\n      var _this9 = this;\n\n      this._workSpaceRecalculation = new Deferred();\n\n      this._waitAsyncTemplate(function () {\n        triggerResizeEvent(_this9._workSpace.$element());\n\n        _this9._workSpace._refreshDateTimeIndication();\n      });\n    }\n  }, {\n    key: \"_workSpaceConfig\",\n    value: function _workSpaceConfig(groups, countConfig) {\n      var _this10 = this;\n\n      var _currentViewOptions$s;\n\n      var currentViewOptions = this._getCurrentViewOptions();\n\n      var scrolling = this.option(\"scrolling\");\n      var isVirtualScrolling = \"virtual\" === scrolling.mode || \"virtual\" === (null === (_currentViewOptions$s = currentViewOptions.scrolling) || void 0 === _currentViewOptions$s ? void 0 : _currentViewOptions$s.mode);\n      var horizontalVirtualScrollingAllowed = isVirtualScrolling && (!isDefined(scrolling.orientation) || [\"horizontal\", \"both\"].filter(function (item) {\n        var _currentViewOptions$s2;\n\n        return scrolling.orientation === item || (null === (_currentViewOptions$s2 = currentViewOptions.scrolling) || void 0 === _currentViewOptions$s2 ? void 0 : _currentViewOptions$s2.orientation) === item;\n      }).length > 0);\n      var crossScrollingEnabled = this.option(\"crossScrollingEnabled\") || horizontalVirtualScrollingAllowed;\n      var result = extend({\n        noDataText: this.option(\"noDataText\"),\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        startDayHour: this.option(\"startDayHour\"),\n        endDayHour: this.option(\"endDayHour\"),\n        tabIndex: this.option(\"tabIndex\"),\n        accessKey: this.option(\"accessKey\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        cellDuration: this.option(\"cellDuration\"),\n        showAllDayPanel: this.option(\"showAllDayPanel\"),\n        showCurrentTimeIndicator: this.option(\"showCurrentTimeIndicator\"),\n        indicatorTime: this.option(\"indicatorTime\"),\n        indicatorUpdateInterval: this.option(\"indicatorUpdateInterval\"),\n        shadeUntilCurrentTime: this.option(\"shadeUntilCurrentTime\"),\n        allDayExpanded: this._appointments.option(\"items\"),\n        crossScrollingEnabled: crossScrollingEnabled,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        timeCellTemplate: this.option(\"timeCellTemplate\"),\n        resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n        dateCellTemplate: this.option(\"dateCellTemplate\"),\n        allowMultipleCellSelection: this.option(\"allowMultipleCellSelection\"),\n        selectedCellData: this.option(\"selectedCellData\"),\n        onSelectionChanged: function onSelectionChanged(args) {\n          _this10.option(\"selectedCellData\", args.selectedCellData);\n        },\n        groupByDate: this._getCurrentViewOption(\"groupByDate\"),\n        scrolling: scrolling,\n        draggingMode: this.option(\"_draggingMode\"),\n        renovateRender: this._isRenovatedRender(isVirtualScrolling)\n      }, currentViewOptions);\n      result.observer = this;\n      result.intervalCount = countConfig.intervalCount;\n      result.startDate = countConfig.startDate;\n      result.groups = groups;\n      result.onCellClick = this._createActionByOption(\"onCellClick\");\n      result.onCellContextMenu = this._createActionByOption(\"onCellContextMenu\");\n      result.min = new Date(this._dateOption(\"min\"));\n      result.max = new Date(this._dateOption(\"max\"));\n      result.currentDate = dateUtils.trimTime(new Date(this._dateOption(\"currentDate\")));\n      result.hoursInterval = result.cellDuration / 60;\n      result.allDayExpanded = this._isAllDayExpanded(this.getFilteredItems());\n      result.dataCellTemplate = result.dataCellTemplate ? this._getTemplate(result.dataCellTemplate) : null;\n      result.timeCellTemplate = result.timeCellTemplate ? this._getTemplate(result.timeCellTemplate) : null;\n      result.resourceCellTemplate = result.resourceCellTemplate ? this._getTemplate(result.resourceCellTemplate) : null;\n      result.dateCellTemplate = result.dateCellTemplate ? this._getTemplate(result.dateCellTemplate) : null;\n      return result;\n    }\n  }, {\n    key: \"_isRenovatedRender\",\n    value: function _isRenovatedRender(isVirtualScrolling) {\n      return this.option(\"renovateRender\") && hasWindow() || isVirtualScrolling;\n    }\n  }, {\n    key: \"_waitAsyncTemplate\",\n    value: function _waitAsyncTemplate(callback) {\n      if (this._options.silent(\"templatesRenderAsynchronously\")) {\n        var timer = setTimeout(function () {\n          callback();\n          clearTimeout(timer);\n        });\n\n        this._asyncTemplatesTimers.push(timer);\n      } else {\n        callback();\n      }\n    }\n  }, {\n    key: \"_getCurrentViewOptions\",\n    value: function _getCurrentViewOptions() {\n      return this._currentView;\n    }\n  }, {\n    key: \"_getCurrentViewOption\",\n    value: function _getCurrentViewOption(optionName) {\n      var currentViewOptions = this._getCurrentViewOptions();\n\n      if (currentViewOptions && void 0 !== currentViewOptions[optionName]) {\n        return currentViewOptions[optionName];\n      }\n\n      return this.option(optionName);\n    }\n  }, {\n    key: \"_getAppointmentTemplate\",\n    value: function _getAppointmentTemplate(optionName) {\n      var currentViewOptions = this._getCurrentViewOptions();\n\n      if (currentViewOptions && currentViewOptions[optionName]) {\n        return this._getTemplate(currentViewOptions[optionName]);\n      }\n\n      return this._getTemplateByOption(optionName);\n    }\n  }, {\n    key: \"_updateOption\",\n    value: function _updateOption(viewName, optionName, value) {\n      var currentViewOptions = this._getCurrentViewOptions();\n\n      if (!currentViewOptions || !isDefined(currentViewOptions[optionName])) {\n        this[\"_\" + viewName].option(optionName, value);\n      }\n    }\n  }, {\n    key: \"_refreshWorkSpace\",\n    value: function _refreshWorkSpace(groups) {\n      var _this11 = this;\n\n      this._cleanWorkspace();\n\n      delete this._workSpace;\n\n      this._renderWorkSpace(groups);\n\n      if (this._readyToRenderAppointments) {\n        this._appointments.option({\n          fixedContainer: this._workSpace.getFixedContainer(),\n          allDayContainer: this._workSpace.getAllDayContainer()\n        });\n\n        this._waitAsyncTemplate(function () {\n          return _this11._workSpaceRecalculation.resolve();\n        });\n      }\n    }\n  }, {\n    key: \"_cleanWorkspace\",\n    value: function _cleanWorkspace() {\n      this._appointments.$element().detach();\n\n      this._workSpace._dispose();\n\n      this._workSpace.$element().remove();\n\n      this.option(\"selectedCellData\", []);\n    }\n  }, {\n    key: \"getWorkSpaceScrollable\",\n    value: function getWorkSpaceScrollable() {\n      return this._workSpace.getScrollable();\n    }\n  }, {\n    key: \"getWorkSpaceScrollableScrollTop\",\n    value: function getWorkSpaceScrollableScrollTop(allDay) {\n      return this._workSpace.getGroupedScrollableScrollTop(allDay);\n    }\n  }, {\n    key: \"getWorkSpaceScrollableScrollLeft\",\n    value: function getWorkSpaceScrollableScrollLeft() {\n      return this._workSpace.getScrollableScrollLeft();\n    }\n  }, {\n    key: \"getWorkSpaceScrollableContainer\",\n    value: function getWorkSpaceScrollableContainer() {\n      return this._workSpace.getScrollableContainer();\n    }\n  }, {\n    key: \"getWorkSpaceAllDayHeight\",\n    value: function getWorkSpaceAllDayHeight() {\n      return this._workSpace.getAllDayHeight();\n    }\n  }, {\n    key: \"getWorkSpaceAllDayOffset\",\n    value: function getWorkSpaceAllDayOffset() {\n      return this._workSpace.getAllDayOffset();\n    }\n  }, {\n    key: \"getWorkSpaceHeaderPanelHeight\",\n    value: function getWorkSpaceHeaderPanelHeight() {\n      return this._workSpace.getHeaderPanelHeight();\n    }\n  }, {\n    key: \"getWorkSpaceDateTableOffset\",\n    value: function getWorkSpaceDateTableOffset() {\n      return !this.option(\"crossScrollingEnabled\") || this.option(\"rtlEnabled\") ? this._workSpace.getWorkSpaceLeftOffset() : 0;\n    }\n  }, {\n    key: \"getWorkSpace\",\n    value: function getWorkSpace() {\n      return this._workSpace;\n    }\n  }, {\n    key: \"getAppointmentModel\",\n    value: function getAppointmentModel() {\n      return this._appointmentModel;\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader() {\n      return this._header;\n    }\n  }, {\n    key: \"getMaxAppointmentsPerCell\",\n    value: function getMaxAppointmentsPerCell() {\n      return this._getCurrentViewOption(\"maxAppointmentsPerCell\");\n    }\n  }, {\n    key: \"_cleanPopup\",\n    value: function _cleanPopup() {\n      this._appointmentPopup && this._appointmentPopup.dispose();\n    }\n  }, {\n    key: \"_checkRecurringAppointment\",\n    value: function _checkRecurringAppointment(targetAppointment, singleAppointment, exceptionDate, callback, isDeleted, isPopupEditing, dragEvent) {\n      var _this12 = this;\n\n      delete this._updatedRecAppointment;\n      var recurrenceRule = this.fire(\"getField\", \"recurrenceRule\", targetAppointment);\n\n      if (!getRecurrenceProcessor().evalRecurrenceRule(recurrenceRule).isValid || !this._editing.allowUpdating) {\n        callback();\n        return;\n      }\n\n      var editMode = this.option(\"recurrenceEditMode\");\n\n      switch (editMode) {\n        case \"series\":\n          callback();\n          break;\n\n        case \"occurrence\":\n          this._excludeAppointmentFromSeries(targetAppointment, singleAppointment, exceptionDate, isDeleted, isPopupEditing, dragEvent);\n\n          break;\n\n        default:\n          if (dragEvent) {\n            dragEvent.cancel = new Deferred();\n          }\n\n          this._showRecurrenceChangeConfirm(isDeleted).done(function (editingMode) {\n            editingMode === RECURRENCE_EDITING_MODE.SERIES && callback();\n            editingMode === RECURRENCE_EDITING_MODE.OCCURENCE && _this12._excludeAppointmentFromSeries(targetAppointment, singleAppointment, exceptionDate, isDeleted, isPopupEditing, dragEvent);\n          }).fail(function () {\n            return _this12._appointments.moveAppointmentBack(dragEvent);\n          });\n\n      }\n    }\n  }, {\n    key: \"_excludeAppointmentFromSeries\",\n    value: function _excludeAppointmentFromSeries(rawAppointment, newRawAppointment, exceptionDate, isDeleted, isPopupEditing, dragEvent) {\n      var _this13 = this;\n\n      var appointment = this.createAppointmentAdapter(_extends({}, rawAppointment));\n      var newAppointment = this.createAppointmentAdapter(newRawAppointment);\n      newAppointment.recurrenceRule = \"\";\n      newAppointment.recurrenceException = \"\";\n      var canCreateNewAppointment = !isDeleted && !isPopupEditing;\n\n      if (canCreateNewAppointment) {\n        var keyPropertyName = this._appointmentModel.keyName;\n        delete newRawAppointment[keyPropertyName];\n        this.addAppointment(newRawAppointment);\n      }\n\n      appointment.recurrenceException = this._createRecurrenceException(appointment, exceptionDate);\n\n      if (isPopupEditing) {\n        this._updatedRecAppointment = appointment.source();\n\n        this._appointmentPopup.show(newRawAppointment, true);\n\n        this._editAppointmentData = rawAppointment;\n      } else {\n        this._updateAppointment(rawAppointment, appointment.source(), function () {\n          _this13._appointments.moveAppointmentBack(dragEvent);\n        }, dragEvent);\n      }\n    }\n  }, {\n    key: \"_createRecurrenceException\",\n    value: function _createRecurrenceException(appointment, exceptionDate) {\n      var result = [];\n\n      if (appointment.recurrenceException) {\n        result.push(appointment.recurrenceException);\n      }\n\n      result.push(this._getSerializedDate(exceptionDate, appointment.startDate, appointment.allDay));\n      return result.join();\n    }\n  }, {\n    key: \"_getSerializedDate\",\n    value: function _getSerializedDate(date, startDate, isAllDay) {\n      isAllDay && date.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());\n      return dateSerialization.serializeDate(date, UTC_FULL_DATE_FORMAT);\n    }\n  }, {\n    key: \"_showRecurrenceChangeConfirm\",\n    value: function _showRecurrenceChangeConfirm(isDeleted) {\n      var message = messageLocalization.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteMessage\" : \"dxScheduler-confirmRecurrenceEditMessage\");\n      var seriesText = messageLocalization.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteSeries\" : \"dxScheduler-confirmRecurrenceEditSeries\");\n      var occurrenceText = messageLocalization.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteOccurrence\" : \"dxScheduler-confirmRecurrenceEditOccurrence\");\n      this._recurrenceDialog = customDialog({\n        messageHtml: message,\n        showCloseButton: true,\n        showTitle: true,\n        buttons: [{\n          text: seriesText,\n          onClick: function onClick() {\n            return RECURRENCE_EDITING_MODE.SERIES;\n          }\n        }, {\n          text: occurrenceText,\n          onClick: function onClick() {\n            return RECURRENCE_EDITING_MODE.OCCURENCE;\n          }\n        }],\n        popupOptions: {\n          onHidden: function onHidden(e) {\n            e.component.$element().remove();\n          }\n        }\n      });\n      return this._recurrenceDialog.show();\n    }\n  }, {\n    key: \"_getUpdatedData\",\n    value: function _getUpdatedData(rawAppointment) {\n      var _this14 = this;\n\n      var getConvertedFromGrid = function getConvertedFromGrid(date) {\n        return date ? _this14.timeZoneCalculator.createDate(date, {\n          path: \"fromGrid\"\n        }) : void 0;\n      };\n\n      var isValidDate = function isValidDate(date) {\n        return !isNaN(new Date(date).getTime());\n      };\n\n      var targetCell = this.getTargetCellData();\n      var appointment = this.createAppointmentAdapter(rawAppointment);\n      var cellStartDate = getConvertedFromGrid(targetCell.startDate);\n      var cellEndDate = getConvertedFromGrid(targetCell.endDate);\n      var appointmentStartDate = new Date(appointment.startDate);\n      var appointmentEndDate = new Date(appointment.endDate);\n      var resultedStartDate = cellStartDate || appointmentStartDate;\n\n      if (!isValidDate(appointmentStartDate)) {\n        appointmentStartDate = resultedStartDate;\n      }\n\n      if (!isValidDate(appointmentEndDate)) {\n        appointmentEndDate = cellEndDate;\n      }\n\n      var duration = appointmentEndDate.getTime() - appointmentStartDate.getTime();\n      var isKeepAppointmentHours = this._workSpace.keepOriginalHours() && isValidDate(appointment.startDate) && isValidDate(cellStartDate);\n\n      if (isKeepAppointmentHours) {\n        var trimTime = dateUtils.trimTime;\n        var startDate = this.timeZoneCalculator.createDate(appointment.startDate, {\n          path: \"toGrid\"\n        });\n        var timeInMs = startDate.getTime() - trimTime(startDate).getTime();\n        resultedStartDate = new Date(trimTime(targetCell.startDate).getTime() + timeInMs);\n        resultedStartDate = this.timeZoneCalculator.createDate(resultedStartDate, {\n          path: \"fromGrid\"\n        });\n      }\n\n      var result = this.createAppointmentAdapter({});\n\n      if (void 0 !== targetCell.allDay) {\n        result.allDay = targetCell.allDay;\n      }\n\n      result.startDate = resultedStartDate;\n      var resultedEndDate = new Date(resultedStartDate.getTime() + duration);\n\n      if (this.appointmentTakesAllDay(rawAppointment) && !result.allDay && this._workSpace.supportAllDayRow()) {\n        resultedEndDate = this._workSpace.calculateEndDate(resultedStartDate);\n      }\n\n      if (appointment.allDay && !this._workSpace.supportAllDayRow() && !this._workSpace.keepOriginalHours()) {\n        var dateCopy = new Date(resultedStartDate);\n        dateCopy.setHours(0);\n        resultedEndDate = new Date(dateCopy.getTime() + duration);\n\n        if (0 !== resultedEndDate.getHours()) {\n          resultedEndDate.setHours(this._getCurrentViewOption(\"endDayHour\"));\n        }\n      }\n\n      var timeZoneOffset = timeZoneUtils.getTimezoneOffsetChangeInMs(appointmentStartDate, appointmentEndDate, resultedStartDate, resultedEndDate);\n      result.endDate = new Date(resultedEndDate.getTime() - timeZoneOffset);\n      var rawResult = result.source();\n\n      this._resourcesManager.setResourcesToItem(rawResult, targetCell.groups);\n\n      return rawResult;\n    }\n  }, {\n    key: \"getTargetedAppointment\",\n    value: function getTargetedAppointment(appointment, element) {\n      var settings = utils.dataAccessors.getAppointmentSettings(element);\n      var info = utils.dataAccessors.getAppointmentInfo(element);\n      var appointmentIndex = $(element).data(this._appointments._itemIndexKey());\n      var adapter = this.createAppointmentAdapter(appointment);\n      var targetedAdapter = adapter.clone();\n\n      if (this._isAgenda() && adapter.isRecurrent) {\n        var getStartDate = this.getRenderingStrategyInstance().getAppointmentDataCalculator();\n        var newStartDate = getStartDate($(element), adapter.startDate).startDate;\n        targetedAdapter.startDate = newStartDate;\n        targetedAdapter.endDate = new Date(newStartDate.getTime() + adapter.duration);\n      } else if (settings) {\n        targetedAdapter.startDate = info ? info.sourceAppointment.startDate : adapter.startDate;\n        targetedAdapter.endDate = info ? info.sourceAppointment.endDate : adapter.endDate;\n      }\n\n      var rawTargetedAppointment = targetedAdapter.source();\n\n      if (element) {\n        this.setTargetedAppointmentResources(rawTargetedAppointment, element, appointmentIndex);\n      }\n\n      return rawTargetedAppointment;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(subject, action) {\n      this._subscribes[subject] = subscribes[subject] = action;\n    }\n  }, {\n    key: \"fire\",\n    value: function fire(subject) {\n      var callback = this._subscribes[subject];\n      var args = Array.prototype.slice.call(arguments);\n\n      if (!isFunction(callback)) {\n        throw errors.Error(\"E1031\", subject);\n      }\n\n      return callback.apply(this, args.slice(1));\n    }\n  }, {\n    key: \"getTargetCellData\",\n    value: function getTargetCellData() {\n      return this._workSpace.getDataByDroppableCell();\n    }\n  }, {\n    key: \"_updateAppointment\",\n    value: function _updateAppointment(target, rawAppointment, onUpdatePrevented, dragEvent) {\n      var updatingOptions = {\n        newData: rawAppointment,\n        oldData: extend({}, target),\n        cancel: false\n      };\n\n      var performFailAction = function (err) {\n        if (onUpdatePrevented) {\n          onUpdatePrevented.call(this);\n        }\n\n        if (err && \"Error\" === err.name) {\n          throw err;\n        }\n      }.bind(this);\n\n      this._actions[StoreEventNames.UPDATING](updatingOptions);\n\n      if (dragEvent && !isDeferred(dragEvent.cancel)) {\n        dragEvent.cancel = new Deferred();\n      }\n\n      return this._processActionResult(updatingOptions, function (canceled) {\n        var _this15 = this;\n\n        var deferred = new Deferred();\n\n        if (!canceled) {\n          this._expandAllDayPanel(rawAppointment);\n\n          try {\n            deferred = this._appointmentModel.update(target, rawAppointment).done(function () {\n              dragEvent && dragEvent.cancel.resolve(false);\n            }).always(function (storeAppointment) {\n              return _this15._onDataPromiseCompleted(StoreEventNames.UPDATED, storeAppointment);\n            }).fail(function () {\n              return performFailAction();\n            });\n          } catch (err) {\n            performFailAction(err);\n            deferred.resolve();\n          }\n        } else {\n          performFailAction();\n          deferred.resolve();\n        }\n\n        return deferred.promise();\n      });\n    }\n  }, {\n    key: \"_processActionResult\",\n    value: function _processActionResult(actionOptions, callback) {\n      var _this16 = this;\n\n      var deferred = new Deferred();\n\n      var resolveCallback = function resolveCallback(callbackResult) {\n        when(fromPromise(callbackResult)).always(deferred.resolve);\n      };\n\n      if (isPromise(actionOptions.cancel)) {\n        when(fromPromise(actionOptions.cancel)).always(function (cancel) {\n          if (!isDefined(cancel)) {\n            cancel = \"rejected\" === actionOptions.cancel.state();\n          }\n\n          resolveCallback(callback.call(_this16, cancel));\n        });\n      } else {\n        resolveCallback(callback.call(this, actionOptions.cancel));\n      }\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"_expandAllDayPanel\",\n    value: function _expandAllDayPanel(appointment) {\n      if (!this._isAllDayExpanded(this.getFilteredItems()) && this.appointmentTakesAllDay(appointment)) {\n        this._workSpace.option(\"allDayExpanded\", true);\n      }\n    }\n  }, {\n    key: \"_onDataPromiseCompleted\",\n    value: function _onDataPromiseCompleted(handlerName, storeAppointment, appointment) {\n      var args = {\n        appointmentData: appointment || storeAppointment\n      };\n\n      if (storeAppointment instanceof Error) {\n        args.error = storeAppointment;\n      } else {\n        this._appointmentPopup.isVisible() && this._appointmentPopup.hide();\n      }\n\n      this._actions[handlerName](args);\n\n      this._fireContentReadyAction();\n    }\n  }, {\n    key: \"getAppointmentPopup\",\n    value: function getAppointmentPopup() {\n      return this._appointmentPopup.getPopup();\n    }\n  }, {\n    key: \"getUpdatedAppointment\",\n    value: function getUpdatedAppointment() {\n      return this._appointmentModel.getUpdatedAppointment();\n    }\n  }, {\n    key: \"getUpdatedAppointmentKeys\",\n    value: function getUpdatedAppointmentKeys() {\n      return this._appointmentModel.getUpdatedAppointmentKeys();\n    }\n  }, {\n    key: \"getAppointmentsInstance\",\n    value: function getAppointmentsInstance() {\n      return this._appointments;\n    }\n  }, {\n    key: \"getResourceManager\",\n    value: function getResourceManager() {\n      return this._resourcesManager;\n    }\n  }, {\n    key: \"getLayoutManager\",\n    value: function getLayoutManager() {\n      return this._layoutManager;\n    }\n  }, {\n    key: \"getRenderingStrategyInstance\",\n    value: function getRenderingStrategyInstance() {\n      return this._layoutManager.getRenderingStrategyInstance();\n    }\n  }, {\n    key: \"getFilteredItems\",\n    value: function getFilteredItems() {\n      return this._filteredItems;\n    }\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      return this._actions;\n    }\n  }, {\n    key: \"appointmentTakesAllDay\",\n    value: function appointmentTakesAllDay(appointment) {\n      return this._appointmentModel.appointmentTakesAllDay(appointment, this._getCurrentViewOption(\"startDayHour\"), this._getCurrentViewOption(\"endDayHour\"));\n    }\n  }, {\n    key: \"_getRecurrenceException\",\n    value: function _getRecurrenceException(rawAppointment) {\n      var appointment = this.createAppointmentAdapter(rawAppointment);\n      var recurrenceException = appointment.recurrenceException;\n\n      if (recurrenceException) {\n        var exceptions = recurrenceException.split(\",\");\n\n        for (var i = 0; i < exceptions.length; i++) {\n          exceptions[i] = this._convertRecurrenceException(exceptions[i], appointment.startDate);\n        }\n\n        return exceptions.join();\n      }\n\n      return recurrenceException;\n    }\n  }, {\n    key: \"_convertRecurrenceException\",\n    value: function _convertRecurrenceException(exceptionString, startDate) {\n      var _this17 = this;\n\n      exceptionString = exceptionString.replace(/\\s/g, \"\");\n\n      var getConvertedToTimeZone = function getConvertedToTimeZone(date) {\n        return _this17.timeZoneCalculator.createDate(date, {\n          path: \"toGrid\"\n        });\n      };\n\n      var exceptionDate = dateSerialization.deserializeDate(exceptionString);\n      var convertedStartDate = getConvertedToTimeZone(startDate);\n      var convertedExceptionDate = getConvertedToTimeZone(exceptionDate);\n      convertedExceptionDate = timeZoneUtils.correctRecurrenceExceptionByTimezone(convertedExceptionDate, convertedStartDate, this.option(\"timeZone\"));\n      exceptionString = dateSerialization.serializeDate(convertedExceptionDate, FULL_DATE_FORMAT);\n      return exceptionString;\n    }\n  }, {\n    key: \"dayHasAppointment\",\n    value: function dayHasAppointment(day, rawAppointment, trimTime) {\n      var _this18 = this;\n\n      var getConvertedToTimeZone = function getConvertedToTimeZone(date) {\n        return _this18.timeZoneCalculator.createDate(date, {\n          path: \"toGrid\"\n        });\n      };\n\n      var appointment = this.createAppointmentAdapter(rawAppointment);\n      var startDate = new Date(appointment.startDate);\n      var endDate = new Date(appointment.endDate);\n      startDate = getConvertedToTimeZone(startDate);\n      endDate = getConvertedToTimeZone(endDate);\n\n      if (day.getTime() === endDate.getTime()) {\n        return startDate.getTime() === endDate.getTime();\n      }\n\n      if (trimTime) {\n        day = dateUtils.trimTime(day);\n        startDate = dateUtils.trimTime(startDate);\n        endDate = dateUtils.trimTime(endDate);\n      }\n\n      var dayTimeStamp = day.getTime();\n      var startDateTimeStamp = startDate.getTime();\n      var endDateTimeStamp = endDate.getTime();\n      return inArray(dayTimeStamp, [startDateTimeStamp, endDateTimeStamp]) > -1 || startDateTimeStamp < dayTimeStamp && endDateTimeStamp > dayTimeStamp;\n    }\n  }, {\n    key: \"setTargetedAppointmentResources\",\n    value: function setTargetedAppointmentResources(rawAppointment, element, appointmentIndex) {\n      var groups = this._getCurrentViewOption(\"groups\");\n\n      if (null !== groups && void 0 !== groups && groups.length) {\n        var resourcesSetter = this._resourcesManager._dataAccessors.setter;\n        var workSpace = this._workSpace;\n        var getGroups;\n        var setResourceCallback;\n\n        if (this._isAgenda()) {\n          getGroups = function getGroups() {\n            var apptSettings = this.getLayoutManager()._positionMap[appointmentIndex];\n\n            return workSpace._getCellGroups(apptSettings[0].groupIndex);\n          };\n\n          setResourceCallback = function setResourceCallback(_, group) {\n            resourcesSetter[group.name](rawAppointment, group.id);\n          };\n        } else {\n          getGroups = function getGroups() {\n            var setting = utils.dataAccessors.getAppointmentSettings(element) || {};\n            return workSpace.getCellDataByCoordinates({\n              left: setting.left,\n              top: setting.top\n            }).groups;\n          };\n\n          setResourceCallback = function setResourceCallback(field, value) {\n            resourcesSetter[field](rawAppointment, value);\n          };\n        }\n\n        each(getGroups.call(this), setResourceCallback);\n      }\n    }\n  }, {\n    key: \"getStartViewDate\",\n    value: function getStartViewDate() {\n      return this._workSpace.getStartViewDate();\n    }\n  }, {\n    key: \"getEndViewDate\",\n    value: function getEndViewDate() {\n      return this._workSpace.getEndViewDate();\n    }\n  }, {\n    key: \"showAppointmentPopup\",\n    value: function showAppointmentPopup(rawAppointment, createNewAppointment, rawTargetedAppointment) {\n      var _this19 = this;\n\n      var appointment = this.createAppointmentAdapter(rawTargetedAppointment || rawAppointment);\n      var newTargetedAppointment = extend({}, rawAppointment, rawTargetedAppointment);\n\n      this._checkRecurringAppointment(rawAppointment, newTargetedAppointment, appointment.startDate, function () {\n        if (createNewAppointment || isEmptyObject(rawAppointment)) {\n          delete _this19._editAppointmentData;\n          _this19._editing.allowAdding && _this19._appointmentPopup.show(rawAppointment, true);\n        } else {\n          _this19._editAppointmentData = rawAppointment;\n\n          _this19._appointmentPopup.show(rawAppointment, _this19._editing.allowUpdating);\n        }\n      }, false, true);\n    }\n  }, {\n    key: \"hideAppointmentPopup\",\n    value: function hideAppointmentPopup(saveChanges) {\n      if (this._appointmentPopup && this._appointmentPopup.isVisible()) {\n        saveChanges && this._appointmentPopup.saveChanges();\n\n        this._appointmentPopup.hide();\n      }\n    }\n  }, {\n    key: \"showAppointmentTooltip\",\n    value: function showAppointmentTooltip(appointment, element, targetedAppointment) {\n      if (appointment) {\n        var settings = utils.dataAccessors.getAppointmentSettings(element);\n        var deferredColor = this.fire(\"getAppointmentColor\", {\n          itemData: targetedAppointment || appointment,\n          groupIndex: null === settings || void 0 === settings ? void 0 : settings.groupIndex\n        });\n        var info = new AppointmentTooltipInfo(appointment, targetedAppointment, deferredColor);\n        this.showAppointmentTooltipCore(element, [info]);\n      }\n    }\n  }, {\n    key: \"showAppointmentTooltipCore\",\n    value: function showAppointmentTooltipCore(target, data, options) {\n      if (this._appointmentTooltip.isAlreadyShown(target)) {\n        this.hideAppointmentTooltip();\n      } else {\n        this._appointmentTooltip.show(target, data, extend(this._getExtraAppointmentTooltipOptions(), options));\n      }\n    }\n  }, {\n    key: \"hideAppointmentTooltip\",\n    value: function hideAppointmentTooltip() {\n      this._appointmentTooltip && this._appointmentTooltip.hide();\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime(hours, minutes, date) {\n      this._workSpace.scrollToTime(hours, minutes, date);\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(date, groups, allDay) {\n      this._workSpace.scrollTo(date, groups, allDay);\n    }\n  }, {\n    key: \"_isHorizontalVirtualScrolling\",\n    value: function _isHorizontalVirtualScrolling() {\n      var scrolling = this.option(\"scrolling\");\n      var orientation = scrolling.orientation,\n          mode = scrolling.mode;\n      var isVirtualScrolling = \"virtual\" === mode;\n      return isVirtualScrolling && (\"horizontal\" === orientation || \"both\" === orientation);\n    }\n  }, {\n    key: \"addAppointment\",\n    value: function addAppointment(rawAppointment) {\n      var _this20 = this;\n\n      var appointment = this.createAppointmentAdapter(rawAppointment);\n      appointment.text = appointment.text || \"\";\n      var serializedAppointment = appointment.source(true);\n      var addingOptions = {\n        appointmentData: serializedAppointment,\n        cancel: false\n      };\n\n      this._actions[StoreEventNames.ADDING](addingOptions);\n\n      return this._processActionResult(addingOptions, function (canceled) {\n        if (canceled) {\n          return new Deferred().resolve();\n        }\n\n        _this20._expandAllDayPanel(serializedAppointment);\n\n        return _this20._appointmentModel.add(serializedAppointment).always(function (storeAppointment) {\n          return _this20._onDataPromiseCompleted(StoreEventNames.ADDED, storeAppointment);\n        });\n      });\n    }\n  }, {\n    key: \"updateAppointment\",\n    value: function updateAppointment(target, appointment) {\n      return this._updateAppointment(target, appointment);\n    }\n  }, {\n    key: \"deleteAppointment\",\n    value: function deleteAppointment(rawAppointment) {\n      var deletingOptions = {\n        appointmentData: rawAppointment,\n        cancel: false\n      };\n\n      this._actions[StoreEventNames.DELETING](deletingOptions);\n\n      this._processActionResult(deletingOptions, function (canceled) {\n        var _this21 = this;\n\n        if (!canceled) {\n          this._appointmentModel.remove(rawAppointment).always(function (storeAppointment) {\n            return _this21._onDataPromiseCompleted(StoreEventNames.DELETED, storeAppointment, rawAppointment);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this._editAppointmentData) {\n        this._appointments.focus();\n      } else {\n        this._workSpace.focus();\n      }\n    }\n  }, {\n    key: \"getFirstDayOfWeek\",\n    value: function getFirstDayOfWeek() {\n      return isDefined(this.option(\"firstDayOfWeek\")) ? this.option(\"firstDayOfWeek\") : dateLocalization.firstDayOfWeekIndex();\n    }\n  }, {\n    key: \"createAppointmentAdapter\",\n    value: function createAppointmentAdapter(rawAppointment) {\n      var _this22 = this;\n\n      var options = {\n        getField: function getField(rawAppointment, property) {\n          return _this22.fire(\"getField\", property, rawAppointment);\n        },\n        setField: function setField(rawAppointment, property, value) {\n          return _this22.fire(\"setField\", property, rawAppointment, value);\n        },\n        getTimeZoneCalculator: function getTimeZoneCalculator() {\n          return _this22.timeZoneCalculator;\n        }\n      };\n      return new AppointmentAdapter(rawAppointment, options);\n    }\n  }]);\n\n  return Scheduler;\n}(Widget);\n\nScheduler.include(DataHelperMixin);\nregisterComponent(\"dxScheduler\", Scheduler);\nexport default Scheduler;","map":null,"metadata":{},"sourceType":"module"}