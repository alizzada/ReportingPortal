{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.adaptivity.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport SplitterControl from \"../splitter\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 573;\nvar FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS = \"dx-filemanager-adaptivity-drawer-panel\";\nvar DRAWER_PANEL_CONTENT_INITIAL = \"dx-drawer-panel-content-initial\";\nvar DRAWER_PANEL_CONTENT_ADAPTIVE = \"dx-drawer-panel-content-adaptive\";\n\nvar FileManagerAdaptivityControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerAdaptivityControl, _Widget);\n\n  var _super = _createSuper(FileManagerAdaptivityControl);\n\n  function FileManagerAdaptivityControl() {\n    _classCallCheck(this, FileManagerAdaptivityControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerAdaptivityControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._isInAdaptiveState = false;\n      var $drawer = $(\"<div>\").appendTo(this.$element());\n      $(\"<div>\").addClass(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS).appendTo($drawer);\n      this._drawer = this._createComponent($drawer, Drawer);\n\n      this._drawer.option({\n        opened: true,\n        template: this._createDrawerTemplate.bind(this)\n      });\n\n      $(this._drawer.content()).addClass(DRAWER_PANEL_CONTENT_INITIAL);\n      var $drawerContent = $drawer.find(\".\".concat(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if (isFunction(contentRenderer)) {\n        contentRenderer($drawerContent);\n      }\n\n      this._updateDrawerMaxSize();\n    }\n  }, {\n    key: \"_createDrawerTemplate\",\n    value: function _createDrawerTemplate(container) {\n      this.option(\"drawerTemplate\")(container);\n      this._splitter = this._createComponent(\"<div>\", SplitterControl, {\n        container: this.$element(),\n        leftElement: $(this._drawer.content()),\n        rightElement: $(this._drawer.viewContent()),\n        onApplyPanelSize: this._onApplyPanelSize.bind(this),\n        onActiveStateChanged: this._onActiveStateChanged.bind(this)\n      });\n\n      this._splitter.$element().appendTo(container);\n\n      this._splitter.disableSplitterCalculation(true);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_render\", this).call(this);\n\n      this._checkAdaptiveState();\n    }\n  }, {\n    key: \"_onApplyPanelSize\",\n    value: function _onApplyPanelSize(e) {\n      if (!hasWindow()) {\n        return;\n      }\n\n      if (!this._splitter.isSplitterMoved()) {\n        this._setDrawerWidth(\"\");\n\n        return;\n      }\n\n      $(this._drawer.content()).removeClass(DRAWER_PANEL_CONTENT_INITIAL);\n\n      this._setDrawerWidth(e.leftPanelWidth);\n    }\n  }, {\n    key: \"_onActiveStateChanged\",\n    value: function _onActiveStateChanged(_ref) {\n      var isActive = _ref.isActive;\n\n      this._splitter.disableSplitterCalculation(!isActive);\n\n      !isActive && this._splitter.$element().css(\"left\", \"auto\");\n    }\n  }, {\n    key: \"_setDrawerWidth\",\n    value: function _setDrawerWidth(width) {\n      $(this._drawer.content()).css(\"width\", width);\n\n      this._updateDrawerMaxSize();\n\n      this._drawer.resizeViewContent();\n    }\n  }, {\n    key: \"_updateDrawerMaxSize\",\n    value: function _updateDrawerMaxSize() {\n      this._drawer.option(\"maxSize\", this._drawer.getRealPanelWidth());\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function _checkAdaptiveState() {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (oldState !== this._isInAdaptiveState) {\n        this.toggleDrawer(!this._isInAdaptiveState, true);\n        $(this._drawer.content()).toggleClass(DRAWER_PANEL_CONTENT_ADAPTIVE, this._isInAdaptiveState);\n\n        this._raiseAdaptiveStateChanged(this._isInAdaptiveState);\n      }\n\n      if (this._isInAdaptiveState && this._isDrawerOpened()) {\n        this._updateDrawerMaxSize();\n      }\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function _isSmallScreen() {\n      return $(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_isDrawerOpened\",\n    value: function _isDrawerOpened() {\n      return this._drawer.option(\"opened\");\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onAdaptiveStateChanged: this._createActionByOption(\"onAdaptiveStateChanged\")\n      };\n    }\n  }, {\n    key: \"_raiseAdaptiveStateChanged\",\n    value: function _raiseAdaptiveStateChanged(enabled) {\n      this._actions.onAdaptiveStateChanged({\n        enabled: enabled\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        drawerTemplate: null,\n        contentTemplate: null,\n        onAdaptiveStateChanged: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"drawerTemplate\":\n        case \"contentTemplate\":\n          this.repaint();\n          break;\n\n        case \"onAdaptiveStateChanged\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"isInAdaptiveState\",\n    value: function isInAdaptiveState() {\n      return this._isInAdaptiveState;\n    }\n  }, {\n    key: \"toggleDrawer\",\n    value: function toggleDrawer(showing, skipAnimation) {\n      this._updateDrawerMaxSize();\n\n      this._drawer.option(\"animationEnabled\", !skipAnimation);\n\n      this._drawer.toggle(showing);\n\n      var isSplitterActive = this._isDrawerOpened() && !this.isInAdaptiveState();\n\n      this._splitter.toggleDisabled(!isSplitterActive);\n    }\n  }]);\n\n  return FileManagerAdaptivityControl;\n}(Widget);\n\nexport default FileManagerAdaptivityControl;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.adaptivity.js"],"names":["$","extend","isFunction","getWindow","hasWindow","Widget","Drawer","SplitterControl","window","ADAPTIVE_STATE_SCREEN_WIDTH","FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS","DRAWER_PANEL_CONTENT_INITIAL","DRAWER_PANEL_CONTENT_ADAPTIVE","FileManagerAdaptivityControl","_initActions","_isInAdaptiveState","$drawer","appendTo","$element","addClass","_drawer","_createComponent","option","opened","template","_createDrawerTemplate","bind","content","$drawerContent","find","concat","first","contentRenderer","_updateDrawerMaxSize","container","_splitter","leftElement","rightElement","viewContent","onApplyPanelSize","_onApplyPanelSize","onActiveStateChanged","_onActiveStateChanged","disableSplitterCalculation","_checkAdaptiveState","e","isSplitterMoved","_setDrawerWidth","removeClass","leftPanelWidth","_ref","isActive","css","width","resizeViewContent","getRealPanelWidth","dimension","oldState","_isSmallScreen","toggleDrawer","toggleClass","_raiseAdaptiveStateChanged","_isDrawerOpened","_actions","onAdaptiveStateChanged","_createActionByOption","enabled","drawerTemplate","contentTemplate","args","name","repaint","showing","skipAnimation","toggle","isSplitterActive","isInAdaptiveState","toggleDisabled"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,UADJ,QAEO,uBAFP;AAGA,SACIC,SADJ,EAEIC,SAFJ,QAGO,yBAHP;AAIA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,IAAIC,MAAM,GAAGL,SAAS,EAAtB;AACA,IAAIM,2BAA2B,GAAG,GAAlC;AACA,IAAIC,0CAA0C,GAAG,wCAAjD;AACA,IAAIC,4BAA4B,GAAG,iCAAnC;AACA,IAAIC,6BAA6B,GAAG,kCAApC;;IACMC,4B;;;;;;;;;;;;;WACF,uBAAc;AACV;;AACA,WAAKC,YAAL;;AACA,WAAKC,kBAAL,GAA0B,KAA1B;AACA,UAAIC,OAAO,GAAGhB,CAAC,CAAC,OAAD,CAAD,CAAWiB,QAAX,CAAoB,KAAKC,QAAL,EAApB,CAAd;AACAlB,MAAAA,CAAC,CAAC,OAAD,CAAD,CAAWmB,QAAX,CAAoBT,0CAApB,EAAgEO,QAAhE,CAAyED,OAAzE;AACA,WAAKI,OAAL,GAAe,KAAKC,gBAAL,CAAsBL,OAAtB,EAA+BV,MAA/B,CAAf;;AACA,WAAKc,OAAL,CAAaE,MAAb,CAAoB;AAChBC,QAAAA,MAAM,EAAE,IADQ;AAEhBC,QAAAA,QAAQ,EAAE,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC;AAFM,OAApB;;AAIA1B,MAAAA,CAAC,CAAC,KAAKoB,OAAL,CAAaO,OAAb,EAAD,CAAD,CAA0BR,QAA1B,CAAmCR,4BAAnC;AACA,UAAIiB,cAAc,GAAGZ,OAAO,CAACa,IAAR,CAAa,IAAIC,MAAJ,CAAWpB,0CAAX,CAAb,EAAqEqB,KAArE,EAArB;AACA,UAAIC,eAAe,GAAG,KAAKV,MAAL,CAAY,iBAAZ,CAAtB;;AACA,UAAIpB,UAAU,CAAC8B,eAAD,CAAd,EAAiC;AAC7BA,QAAAA,eAAe,CAACJ,cAAD,CAAf;AACH;;AACD,WAAKK,oBAAL;AACH;;;WACD,+BAAsBC,SAAtB,EAAiC;AAC7B,WAAKZ,MAAL,CAAY,gBAAZ,EAA8BY,SAA9B;AACA,WAAKC,SAAL,GAAiB,KAAKd,gBAAL,CAAsB,OAAtB,EAA+Bd,eAA/B,EAAgD;AAC7D2B,QAAAA,SAAS,EAAE,KAAKhB,QAAL,EADkD;AAE7DkB,QAAAA,WAAW,EAAEpC,CAAC,CAAC,KAAKoB,OAAL,CAAaO,OAAb,EAAD,CAF+C;AAG7DU,QAAAA,YAAY,EAAErC,CAAC,CAAC,KAAKoB,OAAL,CAAakB,WAAb,EAAD,CAH8C;AAI7DC,QAAAA,gBAAgB,EAAE,KAAKC,iBAAL,CAAuBd,IAAvB,CAA4B,IAA5B,CAJ2C;AAK7De,QAAAA,oBAAoB,EAAE,KAAKC,qBAAL,CAA2BhB,IAA3B,CAAgC,IAAhC;AALuC,OAAhD,CAAjB;;AAOA,WAAKS,SAAL,CAAejB,QAAf,GAA0BD,QAA1B,CAAmCiB,SAAnC;;AACA,WAAKC,SAAL,CAAeQ,0BAAf,CAA0C,IAA1C;AACH;;;WACD,mBAAU;AACN;;AACA,WAAKC,mBAAL;AACH;;;WACD,2BAAkBC,CAAlB,EAAqB;AACjB,UAAI,CAACzC,SAAS,EAAd,EAAkB;AACd;AACH;;AACD,UAAI,CAAC,KAAK+B,SAAL,CAAeW,eAAf,EAAL,EAAuC;AACnC,aAAKC,eAAL,CAAqB,EAArB;;AACA;AACH;;AACD/C,MAAAA,CAAC,CAAC,KAAKoB,OAAL,CAAaO,OAAb,EAAD,CAAD,CAA0BqB,WAA1B,CAAsCrC,4BAAtC;;AACA,WAAKoC,eAAL,CAAqBF,CAAC,CAACI,cAAvB;AACH;;;WACD,+BAAsBC,IAAtB,EAA4B;AACxB,UACcC,QADd,GAEID,IAFJ,CACIC,QADJ;;AAGA,WAAKhB,SAAL,CAAeQ,0BAAf,CAA0C,CAACQ,QAA3C;;AACA,OAACA,QAAD,IAAa,KAAKhB,SAAL,CAAejB,QAAf,GAA0BkC,GAA1B,CAA8B,MAA9B,EAAsC,MAAtC,CAAb;AACH;;;WACD,yBAAgBC,KAAhB,EAAuB;AACnBrD,MAAAA,CAAC,CAAC,KAAKoB,OAAL,CAAaO,OAAb,EAAD,CAAD,CAA0ByB,GAA1B,CAA8B,OAA9B,EAAuCC,KAAvC;;AACA,WAAKpB,oBAAL;;AACA,WAAKb,OAAL,CAAakC,iBAAb;AACH;;;WACD,gCAAuB;AACnB,WAAKlC,OAAL,CAAaE,MAAb,CAAoB,SAApB,EAA+B,KAAKF,OAAL,CAAamC,iBAAb,EAA/B;AACH;;;WACD,2BAAkBC,SAAlB,EAA6B;AACzB,UAAI,CAACA,SAAD,IAAc,aAAaA,SAA/B,EAA0C;AACtC,aAAKZ,mBAAL;AACH;AACJ;;;WACD,+BAAsB;AAClB,UAAIa,QAAQ,GAAG,KAAK1C,kBAApB;AACA,WAAKA,kBAAL,GAA0B,KAAK2C,cAAL,EAA1B;;AACA,UAAID,QAAQ,KAAK,KAAK1C,kBAAtB,EAA0C;AACtC,aAAK4C,YAAL,CAAkB,CAAC,KAAK5C,kBAAxB,EAA4C,IAA5C;AACAf,QAAAA,CAAC,CAAC,KAAKoB,OAAL,CAAaO,OAAb,EAAD,CAAD,CAA0BiC,WAA1B,CAAsChD,6BAAtC,EAAqE,KAAKG,kBAA1E;;AACA,aAAK8C,0BAAL,CAAgC,KAAK9C,kBAArC;AACH;;AACD,UAAI,KAAKA,kBAAL,IAA2B,KAAK+C,eAAL,EAA/B,EAAuD;AACnD,aAAK7B,oBAAL;AACH;AACJ;;;WACD,0BAAiB;AACb,aAAOjC,CAAC,CAACQ,MAAD,CAAD,CAAU6C,KAAV,MAAqB5C,2BAA5B;AACH;;;WACD,2BAAkB;AACd,aAAO,KAAKW,OAAL,CAAaE,MAAb,CAAoB,QAApB,CAAP;AACH;;;WACD,wBAAe;AACX,WAAKyC,QAAL,GAAgB;AACZC,QAAAA,sBAAsB,EAAE,KAAKC,qBAAL,CAA2B,wBAA3B;AADZ,OAAhB;AAGH;;;WACD,oCAA2BC,OAA3B,EAAoC;AAChC,WAAKH,QAAL,CAAcC,sBAAd,CAAqC;AACjCE,QAAAA,OAAO,EAAEA;AADwB,OAArC;AAGH;;;WACD,8BAAqB;AACjB,aAAOjE,MAAM,uGAA6B;AACtCkE,QAAAA,cAAc,EAAE,IADsB;AAEtCC,QAAAA,eAAe,EAAE,IAFqB;AAGtCJ,QAAAA,sBAAsB,EAAE;AAHc,OAA7B,CAAb;AAKH;;;WACD,wBAAeK,IAAf,EAAqB;AACjB,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;;AACA,cAAQA,IAAR;AACI,aAAK,gBAAL;AACA,aAAK,iBAAL;AACI,eAAKC,OAAL;AACA;;AACJ,aAAK,wBAAL;AACI,eAAKR,QAAL,CAAcO,IAAd,IAAsB,KAAKL,qBAAL,CAA2BK,IAA3B,CAAtB;AACA;;AACJ;AACI,2GAAqBD,IAArB;;AATR;AAWH;;;WACD,6BAAoB;AAChB,aAAO,KAAKtD,kBAAZ;AACH;;;WACD,sBAAayD,OAAb,EAAsBC,aAAtB,EAAqC;AACjC,WAAKxC,oBAAL;;AACA,WAAKb,OAAL,CAAaE,MAAb,CAAoB,kBAApB,EAAwC,CAACmD,aAAzC;;AACA,WAAKrD,OAAL,CAAasD,MAAb,CAAoBF,OAApB;;AACA,UAAIG,gBAAgB,GAAG,KAAKb,eAAL,MAA0B,CAAC,KAAKc,iBAAL,EAAlD;;AACA,WAAKzC,SAAL,CAAe0C,cAAf,CAA8B,CAACF,gBAA/B;AACH;;;;EA7HsCtE,M;;AA+H3C,eAAeQ,4BAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.adaptivity.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Drawer from \"../drawer/ui.drawer\";\r\nimport SplitterControl from \"../splitter\";\r\nvar window = getWindow();\r\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 573;\r\nvar FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS = \"dx-filemanager-adaptivity-drawer-panel\";\r\nvar DRAWER_PANEL_CONTENT_INITIAL = \"dx-drawer-panel-content-initial\";\r\nvar DRAWER_PANEL_CONTENT_ADAPTIVE = \"dx-drawer-panel-content-adaptive\";\r\nclass FileManagerAdaptivityControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._isInAdaptiveState = false;\r\n        var $drawer = $(\"<div>\").appendTo(this.$element());\r\n        $(\"<div>\").addClass(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS).appendTo($drawer);\r\n        this._drawer = this._createComponent($drawer, Drawer);\r\n        this._drawer.option({\r\n            opened: true,\r\n            template: this._createDrawerTemplate.bind(this)\r\n        });\r\n        $(this._drawer.content()).addClass(DRAWER_PANEL_CONTENT_INITIAL);\r\n        var $drawerContent = $drawer.find(\".\".concat(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS)).first();\r\n        var contentRenderer = this.option(\"contentTemplate\");\r\n        if (isFunction(contentRenderer)) {\r\n            contentRenderer($drawerContent)\r\n        }\r\n        this._updateDrawerMaxSize()\r\n    }\r\n    _createDrawerTemplate(container) {\r\n        this.option(\"drawerTemplate\")(container);\r\n        this._splitter = this._createComponent(\"<div>\", SplitterControl, {\r\n            container: this.$element(),\r\n            leftElement: $(this._drawer.content()),\r\n            rightElement: $(this._drawer.viewContent()),\r\n            onApplyPanelSize: this._onApplyPanelSize.bind(this),\r\n            onActiveStateChanged: this._onActiveStateChanged.bind(this)\r\n        });\r\n        this._splitter.$element().appendTo(container);\r\n        this._splitter.disableSplitterCalculation(true)\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._checkAdaptiveState()\r\n    }\r\n    _onApplyPanelSize(e) {\r\n        if (!hasWindow()) {\r\n            return\r\n        }\r\n        if (!this._splitter.isSplitterMoved()) {\r\n            this._setDrawerWidth(\"\");\r\n            return\r\n        }\r\n        $(this._drawer.content()).removeClass(DRAWER_PANEL_CONTENT_INITIAL);\r\n        this._setDrawerWidth(e.leftPanelWidth)\r\n    }\r\n    _onActiveStateChanged(_ref) {\r\n        var {\r\n            isActive: isActive\r\n        } = _ref;\r\n        this._splitter.disableSplitterCalculation(!isActive);\r\n        !isActive && this._splitter.$element().css(\"left\", \"auto\")\r\n    }\r\n    _setDrawerWidth(width) {\r\n        $(this._drawer.content()).css(\"width\", width);\r\n        this._updateDrawerMaxSize();\r\n        this._drawer.resizeViewContent()\r\n    }\r\n    _updateDrawerMaxSize() {\r\n        this._drawer.option(\"maxSize\", this._drawer.getRealPanelWidth())\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!dimension || \"height\" !== dimension) {\r\n            this._checkAdaptiveState()\r\n        }\r\n    }\r\n    _checkAdaptiveState() {\r\n        var oldState = this._isInAdaptiveState;\r\n        this._isInAdaptiveState = this._isSmallScreen();\r\n        if (oldState !== this._isInAdaptiveState) {\r\n            this.toggleDrawer(!this._isInAdaptiveState, true);\r\n            $(this._drawer.content()).toggleClass(DRAWER_PANEL_CONTENT_ADAPTIVE, this._isInAdaptiveState);\r\n            this._raiseAdaptiveStateChanged(this._isInAdaptiveState)\r\n        }\r\n        if (this._isInAdaptiveState && this._isDrawerOpened()) {\r\n            this._updateDrawerMaxSize()\r\n        }\r\n    }\r\n    _isSmallScreen() {\r\n        return $(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH\r\n    }\r\n    _isDrawerOpened() {\r\n        return this._drawer.option(\"opened\")\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onAdaptiveStateChanged: this._createActionByOption(\"onAdaptiveStateChanged\")\r\n        }\r\n    }\r\n    _raiseAdaptiveStateChanged(enabled) {\r\n        this._actions.onAdaptiveStateChanged({\r\n            enabled: enabled\r\n        })\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            drawerTemplate: null,\r\n            contentTemplate: null,\r\n            onAdaptiveStateChanged: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"drawerTemplate\":\r\n            case \"contentTemplate\":\r\n                this.repaint();\r\n                break;\r\n            case \"onAdaptiveStateChanged\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    isInAdaptiveState() {\r\n        return this._isInAdaptiveState\r\n    }\r\n    toggleDrawer(showing, skipAnimation) {\r\n        this._updateDrawerMaxSize();\r\n        this._drawer.option(\"animationEnabled\", !skipAnimation);\r\n        this._drawer.toggle(showing);\r\n        var isSplitterActive = this._isDrawerOpened() && !this.isInAdaptiveState();\r\n        this._splitter.toggleDisabled(!isSplitterActive)\r\n    }\r\n}\r\nexport default FileManagerAdaptivityControl;\r\n"]},"metadata":{},"sourceType":"module"}