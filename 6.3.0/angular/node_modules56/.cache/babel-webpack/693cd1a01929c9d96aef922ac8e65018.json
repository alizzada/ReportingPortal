{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.horizontal_month_line\";\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\n\nvar HorizontalMonthRenderingStrategy = /*#__PURE__*/function (_HorizontalMonthLineA) {\n  _inherits(HorizontalMonthRenderingStrategy, _HorizontalMonthLineA);\n\n  var _super = _createSuper(HorizontalMonthRenderingStrategy);\n\n  function HorizontalMonthRenderingStrategy() {\n    _classCallCheck(this, HorizontalMonthRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalMonthRenderingStrategy, [{\n    key: \"_getLeftPosition\",\n    value: function _getLeftPosition(settings) {\n      var fullWeekAppointmentWidth = this._getFullWeekAppointmentWidth(settings.groupIndex);\n\n      var result = this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth);\n\n      if (\"vertical\" === this.instance._groupOrientation) {\n        result += this.instance.fire(\"getWorkSpaceDateTableOffset\");\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getChunkCount\",\n    value: function _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\n      var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\n      return Math.ceil(rawFullChunksWidth / weekWidth);\n    }\n  }, {\n    key: \"_getChunkWidths\",\n    value: function _getChunkWidths(geometry) {\n      var firstChunkWidth = geometry.reducedWidth;\n      var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\n      var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\n      return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk];\n    }\n  }, {\n    key: \"_getTailChunkSettings\",\n    value: function _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\n      var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\n      var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\n      var tailChunkLeftPosition = this._isRtl() ? rtlPosition : leftPosition;\n      return [tailChunkWidth, tailChunkLeftPosition];\n    }\n  }, {\n    key: \"_getAppointmentParts\",\n    value: function _getAppointmentParts(geometry, settings) {\n      var result = [];\n      var weekWidth = Math.round(this._getFullWeekAppointmentWidth(settings.groupIndex));\n\n      var _this$_getChunkWidths = this._getChunkWidths(geometry, settings, weekWidth),\n          _this$_getChunkWidths2 = _slicedToArray(_this$_getChunkWidths, 3),\n          firstChunkWidth = _this$_getChunkWidths2[0],\n          fullChunksWidth = _this$_getChunkWidths2[1],\n          withoutFirstChunkWidth = _this$_getChunkWidths2[2];\n\n      var leftPosition = this._getLeftPosition(settings);\n\n      var hasTailChunk = this.instance.fire(\"getEndViewDate\") > settings.info.appointment.endDate;\n\n      var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\n\n      var _this$_getTailChunkSe = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition),\n          _this$_getTailChunkSe2 = _slicedToArray(_this$_getTailChunkSe, 2),\n          tailChunkWidth = _this$_getTailChunkSe2[0],\n          tailChunkLeftPosition = _this$_getTailChunkSe2[1];\n\n      for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\n        var topPosition = settings.top + this.getDefaultCellHeight() * chunkIndex;\n        var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\n        result.push(_extends({}, settings, {\n          top: topPosition,\n          left: isTailChunk ? tailChunkLeftPosition : leftPosition,\n          height: geometry.height,\n          width: isTailChunk ? tailChunkWidth : weekWidth,\n          appointmentReduced: isTailChunk ? \"tail\" : \"body\",\n          rowIndex: ++settings.rowIndex,\n          cellIndex: 0\n        }));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_calculateMultiWeekAppointmentLeftOffset\",\n    value: function _calculateMultiWeekAppointmentLeftOffset(max, width) {\n      return this._isRtl() ? max : max - width;\n    }\n  }, {\n    key: \"_getFullWeekAppointmentWidth\",\n    value: function _getFullWeekAppointmentWidth(groupIndex) {\n      this._maxFullWeekAppointmentWidth = this.instance.fire(\"getFullWeekAppointmentWidth\", {\n        groupIndex: groupIndex\n      });\n      return this._maxFullWeekAppointmentWidth;\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return this._getAppointmentHeightByTheme();\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return this._getAppointmentDefaultHeight();\n    }\n  }, {\n    key: \"_columnCondition\",\n    value: function _columnCondition(a, b) {\n      var conditions = this._getConditions(a, b);\n\n      return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition;\n    }\n  }, {\n    key: \"createTaskPositionMap\",\n    value: function createTaskPositionMap(items) {\n      return _get(_getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"createTaskPositionMap\", this).call(this, items, true);\n    }\n  }, {\n    key: \"_getSortedPositions\",\n    value: function _getSortedPositions(map) {\n      return _get(_getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"_getSortedPositions\", this).call(this, map, true);\n    }\n  }, {\n    key: \"_getDefaultRatio\",\n    value: function _getDefaultRatio() {\n      return MONTH_APPOINTMENT_HEIGHT_RATIO;\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\n        auto: MONTH_APPOINTMENT_MAX_OFFSET\n      };\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth(intervalCount) {\n      if (this.instance.fire(\"isAdaptive\")) {\n        return this.getDropDownButtonAdaptiveSize();\n      }\n\n      var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\n      return this.getDefaultCellWidth() - offset;\n    }\n  }, {\n    key: \"needCorrectAppointmentDates\",\n    value: function needCorrectAppointmentDates() {\n      return false;\n    }\n  }, {\n    key: \"_needVerticalGroupBounds\",\n    value: function _needVerticalGroupBounds() {\n      return false;\n    }\n  }, {\n    key: \"_needHorizontalGroupBounds\",\n    value: function _needHorizontalGroupBounds() {\n      return true;\n    }\n  }]);\n\n  return HorizontalMonthRenderingStrategy;\n}(HorizontalMonthLineAppointmentsStrategy);\n\nexport default HorizontalMonthRenderingStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month.js"],"names":["_extends","HorizontalMonthLineAppointmentsStrategy","MONTH_APPOINTMENT_HEIGHT_RATIO","MONTH_APPOINTMENT_MIN_OFFSET","MONTH_APPOINTMENT_MAX_OFFSET","MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET","MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET","HorizontalMonthRenderingStrategy","settings","fullWeekAppointmentWidth","_getFullWeekAppointmentWidth","groupIndex","result","_calculateMultiWeekAppointmentLeftOffset","hMax","instance","_groupOrientation","fire","fullChunksWidth","firstChunkWidth","weekWidth","rawFullChunksWidth","Math","ceil","geometry","reducedWidth","floor","sourceAppointmentWidth","widthWithoutFirstChunk","withoutFirstChunkWidth","leftPosition","tailChunkWidth","rtlPosition","tailChunkLeftPosition","_isRtl","round","_getChunkWidths","_getLeftPosition","hasTailChunk","info","appointment","endDate","chunkCount","_getChunkCount","_getTailChunkSettings","chunkIndex","topPosition","top","getDefaultCellHeight","isTailChunk","push","left","height","width","appointmentReduced","rowIndex","cellIndex","max","_maxFullWeekAppointmentWidth","_getAppointmentHeightByTheme","_getAppointmentDefaultHeight","a","b","conditions","_getConditions","rowCondition","columnCondition","cellPositionCondition","items","map","unlimited","auto","intervalCount","getDropDownButtonAdaptiveSize","offset","getDefaultCellWidth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport HorizontalMonthLineAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.horizontal_month_line\";\r\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\r\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\r\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\r\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\r\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\r\nclass HorizontalMonthRenderingStrategy extends HorizontalMonthLineAppointmentsStrategy {\r\n    _getLeftPosition(settings) {\r\n        var fullWeekAppointmentWidth = this._getFullWeekAppointmentWidth(settings.groupIndex);\r\n        var result = this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth);\r\n        if (\"vertical\" === this.instance._groupOrientation) {\r\n            result += this.instance.fire(\"getWorkSpaceDateTableOffset\")\r\n        }\r\n        return result\r\n    }\r\n    _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\r\n        var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\r\n        return Math.ceil(rawFullChunksWidth / weekWidth)\r\n    }\r\n    _getChunkWidths(geometry) {\r\n        var firstChunkWidth = geometry.reducedWidth;\r\n        var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\r\n        var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\r\n        return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk]\r\n    }\r\n    _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\r\n        var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\r\n        var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\r\n        var tailChunkLeftPosition = this._isRtl() ? rtlPosition : leftPosition;\r\n        return [tailChunkWidth, tailChunkLeftPosition]\r\n    }\r\n    _getAppointmentParts(geometry, settings) {\r\n        var result = [];\r\n        var weekWidth = Math.round(this._getFullWeekAppointmentWidth(settings.groupIndex));\r\n        var [firstChunkWidth, fullChunksWidth, withoutFirstChunkWidth] = this._getChunkWidths(geometry, settings, weekWidth);\r\n        var leftPosition = this._getLeftPosition(settings);\r\n        var hasTailChunk = this.instance.fire(\"getEndViewDate\") > settings.info.appointment.endDate;\r\n        var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\r\n        var [tailChunkWidth, tailChunkLeftPosition] = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition);\r\n        for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\r\n            var topPosition = settings.top + this.getDefaultCellHeight() * chunkIndex;\r\n            var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\r\n            result.push(_extends({}, settings, {\r\n                top: topPosition,\r\n                left: isTailChunk ? tailChunkLeftPosition : leftPosition,\r\n                height: geometry.height,\r\n                width: isTailChunk ? tailChunkWidth : weekWidth,\r\n                appointmentReduced: isTailChunk ? \"tail\" : \"body\",\r\n                rowIndex: ++settings.rowIndex,\r\n                cellIndex: 0\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _calculateMultiWeekAppointmentLeftOffset(max, width) {\r\n        return this._isRtl() ? max : max - width\r\n    }\r\n    _getFullWeekAppointmentWidth(groupIndex) {\r\n        this._maxFullWeekAppointmentWidth = this.instance.fire(\"getFullWeekAppointmentWidth\", {\r\n            groupIndex: groupIndex\r\n        });\r\n        return this._maxFullWeekAppointmentWidth\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return this._getAppointmentHeightByTheme()\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return this._getAppointmentDefaultHeight()\r\n    }\r\n    _columnCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition\r\n    }\r\n    createTaskPositionMap(items) {\r\n        return super.createTaskPositionMap(items, true)\r\n    }\r\n    _getSortedPositions(map) {\r\n        return super._getSortedPositions(map, true)\r\n    }\r\n    _getDefaultRatio() {\r\n        return MONTH_APPOINTMENT_HEIGHT_RATIO\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\r\n            auto: MONTH_APPOINTMENT_MAX_OFFSET\r\n        }\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount) {\r\n        if (this.instance.fire(\"isAdaptive\")) {\r\n            return this.getDropDownButtonAdaptiveSize()\r\n        }\r\n        var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\r\n        return this.getDefaultCellWidth() - offset\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return false\r\n    }\r\n    _needVerticalGroupBounds() {\r\n        return false\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return true\r\n    }\r\n}\r\nexport default HorizontalMonthRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}