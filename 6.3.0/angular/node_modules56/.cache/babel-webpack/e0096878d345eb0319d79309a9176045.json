{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerTimeline from \"./ui.scheduler.timeline\";\nimport dateUtils from \"../../../core/utils/date\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerTimelineMonth = /*#__PURE__*/function (_SchedulerTimeline) {\n  _inherits(SchedulerTimelineMonth, _SchedulerTimeline);\n\n  var _super = _createSuper(SchedulerTimelineMonth);\n\n  function SchedulerTimelineMonth() {\n    _classCallCheck(this, SchedulerTimelineMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerTimelineMonth, [{\n    key: \"isDateAndTimeView\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"viewDirection\",\n    get: function get() {\n      return \"horizontal\";\n    }\n  }, {\n    key: \"renovatedHeaderPanelComponent\",\n    get: function get() {\n      return dxrDateHeader;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), \"_renderView\", this).call(this);\n\n      this._updateScrollable();\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return TIMELINE_CLASS;\n    }\n  }, {\n    key: \"_getDateHeaderTemplate\",\n    value: function _getDateHeaderTemplate() {\n      return this.option(\"dateCellTemplate\");\n    }\n  }, {\n    key: \"_getHiddenInterval\",\n    value: function _getHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_calculateDurationInCells\",\n    value: function _calculateDurationInCells(timeDiff) {\n      return timeDiff / this.getCellDuration();\n    }\n  }, {\n    key: \"getCellDuration\",\n    value: function getCellDuration() {\n      return toMs(\"day\");\n    }\n  }, {\n    key: \"calculateEndViewDate\",\n    value: function calculateEndViewDate(dateOfLastViewCell) {\n      return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"));\n    }\n  }, {\n    key: \"isIndicatorVisible\",\n    value: function isIndicatorVisible() {\n      return true;\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      var currentDate = this.option(\"currentDate\");\n      var cellCount = 0;\n\n      if (this._isWorkSpaceWithCount()) {\n        var intervalCount = this.option(\"intervalCount\");\n\n        for (var i = 1; i <= intervalCount; i++) {\n          cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate();\n        }\n      } else {\n        cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n      }\n\n      return cellCount;\n    }\n  }, {\n    key: \"_setFirstViewDate\",\n    value: function _setFirstViewDate() {\n      this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\n\n      this._setStartDayHour(this._firstViewDate);\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return this._formatWeekdayAndDay;\n    }\n  }, {\n    key: \"_getDateByIndex\",\n    value: function _getDateByIndex(headerIndex) {\n      var resultDate = new Date(this._firstViewDate);\n      resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n      return resultDate;\n    }\n  }, {\n    key: \"_getInterval\",\n    value: function _getInterval() {\n      return DAY_IN_MILLISECONDS;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate) {\n      var firstViewDate = this.getStartViewDate();\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate) {\n      var startDateCopy = new Date(startDate);\n      return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n    }\n  }, {\n    key: \"_calculateHiddenInterval\",\n    value: function _calculateHiddenInterval() {\n      return 0;\n    }\n  }, {\n    key: \"_getDateByCellIndexes\",\n    value: function _getDateByCellIndexes(rowIndex, cellIndex) {\n      var date = _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), \"_getDateByCellIndexes\", this).call(this, rowIndex, cellIndex);\n\n      this._setStartDayHour(date);\n\n      return date;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift() {\n      return {\n        top: 0,\n        left: 0,\n        cellPosition: 0\n      };\n    }\n  }]);\n\n  return SchedulerTimelineMonth;\n}(SchedulerTimeline);\n\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\nexport default SchedulerTimelineMonth;","map":null,"metadata":{},"sourceType":"module"}