{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxFunnel from 'devextreme/viz/funnel';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\n * devextreme-angular\n * Version: 21.1.3\n * Build date: Tue May 18 2021\n *\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/**\n * The Funnel is a UI component that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel UI component conveys information using different interactive elements (tooltips, labels, legend) and enables you to create not only a funnel, but also a pyramid chart.\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nvar DxFunnelComponent = /*@__PURE__*/function () {\n  var DxFunnelComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxFunnelComponent, _DxComponent);\n\n    var _super = _createSuper(DxFunnelComponent);\n\n    function DxFunnelComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxFunnelComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'hoverChanged',\n        emit: 'onHoverChanged'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'legendClick',\n        emit: 'onLegendClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'adaptiveLayoutChange'\n      }, {\n        emit: 'algorithmChange'\n      }, {\n        emit: 'argumentFieldChange'\n      }, {\n        emit: 'colorFieldChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'hoverEnabledChange'\n      }, {\n        emit: 'invertedChange'\n      }, {\n        emit: 'itemChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'legendChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'neckHeightChange'\n      }, {\n        emit: 'neckWidthChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'resolveLabelOverlappingChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'sortDataChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueFieldChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\n     *\n    \r\n     */\n\n\n    _createClass(DxFunnelComponent, [{\n      key: \"adaptiveLayout\",\n      get: function get() {\n        return this._getOption('adaptiveLayout');\n      },\n      set: function set(value) {\n        this._setOption('adaptiveLayout', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"algorithm\",\n      get: function get() {\n        return this._getOption('algorithm');\n      },\n      set: function set(value) {\n        this._setOption('algorithm', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"argumentField\",\n      get: function get() {\n        return this._getOption('argumentField');\n      },\n      set: function set(value) {\n        this._setOption('argumentField', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"colorField\",\n      get: function get() {\n        return this._getOption('colorField');\n      },\n      set: function set(value) {\n        this._setOption('colorField', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"hoverEnabled\",\n      get: function get() {\n        return this._getOption('hoverEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"inverted\",\n      get: function get() {\n        return this._getOption('inverted');\n      },\n      set: function set(value) {\n        this._setOption('inverted', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"item\",\n      get: function get() {\n        return this._getOption('item');\n      },\n      set: function set(value) {\n        this._setOption('item', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"label\",\n      get: function get() {\n        return this._getOption('label');\n      },\n      set: function set(value) {\n        this._setOption('label', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"legend\",\n      get: function get() {\n        return this._getOption('legend');\n      },\n      set: function set(value) {\n        this._setOption('legend', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"margin\",\n      get: function get() {\n        return this._getOption('margin');\n      },\n      set: function set(value) {\n        this._setOption('margin', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"neckHeight\",\n      get: function get() {\n        return this._getOption('neckHeight');\n      },\n      set: function set(value) {\n        this._setOption('neckHeight', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"neckWidth\",\n      get: function get() {\n        return this._getOption('neckWidth');\n      },\n      set: function set(value) {\n        this._setOption('neckWidth', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"palette\",\n      get: function get() {\n        return this._getOption('palette');\n      },\n      set: function set(value) {\n        this._setOption('palette', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"paletteExtensionMode\",\n      get: function get() {\n        return this._getOption('paletteExtensionMode');\n      },\n      set: function set(value) {\n        this._setOption('paletteExtensionMode', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"resolveLabelOverlapping\",\n      get: function get() {\n        return this._getOption('resolveLabelOverlapping');\n      },\n      set: function set(value) {\n        this._setOption('resolveLabelOverlapping', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"selectionMode\",\n      get: function get() {\n        return this._getOption('selectionMode');\n      },\n      set: function set(value) {\n        this._setOption('selectionMode', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"sortData\",\n      get: function get() {\n        return this._getOption('sortData');\n      },\n      set: function set(value) {\n        this._setOption('sortData', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\n       *\n      \r\n       */\n\n    }, {\n      key: \"valueField\",\n      get: function get() {\n        return this._getOption('valueField');\n      },\n      set: function set(value) {\n        this._setOption('valueField', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxFunnel(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('palette', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('palette');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxFunnelComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxFunnelComponent;\n  }(DxComponent);\n\n  DxFunnelComponent.ɵfac = function DxFunnelComponent_Factory(t) {\n    return new (t || DxFunnelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxFunnelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: DxFunnelComponent,\n    selectors: [[\"dx-funnel\"]],\n    inputs: {\n      adaptiveLayout: \"adaptiveLayout\",\n      algorithm: \"algorithm\",\n      argumentField: \"argumentField\",\n      colorField: \"colorField\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      hoverEnabled: \"hoverEnabled\",\n      inverted: \"inverted\",\n      item: \"item\",\n      label: \"label\",\n      legend: \"legend\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      neckHeight: \"neckHeight\",\n      neckWidth: \"neckWidth\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      resolveLabelOverlapping: \"resolveLabelOverlapping\",\n      rtlEnabled: \"rtlEnabled\",\n      selectionMode: \"selectionMode\",\n      size: \"size\",\n      sortData: \"sortData\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      valueField: \"valueField\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onHoverChanged: \"onHoverChanged\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onLegendClick: \"onLegendClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      adaptiveLayoutChange: \"adaptiveLayoutChange\",\n      algorithmChange: \"algorithmChange\",\n      argumentFieldChange: \"argumentFieldChange\",\n      colorFieldChange: \"colorFieldChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      hoverEnabledChange: \"hoverEnabledChange\",\n      invertedChange: \"invertedChange\",\n      itemChange: \"itemChange\",\n      labelChange: \"labelChange\",\n      legendChange: \"legendChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      neckHeightChange: \"neckHeightChange\",\n      neckWidthChange: \"neckWidthChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      resolveLabelOverlappingChange: \"resolveLabelOverlappingChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectionModeChange: \"selectionModeChange\",\n      sizeChange: \"sizeChange\",\n      sortDataChange: \"sortDataChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valueFieldChange: \"valueFieldChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFunnelComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n  DxFunnelComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxFunnelComponent);\n  return DxFunnelComponent;\n}();\n\nvar DxFunnelModule = /*@__PURE__*/function () {\n  var DxFunnelModule = function DxFunnelModule() {\n    _classCallCheck(this, DxFunnelModule);\n  };\n\n  DxFunnelModule.ɵfac = function DxFunnelModule_Factory(t) {\n    return new (t || DxFunnelModule)();\n  };\n\n  DxFunnelModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: DxFunnelModule\n  });\n  DxFunnelModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxFunnelModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFunnelModule, {\n    declarations: function declarations() {\n      return [DxFunnelComponent];\n    },\n    imports: function imports() {\n      return [DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxFunnelComponent, DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DxFunnelComponent, DxFunnelModule };","map":null,"metadata":{},"sourceType":"module"}