{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nimport Widget from \"../widget/ui.widget\";\nimport Toolbar from \"../toolbar\";\nimport \"../drop_down_button\";\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\nvar DEFAULT_ITEM_CONFIGS = {\n  showNavPane: {\n    location: \"before\"\n  },\n  create: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  upload: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  refresh: {\n    location: \"after\",\n    showText: \"inMenu\",\n    cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  switchView: {\n    location: \"after\"\n  },\n  download: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  move: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  copy: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  rename: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  delete: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  clearSelection: {\n    location: \"after\",\n    locateInMenu: \"never\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  separator: {\n    location: \"before\"\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\nvar REFRESH_ICON_MAP = {\n  default: \"dx-filemanager-i dx-filemanager-i-refresh\",\n  progress: \"dx-filemanager-i dx-filemanager-i-progress\",\n  success: \"dx-filemanager-i dx-filemanager-i-done\",\n  error: \"dx-filemanager-i dx-filemanager-i-danger\"\n};\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\n\nvar FileManagerToolbar = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerToolbar, _Widget);\n\n  var _super = _createSuper(FileManagerToolbar);\n\n  function FileManagerToolbar() {\n    _classCallCheck(this, FileManagerToolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerToolbar, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this._commandManager = this.option(\"commandManager\");\n\n      this._createItemClickedAction();\n\n      this._generalToolbarVisible = true;\n      this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\n      this._generalToolbar = this._createToolbar(this.option(\"generalItems\"));\n      this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), true);\n\n      this._$viewSwitcherPopup.appendTo(this.$element());\n\n      this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(FileManagerToolbar.prototype), \"_render\", this).call(this);\n\n      var toolbar = this._getVisibleToolbar();\n\n      this._checkCompactMode(toolbar);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        var toolbar = this._getVisibleToolbar();\n\n        this._checkCompactMode(toolbar);\n      }\n    }\n  }, {\n    key: \"_getVisibleToolbar\",\n    value: function _getVisibleToolbar() {\n      return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar;\n    }\n  }, {\n    key: \"_createToolbar\",\n    value: function _createToolbar(items, hidden) {\n      var _this = this;\n\n      var toolbarItems = this._getPreparedItems(items);\n\n      var $toolbar = $(\"<div>\").appendTo(this.$element());\n\n      var result = this._createComponent($toolbar, Toolbar, {\n        items: toolbarItems,\n        visible: !hidden,\n        onItemClick: function onItemClick(args) {\n          return _this._raiseItemClicked(args);\n        }\n      });\n\n      result.compactMode = false;\n      return result;\n    }\n  }, {\n    key: \"_getPreparedItems\",\n    value: function _getPreparedItems(items) {\n      var _this2 = this;\n\n      items = items.map(function (item) {\n        var extendedItem = item;\n\n        if (isString(item)) {\n          extendedItem = {\n            name: item\n          };\n        }\n\n        var commandName = extendedItem.name;\n\n        var preparedItem = _this2._configureItemByCommandName(commandName, extendedItem);\n\n        preparedItem.originalItemData = item;\n\n        if (\"separator\" !== commandName) {\n          _this2._setItemVisibleAvailable(preparedItem);\n        }\n\n        return preparedItem;\n      });\n\n      this._updateSeparatorsVisibility(items);\n\n      return items;\n    }\n  }, {\n    key: \"_updateSeparatorsVisibility\",\n    value: function _updateSeparatorsVisibility(items, toolbar) {\n      var _this3 = this;\n\n      var hasModifications = false;\n\n      var menuItems = this._getMenuItems(toolbar);\n\n      var hasItemsBefore = {\n        before: false,\n        center: false,\n        after: false\n      };\n      var itemGroups = {\n        before: this._getItemsInGroup(items, menuItems, \"before\"),\n        center: this._getItemsInGroup(items, menuItems, \"center\"),\n        after: this._getItemsInGroup(items, menuItems, \"after\")\n      };\n      items.forEach(function (item, i) {\n        var itemLocation = item.location;\n\n        if (\"separator\" === item.name) {\n          var isSeparatorVisible = hasItemsBefore[itemLocation] && _this3._groupHasItemsAfter(itemGroups[itemLocation]);\n\n          if (item.visible !== isSeparatorVisible) {\n            hasModifications = true;\n            item.visible = isSeparatorVisible;\n          }\n\n          hasItemsBefore[itemLocation] = false;\n        } else {\n          if (!_this3._isItemInMenu(menuItems, item)) {\n            hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible;\n          }\n\n          itemGroups[itemLocation].shift();\n        }\n      });\n\n      if (toolbar && hasModifications) {\n        toolbar.repaint();\n      }\n\n      return hasModifications;\n    }\n  }, {\n    key: \"_getMenuItems\",\n    value: function _getMenuItems(toolbar) {\n      var result = toolbar ? toolbar._getMenuItems() : [];\n      return result.map(function (menuItem) {\n        return menuItem.originalItemData;\n      });\n    }\n  }, {\n    key: \"_isItemInMenu\",\n    value: function _isItemInMenu(menuItems, item) {\n      return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData);\n    }\n  }, {\n    key: \"_getItemsInGroup\",\n    value: function _getItemsInGroup(items, menuItems, groupName) {\n      var _this4 = this;\n\n      return items.filter(function (item) {\n        return item.location === groupName && !_this4._isItemInMenu(menuItems, item);\n      });\n    }\n  }, {\n    key: \"_groupHasItemsAfter\",\n    value: function _groupHasItemsAfter(items) {\n      for (var i = 0; i < items.length; i++) {\n        if (\"separator\" !== items[i].name && items[i].visible) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_configureItemByCommandName\",\n    value: function _configureItemByCommandName(commandName, item) {\n      var _result$options;\n\n      var result = {};\n\n      var command = this._commandManager.getCommandByName(commandName);\n\n      if (command) {\n        result = this._createCommandItem(command);\n      }\n\n      switch (commandName) {\n        case \"separator\":\n          result = this._createSeparatorItem();\n          break;\n\n        case \"switchView\":\n          result = this._createViewModeItem();\n      }\n\n      if (this._isDefaultItem(commandName)) {\n        var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\n        extend(true, result, defaultConfig);\n        var resultCssClass = result.cssClass || \"\";\n        extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n        if (isDefined(item.options)) {\n          extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES);\n        }\n\n        extendAttributes(result.options, item, [\"text\", \"icon\"]);\n\n        if (item.cssClass) {\n          resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass);\n        }\n\n        if (resultCssClass) {\n          result.cssClass = resultCssClass;\n        }\n\n        if (!isDefined(item.visible)) {\n          result._autoHide = true;\n        }\n\n        if (\"dxButton\" === result.widget) {\n          if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\n            result.options.hint = result.options.text;\n          }\n\n          if (result.compactMode && !isDefined(result.options.hint)) {\n            this._configureHintForCompactMode(result);\n          }\n        }\n      } else {\n        extend(true, result, item);\n\n        if (!result.widget) {\n          result.widget = \"dxButton\";\n        }\n\n        if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\n          result.compactMode = {\n            showText: \"inMenu\"\n          };\n        }\n      }\n\n      if (commandName && !result.name) {\n        extend(result, {\n          name: commandName\n        });\n      }\n\n      result.location = ensureDefined(result.location, \"before\");\n\n      if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\n        if (\"dxButton\" === result.widget) {\n          extend(true, result, {\n            options: {\n              stylingMode: \"text\"\n            }\n          });\n        }\n\n        if (\"dxSelectBox\" === result.widget) {\n          extend(true, result, {\n            options: {\n              stylingMode: \"filled\"\n            }\n          });\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isDefaultItem\",\n    value: function _isDefaultItem(commandName) {\n      return !!DEFAULT_ITEM_CONFIGS[commandName];\n    }\n  }, {\n    key: \"_createCommandItem\",\n    value: function _createCommandItem(command) {\n      var _this5 = this;\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          text: command.text,\n          hint: command.hint,\n          commandText: command.text,\n          icon: command.icon,\n          stylingMode: \"text\",\n          onClick: function onClick(e) {\n            return _this5._executeCommand(command);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_createSeparatorItem\",\n    value: function _createSeparatorItem() {\n      return {\n        template: function template(data, index, element) {\n          $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS);\n        }\n      };\n    }\n  }, {\n    key: \"_createViewModeItem\",\n    value: function _createViewModeItem() {\n      var _this6 = this;\n\n      var commandItems = [\"details\", \"thumbnails\"].map(function (name) {\n        var _this6$_commandManage = _this6._commandManager.getCommandByName(name),\n            text = _this6$_commandManage.text,\n            icon = _this6$_commandManage.icon;\n\n        return {\n          name: name,\n          text: text,\n          icon: icon\n        };\n      });\n      var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\n      return {\n        cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\n        widget: \"dxDropDownButton\",\n        options: {\n          items: commandItems,\n          keyExpr: \"name\",\n          selectedItemKey: this.option(\"itemViewMode\"),\n          displayExpr: \" \",\n          hint: commandItems[selectedIndex].text,\n          stylingMode: \"text\",\n          showArrowIcon: false,\n          useSelectMode: true,\n          dropDownOptions: {\n            container: this._$viewSwitcherPopup\n          },\n          onItemClick: function onItemClick(e) {\n            return _this6._executeCommand(e.itemData.name);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_configureHintForCompactMode\",\n    value: function _configureHintForCompactMode(item) {\n      item.options.hint = \"\";\n      item.compactMode.options = item.compactMode.options || {};\n      item.compactMode.options.hint = item.options.text;\n    }\n  }, {\n    key: \"_checkCompactMode\",\n    value: function _checkCompactMode(toolbar) {\n      if (toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, false);\n      }\n\n      var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\n\n      if (toolbar.compactMode !== useCompactMode) {\n        if (!toolbar.compactMode) {\n          this._toggleCompactMode(toolbar, useCompactMode);\n        }\n\n        toolbar.compactMode = useCompactMode;\n      } else if (toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, true);\n      }\n    }\n  }, {\n    key: \"_toolbarHasItemsOverflow\",\n    value: function _toolbarHasItemsOverflow(toolbar) {\n      var toolbarWidth = toolbar.$element().width();\n\n      var itemsWidth = toolbar._getItemsWidth();\n\n      return toolbarWidth < itemsWidth;\n    }\n  }, {\n    key: \"_toggleCompactMode\",\n    value: function _toggleCompactMode(toolbar, useCompactMode) {\n      var _this7 = this;\n\n      var hasModifications = false;\n      var items = toolbar.option(\"items\");\n      items.forEach(function (item) {\n        if (item.compactMode) {\n          var optionsSource = null;\n\n          if (useCompactMode) {\n            item.saved = _this7._getCompactModeOptions(item, item._available);\n            optionsSource = item.compactMode;\n          } else {\n            optionsSource = item.saved;\n          }\n\n          var options = _this7._getCompactModeOptions(optionsSource, item._available);\n\n          extend(true, item, options);\n          hasModifications = true;\n        }\n      });\n      hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n      if (hasModifications) {\n        toolbar.repaint();\n      }\n\n      this._updateSeparatorsVisibility(items, toolbar);\n    }\n  }, {\n    key: \"_getCompactModeOptions\",\n    value: function _getCompactModeOptions(_ref, available) {\n      var showText = _ref.showText,\n          locateInMenu = _ref.locateInMenu,\n          options = _ref.options;\n      return {\n        visible: available,\n        showText: ensureDefined(showText, \"always\"),\n        locateInMenu: ensureDefined(locateInMenu, \"never\"),\n        options: {\n          hint: null === options || void 0 === options ? void 0 : options.hint\n        }\n      };\n    }\n  }, {\n    key: \"_ensureAvailableCommandsVisible\",\n    value: function _ensureAvailableCommandsVisible(toolbar, fileItems) {\n      var _this8 = this;\n\n      var hasModifications = false;\n      var items = toolbar.option(\"items\");\n      items.forEach(function (item) {\n        if (\"separator\" !== item.name) {\n          var itemVisible = item._available;\n\n          _this8._setItemVisibleAvailable(item, fileItems);\n\n          if (item._available !== itemVisible) {\n            hasModifications = true;\n          }\n        }\n      });\n      hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n      if (hasModifications) {\n        toolbar.repaint();\n      }\n\n      this._updateSeparatorsVisibility(items, toolbar);\n    }\n  }, {\n    key: \"_setItemVisibleAvailable\",\n    value: function _setItemVisibleAvailable(item, fileItems) {\n      var _item$originalItemDat;\n\n      var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\n      item._available = this._isToolbarItemAvailable(item, fileItems);\n      item.visible = isDefined(originalVisible) ? originalVisible : item._available;\n    }\n  }, {\n    key: \"_fileToolbarHasEffectiveItems\",\n    value: function _fileToolbarHasEffectiveItems(fileItems) {\n      var _this9 = this;\n\n      var items = this._fileToolbar.option(\"items\");\n\n      return items.some(function (item) {\n        return _this9._isFileToolbarItemAvailable(item, fileItems);\n      });\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function _executeCommand(command) {\n      this._commandManager.executeCommand(command);\n    }\n  }, {\n    key: \"_isToolbarItemAvailable\",\n    value: function _isToolbarItemAvailable(toolbarItem, fileItems) {\n      if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\n        return ensureDefined(toolbarItem.visible, true);\n      }\n\n      if (\"refresh\" === toolbarItem.name) {\n        return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar;\n      }\n\n      if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\n        return true;\n      }\n\n      return this._commandManager.isCommandAvailable(toolbarItem.name, fileItems);\n    }\n  }, {\n    key: \"_isFileToolbarItemAvailable\",\n    value: function _isFileToolbarItemAvailable(_ref2, fileItems) {\n      var name = _ref2.name,\n          visible = _ref2.visible;\n      return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._commandManager.isCommandAvailable(name, fileItems);\n    }\n  }, {\n    key: \"_updateItemInToolbar\",\n    value: function _updateItemInToolbar(toolbar, commandName, options) {\n      toolbar.beginUpdate();\n      var items = toolbar.option(\"items\");\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (item.name === commandName) {\n          toolbar.option(\"items[\".concat(i, \"]\"), options);\n          break;\n        }\n      }\n\n      toolbar.endUpdate();\n    }\n  }, {\n    key: \"_raiseItemClicked\",\n    value: function _raiseItemClicked(args) {\n      var changedArgs = extend(true, {}, args);\n      changedArgs.itemData = args.itemData.originalItemData;\n\n      this._itemClickedAction(changedArgs);\n    }\n  }, {\n    key: \"_createItemClickedAction\",\n    value: function _createItemClickedAction() {\n      this._itemClickedAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerToolbar.prototype), \"_getDefaultOptions\", this).call(this), {\n        commandManager: null,\n        generalItems: [],\n        fileItems: [],\n        itemViewMode: \"details\",\n        onItemClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"commandManager\":\n        case \"itemViewMode\":\n        case \"generalItems\":\n        case \"fileItems\":\n          this.repaint();\n          break;\n\n        case \"onItemClick\":\n          this._itemClickedAction = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerToolbar.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"updateRefreshItem\",\n    value: function updateRefreshItem(message, status) {\n      var generalToolbarOptions = null;\n      var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\n      var showText = \"inMenu\";\n      this._isRefreshVisibleInFileToolbar = false;\n\n      if (\"default\" === status) {\n        generalToolbarOptions = {\n          options: {\n            icon: REFRESH_ICON_MAP.default\n          }\n        };\n      } else {\n        generalToolbarOptions = {\n          options: {\n            icon: REFRESH_ICON_MAP[status]\n          }\n        };\n        this._isRefreshVisibleInFileToolbar = true;\n        text = message;\n        showText = \"always\";\n      }\n\n      var fileToolbarOptions = extend({}, generalToolbarOptions, {\n        visible: this._isRefreshVisibleInFileToolbar\n      });\n\n      this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\n\n      this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText);\n    }\n  }, {\n    key: \"_updateRefreshItemText\",\n    value: function _updateRefreshItemText(isDeferredUpdate, text, showText) {\n      var _this10 = this;\n\n      var options = {\n        showText: showText,\n        options: {\n          text: text\n        }\n      };\n\n      if (isDeferredUpdate) {\n        return setTimeout(function () {\n          _this10._applyRefreshItemOptions(options);\n\n          _this10._refreshItemTextTimeout = void 0;\n        }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY);\n      } else {\n        if (this._refreshItemTextTimeout) {\n          clearTimeout(this._refreshItemTextTimeout);\n        }\n\n        this._applyRefreshItemOptions(options);\n\n        return;\n      }\n    }\n  }, {\n    key: \"_applyRefreshItemOptions\",\n    value: function _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\n      if (!fileToolbarOptions) {\n        fileToolbarOptions = extend({}, generalToolbarOptions);\n      }\n\n      this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\n\n      this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions);\n    }\n  }, {\n    key: \"update\",\n    value: function update(fileItems) {\n      fileItems = ensureDefined(fileItems, []);\n      var showGeneralToolbar = 0 === fileItems.length || !this._fileToolbarHasEffectiveItems(fileItems);\n\n      if (this._generalToolbarVisible !== showGeneralToolbar) {\n        this._generalToolbar.option(\"visible\", showGeneralToolbar);\n\n        this._fileToolbar.option(\"visible\", !showGeneralToolbar);\n\n        this._generalToolbarVisible = showGeneralToolbar;\n        this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\n        this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar);\n      }\n\n      var toolbar = this._getVisibleToolbar();\n\n      this._ensureAvailableCommandsVisible(toolbar, fileItems);\n\n      this._checkCompactMode(toolbar);\n    }\n  }]);\n\n  return FileManagerToolbar;\n}(Widget);\n\nexport default FileManagerToolbar;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.toolbar.js"],"names":["$","extend","isDefined","isString","ensureDefined","messageLocalization","extendAttributes","Widget","Toolbar","FILE_MANAGER_TOOLBAR_CLASS","FILE_MANAGER_GENERAL_TOOLBAR_CLASS","FILE_MANAGER_FILE_TOOLBAR_CLASS","FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS","FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS","FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS","FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS","DEFAULT_ITEM_CONFIGS","showNavPane","location","create","compactMode","showText","locateInMenu","upload","refresh","cssClass","switchView","download","move","copy","rename","delete","clearSelection","separator","DEFAULT_ITEM_ALLOWED_PROPERTIES","DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES","ALWAYS_VISIBLE_TOOLBAR_ITEMS","REFRESH_ICON_MAP","default","progress","success","error","REFRESH_ITEM_PROGRESS_MESSAGE_DELAY","FileManagerToolbar","_commandManager","option","_createItemClickedAction","_generalToolbarVisible","_$viewSwitcherPopup","addClass","_generalToolbar","_createToolbar","_fileToolbar","appendTo","$element","toolbar","_getVisibleToolbar","_checkCompactMode","dimension","items","hidden","toolbarItems","_getPreparedItems","$toolbar","result","_createComponent","visible","onItemClick","args","_raiseItemClicked","map","item","extendedItem","name","commandName","preparedItem","_configureItemByCommandName","originalItemData","_setItemVisibleAvailable","_updateSeparatorsVisibility","hasModifications","menuItems","_getMenuItems","hasItemsBefore","before","center","after","itemGroups","_getItemsInGroup","forEach","i","itemLocation","isSeparatorVisible","_groupHasItemsAfter","_isItemInMenu","shift","repaint","menuItem","length","indexOf","groupName","filter","_result$options","command","getCommandByName","_createCommandItem","_createSeparatorItem","_createViewModeItem","_isDefaultItem","defaultConfig","resultCssClass","options","concat","_autoHide","widget","hint","text","_configureHintForCompactMode","icon","stylingMode","commandText","onClick","e","_executeCommand","template","data","index","element","commandItems","selectedIndex","keyExpr","selectedItemKey","displayExpr","showArrowIcon","useSelectMode","dropDownOptions","container","itemData","_toggleCompactMode","useCompactMode","_toolbarHasItemsOverflow","toolbarWidth","width","itemsWidth","_getItemsWidth","optionsSource","saved","_getCompactModeOptions","_available","_ref","available","fileItems","itemVisible","_item$originalItemDat","originalVisible","_isToolbarItemAvailable","some","_isFileToolbarItemAvailable","executeCommand","toolbarItem","_isRefreshVisibleInFileToolbar","isCommandAvailable","_ref2","beginUpdate","endUpdate","changedArgs","_itemClickedAction","_createActionByOption","commandManager","generalItems","itemViewMode","message","status","generalToolbarOptions","format","fileToolbarOptions","_applyRefreshItemOptions","_refreshItemTextTimeout","_updateRefreshItemText","isDeferredUpdate","setTimeout","clearTimeout","_updateItemInToolbar","showGeneralToolbar","_fileToolbarHasEffectiveItems","toggleClass","_ensureAvailableCommandsVisible"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    extendAttributes\r\n} from \"./ui.file_manager.common\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Toolbar from \"../toolbar\";\r\nimport \"../drop_down_button\";\r\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\r\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\r\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\r\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\r\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\r\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\r\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\r\nvar DEFAULT_ITEM_CONFIGS = {\r\n    showNavPane: {\r\n        location: \"before\"\r\n    },\r\n    create: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    upload: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    refresh: {\r\n        location: \"after\",\r\n        showText: \"inMenu\",\r\n        cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    switchView: {\r\n        location: \"after\"\r\n    },\r\n    download: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    move: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    copy: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    rename: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    delete: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    clearSelection: {\r\n        location: \"after\",\r\n        locateInMenu: \"never\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    separator: {\r\n        location: \"before\"\r\n    }\r\n};\r\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\r\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\r\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\r\nvar REFRESH_ICON_MAP = {\r\n    default: \"dx-filemanager-i dx-filemanager-i-refresh\",\r\n    progress: \"dx-filemanager-i dx-filemanager-i-progress\",\r\n    success: \"dx-filemanager-i dx-filemanager-i-done\",\r\n    error: \"dx-filemanager-i dx-filemanager-i-danger\"\r\n};\r\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\r\nclass FileManagerToolbar extends Widget {\r\n    _initMarkup() {\r\n        this._commandManager = this.option(\"commandManager\");\r\n        this._createItemClickedAction();\r\n        this._generalToolbarVisible = true;\r\n        this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\r\n        this._generalToolbar = this._createToolbar(this.option(\"generalItems\"));\r\n        this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), true);\r\n        this._$viewSwitcherPopup.appendTo(this.$element());\r\n        this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS)\r\n    }\r\n    _render() {\r\n        super._render();\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!dimension || \"height\" !== dimension) {\r\n            var toolbar = this._getVisibleToolbar();\r\n            this._checkCompactMode(toolbar)\r\n        }\r\n    }\r\n    _getVisibleToolbar() {\r\n        return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar\r\n    }\r\n    _createToolbar(items, hidden) {\r\n        var toolbarItems = this._getPreparedItems(items);\r\n        var $toolbar = $(\"<div>\").appendTo(this.$element());\r\n        var result = this._createComponent($toolbar, Toolbar, {\r\n            items: toolbarItems,\r\n            visible: !hidden,\r\n            onItemClick: args => this._raiseItemClicked(args)\r\n        });\r\n        result.compactMode = false;\r\n        return result\r\n    }\r\n    _getPreparedItems(items) {\r\n        items = items.map(item => {\r\n            var extendedItem = item;\r\n            if (isString(item)) {\r\n                extendedItem = {\r\n                    name: item\r\n                }\r\n            }\r\n            var commandName = extendedItem.name;\r\n            var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\r\n            preparedItem.originalItemData = item;\r\n            if (\"separator\" !== commandName) {\r\n                this._setItemVisibleAvailable(preparedItem)\r\n            }\r\n            return preparedItem\r\n        });\r\n        this._updateSeparatorsVisibility(items);\r\n        return items\r\n    }\r\n    _updateSeparatorsVisibility(items, toolbar) {\r\n        var hasModifications = false;\r\n        var menuItems = this._getMenuItems(toolbar);\r\n        var hasItemsBefore = {\r\n            before: false,\r\n            center: false,\r\n            after: false\r\n        };\r\n        var itemGroups = {\r\n            before: this._getItemsInGroup(items, menuItems, \"before\"),\r\n            center: this._getItemsInGroup(items, menuItems, \"center\"),\r\n            after: this._getItemsInGroup(items, menuItems, \"after\")\r\n        };\r\n        items.forEach((item, i) => {\r\n            var itemLocation = item.location;\r\n            if (\"separator\" === item.name) {\r\n                var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\r\n                if (item.visible !== isSeparatorVisible) {\r\n                    hasModifications = true;\r\n                    item.visible = isSeparatorVisible\r\n                }\r\n                hasItemsBefore[itemLocation] = false\r\n            } else {\r\n                if (!this._isItemInMenu(menuItems, item)) {\r\n                    hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible\r\n                }\r\n                itemGroups[itemLocation].shift()\r\n            }\r\n        });\r\n        if (toolbar && hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        return hasModifications\r\n    }\r\n    _getMenuItems(toolbar) {\r\n        var result = toolbar ? toolbar._getMenuItems() : [];\r\n        return result.map(menuItem => menuItem.originalItemData)\r\n    }\r\n    _isItemInMenu(menuItems, item) {\r\n        return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData)\r\n    }\r\n    _getItemsInGroup(items, menuItems, groupName) {\r\n        return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item))\r\n    }\r\n    _groupHasItemsAfter(items) {\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (\"separator\" !== items[i].name && items[i].visible) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _configureItemByCommandName(commandName, item) {\r\n        var _result$options;\r\n        var result = {};\r\n        var command = this._commandManager.getCommandByName(commandName);\r\n        if (command) {\r\n            result = this._createCommandItem(command)\r\n        }\r\n        switch (commandName) {\r\n            case \"separator\":\r\n                result = this._createSeparatorItem();\r\n                break;\r\n            case \"switchView\":\r\n                result = this._createViewModeItem()\r\n        }\r\n        if (this._isDefaultItem(commandName)) {\r\n            var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\r\n            extend(true, result, defaultConfig);\r\n            var resultCssClass = result.cssClass || \"\";\r\n            extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\r\n            if (isDefined(item.options)) {\r\n                extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES)\r\n            }\r\n            extendAttributes(result.options, item, [\"text\", \"icon\"]);\r\n            if (item.cssClass) {\r\n                resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass)\r\n            }\r\n            if (resultCssClass) {\r\n                result.cssClass = resultCssClass\r\n            }\r\n            if (!isDefined(item.visible)) {\r\n                result._autoHide = true\r\n            }\r\n            if (\"dxButton\" === result.widget) {\r\n                if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\r\n                    result.options.hint = result.options.text\r\n                }\r\n                if (result.compactMode && !isDefined(result.options.hint)) {\r\n                    this._configureHintForCompactMode(result)\r\n                }\r\n            }\r\n        } else {\r\n            extend(true, result, item);\r\n            if (!result.widget) {\r\n                result.widget = \"dxButton\"\r\n            }\r\n            if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\r\n                result.compactMode = {\r\n                    showText: \"inMenu\"\r\n                }\r\n            }\r\n        }\r\n        if (commandName && !result.name) {\r\n            extend(result, {\r\n                name: commandName\r\n            })\r\n        }\r\n        result.location = ensureDefined(result.location, \"before\");\r\n        if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\r\n            if (\"dxButton\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"text\"\r\n                    }\r\n                })\r\n            }\r\n            if (\"dxSelectBox\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"filled\"\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _isDefaultItem(commandName) {\r\n        return !!DEFAULT_ITEM_CONFIGS[commandName]\r\n    }\r\n    _createCommandItem(command) {\r\n        return {\r\n            widget: \"dxButton\",\r\n            options: {\r\n                text: command.text,\r\n                hint: command.hint,\r\n                commandText: command.text,\r\n                icon: command.icon,\r\n                stylingMode: \"text\",\r\n                onClick: e => this._executeCommand(command)\r\n            }\r\n        }\r\n    }\r\n    _createSeparatorItem() {\r\n        return {\r\n            template: (data, index, element) => {\r\n                $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS)\r\n            }\r\n        }\r\n    }\r\n    _createViewModeItem() {\r\n        var commandItems = [\"details\", \"thumbnails\"].map(name => {\r\n            var {\r\n                text: text,\r\n                icon: icon\r\n            } = this._commandManager.getCommandByName(name);\r\n            return {\r\n                name: name,\r\n                text: text,\r\n                icon: icon\r\n            }\r\n        });\r\n        var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\r\n        return {\r\n            cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\r\n            widget: \"dxDropDownButton\",\r\n            options: {\r\n                items: commandItems,\r\n                keyExpr: \"name\",\r\n                selectedItemKey: this.option(\"itemViewMode\"),\r\n                displayExpr: \" \",\r\n                hint: commandItems[selectedIndex].text,\r\n                stylingMode: \"text\",\r\n                showArrowIcon: false,\r\n                useSelectMode: true,\r\n                dropDownOptions: {\r\n                    container: this._$viewSwitcherPopup\r\n                },\r\n                onItemClick: e => this._executeCommand(e.itemData.name)\r\n            }\r\n        }\r\n    }\r\n    _configureHintForCompactMode(item) {\r\n        item.options.hint = \"\";\r\n        item.compactMode.options = item.compactMode.options || {};\r\n        item.compactMode.options.hint = item.options.text\r\n    }\r\n    _checkCompactMode(toolbar) {\r\n        if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, false)\r\n        }\r\n        var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\r\n        if (toolbar.compactMode !== useCompactMode) {\r\n            if (!toolbar.compactMode) {\r\n                this._toggleCompactMode(toolbar, useCompactMode)\r\n            }\r\n            toolbar.compactMode = useCompactMode\r\n        } else if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, true)\r\n        }\r\n    }\r\n    _toolbarHasItemsOverflow(toolbar) {\r\n        var toolbarWidth = toolbar.$element().width();\r\n        var itemsWidth = toolbar._getItemsWidth();\r\n        return toolbarWidth < itemsWidth\r\n    }\r\n    _toggleCompactMode(toolbar, useCompactMode) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (item.compactMode) {\r\n                var optionsSource = null;\r\n                if (useCompactMode) {\r\n                    item.saved = this._getCompactModeOptions(item, item._available);\r\n                    optionsSource = item.compactMode\r\n                } else {\r\n                    optionsSource = item.saved\r\n                }\r\n                var options = this._getCompactModeOptions(optionsSource, item._available);\r\n                extend(true, item, options);\r\n                hasModifications = true\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _getCompactModeOptions(_ref, available) {\r\n        var {\r\n            showText: showText,\r\n            locateInMenu: locateInMenu,\r\n            options: options\r\n        } = _ref;\r\n        return {\r\n            visible: available,\r\n            showText: ensureDefined(showText, \"always\"),\r\n            locateInMenu: ensureDefined(locateInMenu, \"never\"),\r\n            options: {\r\n                hint: null === options || void 0 === options ? void 0 : options.hint\r\n            }\r\n        }\r\n    }\r\n    _ensureAvailableCommandsVisible(toolbar, fileItems) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (\"separator\" !== item.name) {\r\n                var itemVisible = item._available;\r\n                this._setItemVisibleAvailable(item, fileItems);\r\n                if (item._available !== itemVisible) {\r\n                    hasModifications = true\r\n                }\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _setItemVisibleAvailable(item, fileItems) {\r\n        var _item$originalItemDat;\r\n        var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\r\n        item._available = this._isToolbarItemAvailable(item, fileItems);\r\n        item.visible = isDefined(originalVisible) ? originalVisible : item._available\r\n    }\r\n    _fileToolbarHasEffectiveItems(fileItems) {\r\n        var items = this._fileToolbar.option(\"items\");\r\n        return items.some(item => this._isFileToolbarItemAvailable(item, fileItems))\r\n    }\r\n    _executeCommand(command) {\r\n        this._commandManager.executeCommand(command)\r\n    }\r\n    _isToolbarItemAvailable(toolbarItem, fileItems) {\r\n        if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\r\n            return ensureDefined(toolbarItem.visible, true)\r\n        }\r\n        if (\"refresh\" === toolbarItem.name) {\r\n            return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar\r\n        }\r\n        if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\r\n            return true\r\n        }\r\n        return this._commandManager.isCommandAvailable(toolbarItem.name, fileItems)\r\n    }\r\n    _isFileToolbarItemAvailable(_ref2, fileItems) {\r\n        var {\r\n            name: name,\r\n            visible: visible\r\n        } = _ref2;\r\n        return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._commandManager.isCommandAvailable(name, fileItems)\r\n    }\r\n    _updateItemInToolbar(toolbar, commandName, options) {\r\n        toolbar.beginUpdate();\r\n        var items = toolbar.option(\"items\");\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (item.name === commandName) {\r\n                toolbar.option(\"items[\".concat(i, \"]\"), options);\r\n                break\r\n            }\r\n        }\r\n        toolbar.endUpdate()\r\n    }\r\n    _raiseItemClicked(args) {\r\n        var changedArgs = extend(true, {}, args);\r\n        changedArgs.itemData = args.itemData.originalItemData;\r\n        this._itemClickedAction(changedArgs)\r\n    }\r\n    _createItemClickedAction() {\r\n        this._itemClickedAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            commandManager: null,\r\n            generalItems: [],\r\n            fileItems: [],\r\n            itemViewMode: \"details\",\r\n            onItemClick: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"commandManager\":\r\n            case \"itemViewMode\":\r\n            case \"generalItems\":\r\n            case \"fileItems\":\r\n                this.repaint();\r\n                break;\r\n            case \"onItemClick\":\r\n                this._itemClickedAction = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    updateRefreshItem(message, status) {\r\n        var generalToolbarOptions = null;\r\n        var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\r\n        var showText = \"inMenu\";\r\n        this._isRefreshVisibleInFileToolbar = false;\r\n        if (\"default\" === status) {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP.default\r\n                }\r\n            }\r\n        } else {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP[status]\r\n                }\r\n            };\r\n            this._isRefreshVisibleInFileToolbar = true;\r\n            text = message;\r\n            showText = \"always\"\r\n        }\r\n        var fileToolbarOptions = extend({}, generalToolbarOptions, {\r\n            visible: this._isRefreshVisibleInFileToolbar\r\n        });\r\n        this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\r\n        this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText)\r\n    }\r\n    _updateRefreshItemText(isDeferredUpdate, text, showText) {\r\n        var options = {\r\n            showText: showText,\r\n            options: {\r\n                text: text\r\n            }\r\n        };\r\n        if (isDeferredUpdate) {\r\n            return setTimeout(() => {\r\n                this._applyRefreshItemOptions(options);\r\n                this._refreshItemTextTimeout = void 0\r\n            }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY)\r\n        } else {\r\n            if (this._refreshItemTextTimeout) {\r\n                clearTimeout(this._refreshItemTextTimeout)\r\n            }\r\n            this._applyRefreshItemOptions(options);\r\n            return\r\n        }\r\n    }\r\n    _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\r\n        if (!fileToolbarOptions) {\r\n            fileToolbarOptions = extend({}, generalToolbarOptions)\r\n        }\r\n        this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\r\n        this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions)\r\n    }\r\n    update(fileItems) {\r\n        fileItems = ensureDefined(fileItems, []);\r\n        var showGeneralToolbar = 0 === fileItems.length || !this._fileToolbarHasEffectiveItems(fileItems);\r\n        if (this._generalToolbarVisible !== showGeneralToolbar) {\r\n            this._generalToolbar.option(\"visible\", showGeneralToolbar);\r\n            this._fileToolbar.option(\"visible\", !showGeneralToolbar);\r\n            this._generalToolbarVisible = showGeneralToolbar;\r\n            this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\r\n            this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar)\r\n        }\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._ensureAvailableCommandsVisible(toolbar, fileItems);\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n}\r\nexport default FileManagerToolbar;\r\n"]},"metadata":{},"sourceType":"module"}