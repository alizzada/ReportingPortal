{"ast":null,"code":"import _toConsumableArray from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nimport { getChar } from \"../../events/utils/index\";\nimport Promise from \"../../core/polyfills/promise\";\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\n\nvar DefaultMaskStrategy = /*#__PURE__*/function (_BaseMaskStrategy) {\n  _inherits(DefaultMaskStrategy, _BaseMaskStrategy);\n\n  var _super = _createSuper(DefaultMaskStrategy);\n\n  function DefaultMaskStrategy() {\n    _classCallCheck(this, DefaultMaskStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DefaultMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function _getStrategyName() {\n      return \"default\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function getHandleEventNames() {\n      return [].concat(_toConsumableArray(_get(_getPrototypeOf(DefaultMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"keyPress\"]);\n    }\n  }, {\n    key: \"_keyPressHandler\",\n    value: function _keyPressHandler(event) {\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n\n      if (this.editor._isControlKeyFired(event)) {\n        return;\n      }\n\n      var editor = this.editor;\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey(getChar(event));\n      });\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function _inputHandler(event) {\n      if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n        this._handleBackspaceInput(event);\n      }\n\n      if (event.originalEvent) {\n        this._autoFillHandler(event);\n      }\n\n      if (this._keyPressHandled) {\n        return;\n      }\n\n      this._keyPressHandled = true;\n      var inputValue = this.editorInput().val();\n      var caret = this.editorCaret();\n\n      if (!caret.end) {\n        return;\n      }\n\n      caret.start = caret.end - 1;\n      var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n      var char = inputValue[caret.start];\n      var editor = this.editor;\n      this.editorInput().val(oldValue);\n\n      editor._caret({\n        start: caret.start,\n        end: caret.start\n      });\n\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey(char);\n      });\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function _backspaceHandler(event) {\n      var _this = this;\n\n      var editor = this.editor;\n      this._keyPressHandled = true;\n\n      var afterBackspaceHandler = function afterBackspaceHandler(needAdjustCaret, callBack) {\n        if (needAdjustCaret) {\n          editor._direction(_this.DIRECTION.FORWARD);\n\n          editor._adjustCaret();\n        }\n\n        var currentCaret = _this.editorCaret();\n\n        return new Promise(function (resolve) {\n          clearTimeout(_this._backspaceHandlerTimeout);\n          _this._backspaceHandlerTimeout = setTimeout(function () {\n            callBack(currentCaret);\n            resolve();\n          });\n        });\n      };\n\n      editor._maskKeyHandler(event, function () {\n        if (editor._hasSelection()) {\n          return afterBackspaceHandler(true, function (currentCaret) {\n            editor._displayMask(currentCaret);\n\n            editor._maskRulesChain.reset();\n          });\n        }\n\n        if (editor._tryMoveCaretBackward()) {\n          return afterBackspaceHandler(false, function (currentCaret) {\n            _this.editorCaret(currentCaret);\n          });\n        }\n\n        editor._handleKey(EMPTY_CHAR, _this.DIRECTION.BACKWARD);\n\n        return afterBackspaceHandler(true, function (currentCaret) {\n          editor._displayMask(currentCaret);\n\n          editor._maskRulesChain.reset();\n        });\n      });\n    }\n  }, {\n    key: \"_backspaceInputHandled\",\n    value: function _backspaceInputHandled(inputType) {\n      return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n    }\n  }, {\n    key: \"_handleBackspaceInput\",\n    value: function _handleBackspaceInput(event) {\n      var _this$editorCaret = this.editorCaret(),\n          start = _this$editorCaret.start,\n          end = _this$editorCaret.end;\n\n      this.editorCaret({\n        start: start + 1,\n        end: end + 1\n      });\n\n      this._backspaceHandler(event);\n    }\n  }]);\n\n  return DefaultMaskStrategy;\n}(BaseMaskStrategy);\n\nexport default DefaultMaskStrategy;","map":null,"metadata":{},"sourceType":"module"}