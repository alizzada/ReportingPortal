{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_view_roller.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport devices from \"../../core/devices\";\nimport fx from \"../../animation/fx\";\nimport { resetPosition } from \"../../animation/translator\";\nvar DATEVIEW_ROLLER_CLASS = \"dx-dateviewroller\";\nvar DATEVIEW_ROLLER_ACTIVE_CLASS = \"dx-state-active\";\nvar DATEVIEW_ROLLER_CURRENT_CLASS = \"dx-dateviewroller-current\";\nvar DATEVIEW_ROLLER_ITEM_CLASS = \"dx-dateview-item\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_CLASS = \"dx-dateview-item-selected\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS = \"dx-dateview-item-selected-frame\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS = \"dx-dateview-item-selected-border\";\nvar DateViewRoller = Scrollable.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      showScrollbar: false,\n      useNative: false,\n      selectedIndex: 0,\n      bounceEnabled: false,\n      items: [],\n      showOnClick: false,\n      onClick: null,\n      onSelectedIndexChanged: null\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        scrollByContent: true\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._renderSelectedItemFrame();\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(DATEVIEW_ROLLER_CLASS);\n\n    this._renderContainerClick();\n\n    this._renderItems();\n\n    this._renderSelectedValue();\n\n    this._renderItemsClick();\n\n    this._renderWheelEvent();\n\n    this._wrapAction(\"_endAction\", this._endActionHandler.bind(this));\n\n    this._renderSelectedIndexChanged();\n  },\n  _renderSelectedIndexChanged: function _renderSelectedIndexChanged() {\n    this._selectedIndexChanged = this._createActionByOption(\"onSelectedIndexChanged\");\n  },\n  _renderWheelEvent: function _renderWheelEvent() {\n    var _this = this;\n\n    eventsEngine.on(this._$container, \"dxmousewheel\", function (e) {\n      _this._isWheelScrolled = true;\n    });\n  },\n  _renderContainerClick: function _renderContainerClick() {\n    if (!this.option(\"showOnClick\")) {\n      return;\n    }\n\n    var eventName = addNamespace(clickEventName, this.NAME);\n\n    var clickAction = this._createActionByOption(\"onClick\");\n\n    eventsEngine.off(this._$container, eventName);\n    eventsEngine.on(this._$container, eventName, function (e) {\n      clickAction({\n        event: e\n      });\n    });\n  },\n  _wrapAction: function _wrapAction(actionName, callback) {\n    var strategy = this._strategy;\n    var originalAction = strategy[actionName];\n\n    strategy[actionName] = function () {\n      callback.apply(this, arguments);\n      return originalAction.apply(this, arguments);\n    };\n  },\n  _renderItems: function _renderItems() {\n    var items = this.option(\"items\") || [];\n    var $items = $();\n\n    this._$content.empty();\n\n    items.forEach(function (item) {\n      $items = $items.add($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_CLASS).append(item));\n    });\n\n    this._$content.append($items);\n\n    this._$items = $items;\n    this.update();\n  },\n  _renderSelectedItemFrame: function _renderSelectedItemFrame() {\n    $(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS).append($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS)).appendTo(this._$container);\n  },\n  _renderSelectedValue: function _renderSelectedValue(selectedIndex) {\n    var index = this._fitIndex(null !== selectedIndex && void 0 !== selectedIndex ? selectedIndex : this.option(\"selectedIndex\"));\n\n    this._moveTo({\n      top: this._getItemPosition(index)\n    });\n\n    this._renderActiveStateItem();\n  },\n  _fitIndex: function _fitIndex(index) {\n    var items = this.option(\"items\") || [];\n    var itemCount = items.length;\n\n    if (index >= itemCount) {\n      return itemCount - 1;\n    }\n\n    if (index < 0) {\n      return 0;\n    }\n\n    return index;\n  },\n  _getItemPosition: function _getItemPosition(index) {\n    return Math.round(this._itemHeight() * index);\n  },\n  _renderItemsClick: function _renderItemsClick() {\n    var itemSelector = this._getItemSelector();\n\n    var eventName = addNamespace(clickEventName, this.NAME);\n    eventsEngine.off(this.$element(), eventName, itemSelector);\n    eventsEngine.on(this.$element(), eventName, itemSelector, this._itemClickHandler.bind(this));\n  },\n  _getItemSelector: function _getItemSelector() {\n    return \".\" + DATEVIEW_ROLLER_ITEM_CLASS;\n  },\n  _itemClickHandler: function _itemClickHandler(e) {\n    this.option(\"selectedIndex\", this._itemElementIndex(e.currentTarget));\n  },\n  _itemElementIndex: function _itemElementIndex(itemElement) {\n    return this._itemElements().index(itemElement);\n  },\n  _itemElements: function _itemElements() {\n    return this.$element().find(this._getItemSelector());\n  },\n  _renderActiveStateItem: function _renderActiveStateItem() {\n    var selectedIndex = this.option(\"selectedIndex\");\n    each(this._$items, function (index) {\n      $(this).toggleClass(DATEVIEW_ROLLER_ITEM_SELECTED_CLASS, selectedIndex === index);\n    });\n  },\n  _shouldScrollToNeighborItem: function _shouldScrollToNeighborItem() {\n    return \"desktop\" === devices.real().deviceType && this._isWheelScrolled;\n  },\n  _moveTo: function _moveTo(targetLocation) {\n    targetLocation = this._normalizeLocation(targetLocation);\n\n    var location = this._location();\n\n    var delta = {\n      x: -(location.left - targetLocation.left),\n      y: -(location.top - targetLocation.top)\n    };\n\n    if (this._isVisible() && (delta.x || delta.y)) {\n      this._strategy._prepareDirections(true);\n\n      if (this._animation && !this._shouldScrollToNeighborItem()) {\n        var that = this;\n        fx.stop(this._$content);\n        fx.animate(this._$content, {\n          duration: 200,\n          type: \"slide\",\n          to: {\n            top: Math.floor(delta.y)\n          },\n          complete: function complete() {\n            resetPosition(that._$content);\n\n            that._strategy.handleMove({\n              delta: delta\n            });\n          }\n        });\n        delete this._animation;\n      } else {\n        this._strategy.handleMove({\n          delta: delta\n        });\n      }\n    }\n  },\n  _validate: function _validate(e) {\n    return this._strategy.validate(e);\n  },\n  _fitSelectedIndexInRange: function _fitSelectedIndexInRange(index) {\n    var itemsCount = this.option(\"items\").length;\n    return Math.max(Math.min(index, itemsCount - 1), 0);\n  },\n  _isInNullNeighborhood: function _isInNullNeighborhood(x) {\n    return -.1 <= x && x <= .1;\n  },\n  _getSelectedIndexAfterScroll: function _getSelectedIndexAfterScroll(currentSelectedIndex) {\n    var locationTop = -this._location().top;\n\n    var currentSelectedIndexPosition = currentSelectedIndex * this._itemHeight();\n\n    var dy = locationTop - currentSelectedIndexPosition;\n\n    if (this._isInNullNeighborhood(dy)) {\n      return currentSelectedIndex;\n    }\n\n    var direction = dy > 0 ? 1 : -1;\n\n    var newSelectedIndex = this._fitSelectedIndexInRange(currentSelectedIndex + direction);\n\n    return newSelectedIndex;\n  },\n  _getNewSelectedIndex: function _getNewSelectedIndex(currentSelectedIndex) {\n    if (this._shouldScrollToNeighborItem()) {\n      return this._getSelectedIndexAfterScroll(currentSelectedIndex);\n    }\n\n    this._animation = true;\n\n    var ratio = -this._location().top / this._itemHeight();\n\n    return Math.round(ratio);\n  },\n  _endActionHandler: function _endActionHandler() {\n    var currentSelectedIndex = this.option(\"selectedIndex\");\n\n    var newSelectedIndex = this._getNewSelectedIndex(currentSelectedIndex);\n\n    if (newSelectedIndex === currentSelectedIndex) {\n      this._renderSelectedValue(newSelectedIndex);\n    } else {\n      this.option(\"selectedIndex\", newSelectedIndex);\n    }\n\n    this._isWheelScrolled = false;\n  },\n  _itemHeight: function _itemHeight() {\n    var $item = this._$items.first();\n\n    return $item.height();\n  },\n  _toggleActive: function _toggleActive(state) {\n    this.$element().toggleClass(DATEVIEW_ROLLER_ACTIVE_CLASS, state);\n  },\n  _isVisible: function _isVisible() {\n    return this._$container.is(\":visible\");\n  },\n  _fireSelectedIndexChanged: function _fireSelectedIndexChanged(value, previousValue) {\n    this._selectedIndexChanged({\n      value: value,\n      previousValue: previousValue,\n      event: void 0\n    });\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    this.callBase(visible);\n\n    if (visible) {\n      this._renderSelectedValue(this.option(\"selectedIndex\"));\n    }\n\n    this.toggleActiveState(false);\n  },\n  toggleActiveState: function toggleActiveState(state) {\n    this.$element().toggleClass(DATEVIEW_ROLLER_CURRENT_CLASS, state);\n  },\n  _refreshSelectedIndex: function _refreshSelectedIndex() {\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    var fitIndex = this._fitIndex(selectedIndex);\n\n    if (fitIndex === selectedIndex) {\n      this._renderActiveStateItem();\n    } else {\n      this.option(\"selectedIndex\", fitIndex);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"selectedIndex\":\n        this._fireSelectedIndexChanged(args.value, args.previousValue);\n\n        this._renderSelectedValue(args.value);\n\n        break;\n\n      case \"items\":\n        this._renderItems();\n\n        this._refreshSelectedIndex();\n\n        break;\n\n      case \"onClick\":\n      case \"showOnClick\":\n        this._renderContainerClick();\n\n        break;\n\n      case \"onSelectedIndexChanged\":\n        this._renderSelectedIndexChanged();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxDateViewRoller\", DateViewRoller);\nexport default DateViewRoller;","map":null,"metadata":{},"sourceType":"module"}