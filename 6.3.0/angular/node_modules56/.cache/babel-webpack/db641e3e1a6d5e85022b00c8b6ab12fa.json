{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BasePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.base\";\nimport AdaptivePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.adaptive\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { isNumeric, isObject } from \"../../../core/utils/type\";\nimport { current as currentTheme } from \"../../themes\";\nimport timeZoneUtils from \"../utils.timeZone\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar APPOINTMENT_MIN_SIZE = 2;\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\n\nvar BaseRenderingStrategy = /*#__PURE__*/function () {\n  function BaseRenderingStrategy(instance) {\n    _classCallCheck(this, BaseRenderingStrategy);\n\n    this.instance = instance;\n\n    this._initPositioningStrategy();\n  }\n\n  _createClass(BaseRenderingStrategy, [{\n    key: \"isVirtualScrolling\",\n    get: function get() {\n      return this.instance.fire(\"isVirtualScrolling\");\n    }\n  }, {\n    key: \"_isAdaptive\",\n    value: function _isAdaptive() {\n      return this.instance.fire(\"isAdaptive\");\n    }\n  }, {\n    key: \"_correctCollectorCoordinatesInAdaptive\",\n    value: function _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n      coordinates.top = coordinates.top + this.getCollectorTopOffset(isAllDay);\n      coordinates.left = coordinates.left + this.getCollectorLeftOffset();\n    }\n  }, {\n    key: \"_initPositioningStrategy\",\n    value: function _initPositioningStrategy() {\n      this._positioningStrategy = this._isAdaptive() ? new AdaptivePositioningStrategy(this) : new BasePositioningStrategy(this);\n    }\n  }, {\n    key: \"getPositioningStrategy\",\n    value: function getPositioningStrategy() {\n      return this._positioningStrategy;\n    }\n  }, {\n    key: \"getAppointmentMinSize\",\n    value: function getAppointmentMinSize() {\n      return APPOINTMENT_MIN_SIZE;\n    }\n  }, {\n    key: \"keepAppointmentSettings\",\n    value: function keepAppointmentSettings() {\n      return false;\n    }\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime() {}\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(coordinates) {\n      return coordinates;\n    }\n  }, {\n    key: \"needCorrectAppointmentDates\",\n    value: function needCorrectAppointmentDates() {\n      return true;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      return \"horizontal\";\n    }\n  }, {\n    key: \"createTaskPositionMap\",\n    value: function createTaskPositionMap(items) {\n      delete this._maxAppointmentCountPerCell;\n      var length = items && items.length;\n\n      if (!length) {\n        return;\n      }\n\n      this._defaultWidth = this.instance.fire(\"getCellWidth\");\n      this._defaultHeight = this.instance.fire(\"getCellHeight\");\n      this._allDayHeight = this.instance._allDayCellHeight;\n      var map = [];\n\n      for (var i = 0; i < length; i++) {\n        var coordinates = this._getItemPosition(items[i]);\n\n        if (this._isRtl()) {\n          coordinates = this._correctRtlCoordinates(coordinates);\n        }\n\n        map.push(coordinates);\n      }\n\n      var positionArray = this._getSortedPositions(map);\n\n      var resultPositions = this._getResultPositions(positionArray);\n\n      return this._getExtendedPositionMap(map, resultPositions);\n    }\n  }, {\n    key: \"_getDeltaWidth\",\n    value: function _getDeltaWidth(args, initialSize) {\n      var intervalWidth = this.instance.fire(\"getResizableStep\") || this.getAppointmentMinSize();\n      var initialWidth = initialSize.width;\n      return Math.round((args.width - initialWidth) / intervalWidth);\n    }\n  }, {\n    key: \"_correctRtlCoordinates\",\n    value: function _correctRtlCoordinates(coordinates) {\n      var width = coordinates[0].width || this._getAppointmentMaxWidth();\n\n      coordinates.forEach(function (coordinate) {\n        if (!coordinate.appointmentReduced) {\n          coordinate.left -= width;\n        }\n      });\n      return coordinates;\n    }\n  }, {\n    key: \"_getAppointmentMaxWidth\",\n    value: function _getAppointmentMaxWidth() {\n      return this.getDefaultCellWidth();\n    }\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(appointment) {\n      var position = this._getAppointmentCoordinates(appointment);\n\n      var allDay = this.isAllDay(appointment);\n      var result = [];\n\n      for (var j = 0; j < position.length; j++) {\n        var height = this.calculateAppointmentHeight(appointment, position[j]);\n        var width = this.calculateAppointmentWidth(appointment, position[j]);\n        var resultWidth = width;\n        var appointmentReduced = null;\n        var multiWeekAppointmentParts = [];\n        var initialRowIndex = position[j].rowIndex;\n        var initialCellIndex = position[j].cellIndex;\n\n        if (this._needVerifyItemSize() || allDay) {\n          var currentMaxAllowedPosition = position[j].hMax;\n\n          if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\n            left: position[j].left,\n            width: width\n          })) {\n            appointmentReduced = \"head\";\n            initialRowIndex = position[j].rowIndex;\n            initialCellIndex = position[j].cellIndex;\n            resultWidth = this._reduceMultiWeekAppointment(width, {\n              left: position[j].left,\n              right: currentMaxAllowedPosition\n            });\n            multiWeekAppointmentParts = this._getAppointmentParts({\n              sourceAppointmentWidth: width,\n              reducedWidth: resultWidth,\n              height: height\n            }, position[j]);\n\n            if (this._isRtl()) {\n              position[j].left = currentMaxAllowedPosition;\n            }\n          }\n        }\n\n        extend(position[j], {\n          height: height,\n          width: resultWidth,\n          allDay: allDay,\n          rowIndex: initialRowIndex,\n          cellIndex: initialCellIndex,\n          appointmentReduced: appointmentReduced\n        });\n        result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getAppointmentPartsPosition\",\n    value: function _getAppointmentPartsPosition(appointmentParts, position, result) {\n      if (appointmentParts.length) {\n        appointmentParts.unshift(position);\n        result = result.concat(appointmentParts);\n      } else {\n        result.push(position);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getAppointmentCoordinates\",\n    value: function _getAppointmentCoordinates(appointment) {\n      return this.instance.fire(\"createAppointmentSettings\", appointment);\n    }\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this.instance.option(\"rtlEnabled\");\n    }\n  }, {\n    key: \"_getAppointmentParts\",\n    value: function _getAppointmentParts() {\n      return [];\n    }\n  }, {\n    key: \"_getCompactAppointmentParts\",\n    value: function _getCompactAppointmentParts(appointmentWidth) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      return Math.round(appointmentWidth / cellWidth);\n    }\n  }, {\n    key: \"_reduceMultiWeekAppointment\",\n    value: function _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\n      if (this._isRtl()) {\n        sourceAppointmentWidth = Math.floor(bound.left - bound.right);\n      } else {\n        sourceAppointmentWidth = bound.right - Math.floor(bound.left);\n      }\n\n      return sourceAppointmentWidth;\n    }\n  }, {\n    key: \"calculateAppointmentHeight\",\n    value: function calculateAppointmentHeight() {\n      return 0;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth() {\n      return 0;\n    }\n  }, {\n    key: \"isAppointmentGreaterThan\",\n    value: function isAppointmentGreaterThan(etalon, comparisonParameters) {\n      var result = comparisonParameters.left + comparisonParameters.width - etalon;\n\n      if (this._isRtl()) {\n        result = etalon + comparisonParameters.width - comparisonParameters.left;\n      }\n\n      return result > this.getDefaultCellWidth() / 2;\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay() {\n      return false;\n    }\n  }, {\n    key: \"cropAppointmentWidth\",\n    value: function cropAppointmentWidth(width, cellWidth) {\n      if (this.instance.fire(\"isGroupedByDate\")) {\n        width = cellWidth;\n      }\n\n      return width;\n    }\n  }, {\n    key: \"_getSortedPositions\",\n    value: function _getSortedPositions(positionList) {\n      var _this = this;\n\n      var result = [];\n\n      var round = function round(value) {\n        return Math.round(100 * value) / 100;\n      };\n\n      var createItem = function createItem(rowIndex, cellIndex, top, left, bottom, right, position, allDay) {\n        return {\n          i: rowIndex,\n          j: cellIndex,\n          top: round(top),\n          left: round(left),\n          bottom: round(bottom),\n          right: round(right),\n          cellPosition: position,\n          allDay: allDay\n        };\n      };\n\n      for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\n        for (var cellIndex = 0, cellCount = positionList[rowIndex].length; cellIndex < cellCount; cellIndex++) {\n          var _positionList$rowInde = positionList[rowIndex][cellIndex],\n              top = _positionList$rowInde.top,\n              left = _positionList$rowInde.left,\n              height = _positionList$rowInde.height,\n              width = _positionList$rowInde.width,\n              cellPosition = _positionList$rowInde.cellPosition,\n              allDay = _positionList$rowInde.allDay;\n          result.push(createItem(rowIndex, cellIndex, top, left, top + height, left + width, cellPosition, allDay));\n        }\n      }\n\n      return result.sort(function (a, b) {\n        return _this._sortCondition(a, b);\n      });\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition() {}\n  }, {\n    key: \"_getConditions\",\n    value: function _getConditions(a, b) {\n      var isSomeEdge = this._isSomeEdge(a, b);\n\n      return {\n        columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\n        rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\n        cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\n      };\n    }\n  }, {\n    key: \"_rowCondition\",\n    value: function _rowCondition(a, b) {\n      var conditions = this._getConditions(a, b);\n\n      return conditions.columnCondition || conditions.rowCondition;\n    }\n  }, {\n    key: \"_columnCondition\",\n    value: function _columnCondition(a, b) {\n      var conditions = this._getConditions(a, b);\n\n      return conditions.rowCondition || conditions.columnCondition;\n    }\n  }, {\n    key: \"_isSomeEdge\",\n    value: function _isSomeEdge(a, b) {\n      return a.i === b.i && a.j === b.j;\n    }\n  }, {\n    key: \"_normalizeCondition\",\n    value: function _normalizeCondition(first, second) {\n      var result = first - second;\n      return Math.abs(result) > 1 ? result : 0;\n    }\n  }, {\n    key: \"_isItemsCross\",\n    value: function _isItemsCross(firstItem, secondItem) {\n      var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\n      var areItemsAllDay = firstItem.allDay && secondItem.allDay;\n\n      if (areItemsInTheSameTable) {\n        var orientation = this._getOrientation(areItemsAllDay);\n\n        return this._checkItemsCrossing(firstItem, secondItem, orientation);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"_checkItemsCrossing\",\n    value: function _checkItemsCrossing(firstItem, secondItem, orientation) {\n      var firstItemSide_1 = Math.floor(firstItem[orientation[0]]);\n      var firstItemSide_2 = Math.floor(firstItem[orientation[1]]);\n      var secondItemSide_1 = Math.ceil(secondItem[orientation[0]]);\n      var secondItemSide_2 = Math.ceil(secondItem[orientation[1]]);\n      var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\n      return isItemCross && (firstItemSide_1 <= secondItemSide_1 && firstItemSide_2 > secondItemSide_1 || firstItemSide_1 < secondItemSide_2 && firstItemSide_2 >= secondItemSide_2 || firstItemSide_1 === secondItemSide_1 && firstItemSide_2 === secondItemSide_2);\n    }\n  }, {\n    key: \"_getOrientation\",\n    value: function _getOrientation(isAllDay) {\n      return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"];\n    }\n  }, {\n    key: \"_getResultPositions\",\n    value: function _getResultPositions(sortedArray) {\n      var _this2 = this;\n\n      var result = [];\n      var i;\n      var sortedIndex = 0;\n      var currentItem;\n      var indexes;\n      var itemIndex;\n      var maxIndexInStack = 0;\n      var stack = {};\n\n      var findFreeIndex = function findFreeIndex(indexes, index) {\n        var isFind = indexes.some(function (item) {\n          return item === index;\n        });\n\n        if (isFind) {\n          return findFreeIndex(indexes, ++index);\n        } else {\n          return index;\n        }\n      };\n\n      var createItem = function createItem(currentItem, index) {\n        var currentIndex = index || 0;\n        return {\n          index: currentIndex,\n          i: currentItem.i,\n          j: currentItem.j,\n          left: currentItem.left,\n          right: currentItem.right,\n          top: currentItem.top,\n          bottom: currentItem.bottom,\n          allDay: currentItem.allDay,\n          sortedIndex: _this2._skipSortedIndex(currentIndex) ? null : sortedIndex++\n        };\n      };\n\n      var startNewStack = function startNewStack(currentItem) {\n        stack.items = [createItem(currentItem)];\n        stack.left = currentItem.left;\n        stack.right = currentItem.right;\n        stack.top = currentItem.top;\n        stack.bottom = currentItem.bottom;\n        stack.allDay = currentItem.allDay;\n      };\n\n      var pushItemsInResult = function pushItemsInResult(items) {\n        items.forEach(function (item) {\n          result.push({\n            index: item.index,\n            count: maxIndexInStack + 1,\n            i: item.i,\n            j: item.j,\n            sortedIndex: item.sortedIndex\n          });\n        });\n      };\n\n      for (i = 0; i < sortedArray.length; i++) {\n        currentItem = sortedArray[i];\n        indexes = [];\n\n        if (!stack.items) {\n          startNewStack(currentItem);\n        } else if (this._isItemsCross(stack, currentItem)) {\n          stack.items.forEach(function (item, index) {\n            if (_this2._isItemsCross(item, currentItem)) {\n              indexes.push(item.index);\n            }\n          });\n          itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\n          stack.items.push(createItem(currentItem, itemIndex));\n          maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\n          stack.left = Math.min(stack.left, currentItem.left);\n          stack.right = Math.max(stack.right, currentItem.right);\n          stack.top = Math.min(stack.top, currentItem.top);\n          stack.bottom = Math.max(stack.bottom, currentItem.bottom);\n          stack.allDay = currentItem.allDay;\n        } else {\n          pushItemsInResult(stack.items);\n          stack = {};\n          startNewStack(currentItem);\n          maxIndexInStack = 0;\n        }\n      }\n\n      if (stack.items) {\n        pushItemsInResult(stack.items);\n      }\n\n      return result.sort(function (a, b) {\n        var columnCondition = a.j - b.j;\n        var rowCondition = a.i - b.i;\n        return rowCondition ? rowCondition : columnCondition;\n      });\n    }\n  }, {\n    key: \"_skipSortedIndex\",\n    value: function _skipSortedIndex(index) {\n      return index > this._getMaxAppointmentCountPerCell() - 1;\n    }\n  }, {\n    key: \"_findIndexByKey\",\n    value: function _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\n      var result = 0;\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\n          result = i;\n          break;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getExtendedPositionMap\",\n    value: function _getExtendedPositionMap(map, positions) {\n      var positionCounter = 0;\n      var result = [];\n\n      for (var i = 0, mapLength = map.length; i < mapLength; i++) {\n        var resultString = [];\n\n        for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\n          map[i][j].index = positions[positionCounter].index;\n          map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\n          map[i][j].count = positions[positionCounter++].count;\n          resultString.push(map[i][j]);\n\n          this._checkLongCompactAppointment(map[i][j], resultString);\n        }\n\n        result.push(resultString);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_checkLongCompactAppointment\",\n    value: function _checkLongCompactAppointment(item, result) {\n      this._splitLongCompactAppointment(item, result);\n\n      return result;\n    }\n  }, {\n    key: \"_splitLongCompactAppointment\",\n    value: function _splitLongCompactAppointment(item, result) {\n      var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\n\n      var compactCount = 0;\n\n      if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\n        item.isCompact = true;\n        compactCount = this._getCompactAppointmentParts(item.width);\n\n        for (var k = 1; k < compactCount; k++) {\n          var compactPart = extend(true, {}, item);\n          compactPart.left = this._getCompactLeftCoordinate(item.left, k);\n          compactPart.cellIndex = compactPart.cellIndex + k;\n          compactPart.sortedIndex = null;\n          result.push(compactPart);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"normalizeEndDateByViewEnd\",\n    value: function normalizeEndDateByViewEnd(appointment, endDate) {\n      var result = new Date(endDate.getTime());\n\n      if (!this.isAllDay(appointment)) {\n        var viewEndDate = dateUtils.roundToHour(this.instance.fire(\"getEndViewDate\"));\n\n        if (result > viewEndDate) {\n          result = viewEndDate;\n        }\n      }\n\n      var endDayHour = this.instance._getCurrentViewOption(\"endDayHour\");\n\n      var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n      var currentViewEndTime = new Date(new Date(endDate.getTime()).setHours(endDayHour, 0, 0, 0));\n\n      if (result.getTime() > currentViewEndTime.getTime() || allDay && result.getHours() < endDayHour) {\n        result = currentViewEndTime;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_adjustDurationByDaylightDiff\",\n    value: function _adjustDurationByDaylightDiff(duration, startDate, endDate) {\n      var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\n      return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration;\n    }\n  }, {\n    key: \"_needAdjustDuration\",\n    value: function _needAdjustDuration(diff) {\n      return 0 !== diff;\n    }\n  }, {\n    key: \"_calculateDurationByDaylightDiff\",\n    value: function _calculateDurationByDaylightDiff(duration, diff) {\n      return duration + diff * toMs(\"minute\");\n    }\n  }, {\n    key: \"_getAppointmentDurationInMs\",\n    value: function _getAppointmentDurationInMs(startDate, endDate, allDay) {\n      return this.instance.fire(\"getAppointmentDurationInMs\", {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay\n      });\n    }\n  }, {\n    key: \"_markAppointmentAsVirtual\",\n    value: function _markAppointmentAsVirtual(coordinates) {\n      var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n\n      var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\n\n      if (coordinates.count - countFullWidthAppointmentInCell > 0) {\n        var top = coordinates.top,\n            left = coordinates.left;\n        coordinates.virtual = {\n          top: top,\n          left: left,\n          index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\n          isAllDay: isAllDay\n        };\n      }\n    }\n  }, {\n    key: \"_generateAppointmentCollectorIndex\",\n    value: function _generateAppointmentCollectorIndex(_ref, isAllDay) {\n      var groupIndex = _ref.groupIndex,\n          rowIndex = _ref.rowIndex,\n          cellIndex = _ref.cellIndex;\n      return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(cellIndex, \"-\").concat(isAllDay);\n    }\n  }, {\n    key: \"_getMaxAppointmentCountPerCellByType\",\n    value: function _getMaxAppointmentCountPerCellByType(isAllDay) {\n      var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\n\n      if (isObject(appointmentCountPerCell)) {\n        return isAllDay ? this._getMaxAppointmentCountPerCell().allDay : this._getMaxAppointmentCountPerCell().simple;\n      } else {\n        return appointmentCountPerCell;\n      }\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth(intervalCount, isAllDay) {\n      return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay);\n    }\n  }, {\n    key: \"getDropDownAppointmentHeight\",\n    value: function getDropDownAppointmentHeight() {\n      return this.getPositioningStrategy().getDropDownAppointmentHeight();\n    }\n  }, {\n    key: \"getDropDownButtonAdaptiveSize\",\n    value: function getDropDownButtonAdaptiveSize() {\n      return DROP_DOWN_BUTTON_ADAPTIVE_SIZE;\n    }\n  }, {\n    key: \"getDefaultCellWidth\",\n    value: function getDefaultCellWidth() {\n      return this._defaultWidth;\n    }\n  }, {\n    key: \"getDefaultCellHeight\",\n    value: function getDefaultCellHeight() {\n      return this._defaultHeight;\n    }\n  }, {\n    key: \"getDefaultAllDayCellHeight\",\n    value: function getDefaultAllDayCellHeight() {\n      return this._allDayHeight;\n    }\n  }, {\n    key: \"getCollectorTopOffset\",\n    value: function getCollectorTopOffset(allDay) {\n      return this.getPositioningStrategy().getCollectorTopOffset(allDay);\n    }\n  }, {\n    key: \"getCollectorLeftOffset\",\n    value: function getCollectorLeftOffset() {\n      return this.getPositioningStrategy().getCollectorLeftOffset();\n    }\n  }, {\n    key: \"getAppointmentDataCalculator\",\n    value: function getAppointmentDataCalculator() {}\n  }, {\n    key: \"_customizeCoordinates\",\n    value: function _customizeCoordinates(coordinates, height, appointmentCountPerCell, topOffset, isAllDay) {\n      var index = coordinates.index;\n      var appointmentHeight = height / appointmentCountPerCell;\n      var appointmentTop = coordinates.top + index * appointmentHeight;\n      var top = appointmentTop + topOffset;\n      var width = coordinates.width;\n      var left = coordinates.left;\n\n      if (coordinates.isCompact) {\n        this._isAdaptive() && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n\n        this._markAppointmentAsVirtual(coordinates, isAllDay);\n      }\n\n      return {\n        height: appointmentHeight,\n        width: width,\n        top: top,\n        left: left,\n        empty: this._isAppointmentEmpty(height, width)\n      };\n    }\n  }, {\n    key: \"_isAppointmentEmpty\",\n    value: function _isAppointmentEmpty(height, width) {\n      return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth();\n    }\n  }, {\n    key: \"_calculateGeometryConfig\",\n    value: function _calculateGeometryConfig(coordinates) {\n      var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n      var offsets = this._getOffsets();\n\n      var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n\n      var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n\n      var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n\n      var maxHeight = this._getMaxHeight();\n\n      if (!isNumeric(appointmentCountPerCell)) {\n        appointmentCountPerCell = coordinates.count;\n        ratio = (maxHeight - offsets.unlimited) / maxHeight;\n      }\n\n      var topOffset = (1 - ratio) * maxHeight;\n\n      if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n        ratio = 1;\n        maxHeight -= appointmentDefaultOffset;\n        topOffset = appointmentDefaultOffset;\n      }\n\n      return {\n        height: ratio * maxHeight,\n        appointmentCountPerCell: appointmentCountPerCell,\n        offset: topOffset\n      };\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function _getAppointmentCount() {}\n  }, {\n    key: \"_getDefaultRatio\",\n    value: function _getDefaultRatio() {}\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {}\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {}\n  }, {\n    key: \"_needVerifyItemSize\",\n    value: function _needVerifyItemSize() {\n      return false;\n    }\n  }, {\n    key: \"needSeparateAppointment\",\n    value: function needSeparateAppointment(allDay) {\n      return this.instance.fire(\"isGroupedByDate\") && allDay;\n    }\n  }, {\n    key: \"_getMaxAppointmentCountPerCell\",\n    value: function _getMaxAppointmentCountPerCell() {\n      if (!this._maxAppointmentCountPerCell) {\n        var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n        var appointmentCountPerCell;\n\n        if (isNumeric(overlappingMode)) {\n          appointmentCountPerCell = overlappingMode;\n        }\n\n        if (\"auto\" === overlappingMode) {\n          appointmentCountPerCell = this._getDynamicAppointmentCountPerCell();\n        }\n\n        if (\"unlimited\" === overlappingMode) {\n          appointmentCountPerCell = void 0;\n        }\n\n        this._maxAppointmentCountPerCell = appointmentCountPerCell;\n      }\n\n      return this._maxAppointmentCountPerCell;\n    }\n  }, {\n    key: \"_getDynamicAppointmentCountPerCell\",\n    value: function _getDynamicAppointmentCountPerCell() {\n      return this.getPositioningStrategy().getDynamicAppointmentCountPerCell();\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments() {\n      return false;\n    }\n  }, {\n    key: \"_isCompactTheme\",\n    value: function _isCompactTheme() {\n      return \"compact\" === (currentTheme() || \"\").split(\".\").pop();\n    }\n  }, {\n    key: \"_getAppointmentDefaultOffset\",\n    value: function _getAppointmentDefaultOffset() {\n      return this.getPositioningStrategy().getAppointmentDefaultOffset();\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return this._getAppointmentHeightByTheme();\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return this._getAppointmentDefaultHeight();\n    }\n  }, {\n    key: \"_getAppointmentHeightByTheme\",\n    value: function _getAppointmentHeightByTheme() {\n      return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT;\n    }\n  }, {\n    key: \"_getAppointmentDefaultWidth\",\n    value: function _getAppointmentDefaultWidth() {\n      return this.getPositioningStrategy()._getAppointmentDefaultWidth();\n    }\n  }, {\n    key: \"_getAppointmentMinWidth\",\n    value: function _getAppointmentMinWidth() {\n      return this._getAppointmentDefaultWidth();\n    }\n  }, {\n    key: \"_needVerticalGroupBounds\",\n    value: function _needVerticalGroupBounds() {\n      return false;\n    }\n  }, {\n    key: \"_needHorizontalGroupBounds\",\n    value: function _needHorizontalGroupBounds() {\n      return false;\n    }\n  }]);\n\n  return BaseRenderingStrategy;\n}();\n\nexport default BaseRenderingStrategy;","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js"],"names":["BasePositioningStrategy","AdaptivePositioningStrategy","extend","dateUtils","isNumeric","isObject","current","currentTheme","timeZoneUtils","toMs","dateToMilliseconds","APPOINTMENT_MIN_SIZE","APPOINTMENT_DEFAULT_HEIGHT","COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT","DROP_DOWN_BUTTON_ADAPTIVE_SIZE","BaseRenderingStrategy","instance","_initPositioningStrategy","fire","coordinates","isAllDay","top","getCollectorTopOffset","left","getCollectorLeftOffset","_positioningStrategy","_isAdaptive","items","_maxAppointmentCountPerCell","length","_defaultWidth","_defaultHeight","_allDayHeight","_allDayCellHeight","map","i","_getItemPosition","_isRtl","_correctRtlCoordinates","push","positionArray","_getSortedPositions","resultPositions","_getResultPositions","_getExtendedPositionMap","args","initialSize","intervalWidth","getAppointmentMinSize","initialWidth","width","Math","round","_getAppointmentMaxWidth","forEach","coordinate","appointmentReduced","getDefaultCellWidth","appointment","position","_getAppointmentCoordinates","allDay","result","j","height","calculateAppointmentHeight","calculateAppointmentWidth","resultWidth","multiWeekAppointmentParts","initialRowIndex","rowIndex","initialCellIndex","cellIndex","_needVerifyItemSize","currentMaxAllowedPosition","hMax","isAppointmentGreaterThan","_reduceMultiWeekAppointment","right","_getAppointmentParts","sourceAppointmentWidth","reducedWidth","_getAppointmentPartsPosition","appointmentParts","unshift","concat","option","appointmentWidth","cellWidth","bound","floor","etalon","comparisonParameters","positionList","value","createItem","bottom","cellPosition","rowCount","cellCount","sort","a","b","_sortCondition","isSomeEdge","_isSomeEdge","columnCondition","_normalizeCondition","rowCondition","cellPositionCondition","conditions","_getConditions","first","second","abs","firstItem","secondItem","areItemsInTheSameTable","areItemsAllDay","orientation","_getOrientation","_checkItemsCrossing","firstItemSide_1","firstItemSide_2","secondItemSide_1","ceil","secondItemSide_2","isItemCross","sortedArray","sortedIndex","currentItem","indexes","itemIndex","maxIndexInStack","stack","findFreeIndex","index","isFind","some","item","currentIndex","_skipSortedIndex","startNewStack","pushItemsInResult","count","_isItemsCross","max","min","_getMaxAppointmentCountPerCell","arr","iKey","jKey","iValue","jValue","len","positions","positionCounter","mapLength","resultString","itemLength","_checkLongCompactAppointment","_splitLongCompactAppointment","appointmentCountPerCell","_getMaxAppointmentCountPerCellByType","compactCount","isCompact","_getCompactAppointmentParts","k","compactPart","_getCompactLeftCoordinate","endDate","Date","getTime","viewEndDate","roundToHour","endDayHour","_getCurrentViewOption","currentViewEndTime","setHours","getHours","duration","startDate","daylightDiff","getDaylightOffset","_needAdjustDuration","_calculateDurationByDaylightDiff","diff","arguments","countFullWidthAppointmentInCell","virtual","_generateAppointmentCollectorIndex","_ref","groupIndex","simple","intervalCount","getPositioningStrategy","getDropDownAppointmentWidth","getDropDownAppointmentHeight","topOffset","appointmentHeight","appointmentTop","_correctCollectorCoordinatesInAdaptive","_markAppointmentAsVirtual","empty","_isAppointmentEmpty","_getAppointmentMinHeight","_getAppointmentMinWidth","overlappingMode","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxHeight","_getMaxHeight","unlimited","offset","_getDynamicAppointmentCountPerCell","getDynamicAppointmentCountPerCell","split","pop","getAppointmentDefaultOffset","_getAppointmentHeightByTheme","_getAppointmentDefaultHeight","_isCompactTheme","_getAppointmentDefaultWidth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.base.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BasePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.base\";\r\nimport AdaptivePositioningStrategy from \"./ui.scheduler.appointmentsPositioning.strategy.adaptive\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    isNumeric,\r\n    isObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    current as currentTheme\r\n} from \"../../themes\";\r\nimport timeZoneUtils from \"../utils.timeZone\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar APPOINTMENT_MIN_SIZE = 2;\r\nvar APPOINTMENT_DEFAULT_HEIGHT = 20;\r\nvar COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT = 18;\r\nvar DROP_DOWN_BUTTON_ADAPTIVE_SIZE = 28;\r\nclass BaseRenderingStrategy {\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n        this._initPositioningStrategy()\r\n    }\r\n    get isVirtualScrolling() {\r\n        return this.instance.fire(\"isVirtualScrolling\")\r\n    }\r\n    _isAdaptive() {\r\n        return this.instance.fire(\"isAdaptive\")\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        coordinates.top = coordinates.top + this.getCollectorTopOffset(isAllDay);\r\n        coordinates.left = coordinates.left + this.getCollectorLeftOffset()\r\n    }\r\n    _initPositioningStrategy() {\r\n        this._positioningStrategy = this._isAdaptive() ? new AdaptivePositioningStrategy(this) : new BasePositioningStrategy(this)\r\n    }\r\n    getPositioningStrategy() {\r\n        return this._positioningStrategy\r\n    }\r\n    getAppointmentMinSize() {\r\n        return APPOINTMENT_MIN_SIZE\r\n    }\r\n    keepAppointmentSettings() {\r\n        return false\r\n    }\r\n    getDeltaTime() {}\r\n    getAppointmentGeometry(coordinates) {\r\n        return coordinates\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return true\r\n    }\r\n    getDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    createTaskPositionMap(items) {\r\n        delete this._maxAppointmentCountPerCell;\r\n        var length = items && items.length;\r\n        if (!length) {\r\n            return\r\n        }\r\n        this._defaultWidth = this.instance.fire(\"getCellWidth\");\r\n        this._defaultHeight = this.instance.fire(\"getCellHeight\");\r\n        this._allDayHeight = this.instance._allDayCellHeight;\r\n        var map = [];\r\n        for (var i = 0; i < length; i++) {\r\n            var coordinates = this._getItemPosition(items[i]);\r\n            if (this._isRtl()) {\r\n                coordinates = this._correctRtlCoordinates(coordinates)\r\n            }\r\n            map.push(coordinates)\r\n        }\r\n        var positionArray = this._getSortedPositions(map);\r\n        var resultPositions = this._getResultPositions(positionArray);\r\n        return this._getExtendedPositionMap(map, resultPositions)\r\n    }\r\n    _getDeltaWidth(args, initialSize) {\r\n        var intervalWidth = this.instance.fire(\"getResizableStep\") || this.getAppointmentMinSize();\r\n        var initialWidth = initialSize.width;\r\n        return Math.round((args.width - initialWidth) / intervalWidth)\r\n    }\r\n    _correctRtlCoordinates(coordinates) {\r\n        var width = coordinates[0].width || this._getAppointmentMaxWidth();\r\n        coordinates.forEach(coordinate => {\r\n            if (!coordinate.appointmentReduced) {\r\n                coordinate.left -= width\r\n            }\r\n        });\r\n        return coordinates\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.getDefaultCellWidth()\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var position = this._getAppointmentCoordinates(appointment);\r\n        var allDay = this.isAllDay(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < position.length; j++) {\r\n            var height = this.calculateAppointmentHeight(appointment, position[j]);\r\n            var width = this.calculateAppointmentWidth(appointment, position[j]);\r\n            var resultWidth = width;\r\n            var appointmentReduced = null;\r\n            var multiWeekAppointmentParts = [];\r\n            var initialRowIndex = position[j].rowIndex;\r\n            var initialCellIndex = position[j].cellIndex;\r\n            if (this._needVerifyItemSize() || allDay) {\r\n                var currentMaxAllowedPosition = position[j].hMax;\r\n                if (this.isAppointmentGreaterThan(currentMaxAllowedPosition, {\r\n                        left: position[j].left,\r\n                        width: width\r\n                    })) {\r\n                    appointmentReduced = \"head\";\r\n                    initialRowIndex = position[j].rowIndex;\r\n                    initialCellIndex = position[j].cellIndex;\r\n                    resultWidth = this._reduceMultiWeekAppointment(width, {\r\n                        left: position[j].left,\r\n                        right: currentMaxAllowedPosition\r\n                    });\r\n                    multiWeekAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentWidth: width,\r\n                        reducedWidth: resultWidth,\r\n                        height: height\r\n                    }, position[j]);\r\n                    if (this._isRtl()) {\r\n                        position[j].left = currentMaxAllowedPosition\r\n                    }\r\n                }\r\n            }\r\n            extend(position[j], {\r\n                height: height,\r\n                width: resultWidth,\r\n                allDay: allDay,\r\n                rowIndex: initialRowIndex,\r\n                cellIndex: initialCellIndex,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiWeekAppointmentParts, position[j], result)\r\n        }\r\n        return result\r\n    }\r\n    _getAppointmentPartsPosition(appointmentParts, position, result) {\r\n        if (appointmentParts.length) {\r\n            appointmentParts.unshift(position);\r\n            result = result.concat(appointmentParts)\r\n        } else {\r\n            result.push(position)\r\n        }\r\n        return result\r\n    }\r\n    _getAppointmentCoordinates(appointment) {\r\n        return this.instance.fire(\"createAppointmentSettings\", appointment)\r\n    }\r\n    _isRtl() {\r\n        return this.instance.option(\"rtlEnabled\")\r\n    }\r\n    _getAppointmentParts() {\r\n        return []\r\n    }\r\n    _getCompactAppointmentParts(appointmentWidth) {\r\n        var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\r\n        return Math.round(appointmentWidth / cellWidth)\r\n    }\r\n    _reduceMultiWeekAppointment(sourceAppointmentWidth, bound) {\r\n        if (this._isRtl()) {\r\n            sourceAppointmentWidth = Math.floor(bound.left - bound.right)\r\n        } else {\r\n            sourceAppointmentWidth = bound.right - Math.floor(bound.left)\r\n        }\r\n        return sourceAppointmentWidth\r\n    }\r\n    calculateAppointmentHeight() {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth() {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan(etalon, comparisonParameters) {\r\n        var result = comparisonParameters.left + comparisonParameters.width - etalon;\r\n        if (this._isRtl()) {\r\n            result = etalon + comparisonParameters.width - comparisonParameters.left\r\n        }\r\n        return result > this.getDefaultCellWidth() / 2\r\n    }\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    cropAppointmentWidth(width, cellWidth) {\r\n        if (this.instance.fire(\"isGroupedByDate\")) {\r\n            width = cellWidth\r\n        }\r\n        return width\r\n    }\r\n    _getSortedPositions(positionList) {\r\n        var result = [];\r\n        var round = value => Math.round(100 * value) / 100;\r\n        var createItem = (rowIndex, cellIndex, top, left, bottom, right, position, allDay) => ({\r\n            i: rowIndex,\r\n            j: cellIndex,\r\n            top: round(top),\r\n            left: round(left),\r\n            bottom: round(bottom),\r\n            right: round(right),\r\n            cellPosition: position,\r\n            allDay: allDay\r\n        });\r\n        for (var rowIndex = 0, rowCount = positionList.length; rowIndex < rowCount; rowIndex++) {\r\n            for (var cellIndex = 0, cellCount = positionList[rowIndex].length; cellIndex < cellCount; cellIndex++) {\r\n                var {\r\n                    top: top,\r\n                    left: left,\r\n                    height: height,\r\n                    width: width,\r\n                    cellPosition: cellPosition,\r\n                    allDay: allDay\r\n                } = positionList[rowIndex][cellIndex];\r\n                result.push(createItem(rowIndex, cellIndex, top, left, top + height, left + width, cellPosition, allDay))\r\n            }\r\n        }\r\n        return result.sort((a, b) => this._sortCondition(a, b))\r\n    }\r\n    _sortCondition() {}\r\n    _getConditions(a, b) {\r\n        var isSomeEdge = this._isSomeEdge(a, b);\r\n        return {\r\n            columnCondition: isSomeEdge || this._normalizeCondition(a.left, b.left),\r\n            rowCondition: isSomeEdge || this._normalizeCondition(a.top, b.top),\r\n            cellPositionCondition: isSomeEdge || this._normalizeCondition(a.cellPosition, b.cellPosition)\r\n        }\r\n    }\r\n    _rowCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.columnCondition || conditions.rowCondition\r\n    }\r\n    _columnCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.rowCondition || conditions.columnCondition\r\n    }\r\n    _isSomeEdge(a, b) {\r\n        return a.i === b.i && a.j === b.j\r\n    }\r\n    _normalizeCondition(first, second) {\r\n        var result = first - second;\r\n        return Math.abs(result) > 1 ? result : 0\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var areItemsInTheSameTable = !!firstItem.allDay === !!secondItem.allDay;\r\n        var areItemsAllDay = firstItem.allDay && secondItem.allDay;\r\n        if (areItemsInTheSameTable) {\r\n            var orientation = this._getOrientation(areItemsAllDay);\r\n            return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    _checkItemsCrossing(firstItem, secondItem, orientation) {\r\n        var firstItemSide_1 = Math.floor(firstItem[orientation[0]]);\r\n        var firstItemSide_2 = Math.floor(firstItem[orientation[1]]);\r\n        var secondItemSide_1 = Math.ceil(secondItem[orientation[0]]);\r\n        var secondItemSide_2 = Math.ceil(secondItem[orientation[1]]);\r\n        var isItemCross = Math.abs(firstItem[orientation[2]] - secondItem[orientation[2]]) <= 1;\r\n        return isItemCross && (firstItemSide_1 <= secondItemSide_1 && firstItemSide_2 > secondItemSide_1 || firstItemSide_1 < secondItemSide_2 && firstItemSide_2 >= secondItemSide_2 || firstItemSide_1 === secondItemSide_1 && firstItemSide_2 === secondItemSide_2)\r\n    }\r\n    _getOrientation(isAllDay) {\r\n        return isAllDay ? [\"left\", \"right\", \"top\"] : [\"top\", \"bottom\", \"left\"]\r\n    }\r\n    _getResultPositions(sortedArray) {\r\n        var result = [];\r\n        var i;\r\n        var sortedIndex = 0;\r\n        var currentItem;\r\n        var indexes;\r\n        var itemIndex;\r\n        var maxIndexInStack = 0;\r\n        var stack = {};\r\n        var findFreeIndex = (indexes, index) => {\r\n            var isFind = indexes.some(item => item === index);\r\n            if (isFind) {\r\n                return findFreeIndex(indexes, ++index)\r\n            } else {\r\n                return index\r\n            }\r\n        };\r\n        var createItem = (currentItem, index) => {\r\n            var currentIndex = index || 0;\r\n            return {\r\n                index: currentIndex,\r\n                i: currentItem.i,\r\n                j: currentItem.j,\r\n                left: currentItem.left,\r\n                right: currentItem.right,\r\n                top: currentItem.top,\r\n                bottom: currentItem.bottom,\r\n                allDay: currentItem.allDay,\r\n                sortedIndex: this._skipSortedIndex(currentIndex) ? null : sortedIndex++\r\n            }\r\n        };\r\n        var startNewStack = currentItem => {\r\n            stack.items = [createItem(currentItem)];\r\n            stack.left = currentItem.left;\r\n            stack.right = currentItem.right;\r\n            stack.top = currentItem.top;\r\n            stack.bottom = currentItem.bottom;\r\n            stack.allDay = currentItem.allDay\r\n        };\r\n        var pushItemsInResult = items => {\r\n            items.forEach(item => {\r\n                result.push({\r\n                    index: item.index,\r\n                    count: maxIndexInStack + 1,\r\n                    i: item.i,\r\n                    j: item.j,\r\n                    sortedIndex: item.sortedIndex\r\n                })\r\n            })\r\n        };\r\n        for (i = 0; i < sortedArray.length; i++) {\r\n            currentItem = sortedArray[i];\r\n            indexes = [];\r\n            if (!stack.items) {\r\n                startNewStack(currentItem)\r\n            } else if (this._isItemsCross(stack, currentItem)) {\r\n                stack.items.forEach((item, index) => {\r\n                    if (this._isItemsCross(item, currentItem)) {\r\n                        indexes.push(item.index)\r\n                    }\r\n                });\r\n                itemIndex = indexes.length ? findFreeIndex(indexes, 0) : 0;\r\n                stack.items.push(createItem(currentItem, itemIndex));\r\n                maxIndexInStack = Math.max(itemIndex, maxIndexInStack);\r\n                stack.left = Math.min(stack.left, currentItem.left);\r\n                stack.right = Math.max(stack.right, currentItem.right);\r\n                stack.top = Math.min(stack.top, currentItem.top);\r\n                stack.bottom = Math.max(stack.bottom, currentItem.bottom);\r\n                stack.allDay = currentItem.allDay\r\n            } else {\r\n                pushItemsInResult(stack.items);\r\n                stack = {};\r\n                startNewStack(currentItem);\r\n                maxIndexInStack = 0\r\n            }\r\n        }\r\n        if (stack.items) {\r\n            pushItemsInResult(stack.items)\r\n        }\r\n        return result.sort((function(a, b) {\r\n            var columnCondition = a.j - b.j;\r\n            var rowCondition = a.i - b.i;\r\n            return rowCondition ? rowCondition : columnCondition\r\n        }))\r\n    }\r\n    _skipSortedIndex(index) {\r\n        return index > this._getMaxAppointmentCountPerCell() - 1\r\n    }\r\n    _findIndexByKey(arr, iKey, jKey, iValue, jValue) {\r\n        var result = 0;\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i][iKey] === iValue && arr[i][jKey] === jValue) {\r\n                result = i;\r\n                break\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _getExtendedPositionMap(map, positions) {\r\n        var positionCounter = 0;\r\n        var result = [];\r\n        for (var i = 0, mapLength = map.length; i < mapLength; i++) {\r\n            var resultString = [];\r\n            for (var j = 0, itemLength = map[i].length; j < itemLength; j++) {\r\n                map[i][j].index = positions[positionCounter].index;\r\n                map[i][j].sortedIndex = positions[positionCounter].sortedIndex;\r\n                map[i][j].count = positions[positionCounter++].count;\r\n                resultString.push(map[i][j]);\r\n                this._checkLongCompactAppointment(map[i][j], resultString)\r\n            }\r\n            result.push(resultString)\r\n        }\r\n        return result\r\n    }\r\n    _checkLongCompactAppointment(item, result) {\r\n        this._splitLongCompactAppointment(item, result);\r\n        return result\r\n    }\r\n    _splitLongCompactAppointment(item, result) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCellByType(item.allDay);\r\n        var compactCount = 0;\r\n        if (void 0 !== appointmentCountPerCell && item.index > appointmentCountPerCell - 1) {\r\n            item.isCompact = true;\r\n            compactCount = this._getCompactAppointmentParts(item.width);\r\n            for (var k = 1; k < compactCount; k++) {\r\n                var compactPart = extend(true, {}, item);\r\n                compactPart.left = this._getCompactLeftCoordinate(item.left, k);\r\n                compactPart.cellIndex = compactPart.cellIndex + k;\r\n                compactPart.sortedIndex = null;\r\n                result.push(compactPart)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    normalizeEndDateByViewEnd(appointment, endDate) {\r\n        var result = new Date(endDate.getTime());\r\n        if (!this.isAllDay(appointment)) {\r\n            var viewEndDate = dateUtils.roundToHour(this.instance.fire(\"getEndViewDate\"));\r\n            if (result > viewEndDate) {\r\n                result = viewEndDate\r\n            }\r\n        }\r\n        var endDayHour = this.instance._getCurrentViewOption(\"endDayHour\");\r\n        var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\r\n        var currentViewEndTime = new Date(new Date(endDate.getTime()).setHours(endDayHour, 0, 0, 0));\r\n        if (result.getTime() > currentViewEndTime.getTime() || allDay && result.getHours() < endDayHour) {\r\n            result = currentViewEndTime\r\n        }\r\n        return result\r\n    }\r\n    _adjustDurationByDaylightDiff(duration, startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffset(startDate, endDate);\r\n        return this._needAdjustDuration(daylightDiff) ? this._calculateDurationByDaylightDiff(duration, daylightDiff) : duration\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return 0 !== diff\r\n    }\r\n    _calculateDurationByDaylightDiff(duration, diff) {\r\n        return duration + diff * toMs(\"minute\")\r\n    }\r\n    _getAppointmentDurationInMs(startDate, endDate, allDay) {\r\n        return this.instance.fire(\"getAppointmentDurationInMs\", {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        })\r\n    }\r\n    _markAppointmentAsVirtual(coordinates) {\r\n        var isAllDay = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        var countFullWidthAppointmentInCell = this._getMaxAppointmentCountPerCellByType(isAllDay);\r\n        if (coordinates.count - countFullWidthAppointmentInCell > 0) {\r\n            var {\r\n                top: top,\r\n                left: left\r\n            } = coordinates;\r\n            coordinates.virtual = {\r\n                top: top,\r\n                left: left,\r\n                index: this._generateAppointmentCollectorIndex(coordinates, isAllDay),\r\n                isAllDay: isAllDay\r\n            }\r\n        }\r\n    }\r\n    _generateAppointmentCollectorIndex(_ref, isAllDay) {\r\n        var {\r\n            groupIndex: groupIndex,\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        } = _ref;\r\n        return \"\".concat(groupIndex, \"-\").concat(rowIndex, \"-\").concat(cellIndex, \"-\").concat(isAllDay)\r\n    }\r\n    _getMaxAppointmentCountPerCellByType(isAllDay) {\r\n        var appointmentCountPerCell = this._getMaxAppointmentCountPerCell();\r\n        if (isObject(appointmentCountPerCell)) {\r\n            return isAllDay ? this._getMaxAppointmentCountPerCell().allDay : this._getMaxAppointmentCountPerCell().simple\r\n        } else {\r\n            return appointmentCountPerCell\r\n        }\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount, isAllDay) {\r\n        return this.getPositioningStrategy().getDropDownAppointmentWidth(intervalCount, isAllDay)\r\n    }\r\n    getDropDownAppointmentHeight() {\r\n        return this.getPositioningStrategy().getDropDownAppointmentHeight()\r\n    }\r\n    getDropDownButtonAdaptiveSize() {\r\n        return DROP_DOWN_BUTTON_ADAPTIVE_SIZE\r\n    }\r\n    getDefaultCellWidth() {\r\n        return this._defaultWidth\r\n    }\r\n    getDefaultCellHeight() {\r\n        return this._defaultHeight\r\n    }\r\n    getDefaultAllDayCellHeight() {\r\n        return this._allDayHeight\r\n    }\r\n    getCollectorTopOffset(allDay) {\r\n        return this.getPositioningStrategy().getCollectorTopOffset(allDay)\r\n    }\r\n    getCollectorLeftOffset() {\r\n        return this.getPositioningStrategy().getCollectorLeftOffset()\r\n    }\r\n    getAppointmentDataCalculator() {}\r\n    _customizeCoordinates(coordinates, height, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var index = coordinates.index;\r\n        var appointmentHeight = height / appointmentCountPerCell;\r\n        var appointmentTop = coordinates.top + index * appointmentHeight;\r\n        var top = appointmentTop + topOffset;\r\n        var width = coordinates.width;\r\n        var left = coordinates.left;\r\n        if (coordinates.isCompact) {\r\n            this._isAdaptive() && this._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: appointmentHeight,\r\n            width: width,\r\n            top: top,\r\n            left: left,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _isAppointmentEmpty(height, width) {\r\n        return height < this._getAppointmentMinHeight() || width < this._getAppointmentMinWidth()\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxHeight = this._getMaxHeight();\r\n        if (!isNumeric(appointmentCountPerCell)) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxHeight - offsets.unlimited) / maxHeight\r\n        }\r\n        var topOffset = (1 - ratio) * maxHeight;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxHeight -= appointmentDefaultOffset;\r\n            topOffset = appointmentDefaultOffset\r\n        }\r\n        return {\r\n            height: ratio * maxHeight,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getAppointmentCount() {}\r\n    _getDefaultRatio() {}\r\n    _getOffsets() {}\r\n    _getMaxHeight() {}\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    needSeparateAppointment(allDay) {\r\n        return this.instance.fire(\"isGroupedByDate\") && allDay\r\n    }\r\n    _getMaxAppointmentCountPerCell() {\r\n        if (!this._maxAppointmentCountPerCell) {\r\n            var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\r\n            var appointmentCountPerCell;\r\n            if (isNumeric(overlappingMode)) {\r\n                appointmentCountPerCell = overlappingMode\r\n            }\r\n            if (\"auto\" === overlappingMode) {\r\n                appointmentCountPerCell = this._getDynamicAppointmentCountPerCell()\r\n            }\r\n            if (\"unlimited\" === overlappingMode) {\r\n                appointmentCountPerCell = void 0\r\n            }\r\n            this._maxAppointmentCountPerCell = appointmentCountPerCell\r\n        }\r\n        return this._maxAppointmentCountPerCell\r\n    }\r\n    _getDynamicAppointmentCountPerCell() {\r\n        return this.getPositioningStrategy().getDynamicAppointmentCountPerCell()\r\n    }\r\n    hasAllDayAppointments() {\r\n        return false\r\n    }\r\n    _isCompactTheme() {\r\n        return \"compact\" === (currentTheme() || \"\").split(\".\").pop()\r\n    }\r\n    _getAppointmentDefaultOffset() {\r\n        return this.getPositioningStrategy().getAppointmentDefaultOffset()\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return this._getAppointmentHeightByTheme()\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return this._getAppointmentDefaultHeight()\r\n    }\r\n    _getAppointmentHeightByTheme() {\r\n        return this._isCompactTheme() ? COMPACT_THEME_APPOINTMENT_DEFAULT_HEIGHT : APPOINTMENT_DEFAULT_HEIGHT\r\n    }\r\n    _getAppointmentDefaultWidth() {\r\n        return this.getPositioningStrategy()._getAppointmentDefaultWidth()\r\n    }\r\n    _getAppointmentMinWidth() {\r\n        return this._getAppointmentDefaultWidth()\r\n    }\r\n    _needVerticalGroupBounds() {\r\n        return false\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n}\r\nexport default BaseRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}