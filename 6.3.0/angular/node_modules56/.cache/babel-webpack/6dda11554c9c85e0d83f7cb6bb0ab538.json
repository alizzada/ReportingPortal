{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/timeZoneCalculator.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nvar toMs = dateUtils.dateToMilliseconds;\nexport var PathTimeZoneConversion = {\n  fromSourceToAppointment: \"toAppointment\",\n  fromAppointmentToSource: \"fromAppointment\",\n  fromSourceToGrid: \"toGrid\",\n  fromGridToSource: \"fromGrid\"\n};\nexport var TimeZoneCalculator = /*#__PURE__*/function () {\n  function TimeZoneCalculator(options) {\n    _classCallCheck(this, TimeZoneCalculator);\n\n    this.options = options;\n  }\n\n  _createClass(TimeZoneCalculator, [{\n    key: \"createDate\",\n    value: function createDate(sourceDate, info) {\n      var date = new Date(sourceDate);\n\n      switch (info.path) {\n        case PathTimeZoneConversion.fromSourceToAppointment:\n          return this._getConvertedDate(date, info.appointmentTimeZone, true);\n\n        case PathTimeZoneConversion.fromAppointmentToSource:\n          return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n        case PathTimeZoneConversion.fromSourceToGrid:\n          return this._getConvertedDate(date, info.appointmentTimeZone, false);\n\n        case PathTimeZoneConversion.fromGridToSource:\n          return this._getConvertedDate(date, info.appointmentTimeZone, false, true);\n      }\n\n      throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }, {\n    key: \"getOffsets\",\n    value: function getOffsets(date, appointmentTimezone) {\n      var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\n\n      var commonOffset = this._getCommonOffset(date);\n\n      var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\n\n      return {\n        client: clientOffset,\n        common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n        appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n      };\n    }\n  }, {\n    key: \"_getClientOffset\",\n    value: function _getClientOffset(date) {\n      return this.options.getClientOffset(date);\n    }\n  }, {\n    key: \"_getCommonOffset\",\n    value: function _getCommonOffset(date) {\n      return this.options.getCommonOffset(date);\n    }\n  }, {\n    key: \"_getAppointmentOffset\",\n    value: function _getAppointmentOffset(date, appointmentTimezone) {\n      return this.options.getAppointmentOffset(date, appointmentTimezone);\n    }\n  }, {\n    key: \"_getConvertedDate\",\n    value: function _getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n      var newDate = new Date(date.getTime());\n      var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n      if (useAppointmentTimeZone && !!appointmentTimezone) {\n        return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n      }\n\n      return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n    }\n  }, {\n    key: \"_getConvertedDateByOffsets\",\n    value: function _getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n      var direction = isBack ? -1 : 1;\n      var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\n      return new Date(utcDate + direction * targetOffset * toMs(\"hour\"));\n    }\n  }]);\n\n  return TimeZoneCalculator;\n}();","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/scheduler/timeZoneCalculator.js"],"names":["isDefined","dateUtils","toMs","dateToMilliseconds","PathTimeZoneConversion","fromSourceToAppointment","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","TimeZoneCalculator","options","sourceDate","info","date","Date","path","_getConvertedDate","appointmentTimeZone","Error","appointmentTimezone","clientOffset","_getClientOffset","commonOffset","_getCommonOffset","appointmentOffset","_getAppointmentOffset","client","common","appointment","getClientOffset","getCommonOffset","getAppointmentOffset","useAppointmentTimeZone","isBack","newDate","getTime","offsets","getOffsets","_getConvertedDateByOffsets","targetOffset","direction","utcDate"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/timeZoneCalculator.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nexport var PathTimeZoneConversion = {\r\n    fromSourceToAppointment: \"toAppointment\",\r\n    fromAppointmentToSource: \"fromAppointment\",\r\n    fromSourceToGrid: \"toGrid\",\r\n    fromGridToSource: \"fromGrid\"\r\n};\r\nexport class TimeZoneCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    createDate(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this._getConvertedDate(date, info.appointmentTimeZone, false, true)\r\n        }\r\n        throw new Error(\"not specified pathTimeZoneConversion\")\r\n    }\r\n    getOffsets(date, appointmentTimezone) {\r\n        var clientOffset = -this._getClientOffset(date) / toMs(\"hour\");\r\n        var commonOffset = this._getCommonOffset(date);\r\n        var appointmentOffset = this._getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !isDefined(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    }\r\n    _getClientOffset(date) {\r\n        return this.options.getClientOffset(date)\r\n    }\r\n    _getCommonOffset(date) {\r\n        return this.options.getCommonOffset(date)\r\n    }\r\n    _getAppointmentOffset(date, appointmentTimezone) {\r\n        return this.options.getAppointmentOffset(date, appointmentTimezone)\r\n    }\r\n    _getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this._getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this._getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    }\r\n    _getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var utcDate = date.getTime() - direction * clientOffset * toMs(\"hour\");\r\n        return new Date(utcDate + direction * targetOffset * toMs(\"hour\"))\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}