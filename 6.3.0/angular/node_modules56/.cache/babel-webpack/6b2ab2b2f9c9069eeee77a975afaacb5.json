{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_vertical.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { each } from \"../../../core/utils/iterator\";\nimport SchedulerWorkSpaceIndicator from \"./ui.scheduler.work_space.indicator\";\nimport dateLocalization from \"../../../localization/date\";\nimport timeZoneUtils from \"../utils.timeZone\";\n\nvar SchedulerWorkspaceVertical = /*#__PURE__*/function (_SchedulerWorkSpaceIn) {\n  _inherits(SchedulerWorkspaceVertical, _SchedulerWorkSpaceIn);\n\n  var _super = _createSuper(SchedulerWorkspaceVertical);\n\n  function SchedulerWorkspaceVertical() {\n    _classCallCheck(this, SchedulerWorkspaceVertical);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkspaceVertical, [{\n    key: \"_getCellsBetween\",\n    value: function _getCellsBetween($first, $last) {\n      if (this._hasAllDayClass($last)) {\n        return _get(_getPrototypeOf(SchedulerWorkspaceVertical.prototype), \"_getCellsBetween\", this).call(this, $first, $last);\n      }\n\n      var $cells = this._getCells();\n\n      var firstColumn = $first.index();\n      var firstRow = $first.parent().index();\n      var lastColumn = $last.index();\n      var lastRow = $last.parent().index();\n\n      var groupCount = this._getGroupCount();\n\n      var cellCount = groupCount > 0 ? this._getTotalCellCount(groupCount) : this._getCellCount();\n\n      var rowCount = this._getTotalRowCount(groupCount);\n\n      var result = [];\n\n      for (var i = 0; i < cellCount; i++) {\n        for (var j = 0; j < rowCount; j++) {\n          var cell = $cells.get(cellCount * j + i);\n          result.push(cell);\n        }\n      }\n\n      var lastCellGroup = this.getCellData($last).groups;\n      var indexesDifference = this.option(\"showAllDayPanel\") && this._isVerticalGroupedWorkSpace() ? this._getGroupIndexByResourceId(lastCellGroup) + 1 : 0;\n      var newFirstIndex = rowCount * firstColumn + firstRow - indexesDifference;\n      var newLastIndex = rowCount * lastColumn + lastRow - indexesDifference;\n\n      if (newFirstIndex > newLastIndex) {\n        var buffer = newFirstIndex;\n        newFirstIndex = newLastIndex;\n        newLastIndex = buffer;\n      }\n\n      $cells = $(result).slice(newFirstIndex, newLastIndex + 1);\n\n      if (this._getGroupCount()) {\n        var arr = [];\n\n        var focusedGroupIndex = this._getGroupIndexByCell($first);\n\n        each($cells, function (_, cell) {\n          var groupIndex = this._getGroupIndexByCell($(cell));\n\n          if (focusedGroupIndex === groupIndex) {\n            arr.push(cell);\n          }\n        }.bind(this));\n        $cells = $(arr);\n      }\n\n      return $cells;\n    }\n  }, {\n    key: \"_getCellFromNextColumn\",\n    value: function _getCellFromNextColumn(direction, isMultiSelection) {\n      var $nextCell = _get(_getPrototypeOf(SchedulerWorkspaceVertical.prototype), \"_getCellFromNextColumn\", this).call(this, direction, isMultiSelection);\n\n      var $focusedCell = this._$focusedCell;\n\n      if ($focusedCell.parent().index() !== $nextCell.parent().index() && isMultiSelection) {\n        $nextCell = $focusedCell;\n      }\n\n      return $nextCell;\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return this._formatWeekdayAndDay;\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return true;\n    }\n  }, {\n    key: \"generateRenderOptions\",\n    value: function generateRenderOptions() {\n      var _this = this;\n\n      var startViewDate = timeZoneUtils.getDateWithoutTimezoneChange(this.getStartViewDate());\n\n      var _getTimeText = function _getTimeText(row, column) {\n        var index = row % _this._getRowCount();\n\n        if (index % 2 === 0 && 0 === column) {\n          return dateLocalization.format(_this._getTimeCellDateCore(startViewDate, row), \"shorttime\");\n        }\n\n        return \"\";\n      };\n\n      var options = _get(_getPrototypeOf(SchedulerWorkspaceVertical.prototype), \"generateRenderOptions\", this).call(this);\n\n      options.cellDataGetters.push(function (_, rowIndex, cellIndex) {\n        return {\n          value: {\n            text: _getTimeText(rowIndex, cellIndex)\n          }\n        };\n      });\n      return options;\n    }\n  }]);\n\n  return SchedulerWorkspaceVertical;\n}(SchedulerWorkSpaceIndicator);\n\nexport default SchedulerWorkspaceVertical;","map":null,"metadata":{},"sourceType":"module"}