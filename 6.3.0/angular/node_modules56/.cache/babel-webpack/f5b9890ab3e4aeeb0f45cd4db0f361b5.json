{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace } from \"../../events/utils/index\";\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\nvar ColumnHeadersViewSortingExtender = extend({}, sortingMixin, {\n  _createRow: function _createRow(row) {\n    var _this = this;\n\n    var $row = this.callBase(row);\n\n    if (\"header\" === row.rowType) {\n      eventsEngine.on($row, addNamespace(clickEventName, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(function (e) {\n        _this._processHeaderAction(e.event, $row);\n      }));\n    }\n\n    return $row;\n  },\n  _processHeaderAction: function _processHeaderAction(event, $row) {\n    if ($(event.currentTarget).parent().get(0) !== $row.get(0)) {\n      return;\n    }\n\n    var that = this;\n    var keyName = null;\n    var $cellElementFromEvent = $(event.currentTarget);\n    var rowIndex = $cellElementFromEvent.parent().index();\n    var columnIndex = -1;\n    [].slice.call(that.getCellElements(rowIndex)).some(function ($cellElement, index) {\n      if ($cellElement === $cellElementFromEvent.get(0)) {\n        columnIndex = index;\n        return true;\n      }\n    });\n\n    var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\n\n    var column = visibleColumns[columnIndex];\n    var editingController = that.getController(\"editing\");\n    var editingMode = that.option(\"editing.mode\");\n    var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\n\n    if (isCellEditing || !that._isSortableElement($(event.target))) {\n      return;\n    }\n\n    if (column && !isDefined(column.groupIndex) && !column.command) {\n      if (event.shiftKey) {\n        keyName = \"shift\";\n      } else if (event.ctrlKey) {\n        keyName = \"ctrl\";\n      }\n\n      setTimeout(function () {\n        that._columnsController.changeSortOrder(column.index, keyName);\n      });\n    }\n  },\n  _renderCellContent: function _renderCellContent($cell, options) {\n    var column = options.column;\n\n    if (!column.command && \"header\" === options.rowType) {\n      this._applyColumnState({\n        name: \"sort\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: this.option(\"showColumnLines\")\n      });\n    }\n\n    this.callBase($cell, options);\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var changeTypes = e.changeTypes;\n\n    if (1 === changeTypes.length && changeTypes.sorting) {\n      this._updateIndicators(\"sort\");\n\n      return;\n    }\n\n    this.callBase(e);\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nvar HeaderPanelSortingExtender = extend({}, sortingMixin, {\n  _createGroupPanelItem: function _createGroupPanelItem($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase.apply(that, arguments);\n    eventsEngine.on($item, addNamespace(clickEventName, \"dxDataGridHeaderPanel\"), that.createAction(function () {\n      that._processGroupItemAction(groupColumn.index);\n    }));\n\n    that._applyColumnState({\n      name: \"sort\",\n      rootElement: $item,\n      column: {\n        alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\n        allowSorting: groupColumn.allowSorting,\n        sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\n      },\n      showColumnLines: true\n    });\n\n    return $item;\n  },\n  _processGroupItemAction: function _processGroupItemAction(groupColumnIndex) {\n    var _this2 = this;\n\n    setTimeout(function () {\n      return _this2.getController(\"columns\").changeSortOrder(groupColumnIndex);\n    });\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport var sortingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      sorting: {\n        mode: \"single\",\n        ascendingText: messageLocalization.format(\"dxDataGrid-sortingAscendingText\"),\n        descendingText: messageLocalization.format(\"dxDataGrid-sortingDescendingText\"),\n        clearText: messageLocalization.format(\"dxDataGrid-sortingClearText\"),\n        showSortIndexes: true\n      }\n    };\n  },\n  extenders: {\n    views: {\n      columnHeadersView: ColumnHeadersViewSortingExtender,\n      headerPanel: HeaderPanelSortingExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting.js"],"names":["$","eventsEngine","name","clickEventName","isDefined","extend","sortingMixin","messageLocalization","addNamespace","COLUMN_HEADERS_VIEW_NAMESPACE","ColumnHeadersViewSortingExtender","_createRow","row","$row","callBase","rowType","on","createAction","e","_processHeaderAction","event","currentTarget","parent","get","that","keyName","$cellElementFromEvent","rowIndex","index","columnIndex","slice","call","getCellElements","some","$cellElement","visibleColumns","_columnsController","getVisibleColumns","column","editingController","getController","editingMode","option","isCellEditing","isEditing","_isSortableElement","target","groupIndex","command","shiftKey","ctrlKey","setTimeout","changeSortOrder","_renderCellContent","$cell","options","_applyColumnState","rootElement","showColumnLines","_columnOptionChanged","changeTypes","length","sorting","_updateIndicators","optionChanged","args","_invalidate","handled","HeaderPanelSortingExtender","_createGroupPanelItem","$rootElement","groupColumn","$item","arguments","_processGroupItemAction","alignment","allowSorting","sortOrder","groupColumnIndex","sortingModule","defaultOptions","mode","ascendingText","format","descendingText","clearText","showSortIndexes","extenders","views","columnHeadersView","headerPanel"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\r\nvar ColumnHeadersViewSortingExtender = extend({}, sortingMixin, {\r\n    _createRow(row) {\r\n        var $row = this.callBase(row);\r\n        if (\"header\" === row.rowType) {\r\n            eventsEngine.on($row, addNamespace(clickEventName, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(e => {\r\n                this._processHeaderAction(e.event, $row)\r\n            }))\r\n        }\r\n        return $row\r\n    },\r\n    _processHeaderAction: function(event, $row) {\r\n        if ($(event.currentTarget).parent().get(0) !== $row.get(0)) {\r\n            return\r\n        }\r\n        var that = this;\r\n        var keyName = null;\r\n        var $cellElementFromEvent = $(event.currentTarget);\r\n        var rowIndex = $cellElementFromEvent.parent().index();\r\n        var columnIndex = -1;\r\n        [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index) => {\r\n            if ($cellElement === $cellElementFromEvent.get(0)) {\r\n                columnIndex = index;\r\n                return true\r\n            }\r\n        });\r\n        var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\r\n        var column = visibleColumns[columnIndex];\r\n        var editingController = that.getController(\"editing\");\r\n        var editingMode = that.option(\"editing.mode\");\r\n        var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\r\n        if (isCellEditing || !that._isSortableElement($(event.target))) {\r\n            return\r\n        }\r\n        if (column && !isDefined(column.groupIndex) && !column.command) {\r\n            if (event.shiftKey) {\r\n                keyName = \"shift\"\r\n            } else if (event.ctrlKey) {\r\n                keyName = \"ctrl\"\r\n            }\r\n            setTimeout(() => {\r\n                that._columnsController.changeSortOrder(column.index, keyName)\r\n            })\r\n        }\r\n    },\r\n    _renderCellContent($cell, options) {\r\n        var column = options.column;\r\n        if (!column.command && \"header\" === options.rowType) {\r\n            this._applyColumnState({\r\n                name: \"sort\",\r\n                rootElement: $cell,\r\n                column: column,\r\n                showColumnLines: this.option(\"showColumnLines\")\r\n            })\r\n        }\r\n        this.callBase($cell, options)\r\n    },\r\n    _columnOptionChanged(e) {\r\n        var changeTypes = e.changeTypes;\r\n        if (1 === changeTypes.length && changeTypes.sorting) {\r\n            this._updateIndicators(\"sort\");\r\n            return\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"sorting\":\r\n                this._invalidate();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nvar HeaderPanelSortingExtender = extend({}, sortingMixin, {\r\n    _createGroupPanelItem($rootElement, groupColumn) {\r\n        var that = this;\r\n        var $item = that.callBase(...arguments);\r\n        eventsEngine.on($item, addNamespace(clickEventName, \"dxDataGridHeaderPanel\"), that.createAction(() => {\r\n            that._processGroupItemAction(groupColumn.index)\r\n        }));\r\n        that._applyColumnState({\r\n            name: \"sort\",\r\n            rootElement: $item,\r\n            column: {\r\n                alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                allowSorting: groupColumn.allowSorting,\r\n                sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\r\n            },\r\n            showColumnLines: true\r\n        });\r\n        return $item\r\n    },\r\n    _processGroupItemAction(groupColumnIndex) {\r\n        setTimeout(() => this.getController(\"columns\").changeSortOrder(groupColumnIndex))\r\n    },\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"sorting\":\r\n                this._invalidate();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nexport var sortingModule = {\r\n    defaultOptions: () => ({\r\n        sorting: {\r\n            mode: \"single\",\r\n            ascendingText: messageLocalization.format(\"dxDataGrid-sortingAscendingText\"),\r\n            descendingText: messageLocalization.format(\"dxDataGrid-sortingDescendingText\"),\r\n            clearText: messageLocalization.format(\"dxDataGrid-sortingClearText\"),\r\n            showSortIndexes: true\r\n        }\r\n    }),\r\n    extenders: {\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewSortingExtender,\r\n            headerPanel: HeaderPanelSortingExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}