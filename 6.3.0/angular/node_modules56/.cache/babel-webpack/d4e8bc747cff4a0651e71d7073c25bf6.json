{"ast":null,"code":"import _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./ui.scheduler.appointments.strategy.base\";\nimport dateUtils from \"../../../core/utils/date\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar HorizontalRenderingStrategy = /*#__PURE__*/function (_BaseAppointmentsStra) {\n  _inherits(HorizontalRenderingStrategy, _BaseAppointmentsStra);\n\n  var _super = _createSuper(HorizontalRenderingStrategy);\n\n  function HorizontalRenderingStrategy() {\n    _classCallCheck(this, HorizontalRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalRenderingStrategy, [{\n    key: \"_needVerifyItemSize\",\n    value: function _needVerifyItemSize() {\n      return true;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth(appointment, position) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      var allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n      var startDate = position.info.appointment.startDate;\n      var endDate = this.normalizeEndDateByViewEnd(appointment, position.info.appointment.endDate);\n\n      var appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n      appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\n      var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\");\n      var durationInCells = appointmentDuration / cellDuration;\n      var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n      return width;\n    }\n  }, {\n    key: \"_needAdjustDuration\",\n    value: function _needAdjustDuration(diff) {\n      return diff < 0;\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(coordinates) {\n      var result = this._customizeAppointmentGeometry(coordinates);\n\n      return _get(_getPrototypeOf(HorizontalRenderingStrategy.prototype), \"getAppointmentGeometry\", this).call(this, result);\n    }\n  }, {\n    key: \"_customizeAppointmentGeometry\",\n    value: function _customizeAppointmentGeometry(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: 0,\n        auto: 0\n      };\n    }\n  }, {\n    key: \"_getCompactLeftCoordinate\",\n    value: function _getCompactLeftCoordinate(itemLeft, index) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      return itemLeft + cellWidth * index;\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {\n      return this.getDefaultCellHeight() || this.getAppointmentMinSize();\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function _getAppointmentCount(overlappingMode, coordinates) {\n      return this._getMaxAppointmentCountPerCellByType(false);\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return DEFAULT_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return MIN_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition(a, b) {\n      return this._columnCondition(a, b);\n    }\n  }, {\n    key: \"_getOrientation\",\n    value: function _getOrientation() {\n      return [\"left\", \"right\", \"top\"];\n    }\n  }, {\n    key: \"_getMaxAppointmentWidth\",\n    value: function _getMaxAppointmentWidth(startDate) {\n      return this.instance.fire(\"getMaxAppointmentWidth\", {\n        date: startDate\n      });\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth() {\n      return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET;\n    }\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime(args, initialSize) {\n      var deltaTime;\n      var deltaWidth = args.width - initialSize.width;\n      deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\n      return deltaTime;\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay(appointmentData) {\n      return this.instance.fire(\"getField\", \"allDay\", appointmentData);\n    }\n  }, {\n    key: \"needSeparateAppointment\",\n    value: function needSeparateAppointment() {\n      return this.instance.fire(\"isGroupedByDate\");\n    }\n  }]);\n\n  return HorizontalRenderingStrategy;\n}(BaseAppointmentsStrategy);\n\nexport default HorizontalRenderingStrategy;","map":null,"metadata":{},"sourceType":"module"}