{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slider/ui.slider_handle.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport Tooltip from \"../tooltip\";\nimport { resetPosition, move, locate } from \"../../animation/translator\";\nimport positionUtils from \"../../animation/position\";\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { isDefined, type } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport numberLocalization from \"../../localization/number\";\nvar SLIDER_CLASS = \"dx-slider\";\nvar SLIDER_HANDLE_CLASS = \"dx-slider-handle\";\nvar POSITION_ALIASES = {\n  top: {\n    my: \"bottom center\",\n    at: \"top center\",\n    collision: \"none\"\n  },\n  bottom: {\n    my: \"top center\",\n    at: \"bottom center\",\n    collision: \"none\"\n  },\n  right: {\n    my: \"left center\",\n    at: \"right center\",\n    collision: \"none\"\n  },\n  left: {\n    my: \"right center\",\n    at: \"left center\",\n    collision: \"none\"\n  }\n};\nvar SliderHandle = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: false,\n      value: 0,\n      tooltipEnabled: false,\n      tooltipFormat: function tooltipFormat(v) {\n        return v;\n      },\n      tooltipPosition: \"top\",\n      tooltipShowMode: \"onHover\",\n      tooltipFitIn: null\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.$element().addClass(SLIDER_HANDLE_CLASS);\n    this.setAria({\n      role: \"slider\",\n      valuenow: this.option(\"value\")\n    });\n  },\n  _render: function _render() {\n    this._renderTooltip();\n\n    this.callBase();\n  },\n  _renderTooltip: function _renderTooltip() {\n    if (this.option(\"tooltipEnabled\")) {\n      if (!this._$tooltip) {\n        this._$tooltip = $(\"<div>\").appendTo(this.$element());\n      }\n\n      this._$slider = this.$element().closest(\".\" + SLIDER_CLASS);\n\n      this._updateTooltip();\n    } else {\n      this._removeTooltip();\n    }\n  },\n  _createTooltip: function _createTooltip() {\n    if (this._tooltip) {\n      return false;\n    }\n\n    this._tooltip = this._createComponent(this._$tooltip, Tooltip, {\n      visible: true,\n      target: this.$element(),\n      closeOnOutsideClick: false,\n      container: this.$element(),\n      hideTopOverlayHandler: null,\n      closeOnTargetScroll: false,\n      onPositioned: function (args) {\n        this._saveTooltipElements(args.component);\n\n        this._saveTooltipLocation();\n\n        this._centeredTooltipPosition();\n      }.bind(this),\n      animation: null,\n      arrowPosition: null,\n      templatesRenderAsynchronously: false,\n      _fixedPosition: false\n    });\n    return true;\n  },\n  _removeTooltip: function _removeTooltip() {\n    if (!this._$tooltip) {\n      return;\n    }\n\n    this._$tooltip.remove();\n\n    delete this._$tooltip;\n    delete this._tooltip;\n  },\n  _renderTooltipPosition: function _renderTooltipPosition() {\n    if (!this._tooltip) {\n      return;\n    }\n\n    var position = this.option(\"tooltipPosition\");\n\n    this._saveTooltipElements();\n\n    this._resetTooltipPosition();\n\n    if (\"string\" === type(position)) {\n      position = extend({\n        boundary: this._$slider,\n        boundaryOffset: {\n          h: 1,\n          v: 1\n        }\n      }, POSITION_ALIASES[position]);\n    }\n\n    this._tooltip.option(\"position\", position);\n\n    this._saveTooltipLocation();\n  },\n  _saveTooltipElements: function _saveTooltipElements(tooltip) {\n    tooltip = this._tooltip || tooltip;\n    this._$tooltipContent = tooltip.$content().parent();\n    this._$tooltipArrow = this._$tooltipContent.find(\".dx-popover-arrow\");\n  },\n  _resetTooltipPosition: function _resetTooltipPosition() {\n    resetPosition(this._$tooltipContent);\n    resetPosition(this._$tooltipArrow);\n  },\n  _saveTooltipLocation: function _saveTooltipLocation() {\n    this._contentLocate = locate(this._$tooltipContent);\n  },\n  _centeredTooltipPosition: function _centeredTooltipPosition() {\n    if (!this._tooltip) {\n      return;\n    }\n\n    this._$tooltipContent.outerWidth(\"auto\");\n\n    var outerWidthWithoutRounding = getBoundingRect(this._$tooltipContent.get(0)).width;\n    var tooltipOuterWidth = Math.ceil(outerWidthWithoutRounding);\n    var roundedTooltipOuterWidth = tooltipOuterWidth % 2 + tooltipOuterWidth;\n\n    this._$tooltipContent.outerWidth(roundedTooltipOuterWidth);\n\n    var tooltipCenter = (roundedTooltipOuterWidth - this.$element().width()) / 2;\n    this._contentLocate.left = -tooltipCenter;\n\n    this._$tooltipArrow.css({\n      marginLeft: -this._$tooltipArrow.outerWidth() / 2,\n      left: \"50%\"\n    });\n\n    this._fitTooltip();\n  },\n  _fitTooltip: function _fitTooltip() {\n    if (!this._tooltip) {\n      return;\n    }\n\n    var position = this.option(\"tooltipPosition\");\n\n    if (\"string\" === type(position)) {\n      position = extend({\n        of: this.$element(),\n        boundary: this._$slider,\n        boundaryOffset: {\n          h: 2,\n          v: 1\n        }\n      }, POSITION_ALIASES[position], {\n        collision: \"fit none\"\n      });\n    }\n\n    var calculatePosition = positionUtils.calculate(this._$tooltipContent, position);\n    var isLeftSide = \"left\" === calculatePosition.h.collisionSide;\n    var arrowLeft = (isLeftSide ? -1 : 1) * calculatePosition.h.oversize;\n    var arrowMinLeft = this._contentLocate.left;\n\n    var arrowMaxRight = this._contentLocate.left + this._$tooltipContent.outerWidth() - this._$tooltipArrow.outerWidth();\n\n    move(this._$tooltipContent, {\n      left: this._contentLocate.left + (isLeftSide ? 1 : -1) * calculatePosition.h.oversize\n    });\n    move(this._$tooltipArrow, {\n      left: fitIntoRange(arrowLeft, arrowMinLeft, arrowMaxRight)\n    });\n  },\n  _getFormattedValue: function _getFormattedValue(value) {\n    return numberLocalization.format(value, this.option(\"tooltipFormat\"));\n  },\n  _renderValue: function _renderValue() {\n    if (!this._tooltip) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n\n    this._tooltip.$content().html(this._getFormattedValue(value));\n\n    this._fitTooltip();\n  },\n  _updateTooltip: function _updateTooltip() {\n    var hoverMode = /^onhover$/i.test(this.option(\"tooltipShowMode\"));\n\n    if (!hoverMode) {\n      this._createTooltip();\n    }\n\n    this.$element().toggleClass(\"dx-slider-tooltip-on-hover\", hoverMode);\n\n    this._renderTooltipPosition();\n\n    this._renderValue();\n\n    this._centeredTooltipPosition();\n  },\n  _clean: function _clean() {\n    this.callBase();\n    delete this._$tooltip;\n    delete this._tooltip;\n  },\n  _ensureTooltipIsCentered: function _ensureTooltipIsCentered(value, previousValue) {\n    if (isDefined(value) && isDefined(previousValue) && value.toString().length !== previousValue.toString().length) {\n      this._centeredTooltipPosition();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"tooltipFormat\":\n        this._renderValue();\n\n        break;\n\n      case \"value\":\n        this._renderValue();\n\n        var value = this._getFormattedValue(args.value);\n\n        var previousValue = this._getFormattedValue(args.previousValue);\n\n        this._ensureTooltipIsCentered(value, previousValue);\n\n        this.setAria(\"valuenow\", args.value);\n        break;\n\n      case \"tooltipEnabled\":\n        this._renderTooltip();\n\n        break;\n\n      case \"tooltipPosition\":\n        this._renderTooltipPosition();\n\n        this._centeredTooltipPosition();\n\n        break;\n\n      case \"tooltipShowMode\":\n        this._updateTooltip();\n\n        break;\n\n      case \"tooltipFitIn\":\n        this._fitTooltip();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  fitTooltipPosition: function fitTooltipPosition() {\n    this._fitTooltip();\n  },\n  updateTooltip: function updateTooltip() {\n    if (!this._createTooltip()) {\n      return;\n    }\n\n    this._renderTooltipPosition();\n\n    this._renderValue();\n\n    this._centeredTooltipPosition();\n  },\n  repaint: function repaint() {\n    this._renderTooltipPosition();\n\n    this._centeredTooltipPosition();\n\n    if (this._tooltip) {\n      this._tooltip._visibilityChanged(true);\n    }\n  }\n});\nexport default SliderHandle;","map":null,"metadata":{},"sourceType":"module"}