{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scroll_view/ui.scrollable.native.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDxMouseWheelEvent } from \"../../events/utils/index\";\nimport { noop } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport devices from \"../../core/devices\";\nimport Class from \"../../core/class\";\nimport Scrollbar from \"./ui.scrollbar\";\nvar SCROLLABLE_NATIVE = \"dxNativeScrollable\";\nvar SCROLLABLE_NATIVE_CLASS = \"dx-scrollable-native\";\nvar SCROLLABLE_SCROLLBAR_SIMULATED = \"dx-scrollable-scrollbar-simulated\";\nvar SCROLLABLE_SCROLLBARS_HIDDEN = \"dx-scrollable-scrollbars-hidden\";\nvar VERTICAL = \"vertical\";\nvar HORIZONTAL = \"horizontal\";\nvar HIDE_SCROLLBAR_TIMEOUT = 500;\nvar NativeStrategy = Class.inherit({\n  ctor: function ctor(scrollable) {\n    this._init(scrollable);\n  },\n  _init: function _init(scrollable) {\n    this._component = scrollable;\n    this._$element = scrollable.$element();\n    this._$container = scrollable._$container;\n    this._$content = scrollable._$content;\n    this._direction = scrollable.option(\"direction\");\n    this._useSimulatedScrollbar = scrollable.option(\"useSimulatedScrollbar\");\n    this._showScrollbar = scrollable.option(\"showScrollbar\");\n    this.option = scrollable.option.bind(scrollable);\n    this._createActionByOption = scrollable._createActionByOption.bind(scrollable);\n    this._isLocked = scrollable._isLocked.bind(scrollable);\n    this._isDirection = scrollable._isDirection.bind(scrollable);\n    this._allowedDirection = scrollable._allowedDirection.bind(scrollable);\n    this._getScrollOffset = scrollable._getScrollOffset.bind(scrollable);\n    this._getMaxOffset = scrollable._getMaxOffset.bind(scrollable);\n  },\n  render: function render() {\n    var device = devices.real();\n    var deviceType = device.platform;\n\n    this._$element.addClass(SCROLLABLE_NATIVE_CLASS).addClass(SCROLLABLE_NATIVE_CLASS + \"-\" + deviceType).toggleClass(SCROLLABLE_SCROLLBARS_HIDDEN, !this._showScrollbar);\n\n    if (this._showScrollbar && this._useSimulatedScrollbar) {\n      this._renderScrollbars();\n    }\n  },\n  updateBounds: noop,\n  _renderScrollbars: function _renderScrollbars() {\n    this._scrollbars = {};\n    this._hideScrollbarTimeout = 0;\n\n    this._$element.addClass(SCROLLABLE_SCROLLBAR_SIMULATED);\n\n    this._renderScrollbar(VERTICAL);\n\n    this._renderScrollbar(HORIZONTAL);\n  },\n  _renderScrollbar: function _renderScrollbar(direction) {\n    if (!this._isDirection(direction)) {\n      return;\n    }\n\n    this._scrollbars[direction] = new Scrollbar($(\"<div>\").appendTo(this._$element), {\n      direction: direction,\n      expandable: this._component.option(\"scrollByThumb\")\n    });\n  },\n  handleInit: noop,\n  handleStart: noop,\n  handleMove: function handleMove(e) {\n    if (this._isLocked()) {\n      e.cancel = true;\n      return;\n    }\n\n    if (this._allowedDirection()) {\n      e.originalEvent.isScrollingEvent = true;\n    }\n  },\n  handleEnd: noop,\n  handleCancel: noop,\n  handleStop: noop,\n  _eachScrollbar: function _eachScrollbar(callback) {\n    callback = callback.bind(this);\n    each(this._scrollbars || {}, function (direction, scrollbar) {\n      callback(scrollbar, direction);\n    });\n  },\n  createActions: function createActions() {\n    this._scrollAction = this._createActionByOption(\"onScroll\");\n    this._updateAction = this._createActionByOption(\"onUpdated\");\n  },\n  _createActionArgs: function _createActionArgs() {\n    var _this$location = this.location(),\n        left = _this$location.left,\n        top = _this$location.top;\n\n    return {\n      event: this._eventForUserAction,\n      scrollOffset: this._getScrollOffset(),\n      reachedLeft: this._isReachedLeft(left),\n      reachedRight: this._isReachedRight(left),\n      reachedTop: this._isDirection(VERTICAL) ? top >= 0 : void 0,\n      reachedBottom: this._isDirection(VERTICAL) ? Math.abs(top) >= this._getMaxOffset().top : void 0\n    };\n  },\n  _isReachedLeft: function _isReachedLeft() {\n    return this._isDirection(HORIZONTAL) ? this.location().left >= 0 : void 0;\n  },\n  _isReachedRight: function _isReachedRight() {\n    return this._isDirection(HORIZONTAL) ? Math.abs(this.location().left) >= this._getMaxOffset().left : void 0;\n  },\n  handleScroll: function handleScroll(e) {\n    this._component._updateRtlConfig();\n\n    if (!this._isScrollLocationChanged()) {\n      e.stopImmediatePropagation();\n      return;\n    }\n\n    this._eventForUserAction = e;\n\n    this._moveScrollbars();\n\n    this._scrollAction(this._createActionArgs());\n\n    this._lastLocation = this.location();\n  },\n  _isScrollLocationChanged: function _isScrollLocationChanged() {\n    var currentLocation = this.location();\n    var lastLocation = this._lastLocation || {};\n    var isTopChanged = lastLocation.top !== currentLocation.top;\n    var isLeftChanged = lastLocation.left !== currentLocation.left;\n    return isTopChanged || isLeftChanged;\n  },\n  _moveScrollbars: function _moveScrollbars() {\n    this._eachScrollbar(function (scrollbar) {\n      scrollbar.moveTo(this.location());\n      scrollbar.option(\"visible\", true);\n    });\n\n    this._hideScrollbars();\n  },\n  _hideScrollbars: function _hideScrollbars() {\n    clearTimeout(this._hideScrollbarTimeout);\n    this._hideScrollbarTimeout = setTimeout(function () {\n      this._eachScrollbar(function (scrollbar) {\n        scrollbar.option(\"visible\", false);\n      });\n    }.bind(this), HIDE_SCROLLBAR_TIMEOUT);\n  },\n  location: function location() {\n    return {\n      left: -this._$container.scrollLeft(),\n      top: -this._$container.scrollTop()\n    };\n  },\n  disabledChanged: noop,\n  update: function update() {\n    this._update();\n\n    this._updateAction(this._createActionArgs());\n  },\n  _update: function _update() {\n    this._updateDimensions();\n\n    this._updateScrollbars();\n  },\n  _updateDimensions: function _updateDimensions() {\n    this._containerSize = {\n      height: this._$container.height(),\n      width: this._$container.width()\n    };\n    this._componentContentSize = {\n      height: this._component.$content().height(),\n      width: this._component.$content().width()\n    };\n    this._contentSize = {\n      height: this._$content.height(),\n      width: this._$content.width()\n    };\n  },\n  _updateScrollbars: function _updateScrollbars() {\n    this._eachScrollbar(function (scrollbar, direction) {\n      var dimension = direction === VERTICAL ? \"height\" : \"width\";\n      scrollbar.option({\n        containerSize: this._containerSize[dimension],\n        contentSize: this._componentContentSize[dimension]\n      });\n      scrollbar.update();\n    });\n  },\n  _allowedDirections: function _allowedDirections() {\n    return {\n      vertical: this._isDirection(VERTICAL) && this._contentSize.height > this._containerSize.height,\n      horizontal: this._isDirection(HORIZONTAL) && this._contentSize.width > this._containerSize.width\n    };\n  },\n  dispose: function dispose() {\n    var className = this._$element.get(0).className;\n\n    var scrollableNativeRegexp = new RegExp(SCROLLABLE_NATIVE_CLASS + \"\\\\S*\", \"g\");\n\n    if (scrollableNativeRegexp.test(className)) {\n      this._$element.removeClass(className.match(scrollableNativeRegexp).join(\" \"));\n    }\n\n    eventsEngine.off(this._$element, \".\" + SCROLLABLE_NATIVE);\n    eventsEngine.off(this._$container, \".\" + SCROLLABLE_NATIVE);\n\n    this._removeScrollbars();\n\n    clearTimeout(this._hideScrollbarTimeout);\n  },\n  _removeScrollbars: function _removeScrollbars() {\n    this._eachScrollbar(function (scrollbar) {\n      scrollbar.$element().remove();\n    });\n  },\n  scrollBy: function scrollBy(distance) {\n    var location = this.location();\n\n    this._$container.scrollTop(Math.round(-location.top - distance.top));\n\n    this._$container.scrollLeft(Math.round(-location.left - distance.left));\n  },\n  validate: function validate(e) {\n    if (this.option(\"disabled\")) {\n      return false;\n    }\n\n    if (isDxMouseWheelEvent(e) && this._isScrolledInMaxDirection(e)) {\n      return false;\n    }\n\n    return !!this._allowedDirection();\n  },\n  _isScrolledInMaxDirection: function _isScrolledInMaxDirection(e) {\n    var container = this._$container.get(0);\n\n    var result;\n\n    if (e.delta > 0) {\n      result = e.shiftKey ? !container.scrollLeft : !container.scrollTop;\n    } else if (e.shiftKey) {\n      result = container.scrollLeft >= this._getMaxOffset().left;\n    } else {\n      result = container.scrollTop >= this._getMaxOffset().top;\n    }\n\n    return result;\n  },\n  getDirection: function getDirection() {\n    return this._allowedDirection();\n  }\n});\nexport default NativeStrategy;","map":null,"metadata":{},"sourceType":"module"}