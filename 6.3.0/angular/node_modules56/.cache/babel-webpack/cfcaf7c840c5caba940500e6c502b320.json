{"ast":null,"code":"import _defineProperty from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME } from \"./ui.file_manager.notification_manager\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\n\nvar FileManagerNotificationControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerNotificationControl, _Widget);\n\n  var _super = _createSuper(FileManagerNotificationControl);\n\n  function FileManagerNotificationControl() {\n    _classCallCheck(this, FileManagerNotificationControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerNotificationControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._isInAdaptiveState = this._isSmallScreen();\n      this._managerMap = {};\n      this._notificationManagerStubId = null;\n\n      this._setNotificationManager();\n\n      var $progressPanelContainer = this.option(\"progressPanelContainer\");\n      var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\n      $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\n      var drawerOptions = extend({\n        opened: false,\n        position: \"right\",\n        template: function template(container) {\n          return _this._ensureProgressPanelCreated(container);\n        }\n      }, this._getProgressDrawerAdaptiveOptions());\n      this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\n      var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if (isFunction(contentRenderer)) {\n        contentRenderer($drawerContent, this);\n      }\n    }\n  }, {\n    key: \"_setNotificationManager\",\n    value: function _setNotificationManager(options) {\n      options = extend({\n        onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\n      }, options);\n\n      if (!this._notificationManagerStubId) {\n        var stubManager = new NotificationManagerStub(options);\n        this._notificationManagerStubId = stubManager.getId();\n        this._managerMap[this._notificationManagerStubId] = stubManager;\n      }\n\n      if (!this._isProgressDrawerDisabled()) {\n        var notificationManagerComponent = this._getProgressManagerComponent();\n\n        options.isActual = true;\n        var defaultManager = new notificationManagerComponent(options);\n        this._managerMap[defaultManager.getId()] = defaultManager;\n      }\n    }\n  }, {\n    key: \"_getNotificationManager\",\n    value: function _getNotificationManager(operationInfo) {\n      var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\n\n      return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId];\n    }\n  }, {\n    key: \"_clearManagerMap\",\n    value: function _clearManagerMap() {\n      var stubManager = this._managerMap[this._notificationManagerStubId];\n      delete this._managerMap;\n      this._managerMap = _defineProperty({}, this._notificationManagerStubId, stubManager);\n    }\n  }, {\n    key: \"_getActualNotificationManagerId\",\n    value: function _getActualNotificationManagerId() {\n      var _this2 = this;\n\n      return Object.keys(this._managerMap).filter(function (managerId) {\n        return _this2._managerMap[managerId].isActual();\n      })[0];\n    }\n  }, {\n    key: \"tryShowProgressPanel\",\n    value: function tryShowProgressPanel() {\n      var _this3 = this;\n\n      var promise = new Deferred();\n\n      var notificationManager = this._getNotificationManager();\n\n      if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\n        return promise.resolve().promise();\n      }\n\n      setTimeout(function () {\n        _this3._progressDrawer.show().done(promise.resolve);\n\n        _this3._hidePopup();\n\n        notificationManager.tryHideActionProgress();\n      });\n      return promise.promise();\n    }\n  }, {\n    key: \"addOperation\",\n    value: function addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n      var notificationManager = this._getNotificationManager();\n\n      return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails(operationInfo, details, showCloseButton) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.addOperationDetails(operationInfo, details, showCloseButton);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(operationInfo, itemIndex, commonProgress) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress);\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation(operationInfo, commonText, isError, statusText) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      if (!isError) {\n        this._showPopup(commonText);\n      }\n\n      notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\n\n      if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\n        notificationManager.updateActionProgressStatus(operationInfo);\n      }\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError(operationInfo, errorInfo) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\n\n      this._showPopupError(errorInfo);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError(operationInfo, errorInfo) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.addOperationDetailsError(operationInfo, errorInfo);\n\n      this._showPopupError(errorInfo);\n    }\n  }, {\n    key: \"_hideProgressPanel\",\n    value: function _hideProgressPanel() {\n      var _this4 = this;\n\n      setTimeout(function () {\n        return _this4._progressDrawer.hide();\n      });\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function _isSmallScreen() {\n      if (!hasWindow()) {\n        return false;\n      }\n\n      return $(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      var notificationManager = this._getNotificationManager();\n\n      if (!(dimension && \"height\" === dimension) && notificationManager.handleDimensionChanged()) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function _checkAdaptiveState() {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (this._progressDrawer && oldState !== this._isInAdaptiveState) {\n        var options = this._getProgressDrawerAdaptiveOptions();\n\n        this._progressDrawer.option(options);\n      }\n    }\n  }, {\n    key: \"_getProgressDrawerAdaptiveOptions\",\n    value: function _getProgressDrawerAdaptiveOptions() {\n      if (this._isInAdaptiveState) {\n        return {\n          openedStateMode: \"overlap\",\n          shading: true,\n          closeOnOutsideClick: true\n        };\n      } else {\n        return {\n          openedStateMode: \"shrink\",\n          shading: false,\n          closeOnOutsideClick: false\n        };\n      }\n    }\n  }, {\n    key: \"_ensureProgressPanelCreated\",\n    value: function _ensureProgressPanelCreated(container) {\n      var _this5 = this;\n\n      var notificationManager = this._getNotificationManager();\n\n      notificationManager.ensureProgressPanelCreated(container, {\n        onOperationCanceled: function onOperationCanceled(_ref) {\n          var info = _ref.info;\n          return _this5._raiseOperationCanceled(info);\n        },\n        onOperationItemCanceled: function onOperationItemCanceled(_ref2) {\n          var item = _ref2.item,\n              itemIndex = _ref2.itemIndex;\n          return _this5._raiseOperationItemCanceled(item, itemIndex);\n        },\n        onPanelClosed: function onPanelClosed() {\n          return _this5._hideProgressPanel();\n        }\n      });\n    }\n  }, {\n    key: \"_getProgressManagerComponent\",\n    value: function _getProgressManagerComponent() {\n      return NotificationManager;\n    }\n  }, {\n    key: \"_isProgressDrawerDisabled\",\n    value: function _isProgressDrawerDisabled() {\n      return !this.option(\"showProgressPanel\");\n    }\n  }, {\n    key: \"_isProgressDrawerOpened\",\n    value: function _isProgressDrawerOpened() {\n      return this._progressDrawer.option(\"opened\");\n    }\n  }, {\n    key: \"_hidePopup\",\n    value: function _hidePopup(forceHide) {\n      if (!this.option(\"showNotificationPopup\") && !forceHide) {\n        return;\n      }\n\n      this._getNotificationPopup().hide();\n    }\n  }, {\n    key: \"_showPopup\",\n    value: function _showPopup(content, errorMode) {\n      if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\n        return;\n      }\n\n      this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\n\n      this._getNotificationPopup().option(\"contentTemplate\", content);\n\n      if (!this._getNotificationPopup().option(\"visible\")) {\n        this._getNotificationPopup().show();\n      }\n    }\n  }, {\n    key: \"_showPopupError\",\n    value: function _showPopupError(errorInfo) {\n      if (!this.option(\"showNotificationPopup\")) {\n        return;\n      }\n\n      var notificationManager = this._getNotificationManager();\n\n      var $content = $(\"<div>\");\n      var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\n      var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\n      $(\"<div>\").appendTo($separator);\n      var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\n\n      if (errorInfo.item) {\n        notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText);\n      } else {\n        $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\n        notificationManager.renderError($details, errorInfo.detailErrorText);\n      }\n\n      $content.append($message, $separator, $details);\n\n      this._showPopup($content, true);\n    }\n  }, {\n    key: \"_getNotificationPopup\",\n    value: function _getNotificationPopup() {\n      if (!this._notificationPopup) {\n        var $popup = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_POPUP_CLASS).appendTo(this.$element());\n        this._notificationPopup = this._createComponent($popup, Popup, {\n          container: this.$element(),\n          width: \"auto\",\n          height: \"auto\",\n          showTitle: false,\n          dragEnabled: false,\n          shading: false,\n          visible: false,\n          closeOnOutsideClick: true,\n          animation: {\n            duration: 0\n          },\n          position: {\n            my: \"right top\",\n            at: \"right top\",\n            of: this.option(\"positionTarget\"),\n            offset: \"-10 -5\"\n          }\n        });\n      }\n\n      return this._notificationPopup;\n    }\n  }, {\n    key: \"_raiseActionProgress\",\n    value: function _raiseActionProgress(message, status) {\n      this._actions.onActionProgress({\n        message: message,\n        status: status\n      });\n    }\n  }, {\n    key: \"_raiseOperationCanceled\",\n    value: function _raiseOperationCanceled(info) {\n      this._actions.onOperationCanceled({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationItemCanceled\",\n    value: function _raiseOperationItemCanceled(item, index) {\n      this._actions.onOperationItemCanceled({\n        item: item,\n        itemIndex: index\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onActionProgress: this._createActionByOption(\"onActionProgress\"),\n        onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n        onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        progressPanelContainer: null,\n        contentTemplate: null,\n        onActionProgress: null,\n        onOperationCanceled: null,\n        onOperationItemCanceled: null,\n        showProgressPanel: true,\n        showNotificationPopup: true\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"progressPanelContainer\":\n        case \"contentTemplate\":\n          break;\n\n        case \"showProgressPanel\":\n          this._setNotificationManager();\n\n          this._getNotificationManager().updateActionProgressStatus();\n\n          if (!args.value) {\n            this._hideProgressPanel();\n\n            this._clearManagerMap();\n          }\n\n          this._progressDrawer.repaint();\n\n          break;\n\n        case \"showNotificationPopup\":\n          if (!args.value) {\n            this._hidePopup(true);\n          }\n\n          break;\n\n        case \"onActionProgress\":\n        case \"onOperationCanceled\":\n        case \"onOperationItemCanceled\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerNotificationControl;\n}(Widget);\n\nexport { FileManagerNotificationControl as default };","map":{"version":3,"sources":["C:/Users/user/source/repos/ReportingPortal/6.3.0/angular/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.notification.js"],"names":["$","extend","isFunction","Deferred","getWindow","hasWindow","Widget","Popup","Drawer","NotificationManager","NotificationManagerStub","MANAGER_ID_NAME","window","ADAPTIVE_STATE_SCREEN_WIDTH","FILE_MANAGER_NOTIFICATION_CLASS","FILE_MANAGER_NOTIFICATION_DRAWER_CLASS","concat","FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS","FILE_MANAGER_NOTIFICATION_POPUP_CLASS","FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS","FILE_MANAGER_NOTIFICATION_COMMON_CLASS","FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS","FILE_MANAGER_NOTIFICATION_DETAILS_CLASS","FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS","FileManagerNotificationControl","_initActions","_isInAdaptiveState","_isSmallScreen","_managerMap","_notificationManagerStubId","_setNotificationManager","$progressPanelContainer","option","$progressDrawer","addClass","appendTo","drawerOptions","opened","position","template","container","_ensureProgressPanelCreated","_getProgressDrawerAdaptiveOptions","_progressDrawer","_createComponent","$drawerContent","find","first","contentRenderer","options","onActionProgressStatusChanged","_raiseActionProgress","bind","stubManager","getId","_isProgressDrawerDisabled","notificationManagerComponent","_getProgressManagerComponent","isActual","defaultManager","operationInfo","actualManagerId","_getActualNotificationManagerId","Object","keys","filter","managerId","promise","notificationManager","_getNotificationManager","isActionProgressStatusDefault","_isProgressDrawerOpened","resolve","setTimeout","show","done","_hidePopup","tryHideActionProgress","processingMessage","allowCancel","allowProgressAutoUpdate","addOperation","details","showCloseButton","addOperationDetails","itemIndex","itemProgress","commonProgress","updateOperationItemProgress","completeOperationItem","commonText","isError","statusText","_showPopup","completeOperation","hasNoOperations","updateActionProgressStatus","errorInfo","completeSingleOperationWithError","_showPopupError","addOperationDetailsError","hide","width","dimension","handleDimensionChanged","_checkAdaptiveState","oldState","openedStateMode","shading","closeOnOutsideClick","ensureProgressPanelCreated","onOperationCanceled","_ref","info","_raiseOperationCanceled","onOperationItemCanceled","_ref2","item","_raiseOperationItemCanceled","onPanelClosed","_hideProgressPanel","forceHide","_getNotificationPopup","content","errorMode","$wrapper","toggleClass","$content","$message","text","commonErrorText","$separator","$details","createErrorDetailsProgressBox","detailErrorText","renderError","append","_notificationPopup","$popup","$element","height","showTitle","dragEnabled","visible","animation","duration","my","at","of","offset","message","status","_actions","onActionProgress","index","_createActionByOption","progressPanelContainer","contentTemplate","showProgressPanel","showNotificationPopup","args","name","value","_clearManagerMap","repaint"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,SACIC,MADJ,QAEO,yBAFP;AAGA,SACIC,UADJ,QAEO,uBAFP;AAGA,SACIC,QADJ,QAEO,2BAFP;AAGA,SACIC,SADJ,EAEIC,SAFJ,QAGO,yBAHP;AAIA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SACIC,mBADJ,EAEIC,uBAFJ,EAGIC,eAHJ,QAIO,wCAJP;AAKA,IAAIC,MAAM,GAAGR,SAAS,EAAtB;AACA,IAAIS,2BAA2B,GAAG,GAAlC;AACA,IAAIC,+BAA+B,GAAG,6BAAtC;AACA,IAAIC,sCAAsC,GAAG,GAAGC,MAAH,CAAUF,+BAAV,EAA2C,SAA3C,CAA7C;AACA,IAAIG,4CAA4C,GAAG,GAAGD,MAAH,CAAUD,sCAAV,EAAkD,QAAlD,CAAnD;AACA,IAAIG,qCAAqC,GAAG,GAAGF,MAAH,CAAUF,+BAAV,EAA2C,QAA3C,CAA5C;AACA,IAAIK,2CAA2C,GAAG,GAAGH,MAAH,CAAUF,+BAAV,EAA2C,cAA3C,CAAlD;AACA,IAAIM,sCAAsC,GAAG,GAAGJ,MAAH,CAAUF,+BAAV,EAA2C,SAA3C,CAA7C;AACA,IAAIO,yCAAyC,GAAG,GAAGL,MAAH,CAAUF,+BAAV,EAA2C,YAA3C,CAAhD;AACA,IAAIQ,uCAAuC,GAAG,GAAGN,MAAH,CAAUF,+BAAV,EAA2C,UAA3C,CAA9C;AACA,IAAIS,8CAA8C,GAAG,GAAGP,MAAH,CAAUF,+BAAV,EAA2C,iBAA3C,CAArD;;IACqBU,8B;;;;;;;;;;;;;WACjB,uBAAc;AAAA;;AACV;;AACA,WAAKC,YAAL;;AACA,WAAKC,kBAAL,GAA0B,KAAKC,cAAL,EAA1B;AACA,WAAKC,WAAL,GAAmB,EAAnB;AACA,WAAKC,0BAAL,GAAkC,IAAlC;;AACA,WAAKC,uBAAL;;AACA,UAAIC,uBAAuB,GAAG,KAAKC,MAAL,CAAY,wBAAZ,CAA9B;AACA,UAAIC,eAAe,GAAGjC,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBnB,sCAApB,EAA4DoB,QAA5D,CAAqEJ,uBAArE,CAAtB;AACA/B,MAAAA,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBjB,4CAApB,EAAkEkB,QAAlE,CAA2EF,eAA3E;AACA,UAAIG,aAAa,GAAGnC,MAAM,CAAC;AACvBoC,QAAAA,MAAM,EAAE,KADe;AAEvBC,QAAAA,QAAQ,EAAE,OAFa;AAGvBC,QAAAA,QAAQ,EAAE,kBAAAC,SAAS;AAAA,iBAAI,KAAI,CAACC,2BAAL,CAAiCD,SAAjC,CAAJ;AAAA;AAHI,OAAD,EAIvB,KAAKE,iCAAL,EAJuB,CAA1B;AAKA,WAAKC,eAAL,GAAuB,KAAKC,gBAAL,CAAsBX,eAAtB,EAAuCzB,MAAvC,EAA+C4B,aAA/C,CAAvB;AACA,UAAIS,cAAc,GAAGZ,eAAe,CAACa,IAAhB,CAAqB,IAAI9B,MAAJ,CAAWC,4CAAX,CAArB,EAA+E8B,KAA/E,EAArB;AACA,UAAIC,eAAe,GAAG,KAAKhB,MAAL,CAAY,iBAAZ,CAAtB;;AACA,UAAI9B,UAAU,CAAC8C,eAAD,CAAd,EAAiC;AAC7BA,QAAAA,eAAe,CAACH,cAAD,EAAiB,IAAjB,CAAf;AACH;AACJ;;;WACD,iCAAwBI,OAAxB,EAAiC;AAC7BA,MAAAA,OAAO,GAAGhD,MAAM,CAAC;AACbiD,QAAAA,6BAA6B,EAAE,KAAKC,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B;AADlB,OAAD,EAEbH,OAFa,CAAhB;;AAGA,UAAI,CAAC,KAAKpB,0BAAV,EAAsC;AAClC,YAAIwB,WAAW,GAAG,IAAI3C,uBAAJ,CAA4BuC,OAA5B,CAAlB;AACA,aAAKpB,0BAAL,GAAkCwB,WAAW,CAACC,KAAZ,EAAlC;AACA,aAAK1B,WAAL,CAAiB,KAAKC,0BAAtB,IAAoDwB,WAApD;AACH;;AACD,UAAI,CAAC,KAAKE,yBAAL,EAAL,EAAuC;AACnC,YAAIC,4BAA4B,GAAG,KAAKC,4BAAL,EAAnC;;AACAR,QAAAA,OAAO,CAACS,QAAR,GAAmB,IAAnB;AACA,YAAIC,cAAc,GAAG,IAAIH,4BAAJ,CAAiCP,OAAjC,CAArB;AACA,aAAKrB,WAAL,CAAiB+B,cAAc,CAACL,KAAf,EAAjB,IAA2CK,cAA3C;AACH;AACJ;;;WACD,iCAAwBC,aAAxB,EAAuC;AACnC,UAAIC,eAAe,GAAG,CAAC,SAASD,aAAT,IAA0B,KAAK,CAAL,KAAWA,aAArC,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACjD,eAAD,CAA5E,KAAkG,KAAKmD,+BAAL,EAAxH;;AACA,aAAO,KAAKlC,WAAL,CAAiBiC,eAAjB,KAAqC,KAAKjC,WAAL,CAAiB,KAAKC,0BAAtB,CAA5C;AACH;;;WACD,4BAAmB;AACf,UAAIwB,WAAW,GAAG,KAAKzB,WAAL,CAAiB,KAAKC,0BAAtB,CAAlB;AACA,aAAO,KAAKD,WAAZ;AACA,WAAKA,WAAL,uBACK,KAAKC,0BADV,EACuCwB,WADvC;AAGH;;;WACD,2CAAkC;AAAA;;AAC9B,aAAOU,MAAM,CAACC,IAAP,CAAY,KAAKpC,WAAjB,EAA8BqC,MAA9B,CAAqC,UAAAC,SAAS;AAAA,eAAI,MAAI,CAACtC,WAAL,CAAiBsC,SAAjB,EAA4BR,QAA5B,EAAJ;AAAA,OAA9C,EAA0F,CAA1F,CAAP;AACH;;;WACD,gCAAuB;AAAA;;AACnB,UAAIS,OAAO,GAAG,IAAIhE,QAAJ,EAAd;;AACA,UAAIiE,mBAAmB,GAAG,KAAKC,uBAAL,EAA1B;;AACA,UAAID,mBAAmB,CAACE,6BAApB,MAAuD,KAAKC,uBAAL,EAAvD,IAAyF,KAAKhB,yBAAL,EAA7F,EAA+H;AAC3H,eAAOY,OAAO,CAACK,OAAR,GAAkBL,OAAlB,EAAP;AACH;;AACDM,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,MAAI,CAAC9B,eAAL,CAAqB+B,IAArB,GAA4BC,IAA5B,CAAiCR,OAAO,CAACK,OAAzC;;AACA,QAAA,MAAI,CAACI,UAAL;;AACAR,QAAAA,mBAAmB,CAACS,qBAApB;AACH,OAJS,CAAV;AAKA,aAAOV,OAAO,CAACA,OAAR,EAAP;AACH;;;WACD,sBAAaW,iBAAb,EAAgCC,WAAhC,EAA6CC,uBAA7C,EAAsE;AAClE,UAAIZ,mBAAmB,GAAG,KAAKC,uBAAL,EAA1B;;AACA,aAAOD,mBAAmB,CAACa,YAApB,CAAiCH,iBAAjC,EAAoDC,WAApD,EAAiEC,uBAAjE,CAAP;AACH;;;WACD,6BAAoBpB,aAApB,EAAmCsB,OAAnC,EAA4CC,eAA5C,EAA6D;AACzD,UAAIf,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACAQ,MAAAA,mBAAmB,CAACgB,mBAApB,CAAwCxB,aAAxC,EAAuDsB,OAAvD,EAAgEC,eAAhE;AACH;;;WACD,qCAA4BvB,aAA5B,EAA2CyB,SAA3C,EAAsDC,YAAtD,EAAoEC,cAApE,EAAoF;AAChF,UAAInB,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACAQ,MAAAA,mBAAmB,CAACoB,2BAApB,CAAgD5B,aAAhD,EAA+DyB,SAA/D,EAA0EC,YAA1E,EAAwFC,cAAxF;AACH;;;WACD,+BAAsB3B,aAAtB,EAAqCyB,SAArC,EAAgDE,cAAhD,EAAgE;AAC5D,UAAInB,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACAQ,MAAAA,mBAAmB,CAACqB,qBAApB,CAA0C7B,aAA1C,EAAyDyB,SAAzD,EAAoEE,cAApE;AACH;;;WACD,2BAAkB3B,aAAlB,EAAiC8B,UAAjC,EAA6CC,OAA7C,EAAsDC,UAAtD,EAAkE;AAC9D,UAAIxB,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACA,UAAI,CAAC+B,OAAL,EAAc;AACV,aAAKE,UAAL,CAAgBH,UAAhB;AACH;;AACDtB,MAAAA,mBAAmB,CAAC0B,iBAApB,CAAsClC,aAAtC,EAAqD8B,UAArD,EAAiEC,OAAjE,EAA0EC,UAA1E;;AACA,UAAI,CAAC,KAAKrB,uBAAL,EAAD,IAAmC,CAACH,mBAAmB,CAAC2B,eAApB,EAAxC,EAA+E;AAC3E3B,QAAAA,mBAAmB,CAAC4B,0BAApB,CAA+CpC,aAA/C;AACH;AACJ;;;WACD,0CAAiCA,aAAjC,EAAgDqC,SAAhD,EAA2D;AACvD,UAAI7B,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACAQ,MAAAA,mBAAmB,CAAC8B,gCAApB,CAAqDtC,aAArD,EAAoEqC,SAApE;;AACA,WAAKE,eAAL,CAAqBF,SAArB;AACH;;;WACD,kCAAyBrC,aAAzB,EAAwCqC,SAAxC,EAAmD;AAC/C,UAAI7B,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BT,aAA7B,CAA1B;;AACAQ,MAAAA,mBAAmB,CAACgC,wBAApB,CAA6CxC,aAA7C,EAA4DqC,SAA5D;;AACA,WAAKE,eAAL,CAAqBF,SAArB;AACH;;;WACD,8BAAqB;AAAA;;AACjBxB,MAAAA,UAAU,CAAC;AAAA,eAAM,MAAI,CAAC9B,eAAL,CAAqB0D,IAArB,EAAN;AAAA,OAAD,CAAV;AACH;;;WACD,0BAAiB;AACb,UAAI,CAAChG,SAAS,EAAd,EAAkB;AACd,eAAO,KAAP;AACH;;AACD,aAAOL,CAAC,CAACY,MAAD,CAAD,CAAU0F,KAAV,MAAqBzF,2BAA5B;AACH;;;WACD,2BAAkB0F,SAAlB,EAA6B;AACzB,UAAInC,mBAAmB,GAAG,KAAKC,uBAAL,EAA1B;;AACA,UAAI,EAAEkC,SAAS,IAAI,aAAaA,SAA5B,KAA0CnC,mBAAmB,CAACoC,sBAApB,EAA9C,EAA4F;AACxF,aAAKC,mBAAL;AACH;AACJ;;;WACD,+BAAsB;AAClB,UAAIC,QAAQ,GAAG,KAAKhF,kBAApB;AACA,WAAKA,kBAAL,GAA0B,KAAKC,cAAL,EAA1B;;AACA,UAAI,KAAKgB,eAAL,IAAwB+D,QAAQ,KAAK,KAAKhF,kBAA9C,EAAkE;AAC9D,YAAIuB,OAAO,GAAG,KAAKP,iCAAL,EAAd;;AACA,aAAKC,eAAL,CAAqBX,MAArB,CAA4BiB,OAA5B;AACH;AACJ;;;WACD,6CAAoC;AAChC,UAAI,KAAKvB,kBAAT,EAA6B;AACzB,eAAO;AACHiF,UAAAA,eAAe,EAAE,SADd;AAEHC,UAAAA,OAAO,EAAE,IAFN;AAGHC,UAAAA,mBAAmB,EAAE;AAHlB,SAAP;AAKH,OAND,MAMO;AACH,eAAO;AACHF,UAAAA,eAAe,EAAE,QADd;AAEHC,UAAAA,OAAO,EAAE,KAFN;AAGHC,UAAAA,mBAAmB,EAAE;AAHlB,SAAP;AAKH;AACJ;;;WACD,qCAA4BrE,SAA5B,EAAuC;AAAA;;AACnC,UAAI4B,mBAAmB,GAAG,KAAKC,uBAAL,EAA1B;;AACAD,MAAAA,mBAAmB,CAAC0C,0BAApB,CAA+CtE,SAA/C,EAA0D;AACtDuE,QAAAA,mBAAmB,EAAE,6BAAAC,IAAI,EAAI;AACzB,cACUC,IADV,GAEID,IAFJ,CACIC,IADJ;AAGA,iBAAO,MAAI,CAACC,uBAAL,CAA6BD,IAA7B,CAAP;AACH,SANqD;AAOtDE,QAAAA,uBAAuB,EAAE,iCAAAC,KAAK,EAAI;AAC9B,cACUC,IADV,GAGID,KAHJ,CACIC,IADJ;AAAA,cAEehC,SAFf,GAGI+B,KAHJ,CAEI/B,SAFJ;AAIA,iBAAO,MAAI,CAACiC,2BAAL,CAAiCD,IAAjC,EAAuChC,SAAvC,CAAP;AACH,SAbqD;AActDkC,QAAAA,aAAa,EAAE;AAAA,iBAAM,MAAI,CAACC,kBAAL,EAAN;AAAA;AAduC,OAA1D;AAgBH;;;WACD,wCAA+B;AAC3B,aAAO/G,mBAAP;AACH;;;WACD,qCAA4B;AACxB,aAAO,CAAC,KAAKuB,MAAL,CAAY,mBAAZ,CAAR;AACH;;;WACD,mCAA0B;AACtB,aAAO,KAAKW,eAAL,CAAqBX,MAArB,CAA4B,QAA5B,CAAP;AACH;;;WACD,oBAAWyF,SAAX,EAAsB;AAClB,UAAI,CAAC,KAAKzF,MAAL,CAAY,uBAAZ,CAAD,IAAyC,CAACyF,SAA9C,EAAyD;AACrD;AACH;;AACD,WAAKC,qBAAL,GAA6BrB,IAA7B;AACH;;;WACD,oBAAWsB,OAAX,EAAoBC,SAApB,EAA+B;AAC3B,UAAI,KAAKrD,uBAAL,MAAkC,CAAC,KAAKvC,MAAL,CAAY,uBAAZ,CAAvC,EAA6E;AACzE;AACH;;AACD,WAAK0F,qBAAL,GAA6BG,QAA7B,GAAwCC,WAAxC,CAAoD3G,2CAApD,EAAiG,CAAC,CAACyG,SAAnG;;AACA,WAAKF,qBAAL,GAA6B1F,MAA7B,CAAoC,iBAApC,EAAuD2F,OAAvD;;AACA,UAAI,CAAC,KAAKD,qBAAL,GAA6B1F,MAA7B,CAAoC,SAApC,CAAL,EAAqD;AACjD,aAAK0F,qBAAL,GAA6BhD,IAA7B;AACH;AACJ;;;WACD,yBAAgBuB,SAAhB,EAA2B;AACvB,UAAI,CAAC,KAAKjE,MAAL,CAAY,uBAAZ,CAAL,EAA2C;AACvC;AACH;;AACD,UAAIoC,mBAAmB,GAAG,KAAKC,uBAAL,EAA1B;;AACA,UAAI0D,QAAQ,GAAG/H,CAAC,CAAC,OAAD,CAAhB;AACA,UAAIgI,QAAQ,GAAGhI,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBd,sCAApB,EAA4D6G,IAA5D,CAAiEhC,SAAS,CAACiC,eAA3E,CAAf;AACA,UAAIC,UAAU,GAAGnI,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBb,yCAApB,CAAjB;AACArB,MAAAA,CAAC,CAAC,OAAD,CAAD,CAAWmC,QAAX,CAAoBgG,UAApB;AACA,UAAIC,QAAQ,GAAGpI,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBZ,uCAApB,CAAf;;AACA,UAAI2E,SAAS,CAACoB,IAAd,EAAoB;AAChBjD,QAAAA,mBAAmB,CAACiE,6BAApB,CAAkDD,QAAlD,EAA4DnC,SAAS,CAACoB,IAAtE,EAA4EpB,SAAS,CAACqC,eAAtF;AACH,OAFD,MAEO;AACHN,QAAAA,QAAQ,CAAC9F,QAAT,CAAkBX,8CAAlB;AACA6C,QAAAA,mBAAmB,CAACmE,WAApB,CAAgCH,QAAhC,EAA0CnC,SAAS,CAACqC,eAApD;AACH;;AACDP,MAAAA,QAAQ,CAACS,MAAT,CAAgBR,QAAhB,EAA0BG,UAA1B,EAAsCC,QAAtC;;AACA,WAAKvC,UAAL,CAAgBkC,QAAhB,EAA0B,IAA1B;AACH;;;WACD,iCAAwB;AACpB,UAAI,CAAC,KAAKU,kBAAV,EAA8B;AAC1B,YAAIC,MAAM,GAAG1I,CAAC,CAAC,OAAD,CAAD,CAAWkC,QAAX,CAAoBhB,qCAApB,EAA2DiB,QAA3D,CAAoE,KAAKwG,QAAL,EAApE,CAAb;AACA,aAAKF,kBAAL,GAA0B,KAAK7F,gBAAL,CAAsB8F,MAAtB,EAA8BnI,KAA9B,EAAqC;AAC3DiC,UAAAA,SAAS,EAAE,KAAKmG,QAAL,EADgD;AAE3DrC,UAAAA,KAAK,EAAE,MAFoD;AAG3DsC,UAAAA,MAAM,EAAE,MAHmD;AAI3DC,UAAAA,SAAS,EAAE,KAJgD;AAK3DC,UAAAA,WAAW,EAAE,KAL8C;AAM3DlC,UAAAA,OAAO,EAAE,KANkD;AAO3DmC,UAAAA,OAAO,EAAE,KAPkD;AAQ3DlC,UAAAA,mBAAmB,EAAE,IARsC;AAS3DmC,UAAAA,SAAS,EAAE;AACPC,YAAAA,QAAQ,EAAE;AADH,WATgD;AAY3D3G,UAAAA,QAAQ,EAAE;AACN4G,YAAAA,EAAE,EAAE,WADE;AAENC,YAAAA,EAAE,EAAE,WAFE;AAGNC,YAAAA,EAAE,EAAE,KAAKpH,MAAL,CAAY,gBAAZ,CAHE;AAINqH,YAAAA,MAAM,EAAE;AAJF;AAZiD,SAArC,CAA1B;AAmBH;;AACD,aAAO,KAAKZ,kBAAZ;AACH;;;WACD,8BAAqBa,OAArB,EAA8BC,MAA9B,EAAsC;AAClC,WAAKC,QAAL,CAAcC,gBAAd,CAA+B;AAC3BH,QAAAA,OAAO,EAAEA,OADkB;AAE3BC,QAAAA,MAAM,EAAEA;AAFmB,OAA/B;AAIH;;;WACD,iCAAwBtC,IAAxB,EAA8B;AAC1B,WAAKuC,QAAL,CAAczC,mBAAd,CAAkC;AAC9BE,QAAAA,IAAI,EAAEA;AADwB,OAAlC;AAGH;;;WACD,qCAA4BI,IAA5B,EAAkCqC,KAAlC,EAAyC;AACrC,WAAKF,QAAL,CAAcrC,uBAAd,CAAsC;AAClCE,QAAAA,IAAI,EAAEA,IAD4B;AAElChC,QAAAA,SAAS,EAAEqE;AAFuB,OAAtC;AAIH;;;WACD,wBAAe;AACX,WAAKF,QAAL,GAAgB;AACZC,QAAAA,gBAAgB,EAAE,KAAKE,qBAAL,CAA2B,kBAA3B,CADN;AAEZ5C,QAAAA,mBAAmB,EAAE,KAAK4C,qBAAL,CAA2B,qBAA3B,CAFT;AAGZxC,QAAAA,uBAAuB,EAAE,KAAKwC,qBAAL,CAA2B,yBAA3B;AAHb,OAAhB;AAKH;;;WACD,8BAAqB;AACjB,aAAO1J,MAAM,yGAA6B;AACtC2J,QAAAA,sBAAsB,EAAE,IADc;AAEtCC,QAAAA,eAAe,EAAE,IAFqB;AAGtCJ,QAAAA,gBAAgB,EAAE,IAHoB;AAItC1C,QAAAA,mBAAmB,EAAE,IAJiB;AAKtCI,QAAAA,uBAAuB,EAAE,IALa;AAMtC2C,QAAAA,iBAAiB,EAAE,IANmB;AAOtCC,QAAAA,qBAAqB,EAAE;AAPe,OAA7B,CAAb;AASH;;;WACD,wBAAeC,IAAf,EAAqB;AACjB,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;;AACA,cAAQA,IAAR;AACI,aAAK,wBAAL;AACA,aAAK,iBAAL;AACI;;AACJ,aAAK,mBAAL;AACI,eAAKnI,uBAAL;;AACA,eAAKuC,uBAAL,GAA+B2B,0BAA/B;;AACA,cAAI,CAACgE,IAAI,CAACE,KAAV,EAAiB;AACb,iBAAK1C,kBAAL;;AACA,iBAAK2C,gBAAL;AACH;;AACD,eAAKxH,eAAL,CAAqByH,OAArB;;AACA;;AACJ,aAAK,uBAAL;AACI,cAAI,CAACJ,IAAI,CAACE,KAAV,EAAiB;AACb,iBAAKtF,UAAL,CAAgB,IAAhB;AACH;;AACD;;AACJ,aAAK,kBAAL;AACA,aAAK,qBAAL;AACA,aAAK,yBAAL;AACI,eAAK4E,QAAL,CAAcS,IAAd,IAAsB,KAAKN,qBAAL,CAA2BM,IAA3B,CAAtB;AACA;;AACJ;AACI,6GAAqBD,IAArB;;AAxBR;AA0BH;;;;EAnSuD1J,M;;SAAvCkB,8B","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 21.1.3\r\n * Build date: Tue May 18 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Popup from \"../popup\";\r\nimport Drawer from \"../drawer/ui.drawer\";\r\nimport {\r\n    NotificationManager,\r\n    NotificationManagerStub,\r\n    MANAGER_ID_NAME\r\n} from \"./ui.file_manager.notification_manager\";\r\nvar window = getWindow();\r\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\r\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\r\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\r\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\r\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\r\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\r\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\r\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\r\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\r\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\r\nexport default class FileManagerNotificationControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._isInAdaptiveState = this._isSmallScreen();\r\n        this._managerMap = {};\r\n        this._notificationManagerStubId = null;\r\n        this._setNotificationManager();\r\n        var $progressPanelContainer = this.option(\"progressPanelContainer\");\r\n        var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\r\n        $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\r\n        var drawerOptions = extend({\r\n            opened: false,\r\n            position: \"right\",\r\n            template: container => this._ensureProgressPanelCreated(container)\r\n        }, this._getProgressDrawerAdaptiveOptions());\r\n        this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\r\n        var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\r\n        var contentRenderer = this.option(\"contentTemplate\");\r\n        if (isFunction(contentRenderer)) {\r\n            contentRenderer($drawerContent, this)\r\n        }\r\n    }\r\n    _setNotificationManager(options) {\r\n        options = extend({\r\n            onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\r\n        }, options);\r\n        if (!this._notificationManagerStubId) {\r\n            var stubManager = new NotificationManagerStub(options);\r\n            this._notificationManagerStubId = stubManager.getId();\r\n            this._managerMap[this._notificationManagerStubId] = stubManager\r\n        }\r\n        if (!this._isProgressDrawerDisabled()) {\r\n            var notificationManagerComponent = this._getProgressManagerComponent();\r\n            options.isActual = true;\r\n            var defaultManager = new notificationManagerComponent(options);\r\n            this._managerMap[defaultManager.getId()] = defaultManager\r\n        }\r\n    }\r\n    _getNotificationManager(operationInfo) {\r\n        var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\r\n        return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId]\r\n    }\r\n    _clearManagerMap() {\r\n        var stubManager = this._managerMap[this._notificationManagerStubId];\r\n        delete this._managerMap;\r\n        this._managerMap = {\r\n            [this._notificationManagerStubId]: stubManager\r\n        }\r\n    }\r\n    _getActualNotificationManagerId() {\r\n        return Object.keys(this._managerMap).filter(managerId => this._managerMap[managerId].isActual())[0]\r\n    }\r\n    tryShowProgressPanel() {\r\n        var promise = new Deferred;\r\n        var notificationManager = this._getNotificationManager();\r\n        if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\r\n            return promise.resolve().promise()\r\n        }\r\n        setTimeout(() => {\r\n            this._progressDrawer.show().done(promise.resolve);\r\n            this._hidePopup();\r\n            notificationManager.tryHideActionProgress()\r\n        });\r\n        return promise.promise()\r\n    }\r\n    addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\r\n        var notificationManager = this._getNotificationManager();\r\n        return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate)\r\n    }\r\n    addOperationDetails(operationInfo, details, showCloseButton) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.addOperationDetails(operationInfo, details, showCloseButton)\r\n    }\r\n    updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress)\r\n    }\r\n    completeOperationItem(operationInfo, itemIndex, commonProgress) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress)\r\n    }\r\n    completeOperation(operationInfo, commonText, isError, statusText) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        if (!isError) {\r\n            this._showPopup(commonText)\r\n        }\r\n        notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\r\n        if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\r\n            notificationManager.updateActionProgressStatus(operationInfo)\r\n        }\r\n    }\r\n    completeSingleOperationWithError(operationInfo, errorInfo) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\r\n        this._showPopupError(errorInfo)\r\n    }\r\n    addOperationDetailsError(operationInfo, errorInfo) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.addOperationDetailsError(operationInfo, errorInfo);\r\n        this._showPopupError(errorInfo)\r\n    }\r\n    _hideProgressPanel() {\r\n        setTimeout(() => this._progressDrawer.hide())\r\n    }\r\n    _isSmallScreen() {\r\n        if (!hasWindow()) {\r\n            return false\r\n        }\r\n        return $(window).width() <= ADAPTIVE_STATE_SCREEN_WIDTH\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        var notificationManager = this._getNotificationManager();\r\n        if (!(dimension && \"height\" === dimension) && notificationManager.handleDimensionChanged()) {\r\n            this._checkAdaptiveState()\r\n        }\r\n    }\r\n    _checkAdaptiveState() {\r\n        var oldState = this._isInAdaptiveState;\r\n        this._isInAdaptiveState = this._isSmallScreen();\r\n        if (this._progressDrawer && oldState !== this._isInAdaptiveState) {\r\n            var options = this._getProgressDrawerAdaptiveOptions();\r\n            this._progressDrawer.option(options)\r\n        }\r\n    }\r\n    _getProgressDrawerAdaptiveOptions() {\r\n        if (this._isInAdaptiveState) {\r\n            return {\r\n                openedStateMode: \"overlap\",\r\n                shading: true,\r\n                closeOnOutsideClick: true\r\n            }\r\n        } else {\r\n            return {\r\n                openedStateMode: \"shrink\",\r\n                shading: false,\r\n                closeOnOutsideClick: false\r\n            }\r\n        }\r\n    }\r\n    _ensureProgressPanelCreated(container) {\r\n        var notificationManager = this._getNotificationManager();\r\n        notificationManager.ensureProgressPanelCreated(container, {\r\n            onOperationCanceled: _ref => {\r\n                var {\r\n                    info: info\r\n                } = _ref;\r\n                return this._raiseOperationCanceled(info)\r\n            },\r\n            onOperationItemCanceled: _ref2 => {\r\n                var {\r\n                    item: item,\r\n                    itemIndex: itemIndex\r\n                } = _ref2;\r\n                return this._raiseOperationItemCanceled(item, itemIndex)\r\n            },\r\n            onPanelClosed: () => this._hideProgressPanel()\r\n        })\r\n    }\r\n    _getProgressManagerComponent() {\r\n        return NotificationManager\r\n    }\r\n    _isProgressDrawerDisabled() {\r\n        return !this.option(\"showProgressPanel\")\r\n    }\r\n    _isProgressDrawerOpened() {\r\n        return this._progressDrawer.option(\"opened\")\r\n    }\r\n    _hidePopup(forceHide) {\r\n        if (!this.option(\"showNotificationPopup\") && !forceHide) {\r\n            return\r\n        }\r\n        this._getNotificationPopup().hide()\r\n    }\r\n    _showPopup(content, errorMode) {\r\n        if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\r\n            return\r\n        }\r\n        this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\r\n        this._getNotificationPopup().option(\"contentTemplate\", content);\r\n        if (!this._getNotificationPopup().option(\"visible\")) {\r\n            this._getNotificationPopup().show()\r\n        }\r\n    }\r\n    _showPopupError(errorInfo) {\r\n        if (!this.option(\"showNotificationPopup\")) {\r\n            return\r\n        }\r\n        var notificationManager = this._getNotificationManager();\r\n        var $content = $(\"<div>\");\r\n        var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\r\n        var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\r\n        $(\"<div>\").appendTo($separator);\r\n        var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\r\n        if (errorInfo.item) {\r\n            notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText)\r\n        } else {\r\n            $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\r\n            notificationManager.renderError($details, errorInfo.detailErrorText)\r\n        }\r\n        $content.append($message, $separator, $details);\r\n        this._showPopup($content, true)\r\n    }\r\n    _getNotificationPopup() {\r\n        if (!this._notificationPopup) {\r\n            var $popup = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_POPUP_CLASS).appendTo(this.$element());\r\n            this._notificationPopup = this._createComponent($popup, Popup, {\r\n                container: this.$element(),\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                showTitle: false,\r\n                dragEnabled: false,\r\n                shading: false,\r\n                visible: false,\r\n                closeOnOutsideClick: true,\r\n                animation: {\r\n                    duration: 0\r\n                },\r\n                position: {\r\n                    my: \"right top\",\r\n                    at: \"right top\",\r\n                    of: this.option(\"positionTarget\"),\r\n                    offset: \"-10 -5\"\r\n                }\r\n            })\r\n        }\r\n        return this._notificationPopup\r\n    }\r\n    _raiseActionProgress(message, status) {\r\n        this._actions.onActionProgress({\r\n            message: message,\r\n            status: status\r\n        })\r\n    }\r\n    _raiseOperationCanceled(info) {\r\n        this._actions.onOperationCanceled({\r\n            info: info\r\n        })\r\n    }\r\n    _raiseOperationItemCanceled(item, index) {\r\n        this._actions.onOperationItemCanceled({\r\n            item: item,\r\n            itemIndex: index\r\n        })\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onActionProgress: this._createActionByOption(\"onActionProgress\"),\r\n            onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\r\n            onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            progressPanelContainer: null,\r\n            contentTemplate: null,\r\n            onActionProgress: null,\r\n            onOperationCanceled: null,\r\n            onOperationItemCanceled: null,\r\n            showProgressPanel: true,\r\n            showNotificationPopup: true\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"progressPanelContainer\":\r\n            case \"contentTemplate\":\r\n                break;\r\n            case \"showProgressPanel\":\r\n                this._setNotificationManager();\r\n                this._getNotificationManager().updateActionProgressStatus();\r\n                if (!args.value) {\r\n                    this._hideProgressPanel();\r\n                    this._clearManagerMap()\r\n                }\r\n                this._progressDrawer.repaint();\r\n                break;\r\n            case \"showNotificationPopup\":\r\n                if (!args.value) {\r\n                    this._hidePopup(true)\r\n                }\r\n                break;\r\n            case \"onActionProgress\":\r\n            case \"onOperationCanceled\":\r\n            case \"onOperationItemCanceled\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}